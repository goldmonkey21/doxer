No problem. I'll see if I can find some time to boot a linux live cd and play with it. Otherwise it's running a Windows build right now. Cool! Did you ever figure out how to get midstate caching working with it? I thought th C7 were capable of it. I know the Nanos are, but I thought VIA had it somewhere on their site. I'll have to try a Windows build of it. I can find the link and post it up again.Edit: The link works again. Something changed on my host but is just fine now. Problem for me is, I've got the hardware and software(got it to try this) but haven't been good enough with VHDL to figure out how to interface it between that and Bitcoin. I'm all for it. As previously posted, I simply don't want it to be indexed by any search engines. Oh, you mean something like a digital commodity that could be printed out and transferred just as easily in person as online?   This is really cool! Nice video btw ;-)Take the BTC as a tip.  As there has been a piece of this project missing since I ever came into it, I believe we have just found the problem for the solution that is Bitcoin.Not an IF, but WHEN this technology is finally incorporated into smartphones, and whatever the next gen replacement device ends up being, it will start another revolution of the people through their tracking and buying power. Yes, it can be used against them just as all tracking is, but even more than that it can be used so completely decentralized that nothing could stop it beyond the entire ban of the spectrum it will use. Even if that ends up happening, there will certainly be enough Electrical Engineers and hardware Hackers out there who will move beyond the limitations set by the governments(s) in the ongoing pursuit of The Hacker Ethic.It will be amazing to see what results when this technology comes to fruition. Think of the changes when people were given the ability to think for themselves and publish(think Bill of Rights for United States of America) and now apply that to economic policy. Freedom to create, save and spend as wanted without limitations set forth by processing entities. If the economic model that Bitcoin uses fails to succeed as we all hope and plan, then it is merely a chance to try something else. Still without a fake 'controlling entity' who merely upends the market and helps greed grow. This would enable not just a test of Bitcoin, but a test of the coming generations in freedom and liberty never seen before.Edit: Fix some spelling errors to give clearer language and understanding. Add extra ideas. See original quoted post below: IMHO, this would be a far better method of it than simply failing. Although, there should be some type of warning that it is failing over to CPU from GPU. From what I've read, you can use the -emu to emulate GPU code on your CPU. No idea if that's it or it actually works but it's definitely worth a shot. Oh, I completely understand wanting to understand your tools. I just felt because I am so used to working with the IDE and strapping it all together it would be easier for me to write on there to work on my linux and windows boxes.BAHAHAHAHA!!! NICE! Might wanna get that checked out instead of silently failing or imploding ;-) Heh, I'm in. 154MWZRUMiUHkX1hDejbzuSGg53hpW7poeThat's my input to the lottery, send 'em there! I'll send over 16 of mine too! Are you planning on using an IDE? If so, what is it? I prefer Netbeans and have it set up and running on Fedora 13 64bit. It's a bit of a pain to get setup, but works quite well once you do have it done. After a quick search this pops up and looks very promising for you:http://lifeofaprogrammergeek.blogspot.com/2008/05/cuda-development-in-ubuntu.htmlI ran out of time this weekend to get any work done and fried my PSU last week due to overusage. New 850W will get to me tomorrow night.   As of now, yes. It depends on how efficient we can implement the miner in the GPUs. If the entire control structure of the miner with the rest of the system in the cpu(ideally), then no you wouldn't. As of now, it will definitely impact how fast it is. This will take a bit to come to fruition, but when it does... dedicated systems would be quite easy to build. I am also working on a version of the BitCoin CUDA Client and will do all that I can to help this project. It will be opensourced as well, for the same reasons nelisky stated. I will test this first version out on my GTX 460(borrowing from a friend  ) as soon as I can. Also, the pseudocode I've been writing up should be quite a bit faster than this currently is because it is incorporating FPGA styling and CUDA programming.I should have something up of my code up after the weekend. Anybody catch the new AMD Bulldozer press release? If I understand correctly, it should be capable of processing 8 64bit hashes, per core, at the same time. Would be quite a speed boost using this same code design.Slashdot has the article.PC Perspective has the details.Was also covered by AnandTech back in November, 2009. I've got the bitcoind binary, but not a GUI build. Download 0.3.10 HERE!!---Yea, completely agree there. I've looked into it as well, lots might need to be changed. This is actively being worked on. Not sure on timeline, but it is in the works to be sent out either with the program or as a standalone program. Please excuse my dumb question, but what OS is running on this? There are many people who could compile a static binary if we have that information. Okay, makes sense. I have an i7 930 I'll try and test out with too.
Where is the code for this? I'm on a CentOS 5.5 box and need to build it myself. Once I do that I will report back with linux 32-bit and 1MB cache Xeon.  I haven't had mine running constantly but haven't generated anything either. The code is available http://75.149.150.33/bc-c7.tar.gz. Well, reporting back.I got it to compile by specifying -msse and -msse2 to gcc when compiling. I first was hashing about 692kh/s (50% of SVN r130[1400kh/s]) but recompiled and am now receiving about ~1120kh/s. This is currently the equivalent of using both of my CPUs without HyperThreading, though I can verify that it IS using HyperThreading. With HyperThreading turned off, I get ~1350kh/s. Pretty close to the stock build. Also, does the git contain the patched and updated code?Code:// SVN r130 Using HT.08/14/10 19:02 hashmeter   4 CPUs   1392 khash/s08/14/10 19:32 hashmeter   4 CPUs   1387 khash/s08/14/10 20:02 hashmeter   4 CPUs   1386 khash/s08/14/10 20:32 hashmeter   4 CPUs   1380 khash/s08/14/10 21:02 hashmeter   4 CPUs   1363 khash/s// With -msse -msse2, first run. Using HT.08/14/10 21:32 hashmeter   4 CPUs    692 khash/s08/14/10 22:06 hashmeter   4 CPUs   1011 khash/s08/14/10 22:11 hashmeter   4 CPUs   1104 khash/s08/14/10 22:16 hashmeter   4 CPUs   1120 khash/s// NOT using HT.08/14/10 22:21 hashmeter   2 CPUs   1359 khash/s08/14/10 22:26 hashmeter   2 CPUs   1340 khash/sJust wanted to tell my story and help with whatever information I could. 1. Do we know why it doesn't work on 32bit? Is is it because it's using 128bits and if so, would it help if we dropped it to 64?2. Thank you, I will look into implementing it on my 64bit systems.3. Excellent to hear. I'm looking forward to using it.I was planning on using it on a PE2650 dual proc Xeon @3.2GHz w/HT. I would really like to get this figured out to utilize that system. I am planning one as well. At current difficulty I would agree, except when the system needs to be run anyway and latency isn't an issue. Just a question for whoever, trying to wrap up the information in this thread.Does this: 1. Work on 32-bit? 2. Patch the SVN (r130 as of current) or Git? 3. Compile on CentOS?If anyone has any answers I would greatly appreciate them. Sounds like you've got exactly the same luck as I do. Picked up 3 in 45 hours after 21 days without anything. Where is it shipping from? An update to anyone following this. I have the code from lfm and paid him the bounty I put out there. Excellent work that I couldn't do at the time. No I'm stepping through the code to find any other optimizations and check the generation. I have the same board as lfm but am only seeing ~700kh/s. Could be the OS(Gentoo w/ custom kernel) but I am doubtful. I will be installing with xubuntu and seeing if that makes a difference.Also, I will upload the source to my server as soon as I can. FPGAs will be where it's at. But yes, they are VERY expensive though they can do a LOT with just a tiny bit of power. This is a very interesting idea. The more I read about it, the better it sounds. As RHorning has said, implementing this would give a huge boost to "outside" people and let them know about the project. Using a "wallet escrow" system would make this as secure as normal wallets and prohibit double spending just as we do now. Very nice idea!The ability to use simple "BitCoin notes" just like everyday paper currency has HUGE advantages for building the system and ease of access for even small business. I would assume that eventually bitcoin will be allowed to use with automated checkout systems IRL like at grocery stores etc. Until then, this definitely gets your foot in the door to those willing to accept it.Coupling this with an "elevator pitch" would build recognition and acceptance very quickly. The problem that I have had when implementing this is that I do not know enough about SHA256 to implement it. I'm trying to figure it out and learn but haven't been making much success. It's a bit difficult trying to learn and rewrite from the Crypto++ functions and calls. That, and I haven't programmed in C++ or C for a couple years all adds up to me putting this offer out. Correct. It is well implemented in the Linux Kernel.I'll be using it on Gentoo x86 with support built in without a module. I have a small reward out for implementing VIA's PadLock technology with the software. If done in a good way that could be used in the SVN for other builders I have a reward for 50BTC. If done even locally for just a few builds or instructions on how to do so, reward is 25 to 50 BTC.Really want to get this working and don't have the time to put into it right now. Oh boy, that will make it fun    Well, hopefully I can generate a block within the next 2 months now. Sheesh. But, with it going up it's a good thing. More CPU power to try and take over. Yep, that's the one I downloaded and am running as of last night. That has the same problems for my system as my build one so I'm guessing it's my env. Trying a full cleanup and re-downloaded right now.Update: It still fails to download correctly. Time for a fresh re-image of this box. Oh well. If I stop and restart the daemon, it will continue for the next 500 blocks. At that point it will once again lock up, even though the program isn't crashing a thread must be.Just connected to your node and it did the same thing. Pulls down the next 500 blocks really fast and then locks up. Thoughts? Hey! Got another one in the hot and muggy MN! Just north of the TC here :-D I must have REALLY screwed up my CentOS 5.5 box. This is what I'm getting with my build from the trunk and your build:Code:Tue Aug  3 15:24:07 CDT 2010[myles@kappa ~]$ ./bitcoind getinfo{    "balance" : 0.000000000000000,    "blocks" : 3095,    "connections" : 5,    "proxy" : "",    "generate" : true,    "genproclimit" : -1,    "difficulty" : 1.000000000000000}[myles@kappa ~]$ dateTue Aug  3 15:28:53 CDT 2010[myles@kappa ~]$ ./bitcoind getinfo{    "balance" : 0.000000000000000,    "blocks" : 3095,    "connections" : 5,    "proxy" : "",    "generate" : true,    "genproclimit" : -1,    "difficulty" : 1.000000000000000}Any Ideas? Ah, crap. I totally forgot about that extra flag. I knew about that before from Lazslo's Linux Build Document. Sorry about that. Get a working build up and running and you'll definitely be getting some BTC from me.   I have successfully built it with 4.8, 4.7 never would but with 4.8 bitcoind locks up whenever it dumps the initial block download to disk. 
I've run into the same problem. Backup your wallet.dat if you haven't already. Try removing the "old" wallet and try again. If that doesn't work it means it is the database. If it is the database, you would need to remove the database folder and blk*.dat files and redownload the chain.I haven't been able to figure it out yet. Trying to narrow it down myself. It is unstable at the moment. You need to either run it in a script or use the program written here: http://bitcointalk.org/index.php?topic=580.0 Sorry for bringing this back from the dead. I'm trying to compile as well and have worked through most of the problems. Following laszlo guide helped a LOT. boost is currently failing when I build, not sure why and am hoping for suggestions. This is from svn 113.Code:[myles@kappa trunk]# make -f makefile.unix bitcoindg++ -O2 -Wno-invalid-offsetof -Wformat -g -D__WXDEBUG__ -D__WXGTK__ -DNOPCH -I"/home/myles/bitcoin/deps/include" -o bitcoind -L"/home/myles/bitcoin/deps/lib" obj/nogui/util.o obj/nogui/script.o obj/nogui/db.o obj/nogui/net.o obj/nogui/irc.o obj/nogui/main.o obj/nogui/rpc.o obj/nogui/init.o obj/sha.o -Wl,-Bstatic /home/myles/bitcoin/deps/lib/libboost_system.a /home/myles/bitcoin/deps/lib/libboost_filesystem.a /home/myles/bitcoin/deps/lib/libboost_program_options.a /home/myles/bitcoin/deps/lib/libboost_thread.a /home/myles/bitcoin/deps/lib/libdb_cxx-4.8.a -l crypto -Wl,-Bdynamic -l gthread-2.0/home/myles/bitcoin/deps/lib/libcrypto.a(dso_dlfcn.o): In function `dlfcn_globallookup':dso_dlfcn.c:(.text+0x2d): undefined reference to `dlopen'dso_dlfcn.c:(.text+0x43): undefined reference to `dlsym'dso_dlfcn.c:(.text+0x4d): undefined reference to `dlclose'/home/myles/bitcoin/deps/lib/libcrypto.a(dso_dlfcn.o): In function `dlfcn_pathbyaddr':dso_dlfcn.c:(.text+0x8f): undefined reference to `dladdr'dso_dlfcn.c:(.text+0xe8): undefined reference to `dlerror'/home/myles/bitcoin/deps/lib/libcrypto.a(dso_dlfcn.o): In function `dlfcn_bind_func':dso_dlfcn.c:(.text+0x43d): undefined reference to `dlsym'dso_dlfcn.c:(.text+0x514): undefined reference to `dlerror'/home/myles/bitcoin/deps/lib/libcrypto.a(dso_dlfcn.o): In function `dlfcn_bind_var':dso_dlfcn.c:(.text+0x5a1): undefined reference to `dlsym'dso_dlfcn.c:(.text+0x67d): undefined reference to `dlerror'/home/myles/bitcoin/deps/lib/libcrypto.a(dso_dlfcn.o): In function `dlfcn_unload':dso_dlfcn.c:(.text+0x6e3): undefined reference to `dlclose'/home/myles/bitcoin/deps/lib/libcrypto.a(dso_dlfcn.o): In function `dlfcn_load':dso_dlfcn.c:(.text+0x7b7): undefined reference to `dlopen'dso_dlfcn.c:(.text+0x828): undefined reference to `dlclose'dso_dlfcn.c:(.text+0x86d): undefined reference to `dlerror'collect2: ld returned 1 exit statusmake: *** [bitcoind] Error 1 Nice! I don't know if it would "pay off" the electricity it uses but it would be a great extra node on the network and low power at that. My next project aims to take this even a step further and lower, right into a chip to crunch and run the program.  Or those with servers stuck on 32-bit OSes. :-DQuad core Xeon@1.6GHzStock: 1100kh/sFull Opt: 2600kh/sTHANKS! falkenberg,I have a VIA C7 that I'm working to port code over to. Theoretically it won't be faster than multi-core i7/xeons but it will be a very fast hashing engine that require quite low power. From what I've calculated, it would be able to compute about 1500kh/s for < 100W. We won't know until I get it setup and running sgtstein I would also be willing to run tests for this. I have about 6000kh/s at my disposal. In for testing. Just downloaded, will be installing to phone and setting up server shortly. DEFINITELY in to test CUDA! I had been needing a fun system for a home server anyway... So, I just picked up a mobo/cpu combo of Newegg tonight. VIA C7-D@1.6GHz. It will be running with 2GB of RAM on a 16GB compact Flash disk(for BitCoin) and a 120GB 2.5" laptop SATA drive for the OS etc. Hopefully I will have this up by the beginning of next week once it gets here and I figure out how to get Linux onto this one. I'll create a thread or continue this one as I build and test for it. While this appears to be a good idea for a low power server that can "keep up with the big boys", I think that it isn't the best method for it. It looks like OpenSSL DOES have a CUDA version floating around out there for linux boxes. That would be a HUGE increase over anything we could do in this hardware. I'm still going to be pursuing both paths for now. It would be awesome having both of my "big" boxes crunching for this. Yep, the openssl acceleration is already built into the kernel.Check out these for AES benhcmarks on XP. Not sure what for SHA-256 on *nix.http://www.logix.cz/michal/devel/padlock/bench.xp I had thought about that as well but wasn't sure how we would want to break the files for such a torrent etc. Though, anything will be helpful to get started. Thanks! This will help a ton for new users out there.Is there any way someone could write a script that would automatically copy and package a new Zip file of the block chain every hour or so? It would be even faster for new users to try the system out. It is checking and blocking per IP. Though, if running through Tor etc. there could be problems. Fedora 13 64-bitIntel Core i7 930 @ 2.8GHz4 Cores, Hyper Threading on but using only 4 threads.Uncertain on temps as of yet.2800kh/s True. This is only a 64-bit binary. If no one else gets a binary uploaded tonight, I will try my hand at building one tomorrow morning. I can't patch it to the current as I have no way of testing it. Though, if I can determine how to disassemble his I might be able to get a leg up on working off the SVN and making a new one. As far as I am concerned, if I can get the source that he has I can branch off of it and continue working. Otherwise I am starting work on my own CUDA build using C/C++.Just a heads up... Second confirmation that this is the WORKING build for Fedora 13.Thanks!
