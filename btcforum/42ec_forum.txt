Yes, that is correct. They would share the wallet, and it becomes a race on spending the money first.If I read the source code correctly, keys are always made in pairs. That means, every address has an associated private key. When you click "New Address", you call GenerateKey in main.cpp, which generates a new key pair. So the duplicate address is ultimately a duplicate public key. Which is very unlikely. While keys still are "easily generated", you should have to generate a whole lot of keys before a collision. While I am not certain, it seems that the keys generated have a space of 256 bits, which is a lot more than the 122 bits put in perspective in the wikipedia article on uuids. Remember, 123 bits have half the probability of collision as 122 bit, 124 half of that again etc. For two addresses to be equal, two identical private/public elliptical curve (ec ) keys have to be generated. Without looking at the source code, let's assume the probability for this is 2^(-128) for a keyspace of 128 bits. See here for a perspective on how probable it is with a 122 bit collision.However, if something similar to the Debian ssl-scandal happens, similar keys could indeed be generated. The effect of an individual generating an existing key, is (if I understand it correctly) in effect to make a copy of wallet.dat. Not good at all, but not devastating for all the members of the p2p network. Great!One way to establish trust from users could be to publish your sourcecode (e.g. to github or similar) for others to review for security. You might also get patches and new features for free. Furthermore, it would make it easier for other to start similar exchanges, strengthening the bitcoin currency.I really hope to see more work like this, so keep it up! Edit: I have two comments to your implementation so far: 1) When a wrong username/password pair is entered, you should not indicate witch one is wrong, as it reveals information. 2) You should set up a https server using a self-signed certificate (or one signed at cacert), as connections over TOR are almost certainly sniffed. An URI-scheme could also be of use for implementing a mobile wallet with QR-codes, so that your buddy who wants to pay you X bitcoins don't have to enter your bitcoin-address manually, but only need to photograph the screen of your mobile phone. Hi, intrigued by the bitcoin-system, I have an idea:The bitcoin addresses could be improved by implementing an URI-scheme like e.g. torrent magnet links.So instead of 1Nu6wZC7JSuh6h8nfKkSTZ4kp9U4f83hhZ, we could more unambiguous say bitcoin:?addr=1Nu6wZC7JSuh6h8nfKkSTZ4kp9U4f83hhZ, and even configure browsers to redirect clicks on such links to a bitcoin client. This would allow one to implement "donate buttons" on homepages, "pay buttons" on webshops etc.If an IP should be included, URIs allow this as bitcoin://HOST_OR_IP:PORT?addr=1Nu6wZC7JSuh6h8nfKkSTZ4kp9U4f83hhZ. If wanted an amount could be specified as bitcoin:?amount=42.00;addr=1Nu6wZC7JSuh6h8nfKkSTZ4kp9U4f83hhZ (of course for the user to verify in the secure bitcoin-client).Just my 0.02 ฿ (return them to bitcoin:?addr=1Nu6wZC7JSuh6h8nfKkSTZ4kp9U4f83hhZ if you don't like them ) Thank you for your interest! My server sits on a 100MBit network, but I guess the bandwidth is somewhat limited by TOR, so it's "unlimited". Actually, the 1GB "limit" isn't enforced for this reason either While I will do my best to keep my server on line, I of course don't expect anyone to trust me, and I therefore suggest that other people set up similar services and let people have multiple backups at different places (maybe combined with unionfs-fuse or similar).I of course can't compete with dropbox etc, but this should be an excellent place to back up sensitive (your encrypted bitcoin wallet?) data limited in size. I have started an experimental service for anonymous storage using encfs, sshfs and TOR:http://isj6esrpkl5kgi5r.onion/Please let me know what you think  
