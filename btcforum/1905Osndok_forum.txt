If this is truly the reasoning behind this pattern I think it's a bit paranoid. The sync-on-every-write isolation is for when the machine crashes or loses power, applications for this might be a database log or filesystem journal; and in those cases they generally write a page at a time for efficiency.To the best of my understanding the OS will close every open file in the event of a program crash. You see this behaviour all the time with errant programs (they print an error or usage statement then quit). Said another way, the buffer in question is the file system cache (not a cache within user space), wherefrom the os serves multiply-opened files, etc. The OS will periodically sync this cache anyway.Yes, it does make the code very compact and readable; but I think the proper way to do this would be to either rotate the open file descriptors, or perform a flush-copy-truncate on the open log file.Is there a way to ensure the developers catch wind of this? Apparently the debug file is closed after *every* printf (causing a flush, and on my system a bunch on crypto overhead).Since FileVault is a standard option on a Mac, I recommend either not closing the file (os will clean it up), or disabling debugging to a file on macs.Example patch attached...Is there a bug tracker for bitcoin? I think you hit rather close to the mark. I have FileVault enabled (which encrypts the home directory). But I would still not expect to see such a problem.On a whim, I replaced the "debug.log" with a symlink out of the home folder. Not only did the problem vanish, but bitcoin nearly-instantly caught up in the chain!I'd bet that the debug mechanism is running fsync() for every log entry, when it should never sync at all (it's a bug!). btw... does anyone know where I can find the function "~wxMessageOutputDebug()", or what it does? To clarify a bit....Whenever bitcoin is running, it takes up 100% of one core, and DirectoryService takes up 50% of the other. So only 1/4 of the cpu power is available for anything else. Once bitcoin is quit, everything returns to 0%. 100% reproducible. Well... I've done some digging and might have narrowed it down.When bitcoin is exhibiting this slow-down behavior, it appears to be requesting something from the "DirectoryService" process (user name, reading a plist?). I'm not positive asto how to read these stack traces, but the issue seems to be within this block of code (perhaps it is running a lot more often then anticipated, contention over dbenv, or the db system is making ineffecient use of some DirectoryService).[I'll try to attach the process samples]Does anyone else use bitcoin on a Mac?Code:void CDB::Close(){    if (!pdb)        return;    if (!vTxn.empty())        vTxn.front()->abort();    vTxn.clear();    pdb = NULL;    // Flush database activity from memory pool to disk log    unsigned int nMinutes = 0;    if (strFile == "addr.dat")        nMinutes = 2;    if (strFile == "blkindex.dat" && IsInitialBlockDownload() && nBestHeight % 500 != 0)        nMinutes = 1;    dbenv.txn_checkpoint(0, nMinutes, 0);    CRITICAL_BLOCK(cs_db)        --mapFileUseCount[strFile];} I don't see an obvious way to limit the number of network connections.   I'm not sure why, but my computer noticably slows down whenever I have bitcoin open (and it is not set to be generating bitcoins as far as I can tell). I've even re-niced the process using the terminal, but it is still has a noticable effect when just browsing the internet or opening/closing windows.Other things I've noticed (not sure if related?), bitcoin...* takes a long time to startup* draws it's own apple-menu (with associated weirdness in using it)* takes a long time to quit* often will have a crash report come up (after telling it to quit)Any similar experiences here?Could the slow-down be from it using the graphics card or network? Is the network usage throttled?
