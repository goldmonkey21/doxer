DBsS2XZfteCWGPz19nEAWc8XJTKLfT651DThanks! I am also waiting on an InstaWallet claim.I did accept my claim, though I was a bit late to do so since I was never notified that I needed to, and because accessing the instawallet.com domain without the www stopped working so every time I tried to check on my wallet it looked to me like Instawallet had gone offline.It now shows my status as PENDING_PAYMENT.I message Boussac a couple days ago, so hopefully he responds. Could you point give us or point us to a description of the Namecoin problem? I haven't been able to locate documentation of it myself. It would be very difficult to prevent arbitrary text since it needs to store arbitrary data. A standard address is just a sequence of 20 bytes. What is stopping anyone from making those bytes an ASCII string?How would we restrict the tools? As long as Bitcoin is open-source, the blockchain storage format is openly available. As far as I see it, it would be wrong to try to block or outlaw tools for parsing the blockchain. People should be able to freely analyze its contents.If we have a problem with content in the blockchain, we need to either find a way to deal with it or learn to accept it. Hiding it won't make it go away. I see no reason to change the storage format over this. It might obfuscate transaction messages in the blockchain, but they will still be there. If people care enough to read the messages, they will use an old client or parse the new format. I received a response from the hosting company from which the email originated stating that the account has been closed. Unfortunately, the phishing site itself seems to be hosted elsewhere (fwef33.tmweb.ru.) Of interest from the email headers:Code:Return-Path: <fewfewef@xm33.hostsila.org>Received: from xm33.hostsila.org (xm33.hostsila.org [194.28.87.253])...Received: from fewfewef by xm33.hostsila.org with local (Exim 4.69) (envelope-from <fewfewef@xm33.hostsila.org>)I sent off a quick message to the .TK abuse email letting them know about the issue. #9999 and #10000 Do you have Explorer set to show hidden files? Try C:\Documents and Settings\<User>\Application Data\Bitcoin. If that doesn't work, go to Start then Run and enter "%APPDATA%\Bitcoin". That should have the wallet and blockchain, just like .bitcoin on your Mac. I agree with hashcoin's assessment. An investigator could collect public keys by agreeing to buy from people or pay them for some reason and/or by gaining access to an exchange, pool, or other service that pays people. These people then become easily trackable.Warning, brainstorm below:Would it not be better to randomize t instead of incrementing it? Instead you send the coins to h = hash160(concat(c, t)) where t is a large (256-bit?) random number. That way, it seems to me that even someone with public key couldn't determine if a given h was generated from a given c without knowing the t used. Although then again, I don't see how such a transaction could be redeemed by the receiver without some out-of-band communication of t. Maybe you could encrypt t to that public key and insert that into the transaction as well? This would let the receiver be able to see when he received the coins, but in order to prove ownership when spending the transaction, it seems like he'd have to reveal t, giving up the privacy. Maybe some form of non-interactive zero-knowledge proof could be used? http://www.youtube.com/watch?v=XoSWnxieScwhttp://www.youtube.com/watch?v=vWdAPq5qKlshttp://www.youtube.com/watch?v=_f07yugTEPk Yes, it is C standard library specifically, but it is considered a Microsoft Visual C++ Runtime Library (there is no Microsoft Visual C) and I'm guessing that is what the error message is referring to. Thanks for the help. We made it to the next retarget. Although now we need to cut back on mining. Testnet is generating blocks too fast and will soon jump right back up in difficulty. The official Bitcoin Windows binary isn't built with VC, but it does use the Microsoft Visual C++ Runtime (msvcrt.dll).This file might be corrupt. You can try running "sfc /scannow" from an administrator command prompt. This will attempt to find and repair bad system files. You get better speeds with Bitcoin Plus than with a normal miner program? What CPU to you have, and what miner did you try? For me, CPU mining with Ufasoft's miner gives me over ten times the hash rate of Bitcoin Plus, and even mining with Bitcoin's built-in generation capability gives me about four times that of Bitcoin Plus. It might be easier with IPv6, but it is easy enough now with IPv4. If a government wants to restrict Internet by country of IP address, they will do it. In fact, the decision to do so would probably be made by people who neither know nor care exactly how the filtering works on a technical level. I get no error. The SHA1 fingerprint of the certificate I get is bf5d728ac70686806c6fe7da2a7f1fe98daf98f1. I think he was suggesting you copy that file and put it somewhere other than Sourceforge, such as in this topic. It does have the advantage that it is PGP-signed by a developer.Code:-----BEGIN PGP SIGNED MESSAGE-----Hash: SHA14909c17a1cc025c6f6c88d036f0b487c51c510f6  bitcoin-0.3.24-linux.tar.gzfed0afebe0b0c0f77a637600ac4abecbe5d098ed  bitcoin-0.3.24-macosx.zip58531249230f769fdc755822b41e0f18ba59512c  bitcoin-0.3.24-src.tar.gzd4b5425eff673551a326d5326b92a06359dc1a3d  bitcoin-0.3.24-win32-setup.exe520aed70ee28a0a91ed49dd983639cb1fab2a93c  bitcoin-0.3.24-win32.zip-----BEGIN PGP SIGNATURE-----Version: GnuPG v1.4.11 (GNU/Linux)iQIVAwUBTiTMHNodwg8tvwyoAQL8CRAAgraSWP12lbwrhpiElvB7LIWoPbiE1dUxi2ZO4MVJYKMbyuHu55j1Uq7a4ZqpNhXqq7U6efnoDTCl9sdpyhKxiql0SpsYBLs1IehX4UEVGVMUE5uepmOs+cYnYuAhNzvxNqKFPv3D7uEOXPmSxlUa4s0GEnTgVR1l0GFYf2T615MoGAak3+afahp4WB4XlHshttHT2P3o2/7N4Oh7iwFFtkmOj/Sb3PrcC8skW83kUZ4i8W1HlZTmtr4YlQbKnx6bF6mbkTY1aQa1AV/8htenALkmR2+eCgsdEY9WM8qruxnVLt/ao+VYw5jYLSYVKHt31ZD4rJM+5lKcTtU1NmNsGloen+hdLwC+hggqnUQmvBzM7SKqvg4zI9SbgGR5fS3poTrFX7yDKZyLSPcjBND/lWi8evRiSEP0yftCKL7zotdRy6QTG7tI1Fye1fyYuQdTB1nimE+7VJ8Q2O4DwE0iZKMuXm3GfaOrT20Znvns9caMKED9T1gg42QgYM6EMMbeukBUkIXPt2tloDnn2tMzvvrKzgGBS1Lcqv2ndhBCunBxNCQCHly4T2Rz8TJnm2XglS0d/VygcMuMSL0San5DwXYNnN4P0xD/MXOdqrxcusIzKBbSHWPqInRmYUTymDtcqXWK3Cz6kRUXjBkRoSvDs8PBAvnaC2361xol6uyMqZo==aMy0-----END PGP SIGNATURE----- The idea is that you would have Jeff's PGP already, and not simply download it whenever you are checking a new binary. When you get the key for the first time, as with all PGP public keys, you should not trust its validity until you are convinced it is correct. You make this decision based on several factors such as where you obtained the key, what other sources agree that this key is legitimate, the PGP web-of-trust, etc.Jeff's key could use more signatures. Somebody make him attend a keysigning party.
It mean NAT is no longer needed. You can still set one up if you need to for some reason, though, in my opinion, a better solution is just a home router that firewalls incoming connections. You'd just configure it with what ports you want open on what host, kind of like port forwarding, but where every host gets a unique public IP so that you can "forward" the same port for two hosts. There are more attack that do make it weaker. Just no collisions yet. But I completely agree that it should not be used in new projects.Bruce Schneier agrees with you the this counts as "broken." I am just not a big fan of that specific definition of broken since it would mean that algorithms like AES that are still quite strong would count as "broken."Sure, you could replace SHA1SUMS.asc, but you wouldn't be able to change it without invalidating the PGP signature. I assume you are referring to this: Collision Search Attacks on SHA1This only demonstrates a collision of SHA1 with a reduced number of rounds. Their research does reduce the complexity of an attack on full the 80-round SHA1, but not enough that anyone has been able to produce a full collision.Scary stuff, and a very good reason to move to something better, but, at least for now, an attacker can't tamper with a file without changing the SHA1 hash.By the way, I am using the term "broken" to mean that actual collisions have been found or could reasonably be found with current technology. If you use "broken" to mean that there is a known attack faster than a birthday attack, then SHA1 is definitely broken. SHA-1 is not broken. It is also highly unlikely it will go from where it stands now to completely broken and unusable for this purpose overnight. That said, I would be in favor of also signing a stronger hash. It is good to stay ahead. Bitcoin uses irc.lfnet.org now, since it had problems with Freenode as well. I recommend asking lazlo before using it for your own fork, though. It is already trivial to determine the country of an IPv4 address based on public information form IANA and the various RIRs. Four new blocks have shown up. Hopefully we can push our way to 32255 and get a more reasonable difficulty. After that, it will be good if people only mine what they need. Current difficulty on testnet is 503. It is only 183 blocks from the next target which should be much lower. I am running my CPU on it with 12 Mhash/sec. to try and push things forward but so far no blocks. It seems to me like Ixcoin is even more friendly to early adopters than Bitcoin. Its faster growth rate due to its larger generations combined with the large-scale mining at low difficulty are flooding its early adopters with easy coins. It has already reached a total of over 1.6 million coins distributed only a few days after going public. Thanks for answering my questions.Your cipher might act as slight obfuscation, but I wouldn't rely on it. Make sure that the security of your program does not depend on it.Yes, MD5 collisions are rare and I believe MD5 is still usable for key derivation. I just feel uncomfortable depending on such a weakened hash when we have plenty of better alternatives.I think SHA-256 would be preferred, although SHA1 is reasonable.Improper use of RC4 made WEP Wi-Fi encryption trivial to break. RC4 has a few weaknesses you have to watch for, which I will explain further down. They are documented here:http://aboba.drizzlehosting.com/IEEE/rc4_ksaproc.pdfhttp://en.wikipedia.org/wiki/Fluhrer,_Mantin_and_Shamir_attackAs described in the paper above, the initial bytes produced in RC4's keystream can leak information about the key. The first bytes in the keystream should be dropped prior to encryption. This is just one of the little things that makes RC4 difficult to implement securely.Implementing encryption securely is very hard. You have to worry about the weird nuances of the algorithms and various side-channel attacks. I don't really trust an implementation unless it has been widely used, tested, and reviewed by many professionals. Even prominant open-source implementations created by experts sometimes turn out to have issues. I'd recommend using a library like OpenSSL. It has been highly scrutenized and it will handle many of the little issues for you.The one question you didn't answer is the nonce question. RC4 is a stream cipher and should never be used to encrypt two different things with the same key unless you use a unique nonce or IV which is combined with the key prior to encryption. This is yet another thing that a crypto library could help with. The GUI will accept commands too if run with the "-server" option or if you specify "server=1" in bitcoin.conf. You can then use the "backupwallet" JSON-RPC command to backup the wallet. From the command-line, that would be "bitcoind backupwallet /output/file". I hope you don't mind me asking a few questions.Why use untested custom crypto when more established algorithms work just fine?If you hash the passphrase, do you use multiple iterations or some other form of key stretching?Why use MD5 when it has known collisions? Why not use SHA2?Why RC4, which is notoriously difficult to use securely? Why not AES?What implementation of RC4 are you using? Did you write it yourself? Is it from a library like OpenSSL or Crypto++?Are you using a nonce to prevent the same key from being reused? If so, how is the nonce combined with the key?How many initial bytes do you drop from the RC4 stream? Here is the MyBitcoin address I posted: 1MNTuapuSrQ5NHYK5HkFZR7E4tnE7yjVYnCode:-----BEGIN PGP SIGNED MESSAGE-----Hash: SHA1Hello,This is a payment notification from MyBitcoin.You have received Bitcoins!Transaction Number: 211683Transaction Date/Time: 2011-07-15 04:37:40To: 1MNTuapuSrQ5NHYK5HkFZR7E4tnE7yjVYnFrom: Bitcoin P2P NetworkAmount: 0.0995Thank you.-----BEGIN PGP SIGNATURE-----Version: GnuPG/MBC v1.0iQEcBAEBAgAGBQJOH8QUAAoJEJ+5g06lAnqFnAoH/2RXhfuiqEbZqc8GnL7SIYgKxonZ1uhnzg23NSuW047IuwAYvtnoFa0xymgnAQBhHcLRwuCXYZcTU8TLEatsaWXT3nrjYpQ+t+9McfJf5Um+0KoUt+bv/C/9M95yMVKQxST5B5mcS3cJz7ltmOkq3FgzPqyOZwlKB+qIAn4JzCYp+kX6YUOzZK2wvIsWU/mfCgL57jMTCl+PeOwvppTzIEXCGqfX8eP1dOc4cKoUcXuQR8JMs6bw/dfT+ibBEEj6S/sxM2cGfMawHDa5DLCnJ0dc2eugOJT8/9g8bukosRZGUytOvQd6ItUrRnsVoSUg6iIEPXCCPLgSoCbrE/OT8cQ==Yl1N-----END PGP SIGNATURE----- The use of hash functions seems off to me, too. Maybe they are for key derivation? If so, then what algorithm do you use for the actual encryption?Also, a custom crypto algorithm? This is a well known bad idea. Based on the name I assume it uses a Vigenère cipher which is not secure. No, I only kept spare change in MyBitcoin. I'll try to see if any of the accounts my withdrawals came from have anything interesting. Just checked, nothing interesting. I should have been more clear. These addresses have no sends at all in the blockchain.One such address is 1MNTuapuSrQ5NHYK5HkFZR7E4tnE7yjVYn.Code:-----BEGIN PGP SIGNED MESSAGE-----Hash: SHA1Hello,This is a payment notification from MyBitcoin.You have received Bitcoins!Transaction Number: 211683Transaction Date/Time: 2011-07-15 04:37:40To: 1MNTuapuSrQ5NHYK5HkFZR7E4tnE7yjVYnFrom: Bitcoin P2P NetworkAmount: 0.0995Thank you.-----BEGIN PGP SIGNATURE-----Version: GnuPG/MBC v1.0iQEcBAEBAgAGBQJOH8QUAAoJEJ+5g06lAnqFnAoH/2RXhfuiqEbZqc8GnL7SIYgKxonZ1uhnzg23NSuW047IuwAYvtnoFa0xymgnAQBhHcLRwuCXYZcTU8TLEatsaWXT3nrjYpQ+t+9McfJf5Um+0KoUt+bv/C/9M95yMVKQxST5B5mcS3cJz7ltmOkq3FgzPqyOZwlKB+qIAn4JzCYp+kX6YUOzZK2wvIsWU/mfCgL57jMTCl+PeOwvppTzIEXCGqfX8eP1dOc4cKoUcXuQR8JMs6bw/dfT+ibBEEj6S/sxM2cGfMawHDa5DLCnJ0dc2eugOJT8/9g8bukosRZGUytOvQd6ItUrRnsVoSUg6iIEPXCCPLgSoCbrE/OT8cQ==Yl1N-----END PGP SIGNATURE----- He couldn't have sold the entire site's coins since I still have a few MyBitcoin addresses that have a positive balance. This XKCD strip comes to mind. This isn't quite the same as what BitBills is doing. First, BitBills can be redeemed even if the BitBills company disappears. Second, BitBills can be exchanged freely as currency. Assuming you don't find a way to defeat their security measures, only the person holding a bill is able to redeem its value, up until it has been cut open. BitDollars can't safely be exchanged since you have no way of knowing if a prior holder saved a copy of the code before spending the bill. I have received exactly one donation of 0.1 BTC given as a thanks for a post I made.
I have two left as well. Two more free invites available. PM me your mail if interested. Since Bitcoin is often viewed as a democracy, it seems pools change this from a direct to a representative democracy. Pools are the representatives which we elect by mining for them. If the code were changed in some incompatible way, it would be noticed and publicly announced online by the community. If the change is disapproved of by the community, nodes (in particular, the mining pools) will refuse to upgrade to this new version. I have five invites as well. PM your email and I'll invite you. I would just like to point out that I appreciate TradeHill's openness on this issue and feel it has been handled reasonably and professionally. Jared: If Dwolla doesn't rectify the situation, for how long will you continue to allow Dwolla withdrawals? Will you give your customers advanced notice before dropping Dwolla completely? This is still unclear. MtGox hasn't reported having any Dwolla issues, but is could become a problem now that it is known that transactions can be reversed. I wasn't aware that they were being given for free right now. I have five invites to the new Ruxum exchange, which I am willing to give away. PM me your email address if you are interested. Why is this necessarily to pay for everything offline? Many people already pay for rent or make housing payments online. In some cases, you can even pay for food and transportation online. When a block is generated, it can divide the block among multiple addresses in any way it wants. Most pools claim the whole 50 BTC themselves and then pay the users afterwards. Eligius, however, just puts users' addresses right into the generated coins transaction. The coins are never actually sent from anywhere, they are essentially just claimed on your behalf. I am pretty sure that "most bitcoin-related services" work just as well with an e-wallet. Some services like BitLotto and your RaffleBit don't, but none that I have used. In fact, those are the only two I can name of the top of my head. Having many addresses improves privacy and makes it easier to keep track of payments from multiple sources. For a single address offline wallet, you can just generate a private key and record it. This takes only 32 bytes (64 digits in hex, 44 in padded Base64) and is short enough to be stored in a QR code or even written down by hand. People already use this for offline savings. Casascius sells paper wallets containing nine addresses and their private keys on one sheet of paper. BitBills are similar and store the keys in QR codes. I never though about ROT13. I was driving myself crazy trying to make that private key work. I figured out the meaning of the message and string, but I am struggling with this next (and hopefully last) step. Matt, you are one evil bastard. I was sure I had it, but nope, I've still got more to do. This one is tough. I found the message, but I still haven't been able to make use of the information. I've manged to locate a Base58 string using your clue, but I have been unable to make any use of it.
Technically, you don't even need to store the address. You can use the private key to generate to address whenever it is needed. Ruxum posted here earlier looking for testers. I have an account, and I love the interface. It gives me instant calculations for the fee and cost while filling out an order, and it has the chart and order book on the trading page for quick reference.One thing it lacks is a good way to withdraw and deposit small amounts of USD. The only currently available method is bank transfer that costs $10 to deposit and $25 to withdraw. They do state that more options are "under consideration," so this may change.They also hint at a "Ruxum Pool" that can be used to fund your trading account. Bitcoin uses a different default location for the testnet blockchain and wallet, so you can switch between networks freely. EME would be unnecessarily difficult and unreliable. It would be much simpler just to send the data over HF. You mean an assassination market? You can use the bash script commands here:http://forum.bitcoin.org/index.php?topic=2461.msg35749#msg35749To encode the private key, add those functions and run:privkey=58c00ef49f161ac94e40cde5106227e09a6dc1840cf601c877b48d9ccc7ebdbeEncodeBase58 "80$privkey$(checksum "80$privkey")" && echo Step-by-step guide to claiming coins, easy mode:Step 1: Create a new bitcoin wallet.Start bitcoin with a fresh wallet to keep from polluting your current wallet with these addresses. You can do this by temporarily moving your wallet.dat out of your bitcoin data directory, or by making bitcoin use a new data directory. The step is optional but highly recommended.Step 2: Hash the string using SHA-256 to get the hex private key.Go to http://www.xorbin.com/tools/sha256-hash-calculator and enter the string. For example, "Damnesia" gives "58c00ef49f161ac94e40cde5106227e09a6dc1840cf601c877b48d9ccc7ebdbe". This is your private key in hexadecimal form.Step 3: Convert the hex to base58 bitcoin private key format.Go to http://blockexplorer.com/q/hashtoaddress/x/80 replacing "x" with the hex private key. This tells BBE to encode a bitcoin address of version 80, which is used for private keys. For our example above, we'd go to http://blockexplorer.com/q/hashtoaddress/58c00ef49f161ac94e40cde5106227e09a6dc1840cf601c877b48d9ccc7ebdbe/80 . This gives us the encoded private key of "5JVNazqC4JucAHUeRLhcqrbGFAro2CySd2ptDaDnPe18G9tmuAs".Step 4: Import the private key into your bitcoin wallet.If you can build or obtain a copy of bitcoin with sipa's importwallet, start bitcoind (or bitcoin -server) and run "bitcoin importkey y" where y is the base58-encoded private we just created. Now just wait for it to finish scanning the block chain for transactions. If you can't get a patched client, get Python and pywallet. Stop bitcoin altogether and run "python pywallet.py --importprivkey=y" where y is the base58-encoded private key. Run bitcoin -rescan.Step 5: Send the coins to your main wallet.Send yourself the coins so nobody else can claim them. Once you get a confirmation or two, the coins are yours and you can close bitcoin and switch back to your primary wallet. Have fun! Sure. I just claimed the last .1 BTC using Windows. Casascius even made an awesome tool in Visual C# to convert between address formats. As for importing private keys, you need a client patched with sipa's patch. I also believe someone made a Python script to directly import keys into your wallet, which might be easier. For hashing, you can use command-line OpenSSL or one of the many websites out there that will hash strings for you. Actually, the lawyer tried to trademark the term bitcoin, not copyright. From the bill:IANAL, but according to this Bitcoin still can't be patented since it is already publicly available. It was claimed while I was trying to do so myself. Somebody beat me to it.  Anyway, the secret is that the SHA-256 hash of the string is the private key for that address. One feature I'd like to see is the ability to be notified by email if your balance changes. You con control Bitcoin and generate addresses with the JSON-RPC API. As for keeping track of users' addresses, you can either use separate accounts in Bitcoin or just keep track of them in some sort of database yourself. It means 9.47*10^33. I assume years.http://en.wikipedia.org/wiki/Scientific_notation#E_notation When you import a private key, the client has to search the block chain for transactions involving this key's address. How will importing private keys work with a partial block chain client? Such a client wouldn't have it's own full copy of the chain to search. It could fetch, scan, and discard the blockchain from the network piece-by-piece, but that seems like it will be very slow. I guess this feature could just be left out of such a client. They couldn't. Even if it could mine that fast, they would get no more than 2016 blocks before the difficulty changes to account for the new processing power. This sounds like a lawsuit waiting to happen. If you do this, make sure you are protected in case somebody is harmed while carrying out a dare. As I mentioned in the pull request comments, you need to add an include for fstream in headers.h. Anyway, here is my Windows MSVC10 build:http://www.sendspace.com/file/lkoufm What platform? It looks like Windows, so I assume it is Windows/MinGW, right?Is USE_UPNP defined in your makefile? Not sure if I qualify as "trusted" but here is a quick Cygwin build: http://www.sendspace.com/file/yzsf0z
Google+ let me in. Never got an email about the invite so it could be unrelated, but I'll send payment anyway. Thanks! I haven't received anything yet. Does it usually take this long? I will give 0.1 BTC to whoever can get me in to Google+. I will pay you once I have access. My email is my forum username at gmail.com. Even if you have enough CPU power it takes you only a minute to generate a block at the current difficulty, it will probably take you billions of years to find a collision with another already used address. See my post from the vanity address thread. For now, you need to recompile Bitcoin from its source code to use this. Hopefully this patch will be included in the next release.But as for your corrupt wallet, I recommend bitcointools. There is a nice guide here: http://forum.bitcoin.org/index.php?topic=11331.0 I got it to build and run using the following modified version of makefile.vc:Code:# Copyright (c) 2009-2010 Satoshi Nakamoto# Distributed under the MIT/X11 software license, see the accompanying# file license.txt or http://www.opensource.org/licenses/mit-license.php.INCLUDEPATHS= \  /I"C:\bitcoin-build\boost_1_46_1" \  /I"C:\bitcoin-build\db-4.7.25\build_windows" \  /I"C:\bitcoin-build\openssl-1.0.0d\include" \  /I"C:\bitcoin-build\wxWidgets-2.9.1\lib\vc_lib\mswu" \  /I"C:\bitcoin-build\wxWidgets-2.9.1\include" \  /I"C:\bitcoin-build\miniupnpc-1.5.20110215"LIBPATHS= \  /LIBPATH:"C:\bitcoin-build\boost_1_46_1\stage\lib" \  /LIBPATH:"C:\bitcoin-build\db-4.7.25\build_windows\Release" \  /LIBPATH:"C:\bitcoin-build\openssl-1.0.0d\out32dll" \  /LIBPATH:"C:\bitcoin-build\wxWidgets-2.9.1\lib\vc_lib" \  /LIBPATH:"C:\bitcoin-build\upnpc-exe-win32-20110215" \  /NODEFAULTLIB:libc.lib /NODEFAULTLIB:libcmt.lib \  /NODEFAULTLIB:libcd.lib /NODEFAULTLIB:libcmtd.lib \  /NODEFAULTLIB:msvcrtd.libWXLIBS=wxmsw29u.lib wxtiff.lib wxjpeg.lib wxpng.lib wxzlib.libLIBS= \  libboost_system-vc100-mt.lib \  libboost_filesystem-vc100-mt.lib \  libboost_program_options-vc100-mt.lib \  libboost_thread-vc100-mt.lib \  libdb47s.lib \  libeay32.lib \  miniupnpc.lib \  kernel32.lib user32.lib gdi32.lib comdlg32.lib winspool.lib winmm.lib shell32.lib comctl32.lib ole32.lib oleaut32.lib uuid.lib rpcrt4.lib advapi32.lib ws2_32.lib shlwapi.libDEFS=/DWIN32 /D__WXMSW__ /D_WINDOWS /DNOPCH /DNOMINMAX /DUSE_UPNPDEBUGFLAGS=/OsCFLAGS=/MD /c /nologo /EHsc /GR /Zm300 $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)HEADERS=headers.h strlcpy.h serialize.h uint256.h util.h key.h bignum.h base58.h \    script.h db.h net.h irc.h main.h rpc.h uibase.h ui.h noui.h init.hOBJS= \    obj\util.obj \    obj\script.obj \    obj\db.obj \    obj\net.obj \    obj\irc.obj \    obj\main.obj \    obj\rpc.obj \    obj\init.objCRYPTOPP_OBJS= \    cryptopp\obj\sha.obj \    cryptopp\obj\cpu.objall: bitcoin.exe.cpp{obj}.obj:    cl $(CFLAGS) /DGUI /Fo$@ %sobj\util.obj: $(HEADERS)obj\script.obj: $(HEADERS)obj\db.obj: $(HEADERS)obj\net.obj: $(HEADERS)obj\irc.obj: $(HEADERS)obj\main.obj: $(HEADERS)obj\rpc.obj: $(HEADERS)obj\init.obj: $(HEADERS)obj\ui.obj: $(HEADERS)obj\uibase.obj: $(HEADERS)cryptopp\obj\sha.obj: cryptopp\sha.cpp    cl $(CFLAGS) /O2 /DCRYPTOPP_DISABLE_ASM /Fo$@ %scryptopp\obj\cpu.obj: cryptopp\cpu.cpp    cl $(CFLAGS) /O2 /DCRYPTOPP_DISABLE_ASM /Fo$@ %sobj\ui.res: ../share/ui.rc ../share/pixmaps/bitcoin.ico ../share/pixmaps/check.ico ../share/pixmaps/send16.bmp ../share/pixmaps/send16mask.bmp ../share/pixmaps/send16masknoshadow.bmp ../share/pixmaps/send20.bmp ../share/pixmaps/send20mask.bmp ../share/pixmaps/addressbook16.bmp ../share/pixmaps/addressbook16mask.bmp ../share/pixmaps/addressbook20.bmp ../share/pixmaps/addressbook20mask.bmp    rc $(INCLUDEPATHS) $(DEFS) /Fo$@ %sbitcoin.exe: $(OBJS) $(CRYPTOPP_OBJS) obj\ui.obj obj\uibase.obj obj\ui.res    link /nologo /SUBSYSTEM:WINDOWS /OUT:$@ $(LIBPATHS) $** $(WXLIBS) $(LIBS) .cpp{obj\nogui}.obj:    cl $(CFLAGS) /Fo$@ %sobj\nogui\util.obj: $(HEADERS)obj\nogui\script.obj: $(HEADERS)obj\nogui\db.obj: $(HEADERS)obj\nogui\net.obj: $(HEADERS)obj\nogui\irc.obj: $(HEADERS)obj\nogui\main.obj: $(HEADERS)obj\nogui\rpc.obj: $(HEADERS)obj\nogui\init.obj: $(HEADERS)bitcoind.exe: $(OBJS:obj\=obj\nogui\) $(CRYPTOPP_OBJS) obj\ui.res    link /nologo /OUT:$@ $(LIBPATHS) $** $(LIBS)clean:    -del /Q obj\*    -del /Q obj\nogui\*    -del /Q cryptopp\obj\*    -del /Q *.ilk    -del /Q *.pdbIf you use this, you'll want to set INCLUDEPATHS and LIBPATHS to your own library locations.The changes I made are:Updated location of resources used to build ui.res.Moved list of CryptoPP objects from OBJ to its own CRYPTOPP_OBJ since they don't have seperate nogui versions.Added MiniUPnP library and USE_UPNP define.Added NOMAXMIN define to remove certain incompatible macros.Also, for wxWidgets, make sure you either edit config.vc to make a release build before building, or modify this makefile to use the default debug build.Edit: Spoke too soon. After running for a few seconds, my Bitcoin build is being terminated by DEP. This applies to both bitcoin.exe and bitcoind.exe. I'll look into this more later.It appears the issue was with MiniUPnP. I have been completely unsuccessful of making my own build of miniupnpc.lib using VC, so I built it without UPnP entirely. In order to build Bitcoin without USE_UPNP defined, I had to make a small modification to net.cpp by added the following lines after the MapPort function:Code:#elsevoid MapPort(bool fMapPort) {}This gives a us MapPort function to use when USE_UPNP is not defined.More Edit: D'oh! I forgot to copy the MiniUPnP DLL to the same directory as bitcoin.exe when using the prebuilt MiniUPnP. That solves the DEP issue. It has been a while since I last built Bitcoin on MSVC. I tried to do it today so I could explain how I did it, and it seems the VC makefile is broken. I am going work on trying to fix it up, and I'll let you know when I get it to compile. If you haven't done so, you need to edit your makefile to make sure it's INCLUDEPATHS and LIBPATHS point to the proper directory of your libraries.If that isn't it, can you post the error? It doesn't store any of the blockchain. It is not a Bitcoin client itself, simply a frontend for Instawallet. The 2^16 figure is just the for the number of addresses actually being used by each normal user, not what you can generate. My point in that part was that there are no more than 2^48 bitcoin addresses that would be of any interest to find a private key for.For the Birthday Attack, this just means it would be easier to find some two private keys that result in a common but unspecified address. However, we are not looking for any collision here. We specifically are looking for a key with an address in the set of previously used addresses. This is the same as PoW hashing, which I am comparing it with, where we are looking for value with a hash in the set of acceptable hashes. From the Wiki:You'll probably want to store them in a VARCHAR. Although, if you really want to save space, you can Base58 decode them and store them in binary without the checksum using only 20 bytes. It might not be a phishing email. Somebody has been requesting password resets on a number of Mt. Gox users, myself included. But either way, you should probably just ignore it. Never. Even if the whole generating network was behind it, it would probably never even stumble upon a previously used address, much less one that is worth more than the number of blocks it could have generated instead. Generating blocks is trivial compared to this.Their are 2^160 possible addresses. Lets say 2^32 (4 billion) people use Bitcoin and each generate 2^16 (65 thousand) address. That gives us 2^48 total addresses out of 2^160 possible. The probability of a generated address matching one of these is 1/(2^112). The probably of finding a block at 35 times the current difficulty is around 1/(2^64). Therefore, it would take 2^48 (281 trillion) times longer to find a previously used address. So if it takes you ten minutes to find a block, it will take over five billion years to find a used address.Now keep in mind that we don't have 4 billion users, most users have far less then 65 thousand addresses, and the current difficulty is much lower then I used in these calculations. Mining sounds a lot more profitable.NOTE: I assumed generating an address took equal time as generating a proof-of-work hash. However, I believe generating an address is actually slower since it involves both EC key generation and hashing. Not necessarily an error. That looks like just a block that was generated and shared among multiple addresses. Have you been mining for a pool? Some pools work that way. I think Eligius is one of them. If you aren't mining, someone else could be mining with your address. All of Mt. Gox's mail originates from the server w001.mo.us.xta.net. Just check the headers on your account recovery emails. The fact that is shows up in the From address of the password reset email is probably just a mistake on their part. Actually, I noticed that he is also using multiple key files, so you actually would need two of the drives to get the full key to decrypt any of the archive. However, the part about splitting the TrueCrypt volume itself is pointless and unnecessary, as far as I can tell. I noticed many Namecoin builds had SHA1 sums so I took the SHA1 sum of my ikZZRk.zip (1e24ae15200eba151fae1d8514027666d4a2135d) and found this post. The download link gives me the same file as I already have. The guy who posts it, grue, seems to be an active and trusted member of the community, so I doubt he is behind the hackings, but this is the source of that Namecoin binary. I have a copy of that Namecoin build as well. I haven't encountered any theft, but I have certain measures in place to protect my wallet.I was sure I got that build from the original Namecoin thread, but I was unable to find it there again. That's got me suspicious. The point is, nothing extra (except electricity) is being consumed by generating vanity addresses. An address that is generated then discarded may as well have never been generated. The network never has any indication that this address ever existed. Those sound like the famous last words of the Debian OpenSSL package maintainer.
I use the same username and email on MyBitcoin as I did on MtGox, and I was never contacted by MyBitcoin. I am sure nobody owns that address, but people have generated simpler vanity addresses.See http://forum.bitcoin.org/index.php?topic=1387.0 Neither of those are invalid. Bitcoin's base58 skips '0', 'O', 'I', or 'l'. Characters 'o', 'i', and 'L' are fine.Code:static const char* pszBase58 = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"; No, it isn't the wrong IP, unless you gave us the wrong IP. The IP address you posted is in the list. As to why your port scan comes up empty-handed, it could be filtering incoming connections, or just be too bogged down to handle your connection attempt. Rule #1 of hidden volumes: never admit you have a hidden volume. As mentioned by others, simply splitting the wallet, or even an encrypted volume or archive containing the wallet, is not secure. An attacker does not need a whole wallet file to steal from you. All they is a whole private key to an individual address (or enough of it that they can brute force the missing piece) to steal any coins received by that address. With the OP's method, chances are an attacker could steal most if not all of your coins with only one flash drive and your password. http://www.sendspace.com/file/llwl1i Nope, I am me. I have just not been very active here. You should probably make it case insensitive. Putting my email in all lowercase tells me "Nope!" but putting it in the same way it is in the database says "Yup!" I received this just now, claiming to be from <noreply@mtgox.com>:This is certainly a scam, so if you get this, DO NOT USE THE PROGRAM!From the headers:Code:Received: from perso1.free.fr (perso1.free.fr [212.27.63.203])...Received: from localhost.localdomain (localhost [127.0.0.1]) by perso1.free.fr (Postfix) with ESMTP id B85F1E5E1E4...XPARM: mrsmezaslim.free.frXPARAM2: 206.253.174.157 I got it too, and I use a completely different (and stronger) password for Gmail than my password from MtGox. Gmail's logs show no access from unusual IPs, so I assume somebody was just trying to use my MtGox password on Gmail. If we are bragging about low numbers here, check mine.  I managed to get Advanced Desktop on my 2G. I don't remember it being much of a hassle, but it has been awhile since I did it. If you want to access the binaries with out installing, you can use 7-zip to extract them from the installer. I looks much nicer if you use the thin space: 100 000.00It is &thinsp; in HTML and Unicode character U+2009. One could say the same for you, Kiba. You must be guilty. What is with this paranoia? He doesn't need to worry about getting in trouble for mailing a bunch of Gameboy games. The government does not try to correlate every package with a payment. If you want to test this, you can use my fullprecision branch of Gavin's test network.http://github.com/EricJ2190/bitcoin-git/tree/fullprecisionI believe the normal client simply truncates the values whenever they are displayed.Code:string FormatMoney(int64 n, bool fPlus){    n /= CENT;    string str = strprintf("%"PRI64d".%02"PRI64d, (n > 0 ? n : -n)/100, (n > 0 ? n : -n)%100);    for (int i = 6; i < str.size(); i += 4)        if (isdigit(str[str.size() - i - 1]))            str.insert(str.size() - i, 1, ',');    if (n < 0)        str.insert((unsigned int)0, 1, '-');    else if (fPlus && n > 0)        str.insert((unsigned int)0, 1, '+');    return str;} I made a small tool for running some of the builds with stability issues. It checks every minute for a running instance of bitcoin. If it fails to locate one, it starts a new one. To use it, simply put the Watchdog.exe from bin\Release in the same folder as Bitcoin.exe and run Watchdog.exe. You can even pass it command line arguments which are passed on to Bitcoin.exe. You will need .NET Framework 2.0. C# source code is included.edit: changed to start bitcoin minimizededit 2: added interval setting and lowered default interval to 10 seconds So basically a variant of Mafia? Count me in!
