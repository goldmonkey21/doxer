"Metronome: A DeFi Digital Central Bank"Source: https://medium.com/@chjohnmarks/metronome-a-defi-digital-central-bank-faf7eafbd0b7 Metronome is not a company, and does not have a CEO.Bloq, where I'm CEO & CTO, built Metronome core, and Bloq contributed the Metronome project & software to the open source community. Yes, definitely.  And you can pay for it with BTC, if you like! Today, we at Bloq, Inc. announced the general availability of [BloqCloud](https://www.bloq.cloud/), as a platform for open network developers and teams who want to get on with building  without having to worry about the tedious effort required in simply maintaining the necessary infrastructure to build. The first supported networks will be: Bitcoin, of courseBitcoin CashEthereumEthereum ClassicThe very first services will be:Managed nodes on-demand (BloqCloud Nodes)API services, indexed blockchain data, and blockchain event monitoring (BloqCloud Connect; BTC and BCH to start, with more coming). Most importantly, this platform is part of the crypto ecosystem:  Payment via crypto (BTC, BCH, ETH) or fiat (Visa/Mastercard).   Lightning Network and Metronome payments and more coming soon.Upcoming services will include capabilities for accessing distributed computing and storage, all within the BloqCloud console. The BloqCloud Connect service has a free tier (500 API requests per month, limited event/block/address monitoring). For $24/yr or $4/mo (Starter), you 10x the API requests and 4x the monitoring. BloqCloud accepts credit card and Bitcoin, with MET and Lightning soon. BloqCloud will continue add services and compatible chains going forward. The FutureBloqCloud is a necessary step, the plumbing of the plumbing, to get us to the blockchain-enabled future we envision. As this product grows along with its user base, we will continuously add services, compatible blockchains, and solutions. Get started:Site: https://bloq.cloud/ Signup: https://console.bloq.cloud/signup Pricing: https://bloq.cloud/pricing/ Docs: https://docs.bloq.cloud/ And the most important document, the 10-year Roadmap: https://sync.bloq.com/bloqcloud-our-platform-and-vision/ It can help to increase the gas limit, yes.  It is not required. Updated OP to reflect MET ticker and live auction. Hard cap:   The auction has a hard cap.  The auction starts at the hard cap and counts down.  8M MET * 2 ETH price is maximum.The roadmap is on the website.  This is one of the more professional projects in the space.It is different from all other ICOs, so it takes some time to understand. Incorrect.The money goes -- guess where -- to a smart contract that is not accessible by the Metronome team.That is why we call it an "un-ICO."   No private sale + 100% of the money raised goes back to the Metronome community over time. Metronome initial supply auction date set!Save the date:  June 18, 2018 at midnight UTC Metronome is secured by the underlying blockchain.  Therefore, it has POW (Eth, Eth Classic), DPOS (Qtum) and Bitcoin POW (Rootstock) behind it. The smart contract will issue 2880 tokens every day, not the founders.  No one - including founders - have control over issuing new tokens after Metronome is launched.This is important - once Metronome starts, no one controls Metronome.  The economics are autonomous.It is called Metronome because "click click click" like a https://en.wikipedia.org/wiki/Metronome, a small amount of tokens are minted every day forever, and no one can change that. Hello!  Excited to hear about Metronome spreading to Turkish peoples  You pay smart contract with ETH or DBTC, and receive MTN tokens immediately.This requires a wallet software capable of ERC20 and ETH, and some ETH or DBTC. The Metronome Descending Price Auction starts at a high price, then counts down.  It has to start at a high price.Read more at https://medium.com/@MetronomeToken/what-is-a-descending-price-auction-8c0770bb6a71tl;dr 2 ETH/token is the cap It sounds like there is misunderstanding of Metronome here.Metronome is the opposite of a swap:  There is no asset exchange, thus no exchange rate difference, thus no exchange rate risk or volatility risk.If you swap BTC/ETH, then you risk BTC price changing or ETH price changing.  Volatility risk + exchange rate risk.With Metronome, the MTN asset moves to a new blockchain, but keeps the same asset (and same asset price).Analogy:A1) Metronome is like a gold bar.  Moving Metronome from blockchain ETH to blockchain ETC is like moving a gold bar from one warehouse to another warehouse.  It's still gold, just different warehouse.A2) A swap is like exchanging a gold bar for a silver bar, with guards watching the exchange to be sure it is safe and honest.Swaps are very different from what Metronome does. For the ethereum chain,Every day, 0.25% of the total current ETH balance inside the Proceeds Contract is sent to the Changer, ad infinitum.If the ETH balance is large, 0.25% of a large balance is moved to the Changer.  If the ETH balance is small, 0.25% of a small balance is moved.This process is repeated on every chain (ETC, RSK, QTUM) in parallel, by a parallel set of contracts running on the ETC/RSK/QTUM chains.   The Proceeds contract on the ETC chains holds an ETC balance, and sends ETC from Proceeds to ETC/MTN Changer.The Proceeds contract on the QTUM chains holds a QTUM balance, and sends QTUM from Proceeds to QTUM/MTN Changer.So, 100% of proceeds accumulates in each Proceeds contract, and a small percentage of that new total is moved daily to each Changer contract. Wrong.You and the author are confusing tokens and proceeds.80% of MTN tokens go to community, 20% of MTN tokens go to founders.100% of the ETH in the Metronome raise goes to the community.Read the announcement and Owner's Manual:  https://bitcointalk.org/index.php?topic=2450739.0 Metronome will be deployed to EVM-compatible blockchains.Thus, Metronome on ETH will have ETH/MTN changer, and users participate in the auctions by sending ETH.  The Proceeds contract stores ETH.  Metronome on ETC will have ETC/MTN changer, and users participate in the auctions by sending ETC.  The Proceeds contract stores ETC.RSK, presumably pegged to BTC, would be a way to send "BTC" to Metronome, and the Proceeds contract collects RSK (BTC).So, no conversion.  The blockchain native currency is the one used in the auctions for a given chain. This link includes false statements and analysis.Metronome returns 100% of the invested crypto (ETH etc.) back to the community. It is an update on the recently used Dutch auctions, where the closing price is applied to everybody in the Dutch auction, and settlement occurs after auction closes.  Those auctions price below market, because there are some in a Dutch auction that would have paid more, if given the chance.Metronome's descending price auction is instantly settled, giving everybody access to each price band, to buy (or not) as their market theory and needs dictate.There is the incentive for an auction participant to wait and buy at a lower price, but a counter-incentive to ensure that you receive some tokens versus fewer/none.
We certainly don't intend it to be a "bitcoin killer"...   Metronome requires a blockchain to secure it.P.S. Posted an announcement thread at https://bitcointalk.org/index.php?topic=2450739.0 We are pleased to announce Metronome, a new cryptocurrency with an autonomous global supply and the ability to import/export across blockchains (a blockchain-on-blockchain approach).Metronome attempts to create a stable, predictable money supply ad infinitum, using daily descending price auctions to distribute the token supply at market prices.  Through the Auction contract, an initial 8,000,000 MET are sold in a 7-day initial descending price auction, followed by 2,880 MET per day minted and sold in the daily auctions (through year ~30, where mintage hits a 2%-per-year inflation floor).  We retain an additional 2,000,000 MET for a one-time compensation, 75% of which is locked up for up to 3 years.The ETH (or ETC or QTUM or BTC) received in the daily auctions is stored in a Proceeds contract on the blockchain.  This Proceeds contract acts like a savings account, holding the auction proceeds (token sale proceeds), and then feeds 0.25% of the total Proceeds balance to another contract, the Changer contract.  tl;dr the raise goes to the community long term, zero back to us.The goal is a fair distribution, to the public, at market prices.  There is no pre-sale or special access discount.  All of the "raise" goes back to the community.  Metronome is quite different from any traditional ICO.The Changer contract is an on-chain ETH/MET exchange facility.  The Changer contract holds ETH and MET balances.  It uses a simplified Bancor-style algorithm to behave like both an exchange and a market maker for ETH/MET pair.  Users send ETH, receive MET.  Users send MET, receive ETH.In the context of the Proceeds contract, the changer autonomously receives 0.25% of the Proceeds balance every day, overweighting the ETH side of the ETH/MET trading pair.  This creates an incentive for others to deposit MET and receive ETH, to arbitrage the Changer ETH/MET pair back to market price.  The Proceeds contract causes the Changer to, indirectly, "buy" MET every day, essentially a mechanism of community market liquidity support over many decades.  The Proceeds contract is like a slowly deflating balloon.Users transfer MET tokens between each other via the ERC20 contract, using an ERC20-compatible wallet.  This contract has been enhanced with extensions for ERC223, MassPay (multiple transfers in one transaction, lowering mass-payout fees), and a unique on-blockchain subscription extension.Website: https://www.metronome.ioOwner's Manual: https://github.com/autonomoussoftware/documentation/blob/master/owners_manual/owners_manual.mdHow to purchase:  Send ETH to ETH auction contract, receive MET to an ERC20-compatible wallet.Other resources:FAQ: https://github.com/autonomoussoftware/documentation/blob/master/FAQ.mdArticle: What is a descending price auction?  https://medium.com/@MetronomeToken/what-is-a-descending-price-auction-8c0770bb6a71Update:  The initial public auction is now live!Update:  Source code is available at https://github.com/autonomoussoftware Moved to https://bitcointalk.org/index.php?topic=2450739.0 The libccoin library no longer depends on GLib library.  That dependency has been completely removed. jansson and libevent are both still needed.This is what I have installed on Ubuntu:Code:ii  libevent-2.0-5:amd64                                        2.0.21-stable-1ubuntu1.14.04.1                      amd64        Asynchronous event notification libraryii  libevent-core-2.0-5:amd64                                   2.0.21-stable-1ubuntu1.14.04.1                      amd64        Asynchronous event notification library (core)ii  libevent-dev                                                2.0.21-stable-1ubuntu1.14.04.1                      amd64        Asynchronous event notification library (development files)ii  libevent-extra-2.0-5:amd64                                  2.0.21-stable-1ubuntu1.14.04.1                      amd64        Asynchronous event notification library (extra)ii  libevent-openssl-2.0-5:amd64                                2.0.21-stable-1ubuntu1.14.04.1                      amd64        Asynchronous event notification library (openssl)ii  libevent-pthreads-2.0-5:amd64                               2.0.21-stable-1ubuntu1.14.04.1                      amd64        Asynchronous event notification library (pthreads)ii  libjansson-dev:amd64                                        2.5-2                                               amd64        C library for encoding, decoding and manipulating JSON data (dev)ii  libjansson4:amd64                                           2.5-2                                               amd64        C library for encoding, decoding and manipulating JSON dataNot sure what's the process for OSX - macports? Some minor compile fixes pushed out to git.  Further OSX compile fixes coming soon. Just added a note to the OP.The Bitcoin Core client is faster and more secure and is the preferred option.The torrent will continue to be updated periodically for academic research and development purposes, as some secondary usefulness does remain. More than just basic...Check out DunveganSpace.com for one-page info sheet + 93-page design specification. All lots have been sold. Bitcoin Core now has "bitcoin-tx" which may be used in this manner.  Command line summary:Code:Bitcoin Core bitcoin-tx utility version v0.9.99.0-83f5dafUsage:  bitcoin-tx [options] <hex-tx> [commands]  Update hex-encoded bitcoin transaction  bitcoin-tx [options] -create [commands]   Create hex-encoded bitcoin transactionOptions:  -?                      This help message  -create                 Create new, empty TX.  -json                   Select JSON output  -regtest                Enter regression test mode, which uses a special chain in which blocks can be solved instantly.  -testnet                Use the test networkCommands:  delin=N                Delete input N from TX  delout=N               Delete output N from TX  in=TXID:VOUT           Add input to TX  locktime=N             Set TX lock time to N  nversion=N             Set TX version to N  outaddr=VALUE:ADDRESS  Add address-based output to TX  outscript=VALUE:SCRIPT Add raw script output to TX  sign=SIGHASH-FLAGS     Add zero or more signatures to transaction      This command requires JSON registers:      prevtxs=JSON object      privatekeys=JSON object      See signrawtransaction docs for format of sighash flags, JSON objects.Register Commands:  load=NAME:FILENAME     Load JSON file FILENAME into register NAME  set=NAME:JSON-STRING   Set register NAME to given JSON-STRING Yes. Read the OP and download the torrent. KnCminer blog post: https://www.knccloud.com/blog/archive#he-s-going-to-beam-bitcoin-from-space A satellite receiver.The project specification indicates that the receiver should be made with Common, Off The Shelf (COTS) parts, and may be purchased or built by a skilled hobbyist. Yes.  Ideally blockchain data, plus other useful data, can be transmitted if bandwidth is available.  For example, the next probable goal for transmission would be live bitcoin transaction data.  This enables mining (assuming you have an uplink somewhere), by delivering a "full feed" of bitcoin protocol data.After blocks + TXs, there are plenty of other useful things one can imagine. Fixed.  Thanks for pointing that out.Some things got moved to BitSat.org. FAQs:  How long does a cubesat stay up there?  How long is a single cubesat reachable during an orbit?With COTS parts, operational life is predicted at 2-3 years, possibly years longer. This can be easily gamed by stuffing transactions into the blockchain, shutting out smaller players prematurely. How many satellites depends on funding:4 - a demo, with coverage gaps, high latencies16 - adequate, with some periods/areas of high latency24 - ideal target32 - super duper The satellites can communicate with each other (P2P!).  There will be multiple ground stations in multiple countries around the world.That's all I can release for the moment.  Every landmass except Antarctica should have full coverage. With space, you get much higher latencies than on the ground.To get full coverage over populated areas of Earth, one requires multiple orbital planes, resulting in something like this:
heh, definitely loading the chain prior to launch.  That's part of the pre-flight tests in fact. As revealed at June's Bitcoin Beltway conference, the BitSat satellites will carry the full blockchain, and fully validate every block sent to it.This is in contrast with other systems that simply broadcast a datastream without validation, and therefore require much higher levels of trust than with BitSat. An ad in USA Today's NASA special edition: http://imgur.com/RMdY7EM Currently stuck in ITAR queue, waiting for US State Dept. to clear things which non-US people already known about and have access to... Yes.  Quite serious.Proof-of-Stake has serious problems, that must be mitigated.  Stakeholders in PoS control consensus.  That means they control what transactions may, or may not, be permitted into the chain.  They are the 100% gatekeepers to the chain.If you have a tiny initial distribution -- just 8 people holding 40% of a certain coin for example, just 64 people getting the rest -- then the central bankers are in place, for life.  It is screwed from the start (unless, against their economic interests, the major stakeholders divest their stakes "fairly").Proof-Of-Stake is fundamentally not permissionless.  In contrast, building a mining ASIC might be expensive, but it is doable to anyone in the world with a computer engineering background, and some money.  You don't need permission from existing bitcoin holders, to make more bitcoin. Yes.  As I said,It is important for the community to demand this of themselves.  The community must get into the habit of rigourously checking each release.  "Anyone can check for themselves" is not sufficient, because in practice, people are lazy and do not check before 10000x users have downloaded and run the new release.  Cross-check before massive download.  Anyone in the community can do this.  You do not have to be a developer.  The critical point is establish the habit, the process of protecting users with a cross-check prior to general release.If you rely on after-the-fact checking, the release manager (NXT's Jean Luc?) could be infected with malware and be producing an infected jar.  Many users would be impacted, before the problem is noticed.Set up processes to protect users.Quite true on both points.That's why the community must have a quick cross-check of the release manager's output before opening up to large numbers of downloads (and potentially infecting large numbers of users).The software protects Real Money, people.  It must be held to strict security and accountability standards.  For any project, bitcoin, NXT or anything crypto-finance, you must be able to (a) prove the developers are not backdoor'ing you, by reviewing source code + checking build output, and (b) fire the developers (by forking) if they add something unexpected that the user base dislikes.Reading "I trust JLP!" posts on the NXT forum just makes for one big facepalm.  The processes should be in place so that the community doesn't have to trust. To repeat for the cheap seats:  Wrong.  This is irrelevant, because the majority of users do not do this.  The majority of users just run the pre-built jar (which is what the NXT readme instructs them to do anyway).A reproducible build process is helpful because...And on to,Closed dev process.  As I noted the source code snapshot is published, but not live commits and open feedback/criticism like normal open source projects.  NXT is ivory tower.Apparently the project has bounced between open and closed source at least once. Why?  Because there are plenty of red flags.It is marketed like a scammy penny stock.Anon early super large stakeholders + Proof-Of-Stake == the big guys run the table, if they choose. https://download.wpsoftware.net/bitcoin/pos.pdf  The central bankers are in place from Day One unless they are super-virtuous and give tons away "fairly."Anon devsClosed dev process.  Source is periodically handed down from the ivory tower to the masses.Certain notable personages (& key stakeholders) that dodge, dodge, dodge, when an obvious attack vector -- mitigated in other crypto-finance projects by known techniques -- is highlighted.Active resistance to making it easier to independently reproduce the softwareTechnical criticism is routinely met with bizarre behavior (notably from come-from-beyond)Attacking critics, rather than responding to criticism.Several security incidents that smell like inside jobs.This is not something in the past 48 hours, but for the lifetime of the project.Bitcoin has large stakeholders and large miners, sure, but the two sets are different.  This separation ensures an easier flow of stakeholders and miners in and out of the system, and serves as a bit of check-and-balance between the two groups.Proof-of-Stake makes it easier to establish a system where early guys control the system, for life.  I'm not saying that is always the case with PoS; that's just how pure-PoS systems can shake out in the field.  Thus, it is easier for PoS to be "gamed" by insiders.  This is inherently, logically true because there are no externalities (electricity, heat) that serve as friction in the process.In a perfect pure ideal honest world, NXT should reset the chain and develop fully in the open, with provable builds and a better early stake allocation that pays attention to the Central Banker Controls The Timeline Problem.  More honest projects these days run a test chain for months, and then launch once most problems are hammered out, and constructive criticism from the tech community has been incorporated.I do think PoS has a place in this world... a mixed PoW & PoS system is very interesting.  PoS alone presents a completely enclosed system, where stakeholders are far too integral to the core process of choosing which transactions are to be accepted into the chain.Remember (from your bitcoin mining classes if nothing else), those who choose what goes into the chain also choose what stays out (censor).  He who controls the timeline controls the universe, to paraphrase Dune. What is necessary, for NXT or any other crypto-finance software, is to prove independent reproducibility.The next step is to proactively have developers and community members cross-check each other, to make sure the build produced is the same for all.This helps ensure that the release manager is not under duress, unknowingly infected with malware, or corrupt.  No security solution is perfect, but it raises the bar significantly when multiple parties verify the build.You should never trust just one person to produce release binaries, in any crypto-finance project.  That's called a Single Point of Failure, and it is easy to attack such a narrow victim vector. Simplified example:Step 1: Similar to the blockchain, git records the hash of the latest commit... and a commit includes the hash(es) of previous commits.  That creates a chain of hashes for the source code.Step 2: Given the git commit id (a hash), obtain a source code tree.Step 3: Compile the source code, resulting in one or more binaries (bytecode output, in Java's case).Step 4: Hash the binariesStep 5: Post a PGP-signed message containing the hash from step #4.Just like in biology or chemistry, it is critical that the above process is independently reproducible and yields the same result every time.If multiple developers perform these steps, and all result in the same hashes in step #4, then you eliminate a Man-In-The-Middle attack where an evil developer or evil malware may insert a backdoor not present in the source code, but present in the binaries that users download and trust with real money.Finally, at any time, any outside developer may independently reproduce this process, proving that the dev team is not inserting backdoors etc.Deterministic builds are critical for any software you trust with money.This is how Bitcoin Core handles every release.  Multiple developers must achieve the same compiled result, or no release happens.  We use https://gitian.org/ to assist with this. Point missed completely.The vast majority of users simply download and run code.  They do not compile it.  A deterministic build process enables any random outsider, at any time, to prove that the given source code compiles to binary (or byte) code that matches exactly, byte-for-byte with what is produced by the official release team."Anyone can compile" is irrelevant.  What is relevant is that you can prove the release team binaries match the source code exactly.An attacker may otherwise stuff a backdoor into the bytecode, but not the source code.  "Anyone can compile it" developers would never notice the backdoor... yet 99% of the users still have the backdoor.Furthermore, you want a process like bitcoin's where multiple developers each produce a build, and PGP-sign the produced hashes.  In this way, you need not worry about a backdoor'd compiler producing evil bytecode without the developer's knowledge. No.  Those hashes prove nothing.A deterministic build process enables multiple independent parties to generate the exact same output, given a git commit id.If you cannot prove what's in users hands is exactly what came out from the java->bytecode compiler, then you should not use that binary. Plenty of people mention this.The "headers-first" feature, hopefully in 0.10, fixes this issue.  With headers-first, the client will import much faster than torrent + import. Utterly useless exercise, without hash proof.Guess what?  It was a question.It is notable when asking questions leading to paranoia and accusations rather than specific answers. Byzantine threat modeling.When creating a high level design, you must follow each data source to its provider, and consider how these data sources may be manipulated, to fool victims into seeing what the attacker wishes the victim to see. I want to link my Bitcointalk name with BTCJam's. Verification code: 8d45da82-fe5e-4218-9878-63b7d72666c1Always fun playing with a new service  Can you be more specific?  Which link is incorrect? Not sure I understand the comment.The lots are priced in USD.  The bitcoin price for the lots therefore continues to fall, which benefits the buyer without causing any bitcoin-related loss for the seller.The USD price was reduced, but that has nothing to do with "Bitcoinland."  The OTP for Lot #11 that fell through was a local (USD)  buyer totally unaware of bitcoin's existence.  Lot #5 was sold to a local buyer. Bump.  Lot #11 contract fell through (buyer couldn't get money together), so it is back on the market.Price reduced! Thanks for double-checking my work!
Note:  For a minority of users, the bootstrap.dat "one huge 20GB file" import method does not work beyond 4GB of data.  This is due to some limitations with large files on some 32-bit operating systems.  It is planned to move away from a single bootstrap.dat file to a directory full of blkNNNNN.dat files that may be imported directly into bitcoind via "-reindex".  The bootstrap.dat file also causes a 2x disk space increase over the "-reindex" method, which occasionally triggers complaints from users on low disk space cloud servers.For these reasons, bootstrap.dat import method is being deprecated (at least with regards to this torrent).  Today's torrent update will be the last bootstrap.dat torrent.Future torrents will include the block chain split into multiple files, never exceeding 1GB in size. Torrent officially updated!  See OP.  New height:  317,000 @ 22.5 GB bootstrap.dat contains all blocks.  See this thread to describe how to torrent and use it: https://bitcointalk.org/index.php?topic=145386.0 Just held an 8-hour Preliminary Design Review (PDR) with Deep Space Industries, covering all major subsystems, ground station details, power/link/etc. budgets.Lots going on behind the scenes, as this contract with Deep Space Industries proceeds. I don't pretend to be a tracker expert, and actively solicit suggestions.I would certainly bias towards less politicized + more reliable trackers.Please post your tracker suggestions. Beta-testing and pre-seeding a new torrent at http://gtf.org/garzik/bitcoin/bootstrap.dat.torrentPlease only join if you already have an old bootstrap.dat file, or you built the new one yourself using linearize.py and bitcoind.Code:magnet link:magnet:?xt=urn:btih:682759b001fac5d3b0d8517d2a179af2e65ebed6&dn=bootstrap.dat&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&tr=udp%3A%2F%2Ftracker.publicbt.com%3A80&tr=udp%3A%2F%2Ftracker.ccc.de%3A80&tr=udp%3A%2F%2Ftracker.istole.it%3A80 There's no two-way pegging, which increases complexity.It gives what a sidechain needs at a minimum:  Regularized block production, consensus on SidechainCoin's transaction timeline. Here's one side chain design that requires zero changes to bitcoin, and zero external parties such as oracles:1. Put a block header for your side chain into an OP_RETURN output.2. Core consensus rule:  Only one sidechain block header per bitcoin block.  If multiple sidechain TXs exist in a single bitcoin block, the winner is chosen based on highest transaction fees.For any bitcoin miner, the transaction fee is returned to yourself, making it a very low cost proposition to mine this side chain.  Akin to merge mining, adding such side chains should be cheap and easy.If you are not a bitcoin miner, mining involves competing with random other parties to see who will burn the most money.  A decidedly non-optimal scenario, particularly if bootstrapping without miners initially.  But it does produce an easily provable consensus, and it could be mitigated with further rules (complexity++).Obviously, this is very miner centric.This is not as efficient as some scheme to stuff N chains into a merge-mined merkle root in the coinbase.  It is also not a complete solution for the folks who want confirmations faster than once-per-bitcoin-block.It does work within the current bitcoin ecosystem with zero changes, and at very low cost to existing miners.  Possibly lower setup & maintenance cost than some merged mining setups.  "Permission-less innovation"  It could be deployed today. It has taken a bit longer to put together the project update, but many things are happening behind the scenes.We continue to have regular design meetings with Deep Space Industries, designing the cubesat spacecraft and constellation.Big update coming at the Bitcoin in the Beltway conference on Sunday. Donations are being accepted right now: https://blockchain.info/address/1M9MyyPsAak7zRjW4D96pTxDaAEpDDZLR7Forum thread: https://bitcointalk.org/index.php?topic=334701.0Major update and website revamp coming this week! Thinking that there must be only One Blessed P2Pool Chain is linear thinking. There is gettxout, which could be expanded if it's missing some info.  I doubt you will see a dump1gigabytedataset RPC added, though.   Commonly proposed as a solution, to be specific. Yes, the WoT is a common solution.  In order to scale well, WoT usually requires one or several centralizing entities that act as large signature hubs.And even so, you still need a useful rendezvous mechanism. Tangible progress is being made.Disable-wallet support is rolled out in 0.9.  This is the first step towards a public daemon being a separate process from the wallet.  This mode permits disabling of wallet at compile time (no BDB or wallet code) or runtime.Headers-first sync is the next step.  This will enable a faster, more secure chain sync... and also enable a further wallet split.At that point, the wallet may run as a separate client, talking to the public blockchain engine. Fundamentally, two big problems to solve are rendezvous and communication, both user/agent and agent/agent.  BitMessage attempts to solve these problems, but BitMessage has its own scaling and other code problems.Users need to be able to find agents (oracles) in a vendor-neutral, open market manner, where one vendor may not DoS other vendors off the market.  (vendor == agent's owner/operator)And agents need to communicate with other agents in the market.Once we have a good, decentralized chat room for market players to congregate and communicate, it is trivial to implement M-of-N oracles. It would take several days of work, but it's not complicated.  Basically, as you probably have guessed, P2Pool chain is simply another chain to manage. This fulfills the bounty conditions IMO. It is more a question of whether or not a platform is heavyweight enough to support a full node.At first blush, you need enough data storage to store the entire blockchain (though perhaps mount over NFS), enough CPU to verify incoming data, and enough bandwidth to send and receive data. blkdb is required and is always used.  It is the block header database.  It is kept in RAM, as bitcoind does.  It is optionally stored in a file, in addition to RAM.  It is optionally regenerated from the 17+GB blockchain file, if blkdb is missing.
You will need some sort of satellite receiver.  The exact specifications are being hammered out right now.At worst, you will need some sort of dish + equipment.  At best, you will need a simple radio attached via USB dongle.Read the system specification PDFs on http://www.dunveganspace.com/goals/bitsat The BitSat project would like to thank Mohit Kalra for a 2 BTC donation, plus discussions of additional funding.  Mohit is a bitcoin enthusiast and angel investor.  Mohit currently runs a Zip Fastener Manufacturing Unit in New Delhi , India, and also a medium sized Data Centre.  Mohit has been investing in Bitcoin Businesses for over a year now.The BitSat project would also like to thank an unknown party for donating 1 BTC.Project update #2 coming very soon. Expect an extensive project update in the next day or two. The news is out!  http://www.prlog.org/12313639-bitcoins-in-space-one-step-closer.htmlAs you can see from watching the donation address on blockchain.info, we have already made the first $16k contract payment (as well as a 1 BTC payment to Corgan Labs). Because of stupid node selection, it takes a while to cycle through dead addresses passed to your node from other nodes.  You can use addnode etc. hehe, good!  The idea is to get many long-term seeders.  If we have enough, most downloaders will see an immediate, fast download.  The torrent remains idle the rest of the time. It is preferable to run a full node.The torrent is a workaround until "headers first sync" is implemented, at which point, it will be faster to download from the P2P network.Today, the torrent makes some client syncs faster, and also lessens the load on the P2P network.  It is more useful for the P2P network to be used for distributing recent information. The new torrent is now ready for public release.Read the updated OP, and seed away!Remember to reuse your old bootstrap.dat, which will start the new torrent at 81% (14G) of the new 17G torrent. The link in the OP is working: Calling for pre-seeding of the new bootstrap.dat torrent: http://gtf.org/garzik/bitcoin/bootstrap.dat.torrentThe old 14G bootstrap.dat is 81% of the new 17G one, so remember not to erase the old file. Thanks for pointing out several locations incompatible with older GLib versions.In general, #ifdefs directly placed in the library code are to be avoided.  The pattern to follow is updating compat.h withCode:#if VERSION < X  provide wrapper or full implementation of missing function#endifIf there is a missing function, add the function to compat.h, inside a version check. Lot #5 is under contract (alas, not for bitcoin).Lot #11 is still available. I always figured thatAgents would act as competitive peers in a market.User software would communicate with multiple agents, and replicate accordingly.Of course it need not be this way.RE chains:  A chain produces a time-ordered sequence of events.  That's not storage and typically you don't need to store actual data in a chain, even if you do need time ordering.  You just store a hash, then the data may be stored and proven as needed in any fashion.  One might imagine software and agents competing to determine the best replication methods at the lowest cost. Like I noted in private email, I like this project and hope it succeeds...  but calling it "Storj" just generates confusion whenever it differs from the original gmaxwell design.You really want your own project name, and just give a shout-out to the project genesis:  "Automaton, inspired by StorJ" Exciting new news coming mid-April. This is a minimally working prototype of a payment channel client and server, based on the bitcore JS library:     https://github.com/jgarzik/mcpIt implements the protocol described at https://en.bitcoin.it/wiki/Contracts#Example_7:_Rapidly-adjusted_.28micro.29payments_to_a_pre-determined_partyTo review, Mike Hearn did an implementation for bitcoinj a while ago: http://code.google.com/p/bitcoinj/wiki/WorkingWithMicropayments(though note payments do not necessarily have to be "micro") Diagnosis:  Typically a system either (a) needs compat.h help due to older GLib, or (b) does not need such help.  All systems should be either "a" or "b".  Your system configured as both "a" and "b".The most likely fix is to make sure you have GLib > 2.30, properly installed with pkg-config support.Alternately, you may try manually editing compat.h to comment out the offending lines, and see if that works for you.Code:#if ((GLIB_MAJOR_VERSION == 2) && (GLIB_MINOR_VERSION < 30))...#endif /* GLIB_VERSION < 2.30 */ Yes.  bitcoin.org will be the new official site.  It was "soft launched" (without announcement) as I was travelling and did not have time to adequately test, and then make updates.It is also about time to roll another torrent.I've also been considering adding a second torrent, which contains blocks/blk*.dat as you might find created by Bitcoin Core.  New installations could download this blk*.dat torrent, restart with "-reindex" option.  This will perform a zero-trust revalidation of all data, while eliminating the redundant copy of the bitcoin data (vs. bootstrap.dat). You can play around with mining $$$ numbers here: https://tradeblock.com/mining/ So...  an engineering flaw that impacts everyone in bitcoin -- not just counterparty -- is exposed on this thread.The response...  add an even worse method for storing data?This is childish, not professional.
No, it's not, it's a silly point.Bitcoin includes transactions because it validates the data inside them.Bitcoin clearly does not validate Counterparty data.  I am free to include Counterparty data in my own transactions at any time.  I am free to spend Counterparty coins to myself at any time, etc.  Bitcoin doesn't care.The level of validation performed by the bitcoin network is the same, whether full counterparty data or a simple hash is in the blockchain. Bump. Agree that is incredibly expensive -- and it's also probably accurate for X-day shipping from Israel to N.A.For perspective, it cost me over $800 to ship two Avalon miners from Atlanta, GA to Portland, OR, via UPS 2-day air.Fuel and other surcharges really make shipping heavy stuff like miners insanely expensive these days. My demo SP10 Dawson was switched from "silent" to "normal" mode.New numbers @ 110V:  1395 Watts, 11.56 Amps, 1461.15 GH/sAmusingly, the noise level did not change much. Yeah, it is pretty darn loud, even in silent mode It produces more noise in silent mode than my hashfast, knc, avalon and bfl miners. My SP10 Dawson demo miner just arrived.  Will blog and post photos and screenshots tomorrow or so.Due to power limitations at my personal residence, the miner is running in "silent" mode, reducing power usage and hash performance.On my US 110V 20A circuit, I see 1165 Watts, 9.7 Amps, 1368.225 Gh/s in silent mode.Watts/Amps numbers produced via Kill-A-Watt. If you don't mind C (versus C++), picocoin's "blkstats" utility parses the blockchain in under 3 minutes.https://github.com/jgarzik/picocoin/blob/master/src/blkstats.chttps://bitcointalk.org/index.php?topic=128055.0https://github.com/jgarzik/picocoin/ Do not paint all criticism with a broad brush. Not all critics have the same experience or point of view.I was the original author of the 80-byte OP_RETURN: https://github.com/bitcoin/bitcoin/pull/2738I have been working in this space for years, and have already created in-blockchain software, and directly observed problems in the field from in-chain solutions, years ago. See https://github.com/jgarzik/pybond and https://github.com/jgarzik/smartcoin.The Bitcoin Improvement Proposal process has also been around for years, and new proposals are added frequently: https://en.bitcoin.it/wiki/Bitcoin_Improvement_ProposalsIt is not my job to hold everyone's hand, be your nanny, and fix everybody's software.  If you like decentralized development, you should know that.There is a demonstrable engineering flaw.  CheckMultiSig() is built for ECDSA public keys.  Counterparty is not storing ECDSA public keys there.  When you use a system outside its design specifications, there are bound to be negative side effects.From this we may conclude, contra to the hyperventilating on this thread,I'm a supporter of 80-byte OP_RETURN -- I wrote the damn thingI'm well versed in in-chain data projects -- I wrote some myselfCounterparty went outside the bitcoin design specification in their use of CheckMultiSigThis feature may be going away anyway, for other reasonsPlenty of innovation is going on in the bitcoin space.  It is not "censorship" to point out all the parties who are innovating, while managing to not exploit bitcoin design quirksTo repeat (admittedly it is getting tiresome), do not paint all criticism with a broad brush, and not all critics have the same experience or point of view. It is abusing a bitcoin feature in an unintended, unaccepted way that obviously impacts the network to its detriment. Yep, looking forward to it. Just pushed out a commit that implements this. The definition of a miner is someone who collects bitcoin transactions into a block, and attempts to produce a nonce value that seals the block into the blockchain.According to BFL_Josh's off-the-cuff estimate, we have about 12 miners in bitcoin. Sounds like you want something like the open source Insight: http://insight.bitcore.io/ What pool do you run?I'm talking about miners -- the people who collect transactions into a block -- not the people who contribute computing services to a mining pool, yet have zero impact over how the network is run. Incorrect.  Re-read the quoted bullet point #1.  Additionally, one post in this thread contained a sentence listing 4+ specific technical solutions.But I shouldn't have to spoon-feed solutions, to get someone else to fix their system.Engage the community and miners, listen to feedback and Counterparty can get what it wants.  There is plenty of innovation going on right now in the bitcoin space and it is ludicrous to suggest otherwise.  The bitcoin protocol is easily extensible.  You do not have to abuse a feature meant for ECDSA public keys to do what needs to be done. Re-read the quoted post...  "Right, the exchange rate between domains and bitcoins would float. ... A longer interval than 10 minutes would be appropriate for BitDNS."That implies a separate chain, a la namecoin, because "longer..than 10 minutes" would be a hard-fork protocol change for bitcoin.  And then of course"It will be much easier if you can freely use all the space you need without worrying about paying fees for expensive space in Bitcoin's chain"Which is clearly referring to using space not in Bitcoin's chain. Few (I didn't say none) of those arguments pass the smell test.OP_RETURN and 40 vs 80 bytes:  If the miners agree with you, you don't have to care what the network relays.  Has Counterparty directly approached miners, to get them to mine 80-byte OP_RETURN transactions?  What was the response?  If the miners agree, great, let's do it.  If the miners don't agree, there is no point supporting it in Bitcoin Core software."core devs are censoring and killing innovation!"   Counterparty is very clearly misusing a feature intended for ECDSA public keys, in a manner that very clearly results in harm to the overall network, short and long term.  Other people/companies/projects are extending the bitcoin protocol and not meeting the same resistance.To repeat earlier posts, my criticism is  not about counterparty in general, just this ONE CheckMultiSig flaw.  Fix that, and my criticism is gone.As Peter Todd has noted, CheckMultiSig has other problems also.  It may go away regardless.Please do not paint all Counterparty criticism with a broad brush.  My opinions are my own, and in particular I do not agree with all of Luke-Jr's points or point of view.There are plenty of ways to innovate and extend the bitcoin protocol.  People are doing this every day.It is always a mistake to base an entire engineering system on a subtle technical quirk that "just happens to work."  Counterparty is stuffing its own data where ECDSA public key data is supposed to go.  That is clearly not the intended use. It's a good start.  The main bug there is that 'pubkeys' is plural.  You have to parse multiple entities out of the script to match a single "OP_PUBKEYS"  That requires a bit more reworking of the script parser, which fundamentally assumes there is a 1:1 ratio between opcodes and script data items.  With "OP_PUBKEYS", that assumption fails.(I was looking at this last night ) Added two new utilities, "txmod" and "blkstats"Added some P2SH scripting ability, also. Nobody is "killing innovation."  There is plenty of room to extend bitcoin's protocol, if that is what people want to do.There is just one particular method, CheckMultiSig, that has multiple disadvantages.
CheckMultiSig is quite clearly intended for ECDSA public keys, not arbitrary data.  It should be no surprise that using an operation for something other than its intended purpose has negative, perhaps unintended or unknown consequences.  Counterparty transactions are not "according to the bitcoin protocol", they slip through because it never expected that the feature be used in that way."It works by accident" or "it works because it is difficult to prevent" does not imply good design or the right way of doing things.No.  It is quite easy to extend the bitcoin protocol.  It has been done many times.  See the BIP process.  The community agrees and the protocol is updated.But that was apparently not the path chosen...  counterparty clearly uses a feature (CheckMultiSig) in a fashion for which software was not designed.  It is silly to pretend that full nodes "consented" to an unintended use. No, it is a lack of understanding how bitcoin works.  Peter Todd's proposal suggests not relaying bare multisig transactions, and I wrote the code to do that:  https://github.com/jgarzik/bitcoin/tree/bare-multisig"Non-standard" means "most nodes probably won't relay your transaction" but nothing more than that.  No protocol change or fork.  Miners are free to continue to put such transactions in blocks, assuming that they receive the transactions somehow. False. There is no protocol change being proposed. P2SH multisig can replace bare multisig, by moving the data stored in outputs to the inputs.This also avoids bloating the UTXO database, the key database that is queried multiple times per second by all full nodes on the network.Solutions have existed for years.  UTXO database is not the place for data storage.  It impacts everyone, network-wide.  It impacts the real-time performance of the network. Think about it.  Mastercoin is a competitor to Counterparty.  Mastercoin is already aware of, and working on solving this storage-in-multisig problem.Peter Todd's proposal simultaneously (a) benefits Mastercoin, (b) disadvantages Counterparty, and (c) presents a proposal that portions of the developer and mining community already find agreeable.Edit: retracted, based on Peter's recent posting. From the perspective of counterparty and the overall bitcoin community,The criticism is not against counterparty, but just One Flaw in the systemThere was zero consultation on the design with the wider community before the "on" switch was flippedThis flaw --network-critical database used for raw data storage-- was well known before Counterparty began life. You could have avoided this problem with communication.Existing designs are known to be less abusive to the network, and do not store data in that key database It is perfectly possible to run counterparty without this flaw. A less abusive way was already provided.With OP_RETURN, the data is still in the blockchain, but at least it is not in the UTXO database of unspent outputs like Generation-1 mastercoin/counterparty designs. No, it is trivial to block 100% of them.  A proposal to do just that appeared on the bitcoin-development mailing list yesterday from Peter Todd.  This proposed change would relay zero transactions with multisig outputs.Most of the world is moving to P2SH for multisig, leaving the remaining "bare multisig" users mastercoin, counterparty, etc. It is called a free ride.  Given that the overwhelming majority -- >90% -- application for the bitcoin blockchain is currency use, using full nodes as dumb data storage terminals is simply abusing an all-volunteer network resource.  The network replicates transaction data, so why not come along for a free ride?Rather than engage the existing community, mastercoin and counterparty simply flipped an "on" switch and started using bitcoin P2P nodes as unwanted data stores.  An unspent transaction output was never meant to be used as arbitrary data storage.  The fact that it can be abused as such does not make it right, or remotely efficient, or the best solution.The UTXO (unspent transaction output) database is the entire network's fast access database.  Every single node needs that database to be as small as possible, for best processing of network transactions.  Encoding arbitrary data into unspent outputs is network-wide abuse, plain and simple.  The entire network bears the cost. The rough standard is an update every 3 months or so, out of an over-abundance of caution. All bitcoin versions recognize any valid block.  If you build your own bootstrap.dat, it can go beyond 279000 blocks, yes. To date, I've not seen a blockchain data dumping scheme that could not be securely replaced with a simple hash.You don't need to store data in the blockchain.  That is purely intellectual laziness.  Timestamping hash(data) is just as secure, while more efficient.Furthermore, a secondary chain can be provably pegged to bitcoin: http://sourceforge.net/p/bitcoin/mailman/message/32108143/ Here is a quick overview of the release: http://garzikrants.blogspot.com/2014/03/bitcore-core-v090-release-overview.html Yes, "moar please"!  Seeding is very helpful on release day, of all days. For new users downloading the chain for the first time...Please torrent the chain. A note on OP_RETURN and data storage in the block chain was added to the release notes:https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.9.0.md It's not built and multi-verified yet.  You are just seeing a release tag.The release announcement will be posted after binaries are built by multiple parties (gitian), cross-verified, and tested. It seems like pasting from the OP confuses PGP. If you need to send from a specific output, easiest to use coin control or raw transaction API. This is a longstanding problem with bitcoin -- transactions hang out in limbo until confirmed, possibly forever.And just as longstanding is my proposal to fix it -- expire transactions out of the memory pool after 1-2 days.  Clients are built to resend.  They may choose to not resend at that point.There is now a pull req that accomplishes this: https://github.com/bitcoin/bitcoin/pull/3753
This is a premature posting, with an incomplete set of release notes. Here's an ad from the local paper: http://www.newsobserver.com/adperfect/ad/2524133 Correct, geostationary tends to be considerably more expensive. Big project update:Project update #1 (PDF): http://www.dunveganspace.com/goals/bitsat/BitSatUpdate1.pdfThe beginnings of the technical specifications needed for satellite uplink and downlink,BitSat architecture, v0.1 (PDF): http://www.dunveganspace.com/goals/bitsat/BitSatArchitecture-0.1.pdfFiles posted on http://www.dunveganspace.com/goals/bitsat Added pictures, GPS/map address and utilities information to OP. All prices reduced, by several thousand dollars.  See OP (quoted).$68k= $42k= $30k=  Something's brewing: http://www.dunveganspace.com/goals/bitsatShould have something available late tonight or early tomorrow. Bump...  Currently under 75 BTC for both lots.It is zoned residential, yes.The property is "out in the county"   There are many houses nearby, but it is not in a neighborhood with one house right next to another.  All the lots in this area are large, so houses tend to be over 200' apart from each other.  Some homes are manufactured homes (mobile homes), rather than site-built single-family homes.I was planning to build one house on each lot, before I had to move away. It's up and running on my Eligius account.  400-420 GH/s. https://twitter.com/jgarzik/status/426483292905291777 https://twitter.com/jgarzik/status/426483292905291777 There are possible attacks on testnet difficulty.  The resolution is the same:  if it becomes unusable, reset the genesis block, and start testnet4.Part of the "testnet contract" is that it may be reset. pushpool cannot keep up with the bitcoin main network anymore, so it is not really being maintained. Updated OP to use a code block, and also posted the original GPG-signed msg at http://gtf.org/garzik/bitcoin/torrent-msg.txtLet me know if sigs still fail. Suggestions for better trackers are always welcome.  Trackers appear and disappear, and I'm certainly not an expert on picking them.Ideally we would use trackerless torrents (pure DHT), but that early experiment ended in failure. Minor update for a script parsing bug pushed to git. Somewhat related:  The bitcoin blockchain torrent was just updated: https://bitcointalk.org/index.php?topic=145386.0New users may find that valuable. Updated the torrent to block 279,000.  See top post.  Please start seeding the new one!For existing seeders, just swap out your .torrent file with the new one, and you will resume at ~70% completion.http://sourceforge.net/projects/bitcoin/files/Bitcoin/blockchain/bootstrap.dat.torrent/download No recent progress, but any and all pull requests will be reviewed, tested and merged with lightning speed  Finally?  This ground has been covered before.
Ugh.  No.  That will simply bloat one of the network's key resources for all time.See announce/commit sacrifices and other tools. The latest torrent file is always available at http://sourceforge.net/projects/bitcoin/files/Bitcoin/blockchain/We don't want to run a tracker ourselves..  that introduces a centralize, single point of failure. You're more than welcome to!  PM me for address.If you can find a group leader who organizes the group buy, sure.  I need one payment, the standard for real estate transactions.  What your group does with the lots after that is up to you. Headline: Crazy Hacker Wants to Save Bitcoin by Blasting a CubeSat into SpaceURL: http://gizmodo.com/crazy-hacker-wants-to-save-bitcoin-by-blasting-a-cubesa-1487464486# More coverage: http://gizmodo.com/crazy-hacker-wants-to-save-bitcoin-by-blasting-a-cubesa-1487464486# Check out Zero Knowledge Proofs and trusted computing. Which 64 bit OS?64-bit executables are available for OSX and Linux.  Windows is coming soon. More coverage: http://www.wired.com/wiredenterprise/2013/12/bitcoin_space/ URL: http://www.wired.com/wiredenterprise/2013/12/bitcoin_space/ Bitcoin is only zero trust, if you can verify the entire transaction history. A simple minimum payout does not avoid the problem of receiving dust. Only a fool, or a day trader, keeps anything of value on a centralized website like a bitcoin exchange. coinbase payouts do not matter to me...  I would rather have regular-sized payouts that reduce dust in the wallet (more friendly to the network).i.e. payout at 0.1 BTC threshold.Any chance of having that option?Implementing that would have the side effect of not needing to put a set of addresses in the coinbase. Thanks to Roger Ver / Bitcoinstore for another generous donation. URL: http://spectrum.ieee.org/computing/networks/bitcoins-in-space Sadly, satellite bandwidth is really limited.  Also, if this is to be any sort of fallback mechanism, the ability to transmit to the satellite must be limited and trusted.  Otherwise people will just DDoS the satellite right along with DDoS'ing the mesh network.The ability to receive from the satellite, on the other hand, should be free for the whole world.P.S.  Thanks to Rusty and Erik Voorhees for their support! Definitely looking for feedback -- good or bad -- from OSX users in particular.  You may have to -reindex to fix the prior corruption issues that impacted earlier versions.For anyone downloading a fresh copy of the blockchain from scratch, please consider downloading the Bitcoin blockchain torrent. Same answer as with the investment question early in this thread.  KickStarter is too much work at this stage.  KickStarter also potentially introduces problems with setting expectations.  Phase 1 -- the boring design work -- does not cost very much, and would not be worth a KickStarter.  KickStarter for Phase 2 -- building and launching space hardware -- is very exciting, but it is premature to KickStart that right now, in my opinion.Phase 1 is all about designing a usable foundation.  If you can afford it, donate 1-10 BTC, and email me so that I may credit your sponsorship.The current team will be kept small, under 4 engineers or so.Layers of management, investors, incorporations, and KickStarters are just not necessary this early, and would simply slow down the process. CoinDesk covers: http://www.coindesk.com/core-developer-bitcoin-node-space/ Yep.  The general idea is that you group your own cubesat together with dozens of others, on the same flight, sharing costs.  SpaceX helps push those costs down even lower.
That is a really fun idea, but it would require a lot of power in a low-power situation.Let's hope the price of plutonium power sources comes down.  Otherwise, solar power is most likely. Multiple ground stations are pretty much a given.  It is likely we will interact with a larger number of third party ground stations, rather than only run a few ground stations 100% ourselves.A ground station can be pretty cheap.  A ground station can be as simple as a small satellite dish on top of a building, plus a controlling computer.Frequency selection will be one of the biggest decisions.  That will trickle down to the ground stations (transmitters), users (receivers), governmental approvals, and other areas. linearize was moved to      https://github.com/bitcoin/bitcoin/tree/master/contrib/linearize As much as possible will be open source and open hardware.However, sometimes you have to choose between space-ready hardware for $, or developing your own open hardware for $$$$ + time. Fantasy.  Nobody donates, much less large sums.  This is a cute delusion.While working as a volunteer core dev for years, I received a whopping...  ~30 BTC in donations.  https://blockchain.info/address/1BrufViLKnSWtuWGkryPsKsxonV2NQ7Tcj  The vast majority of that prior to 2013, leaving the monetary total well under $500 for years worth of work.Donating will not bring down blockchain size.  Technically infeasible, even if donations work.  Which they don't. Stalled, though I am aware of at least two people working on embedded projects based on libccoin.This Christmas I'm hoping to finish the client.Seems worth checking out.  Most key/value databases cannot scale to the millions of records and data access patterns that bitcoin requires, so it requires careful evaluation. This thread, for the moment.  A website should be up soon. Well, 27 BTC will get you one of the lots, at current prices...  During one of the meetings on this project, I learned that the ISS' Japanese module has a cubesat launcher... Very pleased to announce a generous 25 BTC donation from BitcoinGrant.org, worth $27,000 as of this writing.Updates will be posted to this thread (and eventually a website), once the aerospace engineers are fully contracted and engaged.The meetings so far with engineers have been quite positive.  If the project proceeds as a non-profit, it is possible that amateur radio frequencies may be used for transmission, as another poster mentions upthread. It is a natural consequence of the relay-everything design. Lining up a few aerospace engineers for Phase 1.There is now a donation address set up for this project, and am currently hoping to raise $10-20k for Phase 1.       1M9MyyPsAak7zRjW4D96pTxDaAEpDDZLR7Or contact me privately if you want a one-time-use donation address, or if you want to be identified on the list of donors as someone other than "anonymous donor".  Wallet funds for this project are stored and securely separately from my personal funds, for the record.  This is a donation, not an investment.Rough cost estimates of a single cubesat:1x Cubesat hardware and construction: $60-100kLaunch: $1mMiscellaneous: $900k (ground station uses, licensing, insurance, other details)-----BEGIN PGP SIGNED MESSAGE-----Hash: SHA1Bitcoins space project donation address is     1M9MyyPsAak7zRjW4D96pTxDaAEpDDZLR7-----BEGIN PGP SIGNATURE-----Version: GnuPG v1.4.12 (GNU/Linux)iQIVAwUBUpTV7yWzCDIBeCsvAQLnTRAA2F22DaQuDtMkiOpJzg9diPM+Dbv93iwTHGiyb4VmNoIsLt3IkimatfqMqXbyHXMS+QnFNK929EZORDBjU9hstV8Px68V4JIUskaexDiODpflq0R7h9ydAfPMgkUaomZlqgXl7JYUL/TeDwdKBL7/dadvC7kP6JGLpRM+HT67qEvkjSre/QFNPnrMAx7lG+wABwohj9xtO7EFxQjeGU6NNMWm3Q8mBhl9GvwmSmic7ceZEKK137is11zFfkSv4Huh0D8hoJG8NEcsvNZNm3ltlz+SKsUcrx+Qu+Wx2ajZoeHwobaya3oWKsHQqY+fyhT8y8WIMCaIG2gGvQoZe4+3egZLsM+UivLMBN6QIgtPIwM1FKdrhIeHIq89vofPuE39i6c1ILnEUCq94rgiFXSFmKLVUkCEYF6h20WBPH0LF1oKQDQ0eSHl0CuAZ3mp+AftJPdbIzrTnZdP23jd/oC9XYi5BFEZvjl7/KLTd8en02eZaZKOPF4/6cq01qVnyf52tA7TbBSVsXsMmkxYhD5lDo2dZmeJxKApRI4hyoanMDbPsdXrng1X2SkDaYy+dsOWZqHDDNYpbiEpvdxFH5yiy49eBVHBybQmG+csFs2Jd8m8oc6zxMOO68BMawEf/5+KifAnXn5Cy5WOfken1HSW4kNANpuAqg9GhMoNO9C7S6o==Wh7J-----END PGP SIGNATURE----- Let's not immediately believe every paper we read, especially ones without peer review.http://www.reddit.com/r/Bitcoin/comments/1reuwq/vigorous_debate_over_shamirrons_supposedly/ That's not very stealthy.  You would immediately notice money not going where it is supposed to go.And magic constants are rare in the bitcoin source code, so "send money to XXX address" would stick out as obvious.You would have to be far more subtle than that. Yes.  That's digital attestations.  Background Checks, Inc. can perform a background check on me, and then sign my identity "jgarzik (key 0x1234) passed our background check level 1 on date Y/M/D".  Anyone who trusts the signature of Background Checks Inc. may trust key 0x1234 as having passed a background check.You may also offer this signature as hash(signature), and only reveal the actual signature privately upon request, to enhance privacy further.Plug for my own identity tech spec: https://en.bitcoin.it/wiki/Identity_protocol_v1 Response: http://garzikrants.blogspot.com/2013/11/solution-to-bitcoin-volatility.html No.  Maybe a couple of months? There are two hearings.  One on Monday, one on Tuesday. OK, he did not quite say that, exactly...  <chuckle>URL: http://www.bloomberg.com/news/2013-11-18/u-s-agencies-to-say-bitcoins-offer-legitimate-benefits.htmlLooking forward to attending the DC hearings in person tomorrow!Anyone else going to be there? It sounds like ZeroCoin v2 eliminates one major criticism, that of bloat.But engineering hurdles remain:1. Requires a hard fork2. Any requirement that all transactions participate in mixing is a non-starter.  Some payment schemes bootstrap trust by intentionally being non-private, showing their bitcoin holdings and bitcoin payments with provable digital signatures.Any forced 100% privacy scheme that prevented opt-in auditing would make life difficult for some existing users, who place value in the transparency of the system.I would rather see automatic mixing and privacy built into every client.
It is an engineering statement.  Information is, in general, easy to copy and leak, and difficult to keep secret. For Phase 1, dealing with investors/shareholders would just be far too annoying.  It would get in the way of getting things done. One of the key tenets is that bitcoin block data is easy to distribute widely.  Information wants to be free.  One of the ways we may keep bitcoin healthy and free is finding alternative ways to distribute block chain data.  This provides resilience in case the P2P mesh network is attacked.My personal favorite is satellite distribution, something I have been working on quietly in the background.  Satellites means one of two things:1. Buy some bandwidth on an existing satellite.2. Launch your own satellite.Buying bandwidth is the most cost-effective, and readily attainable method today.  However, not just any satellite channel will do.  Bitcoin requires a dedicated, one-to-many broadcast mechanism.  This is like renting a TV channel -- although at much lower bandwidth requirements (1MB every minute or two).Nanosatellites have recently cut satellite costs down from the absurd, traditional $20m+ build, $50m+ launch.  There is now a standardized cubesat size.  Two innovations reduced launch costs down into the $100k's range: (1) Many organizations collaborate together (rideshare), paying a portion of the launch cost.  Sometimes 27 or more cubesats are launched at once.  (2) These clusters of cubesats are launched as a secondary payload.  A primary payload has priority, which means secondary payloads are sometimes not launched into a proper orbit.  With these two factors, cubesat construction and launch is lowered to a reachable price: $2m or so.Several people, including some investors, in the bitcoin community have privately expressed interest.  It seemed like a good time to move forward with Phase 1 of the project.Phase 1 is:   flesh out cubesat specifications, research leased bandwidth pricing, and specific data needs (xmit tech, frequencies).  The initial goal is broadcasting worldwide (or at least major continents) the latest bitcoin block, over and over again.  Stretch goals include broadcasting recent chains, recent TX's, and other data.A word about government involvement:  Set expectations properly.  There are three points at which government is inevitably involved, at some level: (a) getting launch approval, (b) ground station(s) inevitably must be located in some useful geolocation, and (c) frequency selection.   Fundamentally, these satellites will be broadcasting public, not-encrypted blockchain data, so the content should not be an issue.Donations accepted at 1M9MyyPsAak7zRjW4D96pTxDaAEpDDZLR7Feb 05 update:Project update #1: PermalinkBitSat architecture, v0.1: PermalinkFiles posted on http://bitsat.org/#/docsSponsors (1 BTC or more):Mohit Kalra (2 BTC, May 2014)Unknown (1 BTC, Apr 2014)http://www.redstarmining.com/ (1 BTC, Jan 2014)Roger Ver (5 BTC, Dec 2013)Erik Voorhees (5 BTC, Dec 2013)Rusty Russell (1 BTC, Dec 2013)BitcoinGrant.org (25 BTC, Nov 2013)Jeff Garzik (1 BTC, Nov 2013)Standard disclaimer:  This is a personal project.  Nothing to do with my employer. The software ecosystem is missing a useful piece:When you are receiving regular payouts, from a job salary or mining pool for example, there needs to be address rotation.Right now, the only way to do that is manually logging into the payer's website, and replacing the current payout address with a new one.Software should communicate with the payer, or give the payer a list of addresses, or an HD seed that may generate additional public keys, etc.Address reuse in these circumstances is annoying, hurting privacy, but inevitable until software improves. I have long been a proponent of a merge-mined "data chain" which is specifically designed for smart property, colored coins, and mastercoin metadata.Even did a tiny bit of work creating an (unseen to the public) "DataNet" codebase, whose work is both obvious and long since outdated.The keys areEmphasize tech neutrality, and engage other projects outside MasterCoin to use the data chain.  Even up to and including patch contributions to third party projects.Approach pool operators, request merged mining of this chain.  Point out how it's a community chain.Do not premine, or other scamcoin traits.Be very explicit about intended chain uses, and aggressively work with pool ops to de-spam. See https://en.bitcoin.it/wiki/Identity_protocol_v1 Just visit any block explorer, to see the balance at a particular address. That's standard fare, with pay-to-script-hash (P2SH).  Multisig P2SH addresses are easy."addmultisig" RPC call handles this, for bitcoind / Bitcoin-QT. A bit, but this is addressed somewhat:  Read the SIN spec, and how announce/commit sacrifices work.The protocol is specified such that you are required to have made the transaction available to all for mining and spending, for a period of time, before committing the sacrifice.Of course as Greg noted, fixing the problem of pool-centralization is sadly outside the scope of this work, and more fundamental to bitcoin itself.  (encourage p2pool use...) no-wallet mode will be in version 0.9. That's the general idea.Your markets can be decentralized, as long as the identity protocol is agreed upon.You control your own level of privacy.  You choose to whom your identity is revealed, and beneath that, the meaning of the hashes attached to your SIN record. None of the SIN data is in-chain except for the sacrifice transactions.The main bitcoin blockchain is only used for timestamping a hash of the public key (SIN type 1).SIN type 2 is completely off-chain, because it is not associated with any sacrifice. SIN uses OP_RETURN: https://en.bitcoin.it/wiki/Identity_protocol_v1Though as Peter has noted elsewhere, the current OP_RETURN standard (max 80 bytes) is smaller than the needs found in the SIN specification, which must include a full transaction. KNC miner received! bitcoin: URI hander. The bitcoin client does not connect to the CA.Stop repeating clueless people. As Luke indicated, "nobody to longpoll" is normal for pools without getwork/getblocktemplate (GBT) users. See BIP 10 for a transaction distribution format: https://en.bitcoin.it/wiki/BIP_0010I'm not sure it's my favorite format, but it's the one concrete proposal right now. Glad to see a GUI version of my txtool crop up    https://github.com/jgarzik/txtool/ The OP_RETURN patch for transaction metadata was just merged into bitcoin/bitcoin.git.
No, sorry. It is difficult to take this complaint seriously, lacking similar protests for people to stop using SSL + existing CAs when visiting bitcoin websites.A certain user class is already using certificates and digital signatures. That presumes additional checks on pubkeys are not coming down the pipe, which is also awful presumption / advice. Note that http://eligius.st/~wizkid057/newstats/pushtxn.php will push a non-standard, fee-bearing transaction into Eligius-mined blocks.Thus there is no requirement to fit the mold of a "standard" transaction that is relayed by most.Typically the development process looks likeDesign the best transaction formatWrite software, prove it works on testnetTest on mainnet through manual miner submission, like the Eligius URL aboveNow you have a proven use case, and time has passed proving that your concept remains interesting to some user base somewhereSubmit a patch to bitcoin/bitcoin.git, adding that transaction as a standard transactionSome of these steps may be done in parallel, of course. Enough with the whitepapers.  We don't need another freakin' whitepaper.Ideas for decentralized exchanges have existed for years.We need code. This is already being implemented, in fact.  Nothing to do with mastercoin. Yes, the genesis block is hardcoded into the client. It's annoying.If it continues for too long, we will have to reset testnet to a new genesis block, which is a pain.ASIC miners should test with Testnet-In-A-Box.  http://sourceforge.net/projects/bitcoin/files/Bitcoin/testnet-in-a-box/ Related:Similar to each bitcoin P2P peer's nonce value, which serves as a node's unique id, I've occasionally desired for each side of the P2P protocol to offer a random seed in "version" and "verack."(a DH exchange is probably too much to wish for, in the context of bitcoin P2P, heh heh) This is actually an interesting problem, that is difficult to solve with current bitcoin.Entities that issue regular payouts -- in my case, ASICMINER, Eligius and my employer BitPay -- inevitably set up a single payout address, and then send multiple payments to that address.This is certainly sub-optimal, and reduces privacy.  No amount of CoinJoin'ing by itself will fix this multiple-payout/single-address problem.  We'll call it "recurring incoming payments."Recurring incoming payments -- and recurring outgoing payments (subscriptions) -- are problems that bitcoin is quite unsuited to address right now.To increase privacy, those who pay out need some standardized way to request multiple addresses from their payees. Indeed.Bitcoin is decentralized... the antithesis of bitcoin is really centralized websites and authorities. Any possibility of getting recent IPs from the server log -- last 7 or 30 days -- and produce an anonymized, by-country summary?It would be nice to see which countries are most interested in JD.  I bet there is some interest in China, even.(and a Chinese translation might bring more players) Link:[ANN] Bitcoin blockchain data torrenthttps://bitcointalk.org/index.php?topic=145386.0 Hopefully the cold storage is protected by multisig, so that dooglus alone cannot unlock it. Is this meetup held on a regular basis?  Same day of the month and location? getblocktemplate provides a set of candidate transactions.  You are able to supplement or cull that set, before passing a block header template to miners. This is false.CampBX works fine with ACH.CampBX recently restated this on Facebook, following the Dwolla shutdown:  https://www.facebook.com/CampBX/posts/665137400165381 Field experience -- the kind an engineer like myself most respects -- indicates that any centralized securities platform might get shut down, hacked, or simply disappear without warning.  These events have all happened in the past.  This is not idle speculation about vague threats. I posted links to code, even...Additionally, this code submission for upstream bitcoin is intended to help enable a standard way of encoding metadata -- such as stocks/bonds, rather than current ad hoc methods such as the one employed by mastercoin.     Relay OP_RETURN data TxOut as standard transaction type.     https://github.com/bitcoin/bitcoin/pull/2738 Nowhere was it claimed to be anything more than one piece of the puzzle.Given all current field experience with unregulated securities,Any company would be unwise to place their shareholder roster 100% in the hands of an unregulated third party.Take a cue from ASICMINER, that developed a working method after GLBSE's collapse.
RE OP:  designs for decentralized exchanges already exist.Mike Hearn, years ago, posted this design:          https://en.bitcoin.it/wiki/Distributed_marketsI implemented that design in pybond, which got renamed to smartcoin:          https://github.com/jgarzik/smartcoinHowever, some smart cookies came up with colored coins as an alternate transit method:          https://bitcointalk.org/index.php?topic=106449.msg1203918#msg1203918People should research existing material; this subject has been around for years before the Silk Road bust ;p All a shareholder registry needs is a robot/service that receives and verifies digitally-signed messages, updating a ledger of share accounts.  This can be automated today using GPG tools, if PGP is used, or bitcoind, if ECDSA is used.Other parties -- as shown in the past -- will create pass-through entities for the various exchanges that exist.Frankly, I would not trust a third party to 100% manage my company's shareholder list.  But that's a business decision.  Plenty of Fortune 500 companies hire a 3rd party platform to manage their shareholder registry. Have any of these critics contacted bitcoin websites, asking them to stop using SSL w/ public CA?No?I thought not.For, the payment protocol will be used where there is already a digitally secure relationship between customer and merchant.Nothing about that section changes.  Bitcoin-QT still tries to use a new key for each transaction, just like that section describes.  The payment recipient (merchant) still knows just that public key hash, but not about your other transactions.Methinks there is some basic reading comprehension fail going on. A branch would increase work required, rather than decrease.Here is the current rough plan:The first step is basically complete:  a runtime no-wallet mode:  https://github.com/bitcoin/bitcoin/pull/2901    Later on, this may be extended to #ifdef'ing out wallet code, once the "no wallet" runtime code has been proven to work.Next, headers-first sync, which fixes many issues with the bitcoin block download process in general: https://github.com/sipa/bitcoin/tree/headersfirstOnce these features in place, it becomes feasible to have the wallet client operate in a separate process from the public blockchain engine.At that point you have a stripped down "blockchain engine" (border router) that focuses on mesh networking and accurately maintaining the chain. Making the user experience more resistant to MITM attacks is not bloat. Absolutely.  It would be quite nice if wallets support Trezor, including Bitcoin-QT. May I humbly request some help from the Chinese bitcoin community?I am trying to discover my Chinese name, hopefully something short.  There is a small discussion on G+ https://plus.google.com/u/0/105424721218711536033/posts/Nk3DzpcoChD but the forums seem like a logical place to ask.Apologies if this is not the right forum.Hope to travel to mainland and HK next year.  (hint: ping me, if there is a good bitcoin meetup or conference in China...) By virtue of existing https use, the voting is active and ongoing.The only robust, deployed systems in active use are SSL and PGP. In all fairness, it has become a FAQ.  Given NSA/PRISM fun, it seems likely to remain so, no matter the hard evidence.  I got several variants of this question/complaint at the Atlanta crypto-currency conference, and reddit mirrored more of the same.The core points I like to mention areThere is a high likelihood that SSL & standard CAs are being used anyway.  It is probably a browser launching a payment from an https:// supplied pageThe payment protocol does not mandate SSL + standard CAs.  Other methods, including decentralized methods, are possible.Perhaps it would be a good idea to specify a decentralized example.  PGP comes to mind, or a self-signed ECDSA scenario of bitcoin address or SIN. Not namecoin alone.  Namecoin is just a storage method. Easily gamed:  nakowa shows up, deposits 11,000 BTC, obtains > 25% of the vote, votes, and then withdraws. Yes.  Set this up initially, when transaction fees are small, e.g.Eligius claims 10% of transaction fees, for pool expenses -- maybe even higher initially, like 50%, but plan to decrease percentage over timePlus a safety valve, if fees exceed 25 BTC in a single block (or pick your number)Yes, this is a nice option. Respectfully, that is not true as long as some pools give their users network transaction fees, and Eligius does not.Transaction fees can add 1% or more to a miner's income.It is important to pay some percentage of transaction fees to miners.  This provides virtuous economic signalling to miners and users alike.I would propose moving Eligius to a rule likeTakes X percentage of all transaction fees (10%? 50%?)  Right now it is 100%.Take no more than Y BTC in a single block, paying 100% of fees above Y BTC to miners. Micropayment channels can scale to multiple agents and such.I do not think it is really a big deal, though.For a Tor relay, I would just want to pay a $entity, and have that payment support "the network."It would be a poor user interface, if the user must manually select node 123 and pay node 123. nValue is the bitcoin amount, in satoshis.GetSerializeSize() is the serialization of the transaction output, not the script. It is.  That is why I am so unenthusiastic about key signing.  Beyond a single, direct connection, it's just geek wanking.That is also why I do not think cjdns, with its WoT-like model of "only connect to your friends" will ever scale to any useful size.  cjdns is otherwise quite nice. That's because the amount is below the dust threshold (0.000534 or thereabouts). In the fiction world, I highly recommend Daemon by Daniel Suarez, and its sequel.  All other fiction seems to present an unrealistic, Hollywood, human-level AI, if it is a robot spending money.I've only ever seen the links referenced in the OP, referring specifically to narrow-AI agents that can spend money.Now, there is plenty of research outside of the economic realm, on autonomous vehicles and swarms.  Just about any vehicle imagined -- submarine, boat, airplane, helicopter, car, tank, ... -- can be autonomous, and communicate with other non-human objects in its environment.It seems like our community is the only one actively researching this area, robots + money + markets.(Correct me if I'm wrong, please!) Certainly.  My message about spot instances was mainly about a possible business opportunity.* jgarzik wrenches self back on-topic... Amazon spot instances can be pretty cheap, and they are on-demand too.If an automated system is being constructed, it could query spot instance prices and take these things into account.  Example:  AWS normal price is X, spot instance price is X*0.75.  You can bid X*0.9 for a spot instance, be likely (but not guaranteed) to have the instance keep running, and probably come out with a cost below the normal AWS price pretty consistently.Anyway, don't get too distracted by that, just wanted to point out that Amazon already has a nifty, dynamic pricing system in there.ETA:Another anti-fraud trick is a deposit (or, getting more complicated, a fidelity bond).  Require a 0.5 BTC deposit, or a certain amount of pre-paid service, if you do not have a SIN with a good reputation.
Well, for identity (SIN), the basics needed to generate a new SIN, and verify something signed with an ECDSA key, already exist in https://github.com/gasteve/node-libcoin   I have been committing code there (SIN.js, SINKey.js) and more is coming soon, including test vectors.A SIN is so close to a bitcoin address that much of the bitcoin verify/sign infrastructure may be easily reused.For markets, the goal is that users -- humans or agents -- may (1) discover markets that already exist or (2) create a new market and advertise its existence.  Once a market is active, users must be able (3) advertise goods for sale, (4) view advertised goods, and (5) offer to purchase goods.So, answering "how would you go about it?" for TradeNet, creating a platform where agents could talk to each other,An off-the-cuff, five-minute, you-could-do-better, something-that-works design might then be:A) Clone the low-level P2P bitcoin network protocol, and create a flood-fill, address-gossip network.  Mostly done, here: https://github.com/jgarzik/smartcoinB) Change protocol buffer definition at https://github.com/jgarzik/smartcoin/blob/master/codec.proto to include obvious messages derived from paragraphs above:  "create-market", "get-market-info", "advertise-market"This accomplishes the goal of #1 and #2, above.  Humans and agents then choose a market they need, and connect directly to that market.C) Create protocol, client and server, with messages:  "advertise-item", "list-advertised-items", "item-info", "item-offer"D) To sell something, an agent logs onto the P2P network, chooses a market ("cars in Austin, Texas") or creates one, and advertises their good for sale.E) To buy something, an agent logs onto the P2P network, chooses a market ("cars in Austin, Texas"), and searches that market for desired items.  Purchase information (bitcoin payment address, payment protocol URL, ...) is obtained, and bitcoin payment process begins.All messages are digitally signed with your SIN (identity).Assuming that all agents conform to the same protocol when naming markets and items, one may easily see how agents may locate one another, and participate in open markets. That would be my minimal get-it-working decentralized TradeNet.  Possibly rather than P2P, the cjdns protocol should be considered.Answering "how would you go about it?" for a StorJ-like agent itself...  it's just a freaking HUGE problem that involves a lot of work, quickly getting into the weeds.F) Create a daemon with a bitcoin wallet, that may understand digitally signed messages sent to it.G) Create the file download module described in StorJ.(so far, it just looks like a basic bitcoin web service)H) Create a proxy module, whereby you send work A->B->C and return results C->B->A, and verify that the results match those locally generated, from local data storage.I) If local site is profitable, search on TradeNet for required OS/mem/cpu/storage/bandwidth/API requirements, and purchase serviceJ) Or advertise on TradeNet for someone to create an API etc...Past "H" you start getting incredibly complex, and an "it just works" implementation quickly becomes a herculean task you must break up into much smaller pieces.  For example, step "I" might require creating a business that resells AWS/Rackspace cloud services for bitcoins, complete with the API necessary for an agent to load itself onto a VPS.Remember, "load itself onto another VPS" is quite complex, by itself.  You must verify that the OS environment matches the requirements for your agent:  Does it need a compiler?  Does it require a specific Linux version, or will OSX/Windows work also?  What versions of libraries are needed for the agent to successfully run?  Once the basic environment is verified as "suitable for agent life," you have to write all the code that is involved in basic system administration.  You must set up OS firewall, root passwords, SSH keys, and many other installation details besides that of copying the agent software itself. Therefore, my general advice is:  pick a small part of this problem, work on that, complete it and test it, and then pick another small piece of the puzzle.  Iterate and repeat.  Eventually an agent will emerge!"5%" was a pulled-out-of-my-ass number.I am certain there is some price at which this is a profitable business plan.  (whether customers appear at that price is another question...)  It is the standard business problem.Just calculate the cost to do this, including possible support costs (your time is valuable), and add 10%.It is not as difficult as you might think.Remember, SINs are digital identities that build reputation.  You may whitelist SINs that previously were good customers, or blacklist SINs that are abusers.Further, there is time cost for criminals and abusers, and this plays in your favor:  a simple 24-hour delay after setting up a new account for an unknown user can do wonders.  Or a simple phone call + 24 hour wait.  Most abusers want to strike immediately, then disappear.  Normal, good customers do not have this pattern necessarily. As I mentioned at the after-conf party last night:Somebody needs to pick a location for Amsterdam's "Satoshi Square."The Dutch are famous for finance... it is Just Not Right for there to not be a Satoshi Square anywhere.Are there any outdoor locations close to Centraal, with wifi? IMO the basic building blocks of TradeNet are Digital identity.  My proposal, "SIN", is https://en.bitcoin.it/wiki/Identity_protocol_v1 (alas, this is spec is a jumble, and difficult to read)Decentralized market software: anyone should be able to create their own market, or join another market.  This software permits multiple market types to be created or managed: classified ads, auctions, kickstarter-like funding, commodity exchange/short/option/future and more.  This must be open source, available for all.  Open-Transactions "could have been" this, but I am not happy with its format specifications, quality of code and other features and factors.  OT would also need to be upgraded to support SINs.Decentralized messaging: some method for humans and agents to communicate with one another.  BitMessage is a nice attempt, but riddled through design and implementation problems today.  Maybe B.M. will fill this role, maybe something else will arise, time will tell.Digital identity and reputation ties everything together.  A human or agent may be participate in a market by identifying themselves, and exchanging digitally secure messages. RE APIs:  in theory, an agent would hire a human to build an API, where none exists today.  An API is always possible, even if it is an ugly screen-scraping unofficial API.Or, someone can build a business by reselling Amazon Web Services or Rackspace Cloud API via bitcoin payments.  5% markup, just have to filter out service abusers to make sure you don't get cut off. Heading out to National Maritime Museum, near Amsterdam Centraal.Will look for a cafe for lunch, as close to the museum as possible.  Will sit outside, if people want to meet up. Mike is definitely a good speaker.  It helps that he (and others like me) have been thinking about this stuff for years.Even today, bitcoin is only in its infancy.  The bitcoin base layer -- the currency itself -- had to exist and work before other things like escrow, smart property, smart contracts, or autonomous agents could be built on top. Well to be clear, I want to go in the museum, not just near it ;p Mike Hearn talks about some future possibilities that bitcoin enables:https://www.youtube.com/watch?v=Pu4PAMFPo5Yand associated reddit link, http://www.reddit.com/r/Bitcoin/comments/1nbcsj/mike_hearn_bitcoin_developer_turing_festival_2013/Related links:https://bitcointalk.org/index.php?topic=53855.0http://garzikrants.blogspot.com/2013/01/storj-and-bitcoin-autonomous-agents.htmlhttps://en.bitcoin.it/wiki/Agentshttp://bitcoinmagazine.com/7050/bootstrapping-a-decentralized-autonomous-corporation-part-i/  (and parts II and III) Sounds good.RE tourist:  I do want to see the waterfront near the National Maritime Museum.  Dutch East India Company made a pretty big impact on the world. Will anybody be around tomorrow, or Monday?  I'm flying out Monday afternoon.YT will be turning in early tonight and miss the party. There is the current proposal for the mempool to be in the model of a very large block.  I forget what number we bandied about on IRC -- perhaps (144 * 2 * 1MB) or (144*7*1MB).For the sake of example, consider a mempool that models a 288MB block, representing anything that miners seem likely to confirm in the next 144*2 blocks.  This would permit the relay of transactions with lock times in the near future, as that would fit within the [proposed] existing mempool logic.It does not enable the feature years in the future, but it does enable some. Yes, it can work for ASICs just fine.stratum is just another mining protocol.  You may modify the protocol to support stratum-like work, yes. Are there (or can there be) additional trusted parties outside a single physical location?  (rhetorical question, no need to answer publicly)Bitcoin supports M-of-N transactions, for example, where two-of-three signatures could be required to unlock cold storage.There are other variations on this idea with Shamir's Secret Sharing.  Decentralize the risk, eliminate "single points of failure" (or "key man risk"). (1) "News" tab on just-dice.com, which should give some indication of the number of unread news items.(2) investor thread on bitcointalk.org -- perhaps a moderated announcements threadA community volunteer could even handle #2. Correct. Snapshot ID is not hash based, but it is unique to all AWS customers.Customer A may use a snapshot from Customer B, etc.  (assuming permissions allow that) And then you have investors who thought JD was a, quote unquote, "long term stable investment" A startup casino running on a startup currency does not match with realistic expectations of a long term stable investment. Indeed.  Let investors (the market) decide.  It is their money being risked. All weaknesses that are fundamental to virtual machines, versus dedicated servers.Though Amazon is not on this list AFAIK, other VM providers have been hacked at the cloud management layer, effectively giving anyone 100% root and "physical" access.
What an excellent idea as an ATM alternative I should do the same. A bitpay contingent is in town, too  I apologize for having to ask this, but,Please remove "BitPay" mention if you would, any comments I make are my personal opinion, and not an official company endorsement. I'll be in Amsterdam too, for the conference, if anybody has any tech questions related to secure shareholder registries. I look at it like beta software:  just iterate through the problems.   There are always variables to play with:  house edge, further limiting max bets, ...  before contemplating shutdown, in my self-interested and biased opinion.  +1    When users may vote with their wallets, you always know where they stand. Several people who have run gambling sites chimed in on reddit, bitcointalk.org and IRC with a similar comment:  "1% is too low"And on CYA front:  make sure the website text frequently notes the "high risk" nature of gambling and investing, because it is a startup business model and a startup website running on a startup currency The insta-investing feature is nice in general, even if investors lost a shirt or two.  Innovative. +1Decentralized is better.  Our big central entities of money handling -- pools and web wallets -- all have a history of poor security. Re-posting via quote, given today's BTCT  business.Having a publicly auditable share registry is important. Yes, please For regulatory, technical and security reasons, it is very useful to separate the shareholder registry from the share trading markets.  This is also how things work in the "real world."  See http://en.wikipedia.org/wiki/Stock_transfer_agentAll bitcoin clients support a "sign message" feature, which may be used like PGP to prove that a shareholder really does control a bitcoin address.Once a provable, secure shareholder registry exists, anyone may set up a market or trade shares privately.If anyone has tech questions, feel free to contact me. Let's not put words into others' mouths, shall we?MasterCoin is almost exactly like my original pybond scheme -- which had nothing to do with colored coins whatsoever.  Which is, in turn, similar to Mike Hearn's bond proposal from years ago.  The only similarities are higher level concepts of "applying a protocol on top of bitcoin transactions."An earlier proposal would have enabled the attachment of mastercoins (or bonds) to each txout: https://github.com/bitcoin/bitcoin/pull/1809   After much discussion in the community, it was decided that OP_RETURN was superior because it provably enables pruning (thus removing UTXO bloat automatically).Been there, done that, all these problems have already been thought through.Just like my pybond design, which had absolutely nothing to do with colored coins.UTXO bloat is not a policy of the client, if the protocol is specified to store MasterCoin data in the UTXO set.The quoted message is hand-waving away additional burdens placed upon the network -- and every bitcoin user -- by MasterCoin.It is simple, provable engineering fact that storing data in transaction outputs makes block validation, double-spend checks and other critical consensus operations more expensive.  More RAM is used on average.  In general, it burdens the entire network.  UTXO is our most critical resource currently.  We have already made one change in recent times to ensure that UTXO growth is more constrained in the future:  https://github.com/bitcoin/bitcoin/pull/2577 Big mining pools also have custom patches on top of PR #2577, that ignore transactions they feel bloat the UTXO set.  Even more relevant to MasterCoin, at least two pools that I know of elide transactions that appear to transmit data rather than monetary value, trying to prevent another episode of dumping wikileaks cables into the blockchain.Please work with the community, not against it.  The blockchain free-rider problem is very real, and deserves thought.Incorrect.  All current proposed OP_RETURN schemes set nValue==0, because nobody wants to burn money.  Old "sacrifice" schemes have been dropped in favor of miner fees or anyone-can-spend outputs. We care about bitcoin's curve ;p +1JD investors want whales to swim by. Would prefer that the direction of python-bitcoinlib head in the Cython-ish direction, while continuing general pythonization.Pull requests welcome, including the pythonize branch once its mature. I've long argued that all pools, not just Eligius, should increase their global minimum difficulty.At some point, in my opinion, permitting difficulty-1 shares is not helpful because it does not provide feedback to end-line miners that the overall network difficulty is increasing.  CPU miners should be met with slowly increasing pool difficulty, just like the global bitcoin difficulty increases over time.Slow, inefficient miners need that economic feedback from the system. They perform two vastly different operations.getblock returns a block minted in the past.  getblocktemplate returns a block to be minted in the future. As BitPay strongly believes in customer privacy, we would at a minimum have to ask each individual merchant, and record their response.Cannot just flip a switch and publish that sort of data...I, too, have longed for a "Bitcoin Business Directory."  BBD would be a great resource for users, and need not be limited to BitPay customers. Making the outputs redeemable is a good and welcome improvement -- but that doesn't eliminate their UTXO storage cost.  It just makes that storage recoverable and transferable.The extraneous data continues to be stored in the UTXO set, with this multisig method.  One person may redeem a MasterCoin multisig transaction, yes, but the payment target will just create another multisig output that consumes similar amount of UTXO storage space.  The data continues to bloat the UTXO dataset, because there is always some multisig output sitting around, waiting to be spent.Correct.  OP_RETURN data is provably not spendable.  Anything provably unspendable may be eliminated from the UTXO data set.Note!  Besides OP_RETURN, there is yet another possibility:  P2SH:  https://en.bitcoin.it/wiki/BIP_0016With P2SH, the MasterCoin data could be stored in the input scriptSig, as a part of redeeming.  This may be unworkable, because the MasterCoin data would only be revealed when you spend a MasterCoin, and not when you receive a MasterCoin. URL: http://www.businessinsider.com/intel-shows-pc-using-broadwell-14nm-chips-2013-9 Mining is not decentralized, when 3-4 people control >50% of network hash power.ASIC miners in the hands of the masses mean nothing, when they abdicate their power by mining at a centralized pool rather than p2pool.Most "miners" play no role in selecting bitcoin transactions.  They are simply selling a computing service to the mining pool operator. No -- because it's not trivial.
IMO, even a soft fork is unneeded.Just make BTC2, which transits upon, and wholly depends upon, BTC.  Have the BTC2 proof-of-work depend on information in the BTC chain, and timestamp BTC2 blocks inside the BTC chain. The prune-unspendable is very likely to go in, and the general consensus is that OP_RETURN is the lesser of the various other more-bloat-producing solutions for timestamping data into the chain.  We did not want to put in OP_RETURN without having the prune-unspendable change in first.Most implementations today will not relay OP_RETURN transactions, meaning they will probably not be confirmed without a little extra legwork and patience.All implementations will accept OP_RETURN in mined blocks, as it is a normal and supported opcode.In practice, today, that means sending the transaction with appropriate fee attached to https://en.bitcoin.it/wiki/Free_transaction_relay_policyAfter OP_RETURN is upstream, implementations will relay OP_RETURN transactions just like any other "standard" transaction. OP_RETURN is the current proposal that people have been using, for adding prune-able data to the blockchain.  Here is an example implementation for relaying such transactions https://github.com/bitcoin/bitcoin/pull/2738 and https://github.com/bitcoin/bitcoin/pull/2791 is the pruning piece.alt-coins and similar schemes should at a minimum produce pruneable outputs or use inputs + P2SH.  The data remains available via blockchain, just not bloating the precise UTXO space.CHECKMULTISIG schemes still bloat the UTXO space (unless they are P2SH). Press release URL: http://uptweet.com/viewStory?id=1519Related stories:http://gigaom.com/2013/09/16/more-merchants-using-bitcoin-payment-processor-bitpay-says-it-has-surpassed-10000-clients/http://techcrunch.com/2013/09/16/bitpay-10000-merchants/http://www.coindesk.com/bitpay-now-10000-merchants-payment-processor-network/http://www.marketwatch.com/story/bitpay-surpasses-10000-bitcoin-accepting-merchants-2013-09-16 You may remove checklevel=2 from your configuration. If, and only if, you control all keys involved in a multisig transaction.Otherwise, such a transaction may be considered "partially controlled" and not really part of your "fully controlled" balance.  bitcoind cannot prove that you can spend a multisig. Added 1.0 BTC to SHA1 bounty. Something I mentioned on IRC:It would be nice to offer people some compensation for their shelved shares.  That way, you can get paid immediately by selling your shelved shares to another buyer.  Similar to selling bad debt, in the real world.Each shelved share is worth more, the closer to the top of the stack you go.  Therefore, you would want to give some indication how close to the top of the stack are the shelved shares for which you are bidding. http://members.calbar.ca.gov/fal/MemberSearch/QuickSearch Warning:  Please avoid using bitcoinj-based wallets, with this tool.The bitcoinj Java library does not support the P2SH feature (BIP 16). Yawn   Try fidelity bonds and sacrifices. BitPay has been experimenting with QR codes, scanning in low light conditions, etc.Conclusions:1) You want the payment protocol.2) You want your QR code to go to a URL that will display something useful on a normal browser, or a Bitcoin Payment Request if bitcoin-aware.3) Use a short URL for the payment URL!  Critical for QR codes, in low light conditions.4) Displays, phones, and shiny cards are sub-optimal for displaying QR codes you expect a phone to read.5) Printed QR code, containing a short URL, is optimal.  The shorter the URL -- hopefully 60 chars or less! -- the better the QR code error correction. Interesting.  I had not thought about the privacy implications of the jagged numbers, just the bloaty change part. See other threads.  re-run with "-checklevel=2" reddit link: http://www.reddit.com/r/BitMarket/comments/1m48ax/wts_huge_tracts_of_land_ok_33_acres_in_north/ Yes, it is very convenient to I-540.As you discovered, it is a normal pond, not sewage. Great to see more wallets out there!Curious:  What is an independent and full software stack?bitcoinj is 100% independent of bitcoind codebase, and has been deployed in the field through multibit and Bitcoin Wallet for a while. Yes.  PM sent. Smaller lot:  $33k for 1.50 acres, unclearedLarger lot: $45k for 1.69 acres, partially cleared w/ home site + septic + wellPM sent. See http://bitcoin.stackexchange.com/questions/1797/what-are-checkpoints
Comments:* Cloud-based virtual machines are easier to wiretap or hack than dedicated servers.* Most CPUs are likely to have a backdoor in them, even in hardware purchased outside the US or Europe.* Your servers can be seized no matter where you locate them. Bump, due to renewed interest. Fixed the date in thread title.  The thread date should be the date of the article, not when the article is discovered by the poster. Andhttps://twitter.com/jgarzik/status/376210228863172609https://twitter.com/jgarzik/status/376210514562404352 The easiest way currently is to visit http://blockchain.info/ or http://blockexplorer.com/There are a couple features under development which will enable this facility in a decentralized fashion, for anyone using Bitcoin-Qt or bitcoind:1) An optional address index is being added, for searches such as these2) A pull request exists for "watch only address" support.  A watch-only address is an address in your bitcoin wallet for which you do not have the private key.  With this feature, bitcoind will dutifully watch for any transactions on the watched addresses, just like a normal bitcoin address you control. That will not work for "an address I don't own" -- listunspent looks in the wallet. Sure, they have the signing key after all.There is a highly secured (note I did not say "secure") signing robot that signs packages after they are built on a build farm.As long as you are "inside the moat" and appear to be a build machine passing along properly built RPMs, your packages will be robo-signed.Same goes for most, if not all, other distros.  The signing takes place somewhere in the automated build system apparatus. I disagree completely with this assessment.So much so that it makes me wonder about bitcointalk PsyOps  Yes, this subject was covered here:     http://www.reddit.com/r/Bitcoin/comments/1lt8tt/speculation_are_bitcoin_thieves_revealing_nsa/Did the NSA plant the flaw?  Seems unlikely.Were they aware of the flaw, and could have included it in their suite of tools?  Absolutely.  NSA most certainly reviews software -- open and closed source -- to find bugs they may exploit at a later date.And ironically, bitcoin thieves are working to help secure us from NSA software backdoors.   This is a fair criticism, and no, average users cannot be expected to parse the block chain.Average users can, however, watch a specific address on blockchain/block explorer. The tools for multisig are admittedly poor, at the moment.Multi-sig introduces an interesting concept:  bitcoins that you might be able to spend.  Therefore, your balance only shows bitcoins when you control 100% of the private keys.Right now, you need to take a few extra steps.  Some tools outside bitcoind exist to help with multisig, but in general, additional work is needed in this area. My fault, I admit.  I should have specified simple manual more clearly.Simple configuration instructions for various hardwares:* Avalon* BFL* ASICMINER* ...And configuration information for each major mining software (bfgminer, cgminer, guiminer?).The reader of the document is probably someone who may or may not know much about bitcoin, so it should be basic, "Push Here Dummy" instructions.Ideally, another Chinese reader will agree that these instructions are error-free, for verification.ETA: Payable when the site administrators update http://eligius.st/ or eligius wiki with your document. Wanting to promote Chinese use, I offer a 1.0 BTC bounty for a complete Chinese translation of Eligius, or 0.5 BTC for a simple document in Chinese that describes how to mine using Eligius.Ditto for Russian, though at lower bounty prices:  0.25 BTC for simple "Eligius User Manual" in Russian. Your paste indicates you are building the development version (master, aka pre-0.9), not 0.8.4 release.Your 0.9 build fails due to lack of the protobufs compiler, "protoc"You want to check out the v0.8.4 branch. Well... please help us confirm that the OSX issue is fixed.Note the "hopefully!" tag... My standard, per-version refrain:  If downloading a new block chain, then download the torrent:     [ANN] Bitcoin blockchain data torrent     https://bitcointalk.org/index.php?topic=145386.0Torrent handles bursty behavior such as new releases nicely, without loading the bitcoin P2P network so much.(if you are upgrading and already have some block chain, this message does not apply to you) Merged an important bug fix, ensuring bug-for-bug compatibility with reference implementation's SignatureHash()https://github.com/jgarzik/python-bitcoinrpc/ was also merged into this library, so that RPC support does not require a separate library.Thanks to Peter Todd for both updates. Merged "addnodes" support, so that additional nodes may be added via configuration file. Yes, the OP was long ago updated to reflect current bounty status (15 BTC from me). Forgot to mention...  the following python util, linearize.py, was checked into the bitcoin repo today:     https://github.com/bitcoin/bitcoin/tree/master/contrib/linearizeThis tool may be used to recreate bootstrap.dat byte-for-byte identical with the bootstrap.dat in this torrent.If you are running bitcoind locally, create bootstrap.dat locally, then start seeding the torrent immediately at 100%!
Using OpenSSL is important for bug-for-bug compatibility, even ignoring the performance improvements. Updated block chain torrent to height 250,000, coinciding with a recently commited checkpoint in the bitcoind source code.Existing seeders, please update by simply swapping out the old torrent file for the new torrent file.  After restarting your torrent client, you should already have ~85% of the new bootstrap.dat.New seeders:  We always need more seeders, in every country of the world, to help spread the block chain and speed downloads.  Ideally, we have a large swarm of seeders, that burst to downloads at maximum download speed, and then remain idle the rest of the time.Read the OP for magnet link and torrent details.  Ask questions. Obligatory, related plugs:https://github.com/gasteve/node-libcoin  (bitcoin JS library, for node.js -- an update of bitcoinjs-server)https://en.bitcoin.it/wiki/Identity_protocol_v1  (also uses base58-encode-check and a well known prefix) It is tough to do real-time trading and avoid that problem. +1I was also curious about dividends.That would be ideal:  a [non-anonymous, sorry TorBroker] service that allowed me todeposit bitcoinstrade US securitiesreceive dividend payments, instantly converted to bitcoins, and credited to a bitcoin balancewithdraw bitcoins Definitely an ambitious and exciting service.  Glad to see it.  This sort of investing is key to growing bitcoin, and creating "100,000 little links" with the legacy financial world.Problem #1:  impossible to prove this is not a scam, besides actual service testing and observing the results.Problem #2:  US capital gains tax liability, which the operators presumably must payProblem #3:  Bitcoin income/exchange tax liability, and other regulatory risk.  Move any significant amount of money into TorBroker, and it is noticable that you are suddenly appearing at your brokerage's doorstep with USD cash from already-watched bitcoin exchange sources.Even assuming 100% honest site operators, a more realistic fee seems like it would be closer to 33% to cover all taxes, since operators seem unlikely to be able to prove to the IRS that receiving thousands/millions of dollars in bitcoins is not income.Disclaimer:  Of course, for legal and risk related reasons, I do not plan to actually connect to the website. How about this... encourage automatic decentralization.1. Update mining software to automatically rebalance between pools, based on a variety of factors.  Some miners and proxies already do a bit of this.2. Measure the size of pools, and select pools to help avoid one or two pools having large shares of the network power. BTC Guild's switching seems to have worked out just fine.They assign shares to rounds, and changed the "N" value between rounds, when they needed to change. This received several bug fixes, by way of its use of python-bitcoinlib. Updated with several bug fixes, and some new modules (bloom filter). Pull request https://github.com/bitcoin/bitcoin/pull/2905 proposes to remove "getwork" RPC from bitcoind: https://en.bitcoin.it/wiki/GetworkOn mainnet, almost everybody uses a pool (and therefore, not "getwork" directly to bitcoind).  Those few who solo mine use a pool server to talk to bitcoind via "getblocktemplate" or other means.  Tests show that attempts to solo mine on mainnet via "getwork" lead to delays and problems.On testnet, getwork has a better chance of continuing to work.  Nevertheless, the same tools (open source pool servers or p2pool) are available for testnet, obviating the continued need to support getwork.However, at one time, getwork to bitcoind was widely used.  I wanted to poke the audience, to gauge response to removing "getwork."  If a driving use case remains of which we're unaware, speak up, please.  We don't want to break anybody needlessly. +1   this will become relevant in the future.Two years ago, I speculated on the legal ramificiations of running a mining pool -- that is, being the one who selects the coinbase payouts, and in turn, transmits a bunch of bitcoins to a bunch of others.  Solo miners have one level of risk (coinbase payouts), and mining pools have an additional level of risk (coinbase payouts + miner payouts).I wouldn't be surprised if mining pools in the US required KYC/AML verification.The best argument can be made for the end-of-line miners.  They do not control the coinbase nor payouts, and the best case may be made for them as providing a computing service, in exchange for bitcoins. FYI,https://github.com/gasteve/node-base58https://github.com/gasteve/node-libcoinShould be no need to create/duplicate base58 or bitcoin code, in node.js applications. +1 everything transferred as expected Well,One standard miner practice is to behave economically rational:  make the transaction zero-fee, and include it for free in a block that you mine.Including mining-pool-specific transactions in blocks you mine has been common for years, and I encourage ASICMINER to do the same. ASICMINER dividend transaction 2f8ae228e273c34591c5e7687da020a459a692daee6ea13bc62fa6701bb29504 remains unconfirmed after several hours.Hopefully ASICMINER mines their own payouts! 0.9 will largely be feature driven, not schedule driven.Payment protocol is one goal, and that is close to merge. Dying to read actual subpoena text...Does the subpoena include confidentiality clause, preventing the sharing of its contents? Still awaiting share transfer confirmation. 75@4.1
75@4 Since the beginning of bitcoin, I've been saying that US-based bitcoin exchanges likely need to register in 50 states plus federal level, to be compliant with existing laws.  It's a huge burden, but that was my common sense, I-Am-Not-A-Lawyer read of the law as it stood.  Nothing has changed that estimation.However, once that hurdle is overcome, great things are possible. 75@3.9 See https://bitcointalk.org/index.php?topic=272269.0 for discussion of the NY memo, and Lawsky background. 75@3.85 Reserved. URL: http://dfs.ny.gov/about/press2013/memo1308121.pdfreddit: http://www.reddit.com/r/Bitcoin/comments/1k7e18/ny_regulator_memo_notice_of_inquiry_on_virtual/ 75@3.8 Answer: no.We can always use more full nodes (bitcoind or Bitcoin-Qt) that accept incoming connections from the global Internet.If you are behind a firewall (you should be!), drill a hole for port 8333, and verify that it works from somewhere outside your network. heh, just trying to own one tiny piece of each mining concern. 75@3.7 75@3.66 Please click the 'watch' link at top or bottom.  There is no need to reply to a thread, to watch it.See the Watchlist link in the upper left. PM sent.   Mentioned ASICMINER as a success story in a blog post,     Bitcoin, free markets, and wanting your ASIC mining hardware now now now      http://garzikrants.blogspot.com/2013/08/bitcoin-free-markets-and-wanting-your.html     or https://bitcointalk.org/index.php?topic=270824.0 (they would yell at me, if I posted this in the Press section, I think)Thought ya'll might be interested in this piece,    Bitcoin, free markets, and wanting your ASIC mining hardware now now    http://garzikrants.blogspot.com/2013/08/bitcoin-free-markets-and-wanting-your.htmlComments, corrections and additional examples welcome.Update, content pasted below, on request.--------------------------<snip>----------------------The reddit comments discussing the Avalon status update are particularly amusing, embodying signature American impatience:  "I want something, I want it now, and I will rage at the injustice of instant gratification being delayed."    When it comes to Bitcoin mining, the whole idea of buying something without having any real clue when you'll get it is absurd. It should be like any other computer. Buy it, get it shipped to you within a week. No more bullshit. Producing a new computer chip requires engineers with highly specialized design skills, and enormous amounts of capital.  $500,000 - $2,000,000 or more.  Any mistakes in the chips cost similarly large sums of money to fix.  Even with a 100% complete design, production may take months.  This is simply not a just-in-time operation.  Further, unexpected month-long delays are common.  Any mistake or change adds weeks to the schedule.Thus, economics dictates certain realities.  Namely, paying your engineers and paying for chip production.  Possible funding sources:    Angel investors (rich people write big checks)    IPO (ASICMINER)    Pre-orders (BFL, Avalon)    KickStarter (company can fail to produce, and nobody gets sued)    BountyLet's take them one at a time.    In 2011-2012, no one stepped forward to write big checks.    ASICMINER IPO'd successfully, on an unregistered-securities exchange.  Risky, but it worked.    Pre-orders, we will discuss separately, below.    KickStarter-like models do not appear to work well for >$1 million projects (statistical anomalies aside).  KickStarter itself is anti-bitcoin.    Bounties never amount to anything more than pocket change, for real projects.Essentially, there were two workable models that the free market has shown will work in 2011-2012:  IPO on unregistered securities market, or pre-orders.An unregistered securities market clearly appeals to free market libertarians, as the creation of GLBSE and other projects in the bitcoin community demonstrate.  It is also a magnet for scams, as experience has shown (Pirate-related pass-through funds were listed on GLBSE).  Thus, IPO is a risky endeavor, and in 2011-2012 was unlikely to be successful in producing mining chips.ASICMINER, through the regular exercise of [some levels of] transparency, prevailed in a difficult market.  They raised capital, started operations, and have so far maintained sufficient levels of profitability to continue operations.  ASICMINER survived the collapse of GLBSE, and continues to pay dividends to shareholders, despite the operator "friedcat" remaining anonymous.Pre-orders are the remaining funding model.  This is another model that is fraught with scams.  Indeed, there have been many copycats who set up a website, promise ASIC hardware, and attempt to collect money.  How to separate these scams from the real operators?  That question is the fundamental problem with pre-orders.Unfortunately, pre-orders are also the most straightforward way to fund an ASIC project, if you lack IPO or Angel money.For bitcoin, circa 2011-2012, pre-orders were the most realistic way that a computer chip was going to be produced.  At the time, fewer knew about bitcoin, and it was unknown if bitcoin's price -- then under $5.00/bitcoin -- would support mining hardware.  It was not obvious there would be a profit. Butterfly Labs and Avalon took that risk, and succeeded.  Avalon was out the door first, while Butterfly Labs took over 12 months to begin shipping hardware in volume.  Another effort, bASIC, failed, through the operator eventually refunded almost all the pre-order sales money.Today, mid-2013, bitcoin hardware has been proven to sell.  BFL, Avalon and ASICMINER proved that hardware can be produced, that customer interest exists on the free market.  Several other startups are entering the mining hardware business:  CoinTerra, HashFast, Alydian, KNCminer to name a few.  Existing players are shipping hardware, and working on next-generation designs.We all want instant gratification.  And customers who pre-order mining hardware have a clear economic incentive to want the mining hardware in their hands ASAP -- every day lost costs money.But that must be balanced by setting realistic expectations on the mining hardware businesses.  These are all tiny startups, with no existing chip production lines, creating brand new computer chips for an uncertain, volatile bitcoin market whose profitability in future months is unknown."buy it, get it shipped within a week" is a realistic expectation for a decades-old computer market that mass-produces PCs.  As the bitcoin mining hardware market matures, we will start to see this too.  Many of the new mining hardware companies are learning from the BFL/Avalon experience, and competing with enhanced pricing and customer service models.The free market at work.  The bitcoin mining hardware market is what it is, and could not have been accomplished any other way. Can we please move BFL chatter to a BFL-related thread? Many vendors are figuring out that zero-confirmation transactions are just fine... for order flows where the actual product delivery takes longer than an hour or so.  i.e.  "accept" the zero-conf transaction, then check it again at a later time when product delivery starts.  For places such as BitcoinStore.com, this works because a bitcoin transaction will have many confirmations by the time they are putting an order in the mail.  Similarly, namecheap can just yank the domain control away from you, if the bitcoin transaction gets double-spent, making "accepting" zero-conf transactions just fine.Indeed. They started a while ago. Yes, they are doing their own chip.  Not BFL or Avalon AFAIK.
Are any of the controllers going to be OpenCores' OpenRISC?  That would be neat, if so. Next time, try clicking the "watch" link.  There is no need to respond to a thread, just to watch it.  (look at Watchlist link in the upper left) Hah, cute!  I might buy a few.  Thanks. There is certainly "life at Avalon."  I was poked by the team, to make sure my batch #3 arrived (it did, even after a shipping address mistake, though manual intervention with DHL was required). That's what I did -- but modern ATX often requires shorting a pin, to turn on the PSU.See http://www.techpowerup.com/articles/other/22 June 2012. U.S. judge says SEC can pursue Bitcoin-related lawsuitURL: http://www.reuters.com/article/2013/08/06/us-court-sec-bitcoin-idUSBRE97517G20130806 Update: 2x working Singles (~60GH each), 2x dead BFL-supplied PSUs.You can see an example of the dead PSU on the left side of this picture (the PSU is on the left, the miner on the right):     https://twitter.com/jgarzik/status/364783173869113344/photo/1Had to purchase third party PSUs at Fry's, and fashion wires out of a child's toy, but the miners are happily mining. In almost every case, buying bitcoins would have been smarter, easier and more lucrative than buying ASIC mining hardware.That is a separate subject from whether or not my BFL hardware returns the initial investment (it will). Just drop bootstrap.dat into your bitcoin data directory, restart Bitcoin-Qt, and do not be confused by other, more complicated instructions. True.Hogwash.  My 2x $1300 SC Singles are quite likely to return their purchase price in a few months. bfgminer worked out of the box on Fedora Linux.One SC Single is happily mining away, seeing 55-60 GH as expected.Another Single is not running currently, due to faulty BFL-supplied PSU.  Will test second unit tomorrow. The unboxing, if it matters: https://twitter.com/jgarzik/status/364453387057643521Looking to run mine via Fedora Linux, on a laptop.  (Old laptops make great wireless/ethernet bridges, and they have USB too)Although...  it is tempting to use of these as the "mining hub".  Just bought one at Fry's:  http://www.intel.com/content/www/us/en/motherboards/desktop-motherboards/nuc.html Just got 2x BFL SC Single miners, but cannot find my Kill-A-Watt.Has anybody posted amps/watts numbers for the ASIC Single anywhere?Thanks.Need to make sure I don't blow a circuit or three.   Received 2x BFL Singles today (ordered June 2012).Was a bit of a pleasant surprise, as I was only expecting one.  (double-checked the order, I paid for two, just forgot) Yes. For the "headers" response message, that is correct. This may be the case.Untested thesis, based on code read:  "headers" message format changed when https://github.com/bitcoin/bitcoin/pull/2013 was merged in Nov 2012.You may have uncovered a protocol-related bitcoind bug.Update: Incorrect.  I was misreading some code. Simply dropping bootstrap.dat into the folder is the safe, easy way.  After the import is complete, the file is renamed to ensure it is not re-imported over and over again.-loadblock is fine too, but requires a bit of extra work on the part of the user. My batch #3 order (1x machine, 3x modules) arrived.
bootstrap.dat goes into the data directory.  The same directory as debug.log and peers.dat are located. It would be nice to have an "addr_v2" message, which supports a list of services.  Or some non-propagated way of enumerating services, like a "list_services" P2P message.  I've proposed such myself.The main issues are thinking about how this gets propagated around the network properly, getting this info from various seeding mechanisms (if possible), and trying to avoid DoS issues.Also, we have nowhere near 64 services, so there are plenty of bits available for use right now, with zero protocol modifications. Sadly this is one of those cases where it can be easy to get it wrong.  It does seem worth investigating whether there was any breakage or behavior changes since 0.3.x days.  We have changed CBlock to CBlockHeader and it is entirely conceivable that one might have output the "number of transactions" variable, and another did not.  Worth checking. No, it is the version of the block-locator object.The wiki is unclear.  "getheaders" receives two parameters, a block-locator object and a hashStop.  Inside the block-locator object, there is a version for that locator data structure only.  The version applies to the locator object, not getheaders message as a whole or hashStop parameter. Where do you see a version field in the "getheaders" message?"getheaders" has two parameters, locator and hashStop.Of course, each block header has the block header version. "They are attempting to ride the coattails of the Bitcoin brand" The suggestion on github to permit selection of output format by file extension is interesting.  e.g.GET /rest/tx/TX-HASH.json (JSON-format expanded tx)GET /rest/tx/TX-HASH.txt (binary serialized tx, hex encoding)etc. Hopefully node-libcoin will be a full replacement for bitcoinjs-server...  Nice to see some further node.js work!  Good show.Check these out,https://github.com/gasteve/node-base58  ('base58-native' in npm)https://github.com/gasteve/node-libcoinWe are cleaning up bitcoinjs-server into a nice library, and fixing many bugs found (including buffer overflows and memory leaks).And watchhttps://github.com/jgarzik/txtoolhttps://github.com/jgarzik/wallyfor other node.js work. While 8 decimal places could be considered a magic number, it is one we may expand later, without impacting the total money supply. txtool is a command line tool written in JavaScript, that helps you build and sign multi-sig transactions.https://bitcointalk.org/index.php?topic=249205.0https://github.com/jgarzik/txtool Updated OP and pull request to remove non-standard "Bitcoin-Format" header, and instead use github-style "clean" URLs. No current client will tell the user "hey, I found an anyone-can-spend" nor list that in their balance.Clients pattern-match output scripts, and only "see" ones with scripts they recognize.All other transactions are simply invisible without special software to find them and spend them. This was noticed a long time ago.  It is just now being re-noticed by others I discovered this over a year ago while rewriting everything into python:https://github.com/jgarzik/python-bitcoinlib/https://github.com/jgarzik/python-bitcoinlib/blob/master/bitcoin/scripteval.pyCan you spot the problem?   What is the use case?  That data falls into the category of "public blockchain data", so it is OK to add that sort of data, if there is a use.Note that the JSON format of a TX outputs its confirmed block-hash, which enables discovery of a TX's merkle branch. Yes.Yes. They are doing the same thing under the hood: making a TCP connection to bitcoind, sending/receiving JSON-RPC data. Not sure I understand what this means.That is correct.  "bitcoind getbalance" executes a new copy of bitcoind, which connects via TCP to an existing bitcoind, sends and receives JSON-RPC, then disconnects and exits.  Not much different than using PHP or cURL to make JSON-RPC calls. I would be happy to merge litecoin and stratum support into the pushpool repo, if someone created a pull request. URL: https://github.com/bitcoin/bitcoin/pull/2844Adding an HTTP REST API for bitcoind has been occasionally tossed about as a useful thing.  Such an API would essentially provide a decentralized block explorer capability, enabling easy external access to transaction/address/block indices that we maintain.The first two implemented API calls are simple, returning a block or TX given a simple query string based on block hash, e.g.Code:     GET /rest/tx/TX-HASHCode:     GET /rest/block/BLOCK-HASHThis can be easily accessed via command line cURL/wget utilities. Output formats -- binary, hex or json -- may be selected by append a "/json" or "/hex" suffix to the URL, e.g.Code:     GET /rest/tx/TX-HASH/jsonThe general goal of the HTTP REST interface is to access unauthenticated, public blockchain information.  There is no plan to add wallet interfacing/manipulation via this API.
+1Related note:  JSON test vector data from bitcoin/bitcoin.git is reused in multiple projects: pynode, picocoin and now node-libcoin. Very cool.   It is much like my recently introduced txtool utility.I tend to prefer the git-like sub-command model, rather than putting all the utilities in PATH. wiki wording does not precisely match actual function. This is true for most people (but I am not most people <evil grin>)+1 No.The file format is Oracle Berkeley DB.  A quick google did not find any file format specification.  (help requested!)The key-value pairs are encoded using standard serialization (binary encoding) found elsewhere in the bitcoin protocol. A pull request is a source code change to bitcoind at https://github.com/bitcoin/bitcoin/   Someone has already written zeromq support for bitcoind. The standard does not mutate all the time (though I do agree client diversity is a good thing). I think there is agreement that is a long term goal for bitcoind, yes. As far as I know, zero clients "fully support" multi-sig.Simply creating multi-sig transactions often requires using some expert mode in the software, if the client supports it at all.  Consider that some balances are segmented into two categories:  (1) outputs you may spend (control all keys), and (2) outputs you might be able to spend (control M-of-N keys).  And, transactions must be passed around somehow in partially-signed state, which gathering signature from multiple parties.  There are several use-case and user-interface issues to be solved for useful workflow. Indeed.  See http://www.coindesk.com/bitcoin-developer-jeff-garzik-on-altcoins-asics-and-bitcoin-usability/ for some thoughts. See the zeromq pull request.A REST interface has also gained interest in some areas. That is an existing proposal known as "archive node." Cool stuff.  It's great to see all the xperiments and side projects spurred by bitcoin's entrance into the technology world. Write calls have never been atomic in any Unix-ish OS...  They may be reordered by the OS between fsync/fdatasync calls, and may be reordered again at the hardware (disk) level, unless the OS sends a hardware flush command (FLUSH CACHE / SYNCHRONIZE CACHE). If leveldb cannot handle suspend/resume with full data integrity, then we may need to revisit it. What is an OSX ML? It is huge to expand bitcoin access to the millions of people globally that already have a brokerage account. There is little engineering upside to reimplementing highly complex cryptographic algorithms on your own, given the levels of engineering review and crypt-analysis of your own codebase versus an existing crypto lib.It might be personally satisfying, but it makes little sense unless you are truly an expert crypto mathematician. A bitcoin ETF is huge.(note: they are not the only ones working on one...) Yes.These are leveldb internal storage setup.  Inherent in leveldb design.  Analogy: Berkeley DB's low level storage format.No.  This is the raw bitcoin-specific wire format of blocks.Bitcoin blocks differ in size.Also, some blk*.dat are larger because they were originally that way when imported the first time.If you use bootstrap.dat to initialize a new database then all your files should be nearly the same size.
While true, because miners control transaction selection, there are a great many rule changes that miners cannot make, no matter how much hash power they have. The source code to versions all the way back to 0.1.5 is available at https://github.com/bitcoin/bitcoin/ See txtool via https://bitcointalk.org/index.php?topic=249205.0 for a step-by-step multisig example. URL: https://github.com/jgarzik/txtooltxtool is a command line tool written in node.js that interfaces with Bitcoin-Qt/bitcoind, to automate or assist in building interesting, unusual, complicated or just plain odd transactions.  The goal is to demonstrate advanced bitcoin features, and make it easier for users to experiment.  The intended audience has a basic awareness of how bitcoin transactions look and work.The theory of operation and full list of commands may be reviewed at https://github.com/jgarzik/txtool/blob/master/READMEInitially, two working examples are presented:Easy multi-signature transaction building, spending: https://github.com/jgarzik/txtool/blob/master/examples/multisig.txtPassing around transactions (possibly multi-signature) for signing: https://github.com/jgarzik/txtool/blob/master/examples/tx-signing.txtFurther examples such as decentralized crowdfunding and atomic coin swapping will be demonstrated soon. All your examples are highly centralized services.If you want to build something decentralized, that is difficult to shut down or game, then it will look different than those examples.Bigtable was not built to check for cheating in those millions of cheap servers  Great stuff.  Been interested in this personally for a while.  I know BitPay is interested too. 1. Regulators released guidance indicating that bitcoin buying/selling within the bitcoin economy is affirmatively OK, and would not require every user registering with the government, as many conspiracy theorists had direly predicted.2. Many bitcoin users are in the US.3. Many bitcoin investors are in the US.The sum of that != bitcoin hostile.  Just the opposite.It's also silly to loudly complain when people are standing up and volunteering to take slings and arrows on behalf of others. If you read the paper, you can see they are talking about a change introduced in version 0.8.2, not 0.8.3.Further, it is a zero-confirmation transaction attack, which is already known to be insecure. My batch #2 unit arrived yesterday via DHL, Beijing -> Atlanta. My batch #2 unit arrived yesterday via DHL, Beijing -> Atlanta. There is nothing wrong with educating people about bitcoin.  That includes knowing how your local jurisdiction's laws may apply.Knowledge++  Ignorance-- No.  The recent dust change did not target SatoshiDICE.  They increased their payout on losing bets immediately, demonstrating this.The recent dust change addressed the people who were dumping megabytes worth of data, such as the full contents of wikileaks cables, into the blockchain. The blockchain already has automatically mirroring and spanning; that is fundamentally what the bitcoin client does in the peer-to-peer network.The wallet is quite small, and you absolutely should be backing that up on a regular basis. Some slow advances.  The library is seeing use in various places, as the base for custom bitcoin apps that need to be really fast.The two clients, "brd" (block relay daemon) and "picocoin" (SPV client) remain incomplete and have not seen much attention.The library, libccoin, is largely feature complete and available for use today. Further, insider trading can be a good thing.  Read up on free markets   Any trading, "insider" or not, adds information to the market and assists in price discovery. Yes, it does.  FinCEN's March guidance makes this clear.World of Warcraft and Second Life, along with bitcoin, were also mentioned specifically in another report from the GAO. In 0.8.3?  The fix is a vulnerability an attacker exploited on mainnet to crash several nodes,. Yes, it was used.  Some lower memory nodes crashed. This conspiracy theory is ignorant of (a) how open source works and (b) how the dev team works. And yet, pointedly, the question was not answered.
The main point is that bitcoin clients do not share the raw blockchain data and leveldb database data at the filesystem level... because the whole point of bitcoin is to share the blockchain data at the client level   bitcoind is the cloud ;p While I agree with you on his paper, please keep that separate from his blog post, which directly addresses $subject. A "solution" of this type would simply not be bitcoin.  An ever increasing blockchain is an integral part of the system that you bought into.  Any other solution is no longer the zero-trust system Satoshi invented and that we all bought into.Further, you cannot handwave away the problem that, if transactions is infinitesimally cheap, people will abuse the system by sending non-currency data messages. Lots of them. Gigabytes worth, as other alt-chain field experience has proven. To the point that bitcoin-the-currency transactions are impacted."I want a system that can process infinite amounts of traffic" is in the land of unicorns.The accusation of dev laziness is particularly rich, given that SatoshiDICE abused the blockchain in this way, by sending informational messages (IM "You lost a bet") via the blockchain.If you want an infinite amount of transactions per 10 minutes, you have just reinvented the Internet... over the blockchain. Poorly.All that said, block chain size has an easy solution for the individual user -- use an SPV wallet.  And for the medium term, there are plans for distinguishing between archive nodes (those that store the full chain) and validating nodes (pruned). Who, precisely, wrote that comment?  And is that author presently suing a bunch of bitcoin companies? Neither of that transaction's outputs are dust.  They are both >= 0.01 BTC.Transaction inputs may be any amount. bootstrap.dat is only used the first time the client is run.  bootstrap.dat data is imported into the client's database, and is not needed after that.Sadly, there is no facility for sharing the blockchain. This is very relevant to this thread:  Open-source Governance in Bitcoin  https://freedom-to-tinker.com/blog/felten/open-source-governance-in-bitcoin/ They assist in the development of software.  Plenty of code contributions come from non-BF devs too. bootstrap.dat must be in the bitcoin data directory, but this may be a symlink to another filesystem on a cloud drive. The foundation pays Gavin.  That's it.  All other core devs are employed by other organizations, and (AFAIK) receive zero income from the Bitcoin Foundation. Incorrect.  bootstrap.dat is several gigabytes in size, and comprises the vast majority of today's blockchain.See this thread for more details:    [ANN] Bitcoin blockchain data torrent    https://bitcointalk.org/index.php?topic=145386.0 URL: http://www.coindesk.com/california-issues-cease-and-desist-letter-to-bitcoin-foundation/Includes a couple quotes that other reporting doesn't. Unreliable centralized service Not as much as you think.  Google around for Aaron Greenspan (ThinkComp), the author.(and PS, this duplicates an earlier post in this thread ;p) A HackerNews comment making the rounds:https://news.ycombinator.com/item?id=5928480BIG FAT WARNING/DISCLAIMER:  This is Aaron Greenspan, who has his own "interesting" legal history etc. ReDonate is a better effort than most.  Typically, donations are so unpredictable that no sane developer would rely on them for income, especially if they are supporting a family.  ReDonate solves some of those problems, but not necessarily all.  Getting recurring donations working at all was a big step.  However more ideal -- and what Bitcoin Foundation can provide -- isstable salary with benefitshandles the burst-y ebb and flow of donationsmostly* frees the engineer from drudgery of constantly campaigning for fundsDonations and bounties are rarely effective in getting and giving long term commitments to open source engineers. Let's try to be mature adults and keep some perspective.Recent FinCEN guidances, DHS/etc. seizures, IRS/GAO discussions have all been in line with existing US law.  See my State of the Coin 2011 presentation and earlier forum discussions.  It has always been known that US individuals and companies must... do the obvious and follow US law.  For US bitcoin exchanges, for example, that likely means federal + 48 state licensing.  Enforcement actions like Liberty Reserve or Mutum Sigilium seemed to be clearly outside existing, known regulations.  You gotta expect law enforcement to... enforce the laws.This California letter is so zany because it does not fit existing law or facts In My Opinion As A Non-Lawyer.Each regulatory action needs careful consideration within the context of its country.  "ZOMG GOVERNMENT DEAD IRAQI CHILDREN" is about as far from thoughtful consideration as one can get.Bitcoin is big, and we are getting a lot of regulator scrutiny right now, worldwide. As am I.  Recent developments with the IRS and FinCEN are entirely consistent with US law as it has existed for years.  Ditto Mutum Sigillium seizure warrant. Tax and MSB implications were directly addressed years ago in my State of the Coin 2011 presentation, among others.  If you operate outside the law in your jurisdiction, the obvious result occurs... eventually.There is no question that US authorities are ramping up enforcement of existing law. Watch this one closely, people. Unlike other recent FinCEN guidance and regulatory comments, and law enforcement actions, this action from California does not fit the facts nor existing US law.This simply shows a misunderstanding of what bitcoin is.tl;dr: California thinks Bitcoin Foundation "runs bitcoin." tl;dr California thinks the Bitcoin Foundation controls bitcoin.Clearly incorrect.
Correct.Most of the forum idiots here do not seem to realize that the Bitcoin Foundation is taking slings and arrows on behalf of others, fighting for bitcoin acceptance.When you fight for bitcoin, people fight back.It would be a loss for all if the Bitcoin Foundation goes away. With this exception of this California action, everything else in the US has been completely consistent with existing US law. Shadowrun and bitcoin's rootsOriginal link: http://garzikrants.blogspot.com/2013/06/shadowrun-and-bitcoins-roots.htmlSatoshi's bitcoin paper, mailing list and forum discussions list bitcoin's ancestors as ecash, hashcash, b-money and the cypherpunk movement.  I'd argue that it has its roots in staple science fiction as well.Recently, strolling through my stacks of scifi books, some Shadowrun novels leapt out at me.  Pulp science fiction of average quality, but some of the text particularly resonated with bitcoin today.  Quoting liberally from Never Deal With A Dragon,p121, Like many clubs, Rumplestiltskin's employed a Troll to handle the lines of hopefuls. ... They were still ten meters from the front of the line when Roe suddenly appeared.  "This will never do," she said.  Taking each one by the arm, she led them directly up to the doorman.  She twirled a shiny credstick in her right hand.  The four dark bands on the end of the cylinder marked it as certified for at least one hundred nuyen.  She tossed it to the man.  "My friends here are late for their table."p161, She held out her personal comp to him.  He smiled in assurance that he had regained the upper hand as he slotted his credstick and made the funds transfer.  To demonstrate her trust, Hart ran a confrmation of the transfer as soon as he returned the comp."Your money's good.""Good as gold, Ms. Hart.""Better," she said hefting her comp before slipping it back into her bag.  "Gold's too heavy."p235, She stopped at a public telecom, slotted a credstick, and punched a number.  She waited while the connections were made and a voice on the other end repeated the last four digits of the telecom code.p217, These files must be heavily protected.  The files turned out to be just that.  It was hours before they determined that Drake had certified several credsticks through Transbank.  It seemed hardly worth the effort and new headache to achieve such a dead end.  A certified credstick was the electronic equivalent of cash.  The money could still be traced once it reentered the financial network, but there would be no record of who had received the credstick."Twas a small hope that he would be so careless.""Maybe if we can find some other transactions of the same monetary value as were assigned to Drake's certified sticks, we can pick up the trail by following it from whereever Transbank sends the funds.  Sure, some of the matches will just be coincidence, but some might actually be the recipients of Drake's generosity.  If we're lucky, some of the names attached to those transactions might mean something."After two more days of data slogging, they had eliminated likely coincidences.  That left three names.  Each one connected to at least three transactions whose amounts equalled one of Drake's credsticks.The first, Nadia Mirin, was no surprise.  In her case, the amounts were the smallest, suitable as gifts to one's paramour.  The second name was totally unfamiliar, but the pattern of intervening transactions was interesting.  Each amount went through a series of transfers, all for the exact value of Drake's credstick.  Each thread led to a sealed account in a Denver data haven.Bitcoin has successfully achieved that which was science fiction prior to 2009.  The electronic equivalent of cash.  The US Dollar may be the world's largest digital currency, but only bitcoin (and other crypto-currencies) may claim to be the electronic equivalent of cash.Now... where are those credsticks we were promised?  Bitcoin Wallet on a smartphone? Trezor, perhaps? CPU era: Intel, AMD, similar chipmakers rule.GPU era: AMD rulesFPGA era: Xilinx rulesASIC era: TSMC and a few other foundries ruleASIC era has the advantage that the chips are going to be widespread. Edited and fixed. The headline suggests otherwise with "official" Amazingly stupid.We have a private currency where people may freely choose to enter and exit at will...  and somebody thinks we need a government to force an entire country to use it?  Sigh. OK, updated torrent file at SourceForge and http://gtf.org/garzik/bitcoin/bootstrap.dat.torrent to add trackers mentioned upthread.Same info hash (thus, same bootstrap.dat file data).Once enough peers have this new torrent, the magnet link should pick it up for the rest. 2-3 of those seem to be giving people timeouts. Well, if it is truly a problem, I would prefer to regenerate the .torrent file.What are everybody's favorite trackers?  IRC also reports a couple trackers listed in the magnet link are down.Ideally the DHT should find things, but trackers seem to be necessary for some clients.Edit: rtorrent users should turn on the DHT. Updated torrent.  See OP for full information.The torrent is directly available from http://gtf.org/garzik/bitcoin/bootstrap.dat.torrent but ideally the magnet should find it.As with other updates, simply replace (delete) the old .torrent with this new .torrent.  Any existing bootstrap.dat will be appended, avoiding a lengthy download process for the first ~200,000 blocks.Please seed this new torrent (and drop the old)! Search around this forum and the bitcoin wiki for trusted / anonymous passports, fidelity bonds, SINs, ... You snipped the relevant, quoted context for the response given.The entire transaction history is required for a zero trust system. Without the current design, you cannot have a zero trust system.Most efficient designs are of course possible, but decrease trust.  SPV is an example. Because it makes good engineering sense.Technically we have a balance sheet anyway:  the set of unspent transaction outputs (UTXO). Yes, the blockchain torrent will be updated this week (probably today).As others have noted, if you compress with 7zip, that eliminates a useful property from the current torrent:  The first X gigabytes are the same in the old bootstrap.dat torrent, and any new bootstrap.dat torrent.  Using the same file, and replacing the .torrent file, will cause your torrent client to download only the new blocks, not the entire torrent. Not AFAIK.Usually it is tried at least somewhat surreptitiously, e.g.      Report of FBI back door roils OpenBSD community     http://news.cnet.com/8301-31921_3-20025767-281.html +1 No, bitcoin is not intended to rival Visa, and never will be.  Bitcoin has nothing to do with debt (thank goodness). Mongo works just fine, too.
People generally wind up creating custom databases, or at least highly custom setups of standard database software.You are talking about indices containing many millions of records.  It isn't as easy as just telling your SQL db to index a column.  People often turn to tools like redis for such huge datasets. Sounds like you are using a modified version of pushpool.  Report bugs to the developer who modified it.That's an issue outside bitcoind / pushpool, in the pool software. Donald Knuth and Linus Torvalds both agree with this sentiment.  Just like any other tool, you have to know when to use it, and when not to use it. Block size soft limit is already a configurable parameter inside bitcoind. Not true at all.  You may send a digitally signed message to anyone, by any means of digital transmission.  Any number of economic incentives may exist to maintain exclusivity. There is no 7 tps limit, even with 1MB blocksize.Off-chain transactions offer unlimited tps. The vast majority of that 10 GB is blockchain database, not debug logging. Disabling wifi was always a good idea.Hard line is far more reliable in general, rather than suffer a wifi drop at a bad moment (submitting a difficulty 64 hash).  It also uses less memory. Sure this isn't a UI/Unity issue?  Did you mouse over to the very, very top-left of the screen, where the panel usually lives? He's way off.  Check out @dakami and @jgarzik twitter.  There is even a bet on the floor (that he's trying to back away from). Reminder:  for those of you downloading a fresh copy of the blockchain, please consider using the blockchain data torrent.Testing feedback still welcome and encouraged. Post your platform/OS version in your report, as David M just did (thanks!). No, because it is not possible for you to spend the money.Ditto the preceding answer.  In this example, you do have the ability to spend this money.  You are transmitting value. Feedback on this is welcomed.  Generally, not all platforms have an easy time getting up and running with 7zip.  Users in the past requested something directly usable with bitcoind.Opinions differ, and maybe if it saves a gigabyte or two, it would be worth it.Some users also complain about the doubling of disk space required -- for both compressed and uncompressed copies. testnet may be reset at any time.If somebody starts making it difficult to test with, it will get a new genesis block etc. Pay-to-script-hash (P2SH) is functional on testnet and mainnet.  OP_EVAL has long been superceded and discarded. Bitcoin itself is more decentralized, so it seems like an agent would prefer normal bitcoin transactions.But hey, get creative.  This entire subject leaves wide room for experimentation and research. That seems a reasonable guess.  Either a client program sending garbage, or a client program with a different pchMessageStart (network identifier), connecting on the same port.A lot of the alt-coins are so lazy, so poorly done that they fail to change the things that bitcoin nodes connect to, like network id or TCP port. See Bitcoin blockchain data torrent thread.This is already done in limited form the form of checkpoints.However, because bitcoin is a zero-trust system, it is impossible to avoid validating the full blockchain. There is insufficient consensus to make that prediction. See http://bitcoin.stackexchange.com/questions/3718/what-are-multi-signature-transactions and links within.
See the bitcoin-development list for discussion of this proposal. smoothie's 'ignore' button is colored for a reason.   Even though I already knew all this, I forwarded this to reddit because it seemed quite readable and accessible to others.Standard disclaimer:  mention does not constitute endorsement.    I just believe in widely sharing all knowledge.  Yeah, it was a random act of fascism.Or not.  It's only been two years of pointing out that US bitcoin exchanges clearly fall within the bounds of the laws FinCEN is associated with.  The whole world knew dealing with US citizens required some sort of money transmitter licensing -- that was the entire point of the CoinLab/MtGox deal ("MtGox wants 100% out of US and Canada").The USG is gonna regulate the USD, and it's within their rights to do so.If you dislike this... don't use USD.   What in the world does this mean? Thorough enjoyed meeting so many people at the conference! Yeah, it was a complete gestapo surprise.Or not.  It's only been two years of pointing out that US bitcoin exchanges clearly fall within the bounds of FinCEN.The USG is gonna regulate the USD, and it's within their rights to do so.If you dislike this... don't use USD.   While technically true, ultimately, MtGox is trading USG-controlled USD.  USG is going to regulate USD gateways (and they are well within their rights to do so).  Anybody gatewaying USD will ultimately be bound by US laws. Not urban legend, not Satoshi, and 10k not 1k: https://en.bitcoin.it/wiki/History#2010 A government wishes to control its own government-issued currency.  This should not surprise anyone. This is true.  The current bitcoind client uses this knowledge in a signature cache, to avoid validating signatures twice (once upon TX reception, once upon block reception).heh, nothing is free.  This proposal would add additional round-trips with associated latency, slowing block validation and block propagation.As such, miners could lose their 25 BTC due to orphaning, if their block is slowed. 2013-05-13 Financial Times: Taxmen, police and spies look at bitcoin threathttps://bitcointalk.org/index.php?topic=204307.0 Taxmen, police and spies look at bitcoin threatURL: http://www.ft.com/intl/cms/s/0/42ca6762-bbfc-11e2-82df-00144feab7de.html#axzz2T3OP4P3RPaywall notes: requires free registration or search for a cached copy There is near-universal agreement that the fee system -- its calculation, presentation to users, and other details -- are in need of revision.  That is one of the goals of 0.9, hopefully. Or as I like to say:  all bitcoins come with strings attached.That is, the ability to spend bitcoins is precisely and individually defined by the script language.Each bitcoin transaction may have different rules for spending.And 99.999% of the possibilities were years-ago classified by Satoshi as "non-standard", and not relayed or mined by default.  Only a few transaction types were whitelisted. +1     That's the real way to build a community:  use the ship as a core unit that supplies power and Internet, around which a stable constellation forms.  The owners of the core dictate "building codes" by virtue of requiring certain seaworthiness and navigation aspects for any core connections. +1Ultimately the change is too aggressive and anti-social right now.  Absolutely the miners market may change and make double-spending trivial, but that does not seem to justify removing hope of using a feature that businesses do rely on in the field today.The userbase uses them, for better or worse.This is full of hyperbole and exaggeration, much like the recent thread on dust.  However, it is fair to address the subject on a more reasoned level, because there is a valid point buried in there.There is definitely a contingent of companies that seemingly want to change the blocksize limit immediately, from 1MB to infinity, to fix "this awful scaling problem" they see.  They want to sell the message that bitcoin can scale to Visa/MC levels tomorrow.  There should be absolutely no impediment to sending millions of transactions, for fractions of a penny apiece.We absolutely do want to grow the network and encourage as many bitcoin users to use bitcoin as possible (well, I do at least, and I think Gavin does too)...  but one cannot ignore a key attribute conferring by a limit like the 1MB limit:  it encourages engineering efficiencies to be sought.  Programmers have an incentive to actively seek ways to reduce the number of transactions, or reduce transaction size, when faced with a limited resource.Some business models simply don't care about that part of the equation.  It's not a conspiracy by Gavin and the Bitcoin Foundation funders, it is simply one facet of some bitcoin businesses.  They make money with increased transaction volume.  That's fine, but a key economic counter-point is that these businesses are not bearing the costs of the mining/blockchain impact of a million-TX-per-day policy.Off-chain transactions should handle a resource limitation in a scalable fashion, but no one has good working prototypes.  Gavin has rightly pointed out, in Gavin/retep exchanges, that off-chain transactions remain a scalability solution in theory, while we know for certain that increasing the blocksize limit will enable increased transaction volume.The danger in following that logic too far is that you de facto eliminate most incentives towards creating an off-chain transaction system/network and related businesses, or really as mentioned above, any need for transactional efficiency.  It also has impact on who is a bitcoin miner, selecting out anonymous miners as jdillon predicts.I don't think anybody has The Answer right now, and my main preference is to avoid making decisions that dramatically and immediately change bitcoin's economics.  $Topic might do that, hurting payment companies for no good reason.  Removing the blocksize limit also injects chaos for unclear value.Ultimately it is a complicated, zen balance of factors:  too-harsh limits, and you potentially choke off bitcoin utility just when it is being adopted, and eliminate some business models.  too-lax limits, and you choke off certain technologies, encourage spam, and eliminate some other business models.My current personal preference for a blocksize limit solution isCode:     for each (144*365) blocks,          limit += 1MBAs that's something that cannot be gamed by miners or payment companies.  But most payment companies do indeed react in horror at any impediment to "send as many transactions as possible."Definitely in the middle here too.  Not as aggressive as Gavin or Mike Hearn, but not as conservative as "1MB forever" people either.  1MB was clearly a temporary solution.  (that does not imply simply removing it is without negative impact)If the answer isn't clear, and the system isn't broken right now, err on the side of doing nothing.  The answer was clear, with the recent data spam / dust changes.  Not clear at all, with blocksize limits and the impact on fees thereof. Yep.  Huge demand means a seller's market.  Heard similar comments during Avalon's batch #3 discussion, where the price was dramatically higher than previously batches -- it nonetheless sold out. No one has ever suggested doing so.  A situation that can be realistic one miner might not be realistic for another -- free market, free choice. One realistic scenario is that some players mine at a loss, simply because they find other value in mining -- keeping bitcoin decentralized, keeping bitcoin secure, processing non-standard transactions, etc.
Love the Blueseed idea, hope it succeeds.Recommend paying via Bitcoin, but perhaps due to volatility lock your prices at some other currency. Use a service layered on top of bitcoin, that provides the instant+secure guarantees you want. Hopefully the first release candidate, will full release notes, will be posted soon (days not weeks). Zero-confirmation transactions were never safe.  Note that Satoshi DICE apparently waits for confirmations, on higher value bets -- an admission that SD themselves know zero-conf are not safe.However, with regards to transaction replacement, it should be noted that it introduces race conditions that increase non-determinism.The first step towards improved determinism is, instead, making transactions expire after a certain amount of time in memory pools, without being mined. Don't forgetC: https://github.com/jgarzik/picocoin/Python: https://github.com/jgarzik/python-bitcoinlib and https://github.com/jgarzik/pynode/ And http://abovethelaw.com/2012/05/another-one-of-zuckerbergs-former-classmates-tries-and-fails-to-cash-in-on-facebook/ See http://www.reddit.com/r/Bitcoin/comments/1dyr12/coinbase_coinlab_and_others_sued_for_violating/Quite a defendants list. Not a big threat.  That is basically spending a lot of money, just to throw away a lot more money.  There are clear counter-incentives against this If the community's transactions are suddenly not being processed, then the community will en masse route around the problem, because the incentive to retain the value of one's bitcoins is similarly large.Very unlikely that a private, non-governmental entity would mount such an attack. Another review:1) Ordered loaded Samsung laptop.  Was marked in stock, and arrived within 2-3 days of ordering.  Very fast turnaround, even with "standard shipping" (I was hoping for next day processing and shipping).  Laptop works great.  Very happy with this order.2) Ordered 4x LED flashlights, with 3x of the same type (0.5W "super-led").  1x shipped immediately.  2x just arrived today.  Still waiting on 1x. 2013-05-08 WSJ: Bitcoin Primer: What You Need to Know About the New Virtual Currencyhttps://bitcointalk.org/index.php?topic=199388.0 Bitcoin Primer: What You Need to Know About the New Virtual Currencyhttp://blogs.wsj.com/digits/2013/05/08/a-bitcoin-primer-what-you-need-to-know-about-the-new-virtual-currency/If you hit a paywall, just search for the title on https://news.google.com/ See https://en.bitcoin.it/wiki/Contracts#Example_4:_Using_external_stateThere is a lot of discussion about using bots for various things.  It's fun. The proof-of-work is in the block header.  You can still check proof of work via the block header and merkle tree. 2013-05-07 Wired: A simple guide to bitcoinhttps://bitcointalk.org/index.php?topic=198534.0 A simple guide to Bitcoinhttp://www.wired.co.uk/news/archive/2013-05/7/bitcoin-101 Bitcoiners,A useful link:  A short introduction to TPMs - http://mjg59.dreamwidth.org/24818.htmlHal, Mike Hearn and a few others have talked about using TPMs in the context of bitcoin key storage, or trusted execution of oracles. See https://en.bitcoin.it/wiki/Securing_online_services and https://en.bitcoin.it/wiki/Contracts#Example_4:_Using_external_stateIt would be interesting to brainstorm what uses bitcoin software could make of TPMs.     2013-05-07 Wired: Wary of Bitcoin? A guide to some other cryptocurrencies https://bitcointalk.org/index.php?topic=198238.0 Wary of Bitcoin? A guide to some other cryptocurrencieshttp://www.wired.co.uk/news/archive/2013-05/7/alternative-cryptocurrencies-guide/viewall Certainly.  One way for bitcoin to scale is making the primary, strong chain just timestamp another chain.However, you still must pay miners. Yes, github imported tags all the way back to v0.1.5:Code:[jgarzik@bd bitcoin]$ git tag -l | head -20v0.1.5v0.1.6test1v0.2.0v0.2.10v0.2.11v0.2.12v0.2.13v0.2.2v0.2.4v0.2.5v0.2.6v0.2.7v0.2.8v0.2.9v0.2rc2v0.3.0v0.3.1v0.3.10v0.3.11_notexactv0.3.12
2013-05-06 IEEE Spectrum: The Bitcoin Arms Race Is On!https://bitcointalk.org/index.php?topic=197412.0 The Bitcoin Arms Race Is On!Powerful mining machines are changing the nature of the popular cryptocurrencyBy Morgen E. Peck URL: http://spectrum.ieee.org/computing/networks/the-bitcoin-arms-race-is-on Financial Times: US regulators eye Bitcoin supervisionhttps://bitcointalk.org/index.php?topic=197130.0 FT: US regulators eye Bitcoin supervisionhttp://www.ft.com/intl/cms/s/0/b810157c-b651-11e2-93ba-00144feabdc0.html#axzz2SXW9UnLrPaywall note: FT permits a few free articles per month, with registration. No.It is most likely not any of the dev team, based on in-person chats and observation of code. Indeed.The more people who run a full node, the greater the decentralization[1][2].Using the chain as data storage, rather than currency, costs everybody, because it increases the rate at which people are discouraged from running full nodes.  It increases the costs of that dataset that cannot be pruned, and must be carried for eternity: the unspent transaction output set (UTXO), the list of coins available for spending.Right now, it remains within the realm of a hobbyist to run a full node, especially with the recent memory usage improvements in bitcoind.  But one day, that will not be the case.By pushing back on data spam, we reduce the rate-of-increase on blockchain resource costs, and reduce the disincentive to run a full node.  We push back the day at which there are just a handful of archive nodes with a copy of the full block chain.[1] Probably.[2] Though "decentralized" does not necessarily imply "private", as your message indicates. This "DHT" call comes up frequently.  This is fine for experiments, and as a backup method akin to the recent blockchain-over-twitter project.  But it is woefully less secure and resilient than the current scheme.Bitcoin uses a "D1HT"... a fancy term for "everybody has a copy of the database."  Currently the entire blockchain is massively replicated, perhaps 20,000+ times or more.  This is larger than all but the largest torrent swarms.Benefits:  More secure and resilient.  Far more decentralized.  Better chance of useful work, if one honest peer is found.  100% provable for any node; no "holes" in the history.   Costs:  Network and disk resources required to store the blockchain, and provide it to others for download.Going from that, a DHT is quite a step down, quite a bit less secure.  DHTs are vulnerable to hot spots -- where the whole world queries just a few nodes -- and sybil attacks[1].  On sybil attacks, bitcoin's current peer finding mechanism does a better job of intentionally spreading itself widely across networks; a DHT tends to concentrate on a few nodes.It becomes much easier to attack a portion of the blockchain, if it were stored as (hash,block) key-value pairs as commonly suggested.  If an attacker may DoS even a single (hash,block) pair, you prevent the entire world from downloading or verifying the entire bitcoin blockchain, because the chain is thus broken.  The time spent looking up each hash across a worldwide DHT would be quite slow; that is the equivalent of downloading 234,831 different torrents, not one big torrent.Storage via DHT is a fun toy idea, but it's stupid, slow and insecure as a primary method.  Massive replication is far more secure and decentralized.Hard drive technology has no problems keeping up with blockchain growth.  Network technology is probably the same, though I think there will be some amount of balancing on-chain versus off-chain transactions.It is also thought that the nodes bearing the brunt of the blockchain downloads in the future will be a few professional and volunteer "archive nodes", that store the entire blockchain.  And certainly the blockchain torrent will continue to exist as an alternate method.[1] Remains an active area of DHT research, and several mitigation mechanisms are deployed in the field.  Even with these new techniques, the DoS-a-block, DoS-all-of-bitcoin implications make DHTs an inferior solution. Correct, though I must add that users already choose what to forward, or not.Most notably, the client will not relay transactions outside of a very narrowly defined set of "standard" transactions.  The vast majority of possible transactions are not relayed by default.  This policy has been in place for years. 2013-05-06 Wired: Will Bitcoin Change How Kids Learn to Count?https://bitcointalk.org/index.php?topic=197012.02013-05-06 Verge: Four years and $100 million later, Bitcoins mysterious creator remains anonymoushttps://bitcointalk.org/index.php?topic=197013.0 Four years and $100 million later, Bitcoins mysterious creator remains anonymousURL: http://www.theverge.com/2013/5/6/4295028/report-satoshi-nakamoto Will Bitcoin Change How Kids Learn to Count?URL: http://www.wired.com/opinion/2013/05/heres-the-thing-about-bitcoin-that-no-ones-talking-about/ Close.It is true that miners choose which transactions get into blocks.However, every client chooses what to relay, or not. 1) I note the distinct lack of discussion surrounding https://bitcointalk.org/index.php?topic=130450.0 and its pull request.2) This issue certainly deserves better communication, but think the trolling (reddit/bitcointalk) by @johndillon was premature and exaggerated, because there is still plenty of time and opportunity in the release cycle for comments.  Usually the time prior to -rc1 release is used to write the communications that appear in -rc1.  The -rc1 release announcement then describes the changes, including rationale and impact.-rc1 release initiates a phase of public testing and comment.  If the community really dislikes a particular change, this testing phase is yet another opportunity to make that known.3) Most importantly...The vast majority of remote workers (miners) do not seem to care at all about mining policies, in practice.  Pools' mining policies are incredibly opaque, few miners show deep interest in mining policy, and few pool operators show much interest in deep thinking about mining policies, transaction selection, and various economic incentives.  Even a lot of smart, engaged pool operators wind up preferring unmodified (or close to it) bitcoind for reasons of reduced complexity.Therefore, just wanting -- quite rationally -- to get paid for mining, it is the sad reality that the block subsidy (currently 25.0 BTC) reduces transaction fees to the economic equivalent of statistical noise.  The long term cost of generating and storing economically worthless transaction outputs is simply not transmitted to users or miners.  Nor, really, is the short term cost.  The economic signalling of the block subsidy drowns the rest out.The cost is currently borne entirely by "the cloud", the all-volunteer P2P network of full nodes.  The only modicum of behavior signalling we see there is a decreasing number of full nodes, and an increasing amount of P2P traffic.What does all this add up to?  The answer is lies in the free market.  Move transaction fees away from hardcoded limits, and towards something more dynamic, with economic feedback between merchants, users and miners.These hardcoded anti-spam limits have existed for years, originally starting out at 0.01 BTC.  Transactions have always been filtered.  Anything outside a small set of "standard" transactions are deemed "non-standard", and will be filtered (not relayed).  Again, policy has been in place for years.The fee limits were lowered over time, but still hardcoded.  This latest change makes this limit configurable, moving one step closer to the goal of users being able to react rapidly to changes in miner policy or bitcoin value.  One step closer to a freer market.Also introduced is an anti-spam rule that avoids relaying transactions whose value is below that of the transaction fee required to send it.  This rule self-adjusts over time, as the "tx fee required to send" changes over time.  In a dynamic fee market, it might change a lot.It is unavoidable that tiny transactions worth fractions-of-a-penny may be easily abused for data transmission and storage.  We have already been burdened with megabytes worth of wikileaks data, GPG encrypted data, and the PGP fingerprint strong set, so this is not a theoretical problem.  These files are stored as bitcoin transactions with values around 0.00000001. It's open source.  Fork away.Though the consequence is that you remain at a higher, hardcoded fee level, and people will still dump megabytes worth of non-currency data into the blockchain (wikileaks cables etc.). This is not a protocol change.This is a client change. Yes.  Though I argue that most are just not familiar with the system, and reacting without learning.As it currently stands, the new default magic number is lower than in prior versions.  So fees are getting lowered -- and user configurable to be easily lowered again (or raised, if that is what the user desires). Please read the patch.Previously, these limits were simply compiled-in constants.  Now they are configurable. The software has always dictated which transactions are relayed, or not.This change makes it easier to change that limit, in fact. Transactions have always been limited.  In the past, the limit was far higher than it is today. Then spam clogs the network.False.  Anti-spam relay rules have been blocking transactions since the first days of bitcoin.In the past, you might get dropped for sending 0.01 BTC, instead of the much-low levels of today.
And of course it is worth re-quoting,Please re-read this before complaining  Let's not take this down a hyperbolic road.  There are enough flames and threads on this issue as it is...SatoshiDICE sending "dust" for losing bets is not The Reason For This Change.People started dumping wikileaks cables, GPG encrypted data, python scripts and other data into the blockchain recently. It is an option in the configuration file.Part of the impetus of the change is to make it configurable, rather than compiled in.  In other words, it is getting easier to change these guidelines. Part of the issue is that people were starting to use the blockchain for data storage, not currency transfer.Below a certain economic value, it becomes trivial to use ultra-low-value transactions as data transmission. This change does exactly that:  takes previously compiled-in "minimum relay" defaults, and make them configurable. Updated OP to reflect new article title. Sorry, no.  Maybe someone else on the forum will finance... That's pretty silly for a trade group, especially in a community that believes in the free market. Lets Cut Through the Bitcoin Hype: A Hacker-Entrepreneurs Takeby Dan KaminskyURL: http://www.wired.com/opinion/2013/05/lets-cut-through-the-bitcoin-hype/ Did you all change the "/path/of/" and "/garz/repo/" paths to point to the proper directory? Well, according to CoinLab http://coinlab.com/press No.It was long ago agreed to split the forum away from forum.bitcoin.org, into a separate domain, moving the politics etc. away from the more apolitical bitcoin.org.  It was agreed that the new domain would be given to the current bitcoin.org domain holder, Sirius.I was the one who registered bitcointalk.org originally, so I should know.    I turned over the keys myself to Sirius. More drama in bitcoin land, it seems.  reddit is worth reading too.http://www.reddit.com/r/Bitcoin/comments/1dl6uz/coinlab_sues_mtgox/c9rfq4p Perhaps true, but hey, pointing it to the Bitcoin Foundation seems reasonable.  If other press centers grow organically, maybe just a link.That moves the press stuff off bitcoin.org at least, which doesn't seem unreasonable.  Many of us have been saying that bitcoin.org should focus more on the open source project and technical aspects.  Let's put those words to the test.  I certainly prefer a more apolitical bitcoin.org myself. Multiple people agree that luke-jr is very heavy-handed with the wiki.And I have no objection to any of Sirius' suggestions. A blog post on this crapola: http://garzikrants.blogspot.com/2013/04/on-bitcoin-data-spam-and-evil-data.html Similarly, protect your smartphone with Bitcoin Wallet. Yes. As you know from other threads, I've agreed with some of your other criticisms, but this insinuation is pure bunk.Trade groups like the Linux Foundation, upon which BF was modeled, are formed precisely because they are a vendor neutral, third party way to support key open source developers that are essentially working for the entire community.  Linus Torvalds is paid by the Linux Foundation, so that Intel, AMD, Red Hat, Canonical and other competitors do not need to worry about paying him directly -- with the conflict-of-interest that would imply.All available evidence shows Gavin, Peter V and BF are acting similarly, with zero evidence to the contrary.If there is a better, sustainable, more neutral way to fund Gavin or infrastructure projects, we are all open to that.Being funded by a neutral trade group frees developers to focus on bitcoin's needs full time, without distraction. Sirius needs to be poked about better security, agreed.
There tends to be bursts, with idleness following.  There are many seeders, so download-then-idle is quite fast.It has the most impact in handling unintended bursts, like when bitcoin sees a lot of new press attention. A good one, agreed. Agreed -- though it's mainly a press training (as you point out) and B.F. funding issue at that point.Ideally there is a bitcoin press army in every country and language  Yes, you can, because they are.Frankly, I do not think bitcoin would work, or be useful to anybody, if it was "controlled" by the Bitcoin Foundation.At that point, even if the code is available for download, I would not really call it open source.Moving on to terminology."core developer" tends to be strictly defined as anybody with push privs to github/bitcoin/bitcoin.git -- but we must admit that that term becomes less relevant over time, as other implementations and other non-bitcoind developers start contributing BIPs and other major, impactful changes.i.e. should we consider the Armory dev a core developer?  etothepi has written BIPs and certainly contributes to the wallet side of things.  Mike Hearn (TD) and Matt C worked on the bloom filter feature, which revolutionizes the network-sync time for lightweight bitcoin clients.The bloom filter feature alone is huge.  An embedded, low resource bitcoin client that is truly decentralized and P2P may be built -- as we see from the current Bitcoin Wallet on the Android market.  Is that not a far better solution than more centralized, hackable, DDoS-able websites?So are they "core developers"?  In the less strict sense, I'd answer "yes"  Their changes are certainly trusted by the community at large, in addition to the yahoos on the bitcoin/bitcoin.git commit list. Yep.  Bitcoin Foundation needs somebody who is available [nearly] 24/7 for press requests, who knows how to talk to journalists, and knows bitcoin at a tech level as well as currency level."talk to journalists" is not code language for an ideology, but simple press training:  knowing ahead of time that journalists are mainly looking for "pull quotes", and tend to chop up, shorten and take out of context whatever is said.(and no, I do not claim to be anywhere near good enough for such work, even if I had time) Tonal is a pointless waste of brain space. (checks page count)  This is 14 pages of "silenced debate" and counting?  That excludes further silenced debate on reddit and github.Matonis has a Forbes column.  Silenced and censored?  Posh.Further, you will also note that I retweet @jonmatonis material, and happily review Ver-owned BitcoinStore purchases.  The world is not as simple as the critics would paint.But bitcoin is growing up.  The number of non-anarchists in this world vastly outnumbers the anarchists, and a truly global, inclusive currency needs to appeal to all.The fundamental nature of bitcoin is. It is what it is today, and nobody is trying to the change the engineering.  You want true monetary freedom?  Get bitcoin into as many peoples' hands on this planet as possible. You can never be guaranteed a notification of a double spend.The classic example is where you broadcast transaction A, and then quietly mine transaction B.Nobody sees B until it appears in a block. SatoshiDICE has been double-spent.  There are other incidents as well. More to the point, zero-conf transactions have been double-spent already.  It is proven they are not safe today, ignoring any proposed changes. Increase the open file limit for the process, and/or don't have so many connections. 1 @ 66 I don't see why... it's treated the same as being paid in gold or another commodity, really. The reporter failed to even view the basic information available on the bitcoin.org home page, http://bitcoin.org/en/you-need-to-know 1 @ 63 Want to correct this hyperbole, now? 51% attack is the most talked about... the most useless, the most unlikely attack.The cost of attacking the network, and other attacks, are far less costly and far more damaging. Most of the devs have come to the same conclusion. A design contest is absolutely the most useless route to choose.It is endless wanking, without any real engineering proof that the design is practical in the real world. Well, at present, people are uploading wikileaks data, GPG encrypted data, python scripts, hidden wiki URLs, and other data spam.
What is the core problem that bitcoin solves?  The distributed consensus problem.There have been chains of hashes and chains of digital signatures before. What makes bitcoin different is that it is timestamping these digital messages, and protecting those timestamps against being reversed.  The currency aspect of bitcoin is simply a layer on top of the distributed timestamping service.  namecoin is an example of a non-currency use of distributed timestamping.Thus, validation of blocks and transactions is important, but in a way misses (and ignores in testing) the part about bitcoin that makes bitcoin work. Send a PM, and I'll be happy to provide any additional information needed. Gathering data does not imply blindly following the data's source.Fully understanding the intent of the system's designer WRT fees is a very valuable data point in making a decision on block size limits. Blatant trollbump:  I am selling 3.3 acres of land for bitcoins. Older clients will recognize v2 blocks just fine.This is largely a mining issue. +1 thanks for being responsible and responsive about this issue.BTC Guild is currently my favorite ASIC mining pool, because it is the most stable and has the most features.Just switched to Eligius (2nd favorite) until hash rate gets down a bit.It sounds odd, but:  if BTC Guild hash rate comes down, I will definitely switch back.Great website UI and very reliable service. * jgarzik votes for a fixed minimum difficulty which is out of reach of most CPU miners, as well as eliminating getwork.GBT or stratum only.But just an opinion.    Looking forward to the control panel. The developers agree with you.  Where is the code submission?  Pull requests to do this are welcome. +1 to the private UDP broadcast idea.Further, there has been talk off and on (by myself, and others) about a "backbone network" where Big Players privately and directly interconnect, for reasons similar to this. You continue to repeat this -- but it is only half the story.Satoshi also intended the subsidy-free, fee-only future to support bitcoin.  He did not describe fancy assurance contracts and infinite block sizes; he cleared indicated that fees would be driven in part by competition for space in the next block.Unlimited block sizes are also a radical position quite outside whatever was envisioned by the system's creator -- who cleared did think that far ahead. Lightweight client mode is called Simplified Payment Verification (SPV) mode.It was never completed by Satoshi, nor anyone since.It is a bit lower priority, with bitcoinj and other clients supporting SPV mode. It is ludicrous to demand that anyone who loses value X be repaid at value X*10.Look at the exchange rate on the day of the hack, and return debt based on that. Is this the first time bitcoin has been front page news of a major print newspaper? https://twitter.com/FinancialTimes/status/319569799061577728/photo/1 Good stuff!You might want to add extra safeguards when it comes to input/output selection, to make sure that a user does not accidentally create a transaction with 94 BTC in fees (this happened recently).  This depends on your user interface of choice, but a manual sanity check for "inputs - outputs > 1 BTC" or something could probably save users much money and grief.That is the danger and power of raw transaction APIs.  They give you enough roof to hang yourself. It's worth reviewing the many threads on this subject, that have come before Any completely automated metric is potentially abused by miners to run up fees. Last night, it took seven blocks and 90 minutes before my ~6 BTC transaction was confirmed.  Zero fees attached to the transaction.There is definitely a wait, if the transaction does not include fees. Not true.  Sites already track the first node relaying a particular block.  Targeted observation (wiretap) makes the activity even more transparent, when you find a block. There is an argument for multiple pools... an Avalon/ASIC pool, a GPU-and-smaller pool, etc. Increased hash rate == increased network security.Also, litecoin is certainly not at all immune to ASIC. display_short is the shortened display value.
Duplicate post.Scroll up and read the thread before posting  Already replied to author with corrections  Certainly.  Eligius will send non-standard transactions that include a certain set-by-Eligius fee.  Because non-standard transactions are not relayed, you must submit such transactions directly to Eligius.I wish more miners would offer services like this. Yes and no.  Miners select which transactions appear in a block...  but clients choose which transactions to relay to other peers.  Most clients will not even relay spam transactions (for obvious reasons... they are spam). It is widely agreed that the default fees need to be adjusted.However, standard disclaimer:  bitcoin is not, and never will be, a micro-payment or micro-transaction network.Yes, this is called "off-chain transactions" and it is a very good, very realistic solution.  No matter how much bitcoins scale up, there will always a market for micro-payments and micro-transactions.  It is predicted that micro-payment services, bots and networks will appear to handle this use case. Because we are a decentralized network   You can instead connect to 20,000 peers, and send one tiny spam through each.Requiring some minimal cost to send a transaction, even if 1 satoshi, is a very elegant solution to spam.However, as many others have noted, having a fixed fee schedule is too rigid, too inflexible. It ultimately seems like 10 seconds is just too short, given Internet propagation, current Avalon hashrate, and the up to 1.5-second delay it can take for work to be returned from Avalons (high latency).  Thus, I argue for around 30 seconds, which would imply a hard fork at some point. Prevents duplicate transaction id's from being creating, and assists in block verification, by putting block height into the special "coinbase" transaction #0 found in every block.  See BIP 34: https://en.bitcoin.it/wiki/BIP_0034 Yes, this was established the day the first Avalon arrived On IRC, an ASIC-only p2pool share chain idea was floated, with a higher difficulty by default and a longer time between shares. UDP has the potential to deliver blocks and transactions more rapidly throughout the network.  The former benefits miners, and the latter benefits all bitcoin users. That actually effectively illustrates part of the difficulty in creating a solution:  our economic reasoning will be clouded for many years by the block subsidy, which will probably dwarf the transaction fees for years to come.  Efficiencies which must exist in the self-supporting, fee-only future are unseen at this time. Infinite block sizes. In general it sounds like an unworkable scheme.  There is definitely no consensus on the block size issue at all. Given renewed interest, it is strongly tempting to jump in and fix the major misfeatures:getwork proxying (should be getblocktemplate for high speeds)internal work generationstratum protocol supportseparate database threads Incorrect.  There are several implementations.Incorrect.  Gavin actively encourages alternative implementations, and I've written two alternate implementations.  At least one was linked earlier in this thread. Most likely you are bound by the poor peer selection.Initial blockchain download occurs from one peer at a time.  If that peer is slow, then your entire blockchain download is slow.Yes, it's stupid and yes it needs fixing (patches welcome).The blockchain torrent is a stopgap fix, that works around the find-a-good-peer issue. Read the byline.  It's from CNBC. I don't think it's an attack....  I happen to agree completely. Better get multiple streams working.  And maybe a test network... There are no fees at the federal level, but you must have a "compliance officer" (who is not you) and many other rules that, if skipped, can land you in jail.
It has come to my attention that Lot #11 was mispriced, and is actually being sold below cost.The new price for Lot #11 is $33,000 (or bitcoin equivalent).  The other prices are unchanged.Snapshot, based on $87.99 current price:     Both lots ($70,000):  795 BTC     Lot #5 alone ($45,000):  511 BTC     Lot #11 alone ($33,000):   375 BTC There is already plenty of work here:     https://en.bitcoin.it/wiki/Protocol_specificationand here:     https://en.bitcoin.it/wiki/Bitcoin_Improvement_Proposals It can be useful to prove someone controls a certain amount of bitcoin balance, using the sign message feature.But it is also useful to consider a fresh transaction, that intentionally "burns" a specific amount of money by giving it to the miner as a transaction fee.  This helps support a public service -- bitcoin transaction validation -- while assuring that real cost, real effort was spent to create an identity.The keys used to spent the bitcoins in question provide another sign-message entry point. Not a new idea.  In general, you need to provably attach some sort of cost associated with an identity.  That cost could be a monetary cost (bitcoins or dollars), a proof of work, or something else. Here is a thread describing my bitcoind + eloipool solo mining configuration.This is also the configuration you would use for a mining farm. Reserved. Here is the simple solo mining and mining farm configuration used here.  At current difficulty, ignoring variance, an Avalon should, on average, generate a block every...Pool is probably preferable to most, as you might have incredibly bad luck and not generate a block for a couple weeks.  In any case, here is the bitcoind + eloipool configuration on Linux.If you like these instructions, there is a donation address in the sig.bitcoind setup1) Obtain a compiled bitcoind somehow.  Compiling your own is outside the scope of these instructions.  I'm told there is an Ubuntu PPA somewhere.2) Decide on a data directory location.  It must be on a fast hard drive, preferably SSD, and have at least 10GB of free space.3) In this directory, create bitcoin.conf text file, with the following contents:Code:rpcuser=MY_RPC_USERNAMErpcpassword=MY_RPC_PASSWORDlogtimestamps=1Obviously, change the MY_RPC_xxx to a username and password.4) Create a newblock.sh script, with the following contents:Code:#!/bin/shkillall -USR1 eloipool.pyMark it executeable via "chmod 0755 newblock.sh"5) Create a run-bitcoind.sh script, with the following contents:Code:#!/bin/sh/spare/repo/bitcoin/src/bitcoind \ -datadir=/spare/bitcoin/data -daemon \ -blocknotify=/garz/repo/eloipool/newblock.shMark it executeable via "chmod 0755 run-bitcoind.sh"You must modify the (a) bitcoind path, (b) -datadir path, and (c) -blocknotify path to fit your local computer.6) Run bitcoind via the run-bitcoind.sh script.  Watch debug.log in the data directory, to make sure it started the Initial Block Download (bitcoin network sync).  This might take a few hours, to download all the blocks.  If you are technically minded and motivated, you may download the blockchain torrent to give this process a jump-start.eloipool setup1) Download eloipool dependencies, either from your Linux packager, or directly:Python 3                        http://python.orgpython-bitcoinrpc       https://github.com/jgarzik/python-bitcoinrpcpython-base58           https://gitorious.org/bitcoin/python-base58midstate                        http://gitorious.org/midstate/midstate2) For python-bitcoinrpc, check out an older release,Code:$ cd /repo/python-bitcoinrpc$ git checkout -b solo-mining 770881c8bd9b1f92427290270b37a28751cf9df03) Check out eloipool,Code:$ git clone git://gitorious.org/bitcoin/eloipool.git4) Copy config.py.example to config.py, and make the following several edits,a) change ServerName to something uniqueb) increase share target (note increased '0' and decreased 'f'):Code:-ShareTarget = 0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff+ShareTarget = 0x000000000fffffffffffffffffffffffffffffffffffffffffffffffffffffffc) DynamicTargetting = 2d) DynamicTargetGoal = 6e) change TrackerAddr to YOUR bitcoin addressf) comment out CoinbaserCmd,Code:-CoinbaserCmd = 'echo -e "1\\n$((%d / 100))\\n1579aXhdwvKZEMrAKoCZhzGuqMa8EonuXU"'+#CoinbaserCmd = 'echo -e "1\\n$((%d / 100))\\n1579aXhdwvKZEMrAKoCZhzGuqMa8EonuXU"'g) update TemplateSources to point to your local bitcoind RPC, including chosen username/password, and comment out the secondary source:Code:@@ -57,41 +57,41 @@ TemplateSources = (        {                'name': 'primary',-               'uri': 'http://user:pass@localhost:8332',+               'uri': 'http://MY_RPC_USERNAME:MY_RPC_PASSWORD@127.0.0.1:8332',                'priority': 0,                'weight': 1,        },-       {-               'name': 'secondary',-               'uri': 'http://user:pass@localhost:18332',-               'priority': 1,-               'weight': 1,-       },+#      {+#              'name': 'secondary',+#              'uri': 'http://user:pass@localhost:18332',+#              'priority': 1,+#              'weight': 1,+#      }, )g) empty TemplateChecks (or comment out 100%),Code: TemplateChecks = ( )h) comment out or delete BlockSubmissionsi) change log settings, and switch from testnet3 mining to mainnet:Code:-DelayLogForUpstream = False+DelayLogForUpstream = True  # Bitcoin p2p server for announcing blocks found-UpstreamBitcoindNode = ('127.0.0.1', 18333)  # testnet+UpstreamBitcoindNode = ('127.0.0.1', 8333)  # Network ID for the primary blockchain # Other known network IDs can be found at: #     https://en.bitcoin.it/wiki/Protocol_specification#Message_structure-UpstreamNetworkId = b'\xFA\xBF\xB5\xDA'  # testnet+UpstreamNetworkId = b'\xF9\xBE\xB4\xD9'j) disable transaction-related bug workaround:Code:-POT = 2+#POT = 2k) update ShareLogging to reflect your desires.  The simplest is to delete all the SQL-related entries, leaving only the textfile logfile.  With solo mining, you don't care so much about shares.Code:ShareLogging = (        {                'type': 'logfile',                'filename': 'share-logfile',                'format': "{time} {Q(remoteHost)} {username} {YN(not(rejectReason))} {dash(YN(upstreamResult))} {dash(rejectReason)} {solution}\n",        },)l) change log filename to something useful,Code: LogFile = {-       'filename': 'filename.log',+       'filename': 'eloipool.log',m) Create a runit.sh script for eloipool, with the contents,Code:#!/bin/shPYTHONPATH=/spare/repo/python-bitcoinrpc:/garz/repo/python-base58:/garz/repo/midstate \     nohup ./eloipool.py 2>&1 >/dev/null &You must change the paths to suit your local system.n) Run eloipool with runit.sh scripto) Let's assume you are running the pool software on 192.168.1.40 IP address.  Set up your miner configuration like this:Pool X: stratum+tcp://192.168.1.40:3334Pool X username: 1NqqjQWXDLAoNycAS2ZryueuhNLJtcjvGyPool X password: x Ordered one 3-module unit. Yes.  The newer coinbase stomps the older coinbase, making the older coinbase unspendable. This event is now past. This event is now past. Peer address issue...Code:Trying an outgoing connection to 10.10.10.1 : 8444[...]Could NOT connect to 10.10.10.1 during outgoing attempt. timed outThe code should not be distributing and connecting to peer addresses for internal / site-specific / unrouted addresses. Fixed thread title to read "National Journal" (as opposed to "National Review") PM sent  "Any other product" tends to imply a conventional company with conventional PR resources, not an open source invention. Deepbit has already upgraded.  That's one of the reasons this network event is approaching sooner rather than later. Definitely would love to have an open, distributed bitcoin PR team.Please keep me in the loop. Reminder:Once a supermajority (95%) of mining reaches block version 2, version 1 blocks will be rejected.  Effectively, this is a network-wide upgrade.  This event seems likely to occur in the next week.Version 2 block specification: https://en.bitcoin.it/wiki/BIP_0034bitcoind 0.7.2 was the first to support block v2.Watching for the event: http://blockorigin.pfoe.be/top.php  The text is at the bottom:"We are currently at 100 out of the latest 1000 blocks on version 1 (10.00%) and 899 out of the latest 1000 blocks on version 2 (89.90%)"Users should not be impacted.  Some ancient miners will produce newly-invalid blocks (v1), that will get ignored.  The easy solution is to mine using a recent bitcoind (0.8.1 or later ideally).  If you are a miner and need help upgrading to v2, ping us on #bitcoin-dev or bitcoin-development@lists.sourceforge.net.Particular impact might be felt in the merged-mining and 'getwork' mining communities, because they are most likely to be running ancient software that is difficult to upgrade. Here is a rough draft implementation of a UDP P2P protocol extensionfor bitcoin:     https://github.com/jgarzik/bitcoin/tree/udp     http://yyz.us/bitcoin/udp-v0.patchProtocol specification (such that it is):- UDP, bound to same port as TCP P2P (normally 8333)- Active, simultaneous TCP P2P connection required (useful against DoS and other attacks)- Same message format as TCP P2P, same pchMessageStart conventions, etc. (my CNetMessage pull req would be helpful here)- Multiple P2P messages per UDP packet permitted- Max UDP packet size 100*1024 bytes- Advertises NODE_UDP in nServices- New "getudpcook" TCP P2P command returns a "udpcook" message, containing a yummy cookie- UDP P2P commands "inv", "tx" and "addr" are handled as if received via TCP- UDP P2P command "udpsub" sets a mask, that subscribes to one or more data broadcasts.- When USM_INV_BCAST mask bit is set, receive "inv" messages via UDP rather than TCP.Project and design goals (or, why do this?):- It is theorized that UDP may be useful for some messages we broadcast throughout the network- A productive discussion STARTS with code, otherwise discussion continues forever.- Investigate improving "inv" relay speed- Investigate unconditional "tx" broadcasting via UDP, as "inv" alternative, for small tx's.- Investigate improving block relay speed (or perhaps block header relay speed)- Open up new design avenues, for P2P patterns more suited to UDP than TCP in general.It must be emphasize that this is supposed to be a starting point, not a set-in-stone requirement that This Is How The Protocol Must Look.  I don't think we will know how the UDP protocol should look until after testing and experimentation, or even if it is a good idea at all. For the purposes of property tax calculation, these are the assessed values, according to Wake County:Lot #5: $67,146 (paid $412 for property taxes in current tax year)Lot #11: $58,900 (paid $361 for property taxes in current tax year)The tax values are above listing price, and in my opinion, are over-valued.  The property values are re-assessed every few years, but you can always go through a months-long appeals process to "short circuit" that.
Answering some questions left by a private inquirer:Q. Does this include permission to build on the vacant land?  (Apparently in some countries the right-to-build may be separate)A. In Wake County/NC/USA, a construction permit is required.  The purpose of the permit is an engineering evaluation, to ensure you are building a safe building.  As long as your submitted engineering plans conform to local building codes, you may build as you like, when you like.Q. Are foreigners permitted to purchase this land?  Are corporations permitted to purchase?A. Yes and yes.  The county's Register Of Deeds will require a name and mailing address for public records and property taxes.  Property taxes must be paid in USD, not BTC. If people are interested in the "shareholder registry", enabling decentralized exchange, it could be written fairly quickly by myself.No fee or bounty, though donations are always welcome. Old news, duplicate thread: https://bitcointalk.org/index.php?topic=156215.0 Who said it has anything at all to do with the Bitcoin Foundation?You conspiracy nuts are... nuts. Well,While having absolutely no idea what Vladimir is talking about,I can confirm that very big, positive things for bitcoin are happening behind closed doors  Does the official cpuminer have the same problem?  Perhaps try avoiding an unofficial version.     https://github.com/jgarzik/cpuminer/ Russian leaders love bashing Western countries.  It's catnip for the locals.They even have an entire network, Russia Today (RT), created and funded for that aim. So you want a "kill privacy" checkbox, in other words  Due to bitcoin's value volatility, the purchase price is indexed to the US Dollar, and would be converted a couple days before closing/settlement.So at present market price, $70,000 is more like 953 BTC  Small request:On the "Choose Your Wallet" page, put the name of each client underneath each icon.It is annoying to hover the mouse over each icon, just to find the names. I like the guys at Marginal Revolution, and try to toss them low-noise links every few months.URL: http://marginalrevolution.com/marginalrevolution/2013/03/u-s-government-regulations-for-virtual-currencies.htmlThey don't do much more than quote other links, but their audience are other economists and other readers of econo-blogs. 1) Possibly there are legal reasons they must.2) ASICMINER has that power right now.3) An issuer in general always has the ultimate power:  they can inflate their own shares, or simply stop producing useful revenue. Some info about the area:     http://en.wikipedia.org/wiki/Wake_County,_North_Carolina     http://www.visitraleigh.com/Wake County is a growing area, a good real estate investment according to some:http://www.newsobserver.com/2013/02/23/2702528/california-billionaire-bets-on.htmlWake County was one of the areas relatively untouched by the subprime mortgage crisis, and its population continues to grow.Only ~3 hours to the Atlantic Ocean, by car. Yes.  Some legal juridictions may be required to manually check each trade, to make sure they have legally-required investor information.If exchanges get into play, most changes to the shareholder registry will be boring:(example)2013-Mar-21 00:23:11 transfer 100 shares from FOO EXCHANGE to BAR EXCHANGE2013-Mar-21 00:23:12 transfer 800 shares from FOO EXCHANGE to BIFF EXCHANGE2013-Mar-21 00:23:14 transfer 1000 shares from BAZ EXCHANGE to FOO EXCHANGE2013-Mar-21 00:23:19 transfer 18 shares from FOO EXCHANGE to Jeff Garzik The core idea is simple:  Each company maintains their own shareholder registry.  Changes to the shareholder registry must be cryptographically signed and verified.  The registry must be published in a public medium on a regular basis for auditing/anti-cheating purposes. Correct.Shareholders don't need any robot code:1) ASICMINER runs the "shareholder registry" robot.2) Shareholders do not need anything but a bitcoin client with the "sign message" feature.3) A person-to-person share trade looks like this:     a) Alice sends 100 BTC to Bob     b) Alice sends bitcoin address ABCDEF to Bob     c) Bob emails ASICMINER robot, with signed message "transfer ownership of my 50 shares to address ABCDEF"     d) The next time ASICMINER robot publishes a shareholder registry, it says "50 shares owned by ABCDEF"4) If you want to run an automated share trading market, create a website that accepts bitcoin or ASICMINER share deposits, .... Great job!  Looks nice, very informative. pynode and assorted utilities dbck.py and mkbootstrap.py are essentially source code examples for python-bitcoinlib.  Unfortunately that's it.Contributed examples are welcome in both projects, however. Litecoin is about to become a botnet haven, as additional ASIC hashpower comes online. How about this:  make it possible for users to create their own decentralized exchange.Register a bitcoin address for each shareholder, if not already.  This enables the ability to authenticate cryptographically signed digital messages.  See this stackexchange answer for a guide.  Most bitcoin clients support signing messages.  Registering a GPG key for each shareholder is an alternative, though that requires additional software beyond a bitcoin client.Publicly declare a bitcoin address and GPG key for official ASICMINER messages.Publicly declare an email address for emailing ASICMINER robotAt the end of every day, ASICMINER robot produces a message listing all shareholders, by key and share count.  Attach bitcoin and GPG digital signatures.To trade ASICMINER shares, the seller sends a digitally-signed message "transfer N shares to bitcoin address FOO" to the ASICMINER robot.That is all that is needed on the ASICMINER side:  maintain a shareholder registry.  changes to the shareholder registry may be both pseudonymous and secure.Then anyone may build an exchange that trades shares.  Anyone may trade ASICMINER shares at any time, using this method.
Hal,Just to echo the other devs:  your contributions continue to be felt today.  Pieter (sipa) is working on integrating your ECDSA speed-ups into the main client.Thanks so much. Under 200 bitcoins currently.  I spend mine, and have given away over 15,000 BTC in years past as developer bounties.This land sale is another example of same:  you create a bitcoin economy when you buy and sell with bitcoins. Obligatory plug:  Selling 3.3 acres of vacant land for bitcoins. Not relevant to evaluating your claim of "[luke-jr] put botnet support into the bitcoind client"That statement is not just characteristically hyperbolic... it is simply false, as the source code demonstrates. If you like python, check out https://github.com/jgarzik/python-bitcoinlib/ and the bitcoin client that uses it, https://github.com/jgarzik/pynode/I'm trying to encourage everyone to use python-bitcoinlib for their python projects.  It fully verifies the blockchain, and passes many reference client tests. The wiki has a long list: https://en.bitcoin.it/wiki/Weaknesses Read the code closely.  bitcoind's block processing behavior is the same as it always was.  getblocktemplate returns a static value for "noncerange":Code:    result.push_back(Pair("noncerange", "00000000ffffffff"));and never examines the value.noncerange was always silly in my opinion -- which is why it does not change bitcoind's behavior one bit. Summary:  Clean title w/ title insurance obtained when I purchased these lots.  Currently there is one associated lien, the mortgage on the collective two lots (one debt, two lots).Can furnish more details to serious inquirers. Bump. The units are being sold into a market at which demand vastly outstrips supply.If sold at auction, the price would be even higher. Try reading the first line of the OP.A major financial newspaper, the Financial Times, thought it was news. +1It is clearly a troll-blog; but it was mentioned in Financial Times, sadly... RIP, Bitcoin, I thinkhttps://bitcointalk.org/index.php?topic=155362.0 This was linked in today's Financial Times Alphaville:URL: http://unqualified-reservations.blogspot.com.au/2013/03/rip-bitcoin-i-think.htmlRIP Bitcoin, I think Build your dream cabin near the river!   Asking $28,000, or the equivalent in bitcoins (~55 BTC as of this writing) for vacant land in Wake County, North Carolina totalling approximately 1.5 acres.Lot #11 is full of young pine trees.  Used to be a garden, 40 years ago.This lot is less than 0.5 mi to the Neuse River, and has only a slight slope.Utilities available: electricity, cable TV, Internet, phone, water (well), septic tank.Nearby:  Walking distance to Neuse River, Wil-Mar golf course.  Short drive to Knightdale or Raleigh.  Easy access to I-540 highway, which takes you straight to the airport.Pictures: http://gtf.org/garzik/holly-lake/Map/GPS addresses: 3329 Holly Lake Trail, Raleigh, NC 27604 Doh! Who would keep their money at a centralized website, rather than a decentralized wallet?   Just turn off getwork.Ok, I'm kidding.  Ok, half kidding.   This part ("are then") is not quite correct.The state and federal laws are disconnected, even if they are intentionally similar in many cases.  Becoming an MSB or MT at the federal level does not immediately trigger a state requirement.  A state requirement to -- for example -- undergo a background check or provide a surety bond is not triggered by becoming an MSB.  The state requirement is triggered by... your transmitting money in a regulated fashion.A couple US states do not require money transmitter/MSB-like licenses, leaving only the federal requirements to handle. This is a fair point (not that my opinion is relevant, as no court case or other precedent has yet established either way)
Perhaps not FinCEN, but financial reporters at anti-money laundering conferences report that the FBI is "very aware" of bitcoin, as is the SEC.  The leaked FBI report on bitcoin was quite knowledgeable and matter-of-fact.Yesterday's FinCEN guidance makes it seem more likely that LEAs would target individual criminals, rather than bitcoin network and users en masse. Recently, my one-person microbiz had to AML/KYC with Dwolla, to continue transferring to/from MtGox. Based on my experience and conversation with the Dwolla employee, it sounds like this is a special procedure for MtGox, that does not apply to most other dwolla users. Wrong.  I have written two alternate implementations:Counter example #1: https://github.com/jgarzik/picocoin/Counter example #2: https://github.com/jgarzik/python-bitcoinlib/ and https://github.com/jgarzik/pynode/ That's very interesting, thanks.Agreed on "seems impervious" (we hope) and that existing policing mechanisms seem scant, but may I challenge you with a highly specific question:Consider a US-based entrepreneur and company running a purely bitcoin-based e-Wallet service on US soil.  Pick your US state, excluding New York and California.  Could the entrepreneur run this e-Wallet without contacting any regulators[1]?One of the projects discussed on IRC was an IRC micropayment bot, which is nothing more than an IRC-based e-Wallet.  Easy to code and run, but seems like it might run afoul of regulators.  Would love to be proven wrong [1] Besides the standard ones needed to operate a US corporation, such as the IRS and state-level tax dept., municipal business licensing, etc. Some of us want bitcoin to be useful to the whole world, not just the teenaged lawless/anarchist part of it. Hardly.  US miners will just have to AML/KYC with a regulated US bitcoin exchange, to get US Dollars.It is also doubtful that regulators even care about small time miners.Pool operators might be a grey area, on the other hand. It always made sense that US Government would monitor and regulate gateways to/from US-Dollars (bitcoin exchanges, in this case).I am curious about purely bitcoin e-Wallets:  users of this service can (a) deposit bitcoins, (b) send bitcoins to a specified bitcoin address, or (c) send bitcoins to another user of the service.  No USD involved at all.Where do purely bitcoin e-Wallets fall, in the regulatory realm? The general trend, in the Linux kernel at least, is to base everything around a poll-able file descriptor.  Google for "epoll_create", "signalfd", "eventfd", "timerfd_create", etc.New syscalls take a long time to fully deploy on some platforms, and are often under-used for that reason.  It is easier to create a driver that services standard, long-deployed file descriptor syscalls: read, write, poll/select, etc. Respectfully, I disagree entirely with that interpretation.If you mine and sell via an exchange that is MSB/MT-registered, seems like you are ok. With the standard "I Am Not A Lawyer" disclaimer, my read is that miners might be ok ifThey sell bitcoins for fiat, via a licensed exchangeThey purchase goods and services entirely within the bitcoin economyThe first is obvious.  The US government is certainly within their rights to regulate the US Dollar, and ditto for other government fiat currencies.The second is vastly positive.  Stimulative for the bitcoin economy, encouraging a broad market of services priced in bitcoins.And the third, more general point is implied:  bitcoins are legal for regular users to possess and spend.It is true that bitcoins were never illegal, but having a big government issuing an affirmative statement "bitcoins are legal" (in effect) is great news. I don't read it that way at all...  assuming that the miner is selling via a licensed bitcoin exchange (MSB/MT). tl;dr...  bitcoins are legal You mean the book that was mentioned twice up-thread already? Domains for sale:bitbanc.comemultipay.comfxbit.com, fxbit.cosmartcoins.co, smartcoins.net, smartcoins.orgapistor.co, apistor.com, apistorage.comPayPal or bitcoins accepted.  Open to any reasonable offer. 1MB blocks were tested long, with 0.7 and before, on testnet.The problem was not the size of the blocks. Correct.Any miner that increases MAX_BLOCK_SIZE beyond 1MB will self-select themselves away from the network, because all other validating nodes would ignore that change.Just like if a miner decides to issue themselves 100 BTC per block.  All other validating nodes consider that invalid data, and do not relay or process it further. Yes.bitcoind + eloipool.  cgminer does not support direct-mining to bitcoind.  It appears to work, but eventually HTTP problems and other oddness appears.Luke-Jr's BFGMiner should support ASIC mining directly with bitcoind, but I think Luke-Jr is still looking for a volunteer to test BFGMiner + Avalon. For reference, my Avalon miner solo-mined two blocks in the past 24h (50 BTC + fees).Statistically this was quite lucky, of course.Or maybe your friend should sell them for nnnn BTC + a percentage of ongoing revenue for 1 year. Sadly, mining to bitcoind directly does not work well.I use eloipool with bitcoind. Correct.  They will get paid the same rate, and it reflects the increased network difficulty.
Well, I just earned 50+ BTC last night solo mining.   If the users are not voting (validating), then it is trivial for miners to rewrite the rules.If the users are fully validating, then a miner decision to have each block produce 50 BTC again would be instantly rejected. Transaction validators. Issue fixed.  Dataset updated.  OP updated with new hashes and byte size. The first picture in that auction is my picture, from the floor of my house:http://garzikrants.blogspot.com/2013/01/avalon-modular-room-to-expand.htmlThey rotated the picture, but you can clearly see the exact same styrafoam debris, size and distribution, near the case. 1MB blocks were tested without incident long ago on testnet, under the same rules that failed on March 11th.The issue is not block size, but more complex, something like "number of existing BDB transaction index records accessed during block verification" (past transactions accessed/spent). My idea was a separate P2P network, where the cost of the identity and cost of the message transmission could be expressed and verified (either directly by bitcoin payment, or indirectly by burning coins). Hold off on using this dataset.  Due to a local linking mistake, it was built with BDB 5.x.Rebuilding the dataset with BDB 4.8 will complete in a few hours. FWIW, I've been talking on IRC about a decentralized network of bots (numbering 3, 5, or 7, not large numbers) that would facilitate off-chain transactions, escrow, auctions, etc.Check out the #bitcoin-dev logs from last night. That is true, though unlikely. It is simply a different design.leveldb does not need per-page locks, and is not an ACID database.  leveldb has a concept called a "batch", and batches are committed atomically. Standing the machine up vertically led to increased temperature readings, here.I saw in the brief Bitcoin Foundation video that Yifu had oriented the machine laying down; I copied that. If it makes you feel any bigger, sipa would love to ditch the OpenSSL dependency ;p(and has been coding in that direction) Give him a break New offer, 50 @ 0.72 50 @ 0.71 For diagnostic purposes, here is a blockchain dataset built by a 0.7.2 bitcoind w/ db 4.8 + "-detachdb":     http://gtf.org/garzik/bitcoin/chain-db48-h225429.tar.bz2It contains blockchain + index, up to height 225429, making it easy to reproduce an injection of too-large blocks at the precise juncture where the recent chain fork occurred.Byte size: 5776366736 (5.3G)MD5: f26deaaf05197bcbc73d33fed2443db3SHA1: 743d1eaac3b590e996a22e707288fd9a21aa4c63SHA256: 4dfd766c7cdfa346ad10e648900476dfc590605f78a78dff0c2608131c0f6c46 For diagnostic purposes, here is a blockchain dataset built by a 0.7.2 bitcoind w/ db 4.8:     http://gtf.org/garzik/bitcoin/chain-db48-h225429.tar.bz2It contains blockchain + index, up to height 225429, making it easy to reproduce an injection of too-large blocks at the precise juncture where the recent chain fork occurred.Byte size: 5755999214 (5.3G)MD5: 479e6364352d0ec68ea5cf87200f7f1eSHA1: 18bc8ff5e572fc4a27828341249477eb8355f012SHA256: 41787306487da1957717d72407fc1e01ed5965202802f7d18e2930a30fc169a2 Gavin and myself certainly support alternate client implementations (heterogeneous environment). Likewise.  http://blockexplorer.com/tx/81da3b502bd33604fed6b5d289d3856c189c8ddb31184615d12a41d83f386459#o0 Technically speaking, there is a minimum payout with p2pool also, due to higher difficulty.I'm waiting for eligius and other pools to start setting the global minimum difficulty above 1.0...
From observation, it appears to be the maximum temperature seen (all time record). Order #432 for one (1) unit.Refund arrived on the stated address: http://blockexplorer.com/tx/81da3b502bd33604fed6b5d289d3856c189c8ddb31184615d12a41d83f386459#o0 Order #432 for one (1) unit.Refund arrived on the stated address: http://blockexplorer.com/tx/81da3b502bd33604fed6b5d289d3856c189c8ddb31184615d12a41d83f386459#o0 To repeat:  upload the firmware via web browser:   System -> Backup/Flash Firmware.From the perspective of the user (you), the firmware is on the computer with the web browser.  You connect via web browser to the ASIC miner's OpenWRT web interface, and upload the firmware via web browser. That's easy.  Just login to the web interface, and go System -> Backup/Flash Firmware.Upload the firmware via web browser. FWIW, I always self-selected myself out of the running.  Gavin once asked me What If, and I told him I was not interested in the lead-dev mantle.Pieter and gmaxwell are the two that come to mind, if Gavin ever goes poof.But who knows.  Sometimes in the Linux kernel, the maintainer winds up being some relative unknown with great skills and knowledge. The MD5 and SHA1 hashes were provided so that you may answer that question yourself  ACK.  I left the 15 BTC pledge active, as I do consider the project still worthwhile... although of diminished importance in FPGA/ASIC era. (copied from misterbigg's thread, by request)As Pieter wrote on bitcoin-development list,Or restated:  The fundamental problem being solved by bitcoin at a technical level, on a daily basis, is the distributed consensus problem (link).We fully support the writing of specifications and documentation, which you can see here    https://en.bitcoin.it/wiki/Protocol_specificationAnd changes to the existing protocol are formally documented here,    https://en.bitcoin.it/wiki/Bitcoin_Improvement_ProposalsUltimately the operational definition of consensus comes from what the network accepts/expects, not a theoretical paper.  Specification practices are healthy as a manual, human-based method of achieving consensus on network protocol rules.  Alternate client implementations (c.f. heterogeneous environment) are another good practice.But the collective software rules are always the final specification, by definition.  That is what bitcoin does, achieve consensus.A few other observations:Gnutella had a business and project environment with co-motivated individuals working on a few key codebases.  The reference codebase in bitcoin, in contrast, has one paid developer (Gavin@BF) and a few part time unpaid volunteers.All the big bitcoin businesses seem to either (a) contribute to BF, (b) use bitcoind without contributing back any testing/dev/specification resources, or (c) do their own thing entirely, not contributing back any testing/dev/specification resources.Bitcoin is a thing, an invention, not a funded project with a built-in set of professionals paid to ensure full spec/dev/test engineering effort.  If you want something, DO IT.  You cannot expect the engineering resources to do X to magically appear, just because you complained on an Internet forum.In an unfunded open source project, arguing all day about the lack of full-engineering-team rigor is entirely wasted energy.  Blame the dev team if that is your favorite target, that will not magically create extra time in the day or extra manpower to accomplish these extra tasks being demanded by non-contributors.The time spent whining about what an unfunded effort fails to do could be better spent, say, creating a test network of full nodes running all known bitcoind versions, 0.3 through present.  And test, test, test changes through that. (copied from misterbigg's thread)As Pieter wrote on bitcoin-development list,Or restated:  The fundamental problem being solved by bitcoin at a technical level, on a daily basis, is the distributed consensus problem (link).We fully support the writing of specifications and documentation, which you can see here    https://en.bitcoin.it/wiki/Protocol_specificationAnd changes to the existing protocol are formally documented here,    https://en.bitcoin.it/wiki/Bitcoin_Improvement_ProposalsUltimately the operational definition of consensus comes from what the network accepts/expects, not a theoretical paper.  Specification practices are healthy as a manual, human-based method of achieving consensus on network protocol rules.  Alternate client implementations (c.f. heterogeneous environment) are another good practice.But the collective software rules are always the final specification, by definition.  That is what bitcoin does, achieve consensus.A few other observations:Gnutella had a business and project environment with co-motivated individuals working on a few key codebases.  The reference codebase in bitcoin, in contrast, has one paid developer (Gavin@BF) and a few part time unpaid volunteers.All the big bitcoin businesses seem to either (a) contribute to BF, (b) use bitcoind without contributing back any testing/dev/specification resources, or (c) do their own thing entirely, not contributing back any testing/dev/specification resources.Bitcoin is a thing, an invention, not a funded project with a built-in set of professionals paid to ensure full spec/dev/test engineering effort.  If you want something, DO IT.  You cannot expect the engineering resources to do X to magically appear, just because you complained on an Internet forum.In an unfunded open source project, arguing all day about the lack of full-engineering-team rigor is entirely wasted energy.  Blame the dev team if that is your favorite target, that will not magically create extra time in the day or extra manpower to accomplish these extra tasks being demanded by non-contributors.The time spent whining about what an unfunded effort fails to do could be better spent, say, creating a test network of full nodes running all known bitcoind versions, 0.3 through present.  And test, test, test changes through that. As Pieter wrote on bitcoin-development list,Or restated:  The fundamental problem being solved by bitcoin at a technical level, on a daily basis, is the distributed consensus problem (link).We fully support the writing of specifications and documentation, which you can see here    https://en.bitcoin.it/wiki/Protocol_specificationAnd changes to the existing protocol are formally documented here,    https://en.bitcoin.it/wiki/Bitcoin_Improvement_ProposalsUltimately the operational definition of consensus comes from what the network accepts/expects, not a theoretical paper.  Specification practices are healthy as a manual, human-based method of achieving consensus on network protocol rules.  Alternate client implementations (c.f. heterogeneous environment) are another good practice.But the collective software rules are always the final specification, by definition.  That is what bitcoin does, achieve consensus.A few other observations:Gnutella had a business and project environment with co-motivated individuals working on a few key codebases.  The reference codebase in bitcoin, in contrast, has one paid developer (Gavin@BF) and a few part time unpaid volunteers.All the big bitcoin businesses seem to either (a) contribute to BF, (b) use bitcoind without contributing back any testing/dev/specification resources, or (c) do their own thing entirely, not contributing back any testing/dev/specification resources.Bitcoin is a thing, an invention, not a funded project with a built-in set of professionals paid to ensure full spec/dev/test engineering effort.  If you want something, DO IT.  You cannot expect the engineering resources to do X to magically appear, just because you complained on an Internet forum.In an unfunded open source project, arguing all day about the lack of full-engineering-team rigor is entirely wasted energy.  Blame the dev team if that is your favorite target, that will not magically create extra time in the day or extra manpower to accomplish these extra tasks being demanded by non-contributors.The time spent whining about what an unfunded effort fails to do could be better spent, say, creating a test network of full nodes running all known bitcoind versions, 0.3 through present.  And test, test, test changes through that. The firmware I'm currently running is openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-factory-20130225.binMD5SUM: e81950212f813652b9d7b989765bc35fSHA1SUM: b297223d387e4d69996fa0765879d81a6c897dd6 That is 3/4 of what SD does.1/4 of what SD does is send worthless 0.00000001 bitcoins -- essentially instant messages / emails -- through the blockchain, saying "You lose"That latter is informational, bloats our "unspent transaction" ledger with unspendable bitcoins, and should not be in the blockchain at all.People on IRC also claim that SD gambles against themselves to build their Most Popular Bitcoin Gambling Website brand, which would also bloat the blockchain, but there is no way of proving or disproving that rumor. Continuing to experience a "halting problem" on my Avalon ASIC miner:The miner stops mining, fans stop spinning, but cgminer is alive and responding to API queries.Pastebin of cgminer API log, at the time of the stopped-mining incident:  http://pastebin.com/uiBvaJkH This analysis is incorrect, as noted here when this "discovery" was posted in another thread. Incorrect.  0.8 does not use BDB for blockchain indexing.   Those BDB settings you quote are only relevant to the wallet.dat file in 0.8.The BDB lock limitation simply does not exist in 0.8, because leveldb is used for blockchain indexing, not BDB. Good stuff.  Let's see a demo  There are plenty of alt-clients out there.  Improve an existing one  The limitation is not related to block size, but rather number of transactions accessed/updated by a block.In general, the default for 0.8 (250k) is fine.  Raising that to 500k is likely just as fine.But it is not very simple to answer the question, because this 0.7 BDB lock issue becomes more complicated with larger BDB transactions. Read the chat logs before speaking about topics of which you know little.The miners were not "forced" to do anything.  They could have chosen to stay on the 0.8 side of the fork.Each miner (really, pool operator) votes with their collective hash power, deciding whether or not to support a mining-related decision like this.
This is entirely irrelevant when the fees are miniscule, compared to the block reward subsidy.The cost of all those unspent outputs created by SD, for lost bets, impacts all bitcoin users. You are welcome and encouraged to fund a large, professional testing effort.  We need all the help we can get! This idea is from an alternate world where you don't have to worry about breaking existing users' software and data to the point that they cannot spend their own money.Bug-for-bug compatibility is not a choice made joyfully and willingly.Engineers always prefer a clean slate, a clean interface.  That works here, only with a little help from science fiction's time machines. It is always entertaining to watch non-contributors opine about completely obvious solutions that the devs are silly to have overlooked.The interesting thing about bitcoin is its organic nature.  The bitcoin codebase, warts and all, was dumped into the Internet's collective lap.  Reality does not give anyone a chance to pause, wait for a specification to be polished, to wait for every single edge case to be tested (if that were even possible), etc.Almost half a billion dollars in market cap, and the dev team is still largely unpaid volunteers, trailing behind events, cleaning up the messes reality leaves behind. It is permitted within the spec that one block may set its 'nTime' field before a previous block... but always within a certain range of time. "no amount of testing would have found this" is a bit strong.It is a longstanding bug that has existed through bitcoin's history, but it is certainly not impossible to test for this condition.  testnet has many test cases embedded in the chain, and this bug trigger certainly could have been one such test case.Water under the bridge...  Satoshi had zero test cases in this original software.  Gavin and gmaxwell led the charge to start adding unit tests, and testnet blockchain tests.  BlueMatt has been working on a block tester as well. The defaults for 0.8 mining are just fine.However, if you increase the default block size limit, you can reintroduce the problem, yes.Don't worry though.  Now that people are aware of the issue, it is easy to handle.The fork will "heal", and all coins are safe. Open question.Unique generated addresses might imply some per-bet or per-session communication with the users, that would open the door to a much more efficient method of sending the "bet lost" message. Torrent file now also available via bitcoin's SourceForge page:     https://sourceforge.net/projects/bitcoin/files/Bitcoin/blockchain/ Much more than that -- miners have always had the power to choose which transactions to include in blocks, which transactions to exclude from blocks.The "censorship" is an intentional part of the system.  Miners should be free to ignore transactions they do not feel worth mining. GitHub URL: https://github.com/jgarzik/python-bitcoinlibRepository: git://github.com/jgarzik/python-bitcoinlib.gitThe python library for pynode has matured sufficiently to have a home of its own.  The python-bitcoinlib project attempts to present a lightweight, modular, a la carte interface to bitcoin data structures and network protocols.Features:Easy object interface to all bitcoin core data structures: block, transaction, addresses, ...Full transaction script engineFully verifies main and testnet block chains (via pynode)ECDSA verification (OpenSSL wrapper)Object interface to all known network messagesBinary encoding/decoding (serialization) for full bitcoin protocol interoperabilityPasses many of the tests shipped with the bitcoin reference client (bitcoind/Bitcoin-Qt)Like pynode, this library is currently a developer-only release, not recommended for highly secure production sites.Pull requests, comments, questions and donations always welcome. Library forked, and moved to a new home and forum thread:     https://github.com/jgarzik/python-bitcoinlibPull requests and donations welcome, as always. Readers are urged to consider that the following two positions of Satoshi are potentially mutually exclusive:Fees will support the system, long termBlock size may be increased in the futureRight now, the block reward subsidy supports the entire system, so it is difficult to draw any conclusions about a fee-supported future -- and yet that is what we are being asked to do.At the two extremes...If the block size strategy is too loose (too big), there is no incentive to curb spam, there are not enough fees.If the block size strategy is too tight (too small), fees are very high, in-blockchain traffic is discouraged, possibly users are discouraged away from bitcoin.The open question is...how to pick the best number?or, how to enable a market to pick the best number?or, how to pick an algorithm that picks the best number?The fee/block-size balance is a crucial balance that must be maintained for the health of the system.  There is little evidence that Satoshi put much thought into this, probably supposing that the market would figure out the answer. Most of this was already covered here in rough form:   http://garzikrants.blogspot.com/2013/02/bitcoin-block-size-thoughts.htmlIn general, I would say there is rough consensus that the 1MB size limit probably will change sometime in the future.  But beyond that, opinions vary wildly.I think there is also a rough consensus that unlimited block size is nutters. pynode is very much alive and well.  It is becoming popular enough that we can branch off the internal "bitcoin" sub-directory into a proper python library, python-bitcoinlib.Stay tuned for details. For pools with older bitcoind software, changing the soft limit is simply a matter of changing a constant and recompiling.For pools with recent bitcoind software, changing the soft limit is simply a matter of changing configuration settings: Does your service include using actual bitcoin escrow transactions (ex. 2-of-3 multisig)? The current behavior of clients is fine:  rebroadcast continually, when you are not in a block.Optionally, in the future, clients may elect to not rebroadcast.  That is fine too, and works within the current or future system. Correct.  It's not needed right now, thus we are able to avoid the techno-political question of what to delete from the mempool when it becomes necessary to cull.As a matter of fact, that is my current proposal on the table, with has met with general agreement:   Purge transactions from the memory pool, if they do not make it into a block within X [blocks | seconds].  Once this logic is deployed widely, it has several benefits:TX behavior is a bit more deterministic.Makes it possible (but not 100% certain) that a transaction may be revised or double-spent-to-recover, if it fails to make it into a block.mempool is capped by a politically-neutral technological limitPatches welcome   I haven't had time to implement the proposal, and nobody else has stepped up. The only way transactions are purged is by appearing in a block.  At present it cannot "fill up" except by using all available memory, and getting OOM-killed.  Therefore, you can see how any long-running node will eventually accumulate a lot of dead weight.The mempool only stores provably spendable transactions, so it is DoS'able, but you must do so with relay-able standard transactions.
Sorry, "impossible to scale" is factually incorrect, as has been pointed out in other threads. The amount of unconfirmed transactions is not larger than average, over a 24 hour period.A snapshot of the mempool -- like the blockchain.info link above -- does not fit the thesis for two reasons:Never-will-confirm transactions and low priority transactions bloat the mempoolSome miners sweep far more than 250k worth of transactions, so some miners already sweep large swaths into blocksThis situation has been ongoing for months now. The "soft" limit is set by each miner.When I mined using vanilla, unmodified bitcoind + p2pool, it was a simple configuration setting to change the limit to 900k.My first block was over 400k.Soft limit "maxing out" is a non-event. PyQt is a GUI API for python, so it would definitely be a GUI coin control app.  Integrated releases should be easily possible with py2exe and similar tools, for those platforms that need it. Anyone know PyQt?  That could provide the same functions, without patching bitcoind / Bitcoin-Qt, for coin control via python-bitcoinrpc. Good stuff!  Great new service.  Now I need to find a good shape to print. One dev is paid by the Foundation.  One.Who controls me?  Please be specific as to how, and what evidence of this you have. That is the reason for open standards.  If you support Google logins in this way, it is easy to support other OAuth-like providers who are not named Google.  From a bitcoin website operator's standpoint, the biggest concern is not privacy, but giving a single entity a big fat "off switch" to your website.  If Google decides you are malicious (unlikely) or receives a court order, 100% of the Google-login-based users cannot access your website.This problem is a general problem of interfacing with any large, 3rd party account system, and is not specific to Google.  As long as you have account recovery procedures in place, creating a contingency for en masse account blocking, I would definitely endorse Mike's points here. Just to highlight some text from http://coinlab.com/transitionPresumably that is because foreign regulatory hassles are significant, and having a US partner to handle that is greatly preferred by MtGox. Prunable, spendable transactions, sure.1/4 of SatoshiDICE's output is not that. My test order, the Game Of Thrones Season 2 blu-ray set, arrived quickly after ordering.  No problems with the ordering and shipping process. Miners (and the network) will not see the impact as long as the block reward far exceeds other network costs, like unspent transaction output set (UTXO) storage. Even at much smaller percentages, bitcoin's trust could evaporate.  Consider not knowing whether or not a particular bitcoin node would accept your transaction.  Or for merchants, the possibility exists of double-spending coins, one spend per fork.Any long lived chain fork could have a hugely negative impact. Logical fallacy.  That logic precludes incentives that encourage block chain efficiency.You cannot simply get stuck in the loop     spam system -> demand system upgrades -> go to step 1as that clearly lacks any amount of self-examination or dynamic feedback. SatoshiDICE sends 0.00000001 back to you for some losing bets.  Basically, they are using the permanent blockchain as an instant messaging protocol. And furthermore, create solutions that incentivize block chain spam, and discourage creation of alternative, more efficient solutions outside the block chain. Dust is by definition a transaction output (bitcoin) so small that it is economically worthless, and will probably sit around unspent.The fee paid is irrelevant. Avalon miner fan behavior is as follows:   - fans stay at ~0/840/840 until temp3 reaches ~55   - fans accelerate to much higher speed (0/3480/3240)   - fans never slow down, even though temp3 decreases to ~43It would be nice if the fans slowed down.  Much noise with new firmware! They have a support site at http://support.avalon-asic.com/ The miner was power-cycled.  (updated original note to indicate this)
The market doesn't work like that.  The free market involves parties reaching an equilibrium.  "too expensive, therefore collapse" is not a realistic scenario depicting an open market adjusting to costs. Most 0.00000001 outputs pay a fee, which exempts them from the priority system.  Priority is used for calculating how to fill the ~27k free transaction area, in the absence of a fee bidding for the non-free block space. Yes. Had to power-cycle the miner at uptime 1 day, 21 hours.  cgminer was responding, but no mining work was going upstream to the pool.  The 'hardware errors' count was increasing rapidly. A more relevant measure than space in the block chain is the size of the list of unspent transaction outputs ("UTXO", list of spendable bitcoins).  It keeps growing and growing, with near-zero-value outputs.RE "who cares what the values are"  One follows from the other.If your purchases are typically 4-5 decimal places at most, and the remainder has sub-$0.001 value, the remainder is simply less likely to be swept up and spent... thereby taking up space in the block chain without being prunable.This is why losing SatoshiDICE bets are so harmful to the system.  You get back 0.00000001 or so on a losing bet.  With such high transaction volumes, SatoshiDICE is handing out lots of difficult-to-spend dust spam. I read your post sufficiently to note that you do not understand the concept of a hard fork, if you think we've already had one.Even the combined output overflow bug fix, which lead to the longest chain fork in bitcoin history, cannot be considered a hard fork.  Vulnerable clients were able to remain on the network, after the bug was "healed."  This would not be the case in a hard fork. And the answer is... today! Wrong.  Mining a side chain for a small amount of time is not a hard fork.A hard fork is where it is impossible for older clients to continue with the new bitcoin, without a software upgrade, because they would find some post-fork detail invalid (when it should be considered valid).We still have many older clients on the network, verifying the chain. Just a coincidence.  ASIC miners are rapidly coming online, which increases block production until difficulty changes to compensate. It is crucial to understand the concept and, yes, economic impact of a hard fork before even approaching the economic analysis of changing the max block size.A hard fork is a significant event that knocks legitimate users off the network, makes coins unspendable, or potentially makes the same coins spendable in two different locations, depending on whether or not you're talking to an updated node.It is, to pick a dramatic term, an Extinction Level Event.  If done poorly, a hard fork could make it impossible for reasonable merchants to trust the bitcoins they receive, the very foundation of their economic value.Furthermore, a hard fork is akin to a Constitutional Convention:  a hard fork implies the ability to rewrite the ground rules of bitcoin, be it block size, 21M limit, SHA256 hash, or other hard-baked behavior.  Thus, there is always the risk of unpredictable miners, users and devs changing more than just the block size precisely because it makes the most engineering sense to change other hard-to-change features at the time of hard-fork.It is a nuclear option with widespread economic consequences for all bitcoin users. * "the devs" do not even agree amongst themselves * There is no immediate need to change the block size (as you point out), only a perceived, debatable future need.* Until that point happens, it is impossible to know what is a happy medium.  And how will we know that happy medium?  The free market and user choice will decide, not some cabal of miners or devs.It is entirely within the realm of possibility that the userbase would refuse to change the block size.  It is inevitable that some users will indeed refuse to upgrade, thereby rejecting all (in their opinion) oversized blocks, thereby creating that most undesirable of outcomes, the long-lived chain fork.Will a majority endorse the block size change, or refuse?  An unanswerable engineering question, for the moment.  And given the present lack of need for a hard forking change, there is not much point in speculation. Updated firmware seems pretty happy.  No long-run data yet, as I've had to turn it off for reasons unrelated to mining (moving gear around etc.) Well, besides the bbs.<some.China.site> pictures posted, a random Chinese guy emailed me, requesting the firmware image Yifu sent me.So, it sounds like some units are arriving at their Chinese destinations, at least. I'm glad you asked Being the person who actually posted a faux-patch increasing the block size limit, it is important to understand why I disagree with that now...  it was erroneously assuming that the block size was the whole-picture, and not a simple, lower layer solution in a bigger picture.The block size is an intentionally limited economic resource, just like the 21,000,000-bitcoin limit.Changing that vastly degrades the economics surrounding bitcoin, creating many negative incentives. Sigh, they need to do more research.Transaction rates can easily scale far beyond 7 tps, even with 1MB limit in place.The current network is just the base settlement layer.Many organizations will layer instant payment networks, settlement networks, credit layers and other things on top of the current layer.Anybody who looks at the current technology and assumes "that's all there is" or "the whole world is limited to the current network" makes fatally flawed assumptions.Satoshi openly acknowledged this by noting insuitability of microtransactions for the current network, and it is clear that digitally signed messages may be sent, exchanged, combined by a myriad different payment processors, aggregators etc. "already controversy is brewing"  Wonderful zero-evidence hypothetical BS handwaving there.  Yes, controversy is brewing... among those teenagers clueless about bitcoin and economics.Bitcoin value and press reports indicate new bitcoin users and businesses every day.  The exact opposite of "back away" No.  You need to wait 100-120 blocks before you may spend a coinbase output. Several larger pools are running 0.8 or almost-0.8.  Largely stock software (with maybe a patch to filter out SatoshiDICE transactions here and there). This script is used to generate bootstrap.dat:https://github.com/jgarzik/pynode/blob/master/mkbootstrap.pyIt requires an up-to-date pynode chain database.In theory, someone could write a script that processes bitcoind's $DATADIR/blocks directory into bootstrap.dat, but no one has written that yet. Ideal for those who want a UI is simply to write an add-on utility or plugin that uses the RPC API.
This is not a replacement for block data you already have.  This is a separate file, that is only used once, during data import.After data import, the file is renamed to bootstrap.dat.old, and never touched again.  Most will want to manually delete it, after use. Update: the torrent moved to this thread. As a companion release, the Bitcoin blockchain data torrent has been updated.This torrent gives you a "bootstrap.dat" file.  If you are initializing a bitcoin client for the first time, drop bootstrap.dat into $DATADIR (your bitcoin data directory), and the bitcoin client will import all the block/transaction data found in that file.P.S.  Long-term seeders are requested and welcome!  See thread linked above for details. This thread is officially obsolete.Non-beta torrent thread now posted at https://bitcointalk.org/index.php?topic=145386.0 This is a torrent of the publicly available bitcoin blockchain data.IMPORTANT NOTE:  As of Bitcoin Core version 0.10.0 or later, this torrent is slower than a direct download using the bitcoin P2P protocol & client.  This torrent is now only maintained for research and development purposes as a secondary option.  Please use Bitcoin Core directly to download the blockchain.Bitcoin-Qt/bitcoind version 0.7.1 and later supports a special import feature:  If the file "bootstrap.dat" is found in the bitcoin data directory, it will validate and import all blockchain data found in that file.  The following torrent presents a bootstrap.dat file for that feature.Here is the PGP-signed torrent information.  The public key for jgarzik@bitpay.com may be found at public keyservers or http://bitcoin.org/jgarzik-bitpay.asc   Details follow below the signature.Updated:  August 23, 2014http://gtf.org/garzik/bitcoin/bootstrap.txtCode:-----BEGIN PGP SIGNED MESSAGE-----Hash: SHA512Torrent info hash: 36719ba2cecf9f3bd7c5abfb7a88e939611b536cTorrent magnet link:magnet:?xt=urn:btih:36719ba2cecf9f3bd7c5abfb7a88e939611b536c&dn=bootstrap.dat&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&tr=udp%3A%2F%2Ftracker.publicbt.com%3A80&tr=udp%3A%2F%2Fcoppersurfer.tk%3A6969%2Fannounce&tr=udp%3A%2F%2Fopen.demonii.com%3A1337&tr=http%3A%2F%2Fbttracker.crunchbanglinux.org%3A6969%2FannounceBlock height: 317000Filename: bootstrap.datByte size: 22566124235SHA1: 2e6e5dd20cd9c21960ba94f7265f42c4b6443758SHA256: d05062052be4dd6fbaeac5f17598e52f7ad545f9f938acefaf7067ecce1d7b5a-----BEGIN PGP SIGNATURE-----Version: GnuPG/MacGPG2 v2.0.22 (Darwin)Comment: GPGTools - http://gpgtools.orgiQEcBAEBCgAGBQJT+PcrAAoJEL8a4JGi25zKmj4H/i8xKIXW/xnw5i5Pc+ciUuc2Zo+KxQd1YGRmJSvGsyTgTqK4IJUBD8s8tIGTtznCJ2/Q3wIdZmoqxkST7r4rqJlycOyJ/n19K5beYvVekIgHVXFmhdJhZf8KNnyuV+DpHmmLKYyZtvkoY9b3hEBHVtSMAkjuWyA9IEPeghxBX32JAToXOZGs9vZghNyIMg/fWbGLuv1oX7QCjAAua0NAMbLXdiSvVcLXskTRy38W4whz1DX6ruL8mPRYH5Ko6/cmtVqEkr53aEwYf1XJGHHAz3+JnEHecxBUbiRhDwMdCVtqzKudXWVDtkgVQmRxrkKTw63NTVMge4eEziE2+7JQgq8==p9TY-----END PGP SIGNATURE-----What is bootstrap.dat?It is a flat, binary file containing bitcoin blockchain data, from the genesis block through height 317,000.Versions 0.7.1+ automatically validates and imports a file in the data directory named "bootstrap.dat".Special note: Version prior to 0.8.0 have a bug which will only import 2G of data from a file.  This is fixed in 0.8.0.Who wants bootstrap.dat?Anyone bringing up a new node using the reference client.  This is one method of accelerating the initial blockchain download process, while helping the bitcoin P2P network by offloading data download traffic from public P2P nodes.This download is not for those who are already running the bitcoin client.How often will this torrent be updated?Assuming this project is deemed useful and worth continuing... the torrent will be updated once every few months, when the checkpoints are updated in the reference client source code.Why not update the torrent more often?A torrent works best when it is a large, static dataset that changes infrequently.  That maximizes the ability to seed the data, enabling even part-timer seeders to contribute meaningfully.  Less frequent changes also minimizes the risk that a malicious torrent will appear, with a long, malicious side chain.  The current policy only updates the torrent after blocks are buried many thousands deep in the chain.Why should I trust you?You don't have to:  This data is raw block chain data.  The client will verify this data during import.Independent third parties may generate their own bootstrap.dat, up to height 317,000, and verify that the sha256sum matches that posted above.  The file format is simple and publicly known:     <4-byte pchMessageStart><32-bit length><CBlock, serialized in network wire format>Torrent file download?If the magnet link does not work, download the torrent file from https://bitcoin.org/bin/block-chain/   http://gtf.org/garzik/bitcoin/bootstrap.dat.torrentHow can I help?  Do you need more seeds?Yes, we need as many long term seeds as possible.  This ensures we can meet torrent download demand immediately at high speeds, and remain idle the remainder of the time.Generate the file myself?You may generate the file yourself, rather than downloading it, if you have Bitcore Core and python.  The tool used to generate bootstrap.dat is https://github.com/bitcoin/bitcoin/tree/master/contrib/linearizeComments welcomePost any comments or experiences in this thread.  I'll update the OP as needed. Currently beta-testing the following updated torrent:SHA256 bf658c7055b733bfc15ea167f298c5599b89d220b14dbe7c8ef20b18e468c451magnet:?xt=urn:btih:6fe493ba606847eac163baf35aae9db319735482&dn=bootstrap.dat&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.ccc.de:80&tr=udp://tracker.istole.it:80or http://gtf.org/garzik/bitcoin/bootstrap.dat.torrent (please use magnet link, if possible)When sufficient seeds appear, a new PGP-signed forum post will be made, obsoleting this thread. See the 'spendfrom' script in contrib/ of version 0.8.0. Wifi or ethernet One would think, if you want long term storage, the Satoshi client would be the best choice (or perhaps Armory, which uses the Satoshi client).  For long term storage you can afford to wait for network sync.If you want lower security with instant access, one can use a web wallet.  But move your bitcoins off a centralized website as soon as possible... Ditto others: received a WalletBit emailed receipt confirming payment. The preferred support method for Avalon is http://support.avalon-asic.com/ from what I understand. I'm surprised at WalletBit frankly. Yes, this is being reported in the Custom hardware board.Many people are seeing this problem. Update:Order #1797 cancelled due to timeout, after bitcoins were sent.Bitcoin transaction id as mentioned: a73362b554f5611e43284ca42ff2ee07876e64452c9b8e1eed15255339b95742Tickets submitted at Avalon and WalletBit support pages, with attached screenshot. Order #1797Quantity: 1Price: 56.82364894txid: a73362b554f5611e43284ca42ff2ee07876e64452c9b8e1eed15255339b95742WalletBit guest pay interface is still showing "..." repeatedly, 60 seconds after sending transaction. Ditto.My workaround:  log out of walletbit account, and pay as guest That wouldn't be an accurate test of the new firmware, if the settings were altered before giving the defaults a good chance to succeed/fail. New firmware received from Avalon via email.Upgrade was successful using standard web-based OpenWRT firmware upgrade procedure.New image appears to be based on cgminer 2.10.5, and the fans are running at a much higher speed (and noise level) than the previous image.  Restarted and was back to mining within minutes... let's see how this impacts stability. heh, no.Sirius is one of the first bitcoin users/developers besides Satoshi.He is still occasionally logs into the forums, and I just transferred full control of bitcointalk.org domain over to him last week. Miners include free transactions because there is an incentive to encourage bitcoin use in general.  The fees alone do not yet support the network, so even fee-paying transactions are below-cost.
Version 0.7.2 and later include the raw transaction API (JSON-RPC), which permits full coin control.The upcoming release 0.8 includes contrib/spendfrom/ utility, which illustrates how easily an external utility may provide coin control capability.  No GUI patching required. Read the links previously posted.  People with actual experience dealing with GPL violations disagree WRT playing nice.It's also just common sense, Human Relationships 101. Or free hardware requests disguised as political statements If any of these teenagers like kano had a clue about pursuing GPL violations, they would understand that going straight to curse words and screaming accusations is logically less likely to produce the source code in a meaningful amount of time.  It is also less likely to produce long term cooperation, as it creates a hostile environment at the start of the relationship.There is lots of good text and FAQs from folks with a track record of pursuing GPL violations at http://gpl-violations.org/ including http://gpl-violations.org/faq/violation-faq.html which suggestsIf we want to encourage Avalon to be a contributing open source community member, throwing curses and legal deadlines at the outset is the last thing you want to do.  Act like a mature adult, and understand that everybody has different priorities and perspectives.Understand that these details may take weeks or months to sort out, especially if it is the first release of a new product line.Coordinate with other interested parties in the bitcoin community, come up with some positive reasons why Avalon should open source their work, open a dialogue with Avalon, work with the company to show them that open source makes engineering and economic sense.You don't want the only incentive to use open source being fear.  That just encourages a company to do anything they can to minimize or avoid open source as much as possible.We want ASIC vendors to be open source friendly because it is good for everyone involved. After certain people made that task considerably more difficult?  It is difficult to summon the motivation.  Ask again in 30 days... No. Once upon a time in #btcguild...Code:<KuKzz> now we have a single user with 800gh? 0_0<Eleuthria> Yes.<Eleuthria> Welcome to the future. This.Botnets are stolen resources, so anything we can do to incentivize them away from bitcoin is useful. That would only be true if Avalon said they will not release source code; but they have always maintained that they will release source code.  At least that's what I was told.Based on that, the only question is the date of release, and by extension, the patience level of forum posters  Two units definitely known, mine and Bitcoin Foundation's, plus possibly a third in China based on vague forum posts. The kernel stuff is GPLv2.  Only cgminer is GPLv3, AFAICT.  Definitely a difference there, and there is plenty of de facto precedent for binary-only gadgets in the kernel -- even if hardcore Debian-legal denizens disagree with that legal interpretation/result.There are any number of existing bytecode solutions that could be employed, to provide a sort of "firmware" that is executed by the host CPU.  Modern ACPI functions like this, as does http://en.wikipedia.org/wiki/Open_FirmwareOf course, that tends not to be performance-heavy code, but instead critical bootstrapping and initialization functions. Come on Bitcoin Foundation, you gotta give up more details than that  I'm not.Seems pretty clear heat is not a problem here. Blocks only contain "final" transactions, and by definition, a transaction with non-zero nLockTime is not final.  Transaction replacement occurs before miners mine blocks.Thus, to answer your question, such a miner's blocks would be rejected as invalid by all existing versions of bitcoin software. Where oh where did cgminer come from, originally?  hmmm. This torrent will be updated soon, to sync with a new checkpoint in the upcoming 0.8 release. This would make a useful contribution to this thread,   [BETA] Bitcoin blockchain torrent   https://bitcointalk.org/index.php?topic=117982.0The semi-official bootstrap.dat torrent is about to be updated, as it is for each bitcoin release.  The 2GB issue has already been raised in that thread, and the FAT32 4GB issue would also be a good one to raise.Ideally we would like everyone to seed the same torrent -- it's the same data, as guaranteed by bitcoin (as well as torrent) hashes. Not yet, no.Yifu stated the source would be released, even before kano began his transparent quest for free hardware.  No reason to disbelieve that, at this time. Or just google for "pin grid array" The spectacle of watching laymen giving themselves a promotion to copyright attorney is truly worth watching. My review included raw numbers -- search for "cgminer status"Here is an updated cgminer status snapshot:  http://pastebin.com/8mKjmTSnReaders may search for "temp" to find what I presume to be temperature sensor readings.  Fan speed is also observed via "fan" data.
Uptime: 2d 0h 40m 23s Thanks for the luck, it apparently helped!    The following is, as far as I know, the first block found by a publicly released ASIC miner:http://blockexplorer.com/block/00000000000001528a3fa72b86032459e1fb6ab38720e19a26e3a1f4a64e461aSo far all known ASIC vendors have been highly ethical and not used their mining power on mainnet, which could mean that block #220386 is the first ASIC block found.Will it mine for as long as it takes?  I imagine it will make more sense to mine on a pool once other ASIC miners start hitting mainnet.  The average block production time, for the moment, should be around 2 days, 4 hours. FWIW, eloipool helped the Avalon ASIC miner solo-mine its first block:http://blockexplorer.com/block/00000000000001528a3fa72b86032459e1fb6ab38720e19a26e3a1f4a64e461a Uptime: 1d 13h 49m 29ssolo mining w/ eloipool + high diff Testers:Another good, simple test:  leave it running for 24+ hours, especially on Windows.This helps verify longer term stability, and verifies that it keeps up with the network.There had been some crash reports early in development, on Windows.  Pretty sure those are solved, but extra testing through normal use cannot hurt. Strictly speaking, it is not a typo; $DATADIR/blocks simply has to exist first, in order for it to work.So the instructions need "mkdir $DATADIR/blocks"  My own notes:Pieter gets a lions share of credit, for his ultraprune workPlease test!  Even an "it works for me" report is useful (just make sure to include your OS version and other helpful details in your "it works" post...)If you still have a slow block download, simply close the program and restart.  That will start the download again, with another peer.  There are still known issues with peer selection.  "restart program" is an ugly but useful workaround. Dynamic targetting was used, which should in theory achieve same... maybe high+static is better.Multiple answers...pushpool has several known inefficiencies... besides being single-threaded for database + network + rpc, it simply proxies every client getwork to bitcoind, with some rewriting.  bitcoind cannot keep up with that, once the miner load (historically difficulty 1.0) reaches a certain point, the whole system cannot keep up.Pool ops either solve this by scaling up the number of bitcoind processes (machines), or run pool server software that supports some amount of internal work generation, easing bitcoind's load. 'free' is happy as a clam.  The previous behavior can be attributed to a memory leak.Now that difficulty is sufficiently high, the box reaches a condition where the controller (linux kernel, cgminer) are active and accessible remotely, but no work is progressing.The box will restart if the memory leak condition is reached.  The box does not restart upon this no-mining condition. Another reliability update:Now that difficulty is sufficiently high, no longer seeing machine or cgminer restarts.The most common symptom now is a cessation of mining; cgminer and machine are both responding to status queries, but no work is occurring.This symptom occurs every 24-48 hours.A simple machine restart fixes the problem immediately. Already tried and failed mining solo with: bitcoind, p2pool, eloipool.  And I know enough to know that my own pushpool, unmodified, cannot keep up either Need to hack pushpool or use another proxy server that can keep up. Sure, that's the predicted average.  Machine/miner reliability, bad luck, the pool's cut, costs related to pool hopping and other factors definitely impact income.  p2pool's income was something like 50% below predictions. Not yet.  Maybe another 1-2 days.Not true... I wish. That is what the machine does during boot: run cgminer from the command line.  That is necessarily how it must be run under Linux One only needs to edit /etc/rc.d/S99cgminer.  Here is a sample of S99cgminer:Code:DEVS=`find /dev/ -type c -name "ttyUSB*"  | sed 's/^/-S/' |  sed ':a;N;$!ba;s/\n/ /g'`PARAMS=" $DEVS $POOL1 $POOL2 $POOL3 --avalon-options 115200:24:10:45:282 -q --api-allow "W:0/0" --api-listen "ntpd -d -n -q -N -p 0.openwrt.pool.ntp.org \ -p 1.openwrt.pool.ntp.org -p 2.openwrt.pool.ntp.org -p 3.openwrt.pool.ntp.org && \start-stop-daemon -S -x $APP -p $PID_FILE -m -b -- $PARAMS Avalon ASIC miner is currently surviving >24 hour stretches without restarting, now that we're on a stable pool with a reasonably high difficulty value (BTC Guild, difficulty 32.0).However, have now seen the machine get "stuck" in a strange state, where it is not mining or restarting.  The fans ramp up, then ramp down, in a cycle.Power cycling fixes the problem immediately, and the machine goes back to mining in >24 hour stretches again.As a workaround, some pools have an "idle worker" notification system, to let you know when your miner disappears. How does one force GBT usage in 2.10.4?Trying to poke the ASIC miner into GBT'ing from bitcoind, rather than getwork'ing. Some people were curious about the load on the controller (the CPU running the linux kernel + cgminer):     Load Average: 0.49, 0.52, 0.50OpenWRT process list:Code:  546 root      1512 S    /sbin/syslogd -C16  548 root      1492 S    /sbin/klogd  550 root       852 S    /sbin/hotplug2 --override --persistent --set-rules-f  556 root      1016 S    /sbin/procd  560 root      1516 S    /sbin/netifd  567 root       876 S <  ubusd  766 root      1504 S    /sbin/watchdog -t 5 /dev/watchdog  986 root      1520 S    /usr/sbin/crond -c /etc/crontabs -l 5  994 root      1156 S    /usr/sbin/dropbear -F -P /var/run/dropbear.1.pid -p 1014 root      1152 S    /usr/sbin/uhttpd -f -h /www -r OpenWrt -x /cgi-bin - 1043 nobody     944 S    /usr/sbin/dnsmasq -C /var/etc/dnsmasq.conf 1056 root      1504 S    /usr/sbin/ntpd -n -p 0.openwrt.pool.ntp.org -p 1.ope 1065 root     30052 R    cgminer -S/dev/ttyUSB0 -o 1.2.3.4:9332 -O 1ABCDE 9244 root      1224 R    /usr/sbin/dropbear -F -P /var/run/dropbear.1.pid -p 9245 root         0 SW   [kworker/0:1] 9266 root      1508 S    -ash 9291 root      1500 R    psMemory usage snapshot:Code:root@OpenWrt:~# free             total         used         free       shared      buffersMem:         61832        25648        36184            0         2496-/+ buffers:              23152        38680Swap:            0            0            0 Miner "freeze" just past hour 20, mining p2pool:  openwrt and cgminer status are accessible, but no work is being retrieved from / sent to p2pool.Manually restarted. Survived 18 hours so far on p2pool without a restart, either machine or cgminer.Mining at difficulty 16.0, with stratum, to local p2pool/bitcoind. No, you're doing something wrong if you're stuffing/casting pointers into integers like that.  File descriptors and handles returned by the OS are different in every way from a pointer.
You want to use, not work around, the C type system.  Use the type that most accurately reflects the contents.  Google for alias analysis, as just one of many examples why you should not "hide" things from the compiler. More good news.  Machine uptime and cgminer uptime are both now 24 hours.  Pool was BTC Guild, and stratum seems to most commonly use a share difficulty of 32.00000.Now going to play with p2pool some more, with higher difficulty rates.It sounds like a theory of a memleak is certainly plausible, at least. Already tried straight solo mining to bitcoind, as noted elsewhere.  Saw at least 10% "get failure" rate, and it was falling back to the 2nd and 3rd pools.It probably makes sense to set up a 1-person pool server, for solo mining, than go straight to bitcoind. In general...  agreed, with this sentiment and the opinions others have expressed in this thread.However, it should be noted that certain situations may benefit from a mixed approach.  If you are a merchant shipping a physical product, the purchase process might look likeRequest paymentUser sends bitcoins"Payment received!"Hours or days pass, while product is packed and prepped for shipmentOrder validation: Check and make sure bitcoins have not been double-spentShip productSo it is really product/situation dependent.  A situation like bitcoin exchange or SatoshiDICE would seem like the ideal example of when to not accept zero-conf transactions; alternately BitcoinStore.com would seem like an excellent example of what could follow the multi-step order flow above.Multi-step Zero-conf-now-check-later gives the best user experience: fast immediately confirmation of funds receipt, with the security of multiple confirmations before final product delivery/enablement. Avalon's cgminer 2.10.4, as described in the review linked in the OP: http://garzikrants.blogspot.com/2013/01/avalon-asic-miner-review.htmlMake sure you are not mining at difficulty 1.0.  diff-1 is the original difficulty for pools, and it generates too much network traffic for this ASIC miner, possibly leading to many restarts.Find a pool with "variable difficulty" or "vardiff."  p2pool supports a higher-than-1.0 difficulty by appending "+N" to the worker's name, e.g. "1BrufViLKnSWtuWGkryPsKsxonV2NQ7Tcj+8" for difficulty 8.0.13 hours uptime and counting, since switching back to BTC Guild/stratum/vardiff. Good news.  Mining on BTC Guild with vardiff seems to have dramatically reduced the restarts. Continuing to see restarts.  Restarts result in resumed mining, in all but one case.  In the "one case", the miner was accessible via web and cgminer was alive, but no work was being performed.Yifu does not think heat is a factor, but speculates that other software components may be at fault.Switched from slush to BTC Guild for the "vardiff" feature, to reduce network overhead.  Eligius also just deployed the "vardiff" feature.  This feature will be crucial for ASIC miners. The measurement was taken with the Kill-A-Watt plugged into the UPS, and the miner plugged into the Kill-A-Watt.  In other words, the Kill-A-Watt was between the UPS and the miner.Batteries and other miscellany are not included in that measurement. No, not at all.  A restart fixes everything.  This is just describing the behavior before the restart. And as noted, that number is not changing.  The number is constantly changing, normally.Other stats bear out the conclusion. Yes. Again, no, it was not hashing.  Avoid speculating wildly based on a tiny subset of hundreds of variables. No, not hashing. Yes, consider the cost of producing 2-3 one-off ASIC prototypes...  because apparently you have not done so.It's about the same as producing 300, in terms of the chips produced.  ASICs have huge setup costs, compared to per-chip costs. Still having some amount of reliability problems.  Moving the miner in the office helped a great deal.  However, still seeing machine restarts for unknown reasons (note: must ping support, inquire about reboot logging).And right now, the miner is in a strange state where the controller (running Linux) and cgminer are alive, but fans are not running, and no work is occurring:Code:   [Elapsed] => 10477   [MHS av] => 15419.77   (this is not changing)   [Found Blocks] => 0   [Getworks] => 385         (these are increasing, slowly)   [Accepted] => 37082     (these are not increasing)   [Rejected] => 398...   [fan1] => 0                     (indeed, fans are not moving)   [fan2] => 0   [fan3] => 0   [temp1] => 26   [temp2] => -1   [temp3] => 48   [temp_max] => 49And the pool agrees that no shares are incoming. At the UPS socket not wall, to be specific. Stratum, with "+8" (difficulty 8.0).  Stratum seems to work better in general, with Avalon's modified cgminer 2.10.4. That would have been nice.  And as long as they are evenly distributed -- perhaps 3 per postal code + IP address location, or somesuch. Filled out shipping information and ordered 1 unit... but got charged $1 by walletbit.Sounds like I missed out on batch #2... good luck to the people who got in! Ditto.
Sounds like somebody's impatient Never forget what BitSyncom posted earlier:  it is a market where demand vastly outstrips supply.If he posted a 4chanlulz site, full of obscenities, with an order form that accepts shipping info and bitcoins, batch #2 will still sell out. No, though several have requested that.It would be good to eliminate the UPS as a factor, agreed. Supposed the source will be opened, probably after Yifu gets some sleep and batch #2 sales </guess>In that case, other miners may be modified and used.  It appears to be a modified cgminer, modified kernel (Avalon device driver), and otherwise stock OpenWRT install. Just mined all night on p2pool.It looks like fixing the air flow/physical configuration solved the issues.No miner or machine restarts while I was sleeping, and while it was mining p2pool.(no p2pool blocks either, alas) They mined on a test pool, according to Yifu. Your comment is entirely unrelated to the problem at hand.The management software is fully capable of restarting cgminer. Software bug:  changing cgminer configuration claims to work at runtime, but does not.  Thus, changing pool settings requires a reboot. However, it is fair to provide the base power consumption, because that potentially provides a better apples-to-apples comparison with other competitors.IMO module and whole-unit power consumption figures would be the ones to publish. +1, a fair perspective See ngzhang's post here before updating.Consider PSU efficiency etc. RE powerSee ngzhang's post here. Avalon miner power usage snapshot has been posted.  This should help calculate efficiency, electricity costs etc. Power numbers snapshot:     620 Watts, 5.6 Ampsthanks to Kill-A-Watt.Code:   [Elapsed] => 2186   [MHS av] => 66320.47   [Found Blocks] => 0   [Getworks] => 73   [Accepted] => 2060...   [miner_count] => 24   [asic_count] => 10   [fan1] => 0   [fan2] => 1920   [fan3] => 1920   [temp1] => 27   [temp2] => -1   [temp3] => 48   [temp_max] => 49 Yes, see the review linked in OP.Yes, "vardiff" works on BTC Guild with this miner. Request not understood.I can watch the process size over time, if that's what you're asking. Yes: http://garzikrants.blogspot.com/2013/01/avalon-asic-miner-review.html ITYM party of 2   Bitcoin Foundation has theirs too.With so many in transit, it won't be along though, I'm guessing.And in the meantime, folks who have purchased Avalons can ask questions here. Boy that's a shortsighted analysis.Bitcoin will grow layers above the base layer -- the blockchain -- that will enable instant transactions, microtransactions, and other scalable issues.Do not think that the blockchain is the only way to transfer bitcoins.Larger aggregators will easily compensate for current maximum block size in a scalable manner.All nation-state/fiat currencies are multi-layer.  Too many people look at what bitcoin does now, and assume that those are the only currency services that will ever exist. Here is a general thread for owners of Avalon ASICs.This is the review I posted: http://garzikrants.blogspot.com/2013/01/avalon-asic-miner-review.htmlThe restart issues mentioned appear to be have subsided (knock on wood) since I laid the unit down, and adjusted some air flow issues in my office. Confirmed:  Eligius is ASIC-ready.  
BTW, it is confirmed that BTC Guild is ASIC-ready Currently mining with the Avalon ASIC unit on BTC Guild, over stratum. Personally, I -- and you -- should be far more interested in the transparency of the mining rules.  This is a lot of hashpower concentrated into one operator's hands.What bitcoind version will be used to generate blocks?What patches will be applied, if any? The demand is far larger than supply.  Don't expect to pay list price in those situations, even if you find someone willing to sell a unit. Or in other words, on average, a solo mining Avalon ASIC should find a block once every 2 days, 4 hours at current difficulty. Nope, this is false, as stated in another thread.The order is:1. 25 BTC refund/donation received, with no mention of review2. Months pass3. Bumped to head of line4. Review requested.  I was free to ignore the request, and just silently mine bitcoins.But it seemed like the community would like to know these details, rather than me staying silent. No, I never said any such thing.I did say I needed "instructions from the mothership", which was simply the static IP address for which the machine was configured.Once obtained -- as my review states -- you are able to access the box and set a root password.  Standard OpenWRT behavior and configuration in that regard. Just for the record, I was not paid anything to write a review.The 25 BTC was a donation-refund, and a review was not mentioned at all at that time.Months later, I was bumped to the front of the line -- again, without asking -- and they asked me to do a review.  I was free to say "no" or ignore them at any time.I assumed the community would prefer that I write about the machine, rather than keep silent and mine.Maybe I was wrong? They are upgradeable, FSVO.  The entire kit is modular, and future, faster, better modules can slot right in. The stated plan is CC then BTC.  Money has been actively flowing.My BTC refund was requested weeks ago as well.  Doesn't change the plan or signs of progress. A torrent has been around for a while:     [BETA] Bitcoin blockchain torrent     https://bitcointalk.org/index.php?topic=117982.0 Every day you spend on Earth is another day of lessons learned.  Highly intelligent youth may compensate for a young age -- and I think this forum as plenty of highly intelligent readers -- but that's not the same thing as age being meaningless.Youth under the age of 25 are biologically less able to control their emotions, and their brain is still under rapid development.  During the teenage (puberty) years, even more so.Science says you are more of an animal than you think.  And that shows online as well as offline.  Eat.  Drink.  Screw.  Social chatterings.  Elimination. Within a couple days of a successful CC refund?No, that is not reasonable.0 BTC refunded here, BTW. This is precisely why most people running bitcoin businesses or writing bitcoin software think the forum is a ghetto.Back to ignore, you. Title fixed. Do you have a track record of shipping working hardware?  Avalon and BFL do... The unwillingness of management to clean out the sewers.Freedom of speech without freedom of association (or disassociation) just means those who post frequently -- teenagers with time on their hands -- dominate the discussion. (reposting from another thread)No shipping/tracking information has been sent to me, privately or publicly, as of this writing.No private communications since Jan 20.Forum readers know as much as I know, at this point.For the record, at this time, I do not think Avalon or BFL are scams. No shipping/tracking information has been sent to me, privately or publicly, as of this writing.No private communications since Jan 20.Forum readers know as much as I know, at this point.For the record, at this time, I do not think Avalon or BFL are scams. This picture seems to be entitled ASIC Preview #1: http://imgur.com/Y8QzhRPIt's even an off-grid, self-powered unit, apparently. Any follow-up on this?  I was considering an order.
That implies zero internal security, and we all know China is a heavy-surveillance state.It would not be unheard of for the entire batch to await approval, foreign or domestic.  State security looks at the cryptography devices, and gives a yes-or-no answer for the entire hardware type. Very existential.  Do I exist?  That is something I must ponder at length.In the mean time, put down the crack pipe / energy drink and take a deep breath.  In the real world -- i.e. the world outside a teenaged troll's bedroom, the world outside the Internet -- manufacturing and shipping and customs and all that jazz can take weeks for a first run product.  This is not Amazon.com, where products have already been shipped to warehouses weeks or months before your order.Cryptography is most definitely "export controlled", which means the government pays very close attention to it.  In fact, in the United States, cryptography software was considered "export grade munitions" until year 1996 or so.  Exporting PGP software to Canada required as much paperwork in 1990 as exporting a rocket laucher w/ rockets.If in the worst case, Avalon is a scam, we cannot rightly be suspicious for a few more weeks yet.  And for the record, I do not think Avalon or BFL are scams at this time.It is still a race between BFL and Avalon at this point, and -- as we see -- any number of factors may impact the outcome.P.S. DISCLAIMER: I don't know anything more than you guys do, on this thread, with regards to shipping, customs and arrival.  All of this is speculation, even if it is a bit more informed speculation than most in this thread  +1000Well, first, it is amazing that high profile bitcoin luminaries would keep any amount of serious money on a remote website.  When bitcoinica first appeared, pretty much 100% of bitcoin web wallets had been hacked and most had been DDoS'd as well.  Your own encrypted, decentralized, backed up computer is far more secure than (at that time) that proven track record.And, as you say, who would trust that much money to a teen running a fly-by-night website, who had no experience in the area of finance in question?  Especially given HK's reputation it seemed likely that Bitcoinica was a bucket shop or possibly associated with organized crime in some way. It might take a while, the very first time a newly created piece of hardware clears Chinese customs.  Presumably there would be less delay for later units, as customs would already be familiar with that hardware. I stand corrected.  That was what the Avalon guy told me.No tracking/shipping info yet. BitcoinStore review update:My order was filled, shipped, and arrived todayOne item, Victorinox mini-knife, was backordered.I was notified within 24 hours of the backordered item, via zendesk support interface.  They offered to refund, or let me wait for the item.  Opted to wait for the item (while the remainder of the order shipped immediately).The rest of the items arrived in a single box, marked "MemoryDealers", via FedEx Ground to my North Carolina/USA location.Everything packaged well, and functioned as expected.  Purchased two LED mini-flashlights, a clock, a knife and a set of Wine Enthusiast beer glasses.Accurate packing list was enclosed with packageNotified via both email and zendesk support personnel of USPS/FedEx tracking numbers. Order #xx2, placed on 08/09/2012.Refund requested 01/13/2013.Reply received 01/17/2013 from Dave stating "I'll be submitting your request to Tom in today's batch"No refund received yet as of this writing (01/21/2013). File modification time is simply a data field in the compressed archive, trivial to change.Getting the compressed and uncompress archive sizes to match is only marginally more difficult.The compressed archive likely includes per-file hashes or CRCs already... that is the data highly difficult to duplicate (i.e. the part you did not post).Irrelevant.  OpenPGP data is typically already public... it needs to be, to independently verify signatures. A release candidate 0.8-rc1 will be "real soon now."We especially need Windows testers.  See https://bitcointalk.org/index.php?topic=129861.0The more Windows testers we can get, the sooner 0.8 is released.Please help!  Even an "it works for me" report is great.  Test the basics -- sending and receiving money -- or more exhaustive tests if you are motivated. No, that is not the case at all.  And it is sad that anyone in a crypto community would make this false claim. Without hash protection, that does not prove you altered the original compacted archive (or not).  Too late now, as that is missing from your original posting.If you are in the bitcoin community and do not understand what a hash algorithm does, that is quite odd. Anyone else with the documents may compare their hash to the hash of the data you post.Thus "verified by other entities" Notably, when contacted privately, OP was not interested in posting hashes for the data, leaving no way for the data to be verified by other entities as fiction, or non-fiction (without a line-by-line, sentence-by-sentence comparison).Smells like fiction + drama. Although I'm obviously biased...  BFL really should do that, too.  Most major manufacturers ship out demo and review units of hardware before the mass production units are shipped to vendors/stores/customers.Even if BFL only shipped out two units, it would prove they have working hardware and start everyone salivating  My shipping location is the United States (North Carolina).  FedEx could get it here quickly, but that involves expensive airplanes.  Could be 48 hours, could be a week or two.  Who knows. Two weeks?    One hopes they did not ship it via slow-boat!  (for the record, I do not know shipping method, nor have a tracking number) Quoting Lunostre on reddit, which seems like a sane response:I have no association with Avalon other than being a customer, FWIW.Tiny operations in China/Taiwan/HK often work like this. I'll post photos and a review when my unit arrives.I was surprised that I was the only core developer who paid for a unit.  Followed the shotgun approach:  ordered units from all the people working on ASICs. Oh, and an I-dare-you-to-add-this product, that I think might have a niche bitcoin market:  solar panels.Promise to buy at least one  Good stuff!
Wanting to support an Amazon-that-takes-bitcoin, I placed an order with BitcoinStore.com.  Here is my capsule review (permalink):Order placed successfully.  Largely shopped in the "home and appliances" section, as hardware and software generally flow freely to me Nice, clean, minimalistic interface.  Not as fancy as Amazon.com by a long stretch, but certainly usable and apparently well stocked.Bitcoin payment, apparently via BitPay's engine, was successful.  A standard bitcoin address was presented on the page, and the reference client sent coins to the address without a problem.Did not bother to compare prices with Amazon.com.  Main goals were to stimulate the bitcoin economy, reward businesses going a good job representing bitcoin, and provide a real-money review of the store.Major criticisms:I checked out as a guest, not creating an account.  It was disappointing that there is no order URL at which I may track my order, e.g. https://orders.bitcoinstore.com/#1099000000  Almost all other online retailers offer this logical, basic feature:  watch the status of an order on the retailer's website, even if you did not create an account.Minor criticisms:The store sells 128GB flash drives, but the search string "128gb flash drive" does not return useful results.Shipping was simply described as "standard shipping", without additional information about shipping methods.  USPS?  UPS?  FedEx?  Who knows?Two shipping methods were offered to me:  "standard shipping" for free, or "standard shipping" for some amount of money.  Seems pointless to offer the same method twice, with two different prices.Sending bitcoin payment before clicking "place order" is quite awkward and backwards from standard user expectations, I would think.Nevertheless, as instructed, I sent bitcoin payment to the network before I clicked place order.  The user interface displayed an error.  I waited a few more seconds, then clicked "place order" again.  This time, it succeeded.Order email, received after placing and paying for the order, simply says "Once your package ships we will send an email with a link to track your order." -- again failing to describe how my order will be shippedOrder email is 100% USD, with no mention of BTC at all.  Payment was in bitcoins, of course (the only payment method available).Conclusion:  Rough around the edges, but good selection and they take bitcoins.  Would buy from again... assuming that my current order arrives! Doesn't that sort of strip a lot of privacy away from a lot of bitcoin users, without their consent? This.  A first-run of ASICs for a young startup is very high risk, even excluding the possibility of being a scam.My method was pre-ordering from all vendors, in the hopes that one of them would actually ship. Blatant thread bumping and social media promotion...     http://www.reddit.com/r/Bitcoin/comments/164uno/storj_and_bitcoin_autonomous_agents/Reposted the article in an (IMO) more accessible format, after it was noticed by Daemon author Daniel Suarez. Can you post the exact errors you get?  No debug.log appears at all? I have thought about doing this on more than one occasion:  Creating a libcrypto_satoshi snapshot with the bignum, DER, ECDSA etc. bits we currently use.  This would work around an IMO incorrect exclusion of ECDSA from Fedora's openssl package, as well as "freeze" certain bits that are exported globally via the bitcoin blockchain.But as always, there are costs to maintaining a fork.  It inevitably gets less eyes, use and maintenance than the main fork. +1If you want a spec then write something.  That's what's happening by default anyway on the bitcoin wiki.But Mike Hearn makes two key points that are nonetheless valid:You can write a spec, but you can't guarantee it actually matches the behaviour of the majority implementation.The consequences of getting details wrong is far more severe than that which most programmers are used to; there is simply no comparison to, e.g., POP3.If it were an IETF draft, I would add a section at the top that states "the reference implementation is canonical, this spec is subordinate. any differences are spec bugs." Technically you can delete everything except wallet.dat and bitcoin.conf. Wrong.All bitcoin clients will reject a block above 1MB, regardless of what any miner produces.Thus, it would take a hard fork to change the maximum block size. Not quite.  Once the initial block reward is exhausted (negligible), fees are the only mining income.  So that leaves only two possibilities:  transaction fees would be how mining supported itself, or external incentives cause miners to mine at a loss (fee-wise). MtGox and BitInstant are nowhere near that big.  The majority of Bitcoin Foundation members do not work for these two companies.  That's just silly paranoia.  Math fail. You may download from bittorrent and import via -loadblock, if you'd like:     [BETA] Bitcoin blockchain torrent A business directory would be a great idea.  An edited business directory, independent of any one business (BitPay or anybody else).Use trust metrics and pay attention to scam reports, BBB rankings, etc.This could be a very positive force in the bitcoin community, a reliable website we can point new bitcoin users to, so that they may see all the trusted businesses that accept bitcoins. Many devs, myself included, are on winter break ;p Indeed.  Or ~6:12am EST.   It is self-evident that guns make it easier to perform mass killing.  Guns are tools designed to kill, possibly at a distance.  Far more effective than a knife, by design.It is also self-evident that history has shown time and again that disarming all citizens makes oppression and slavery much easier.Pick your poison... Culture and history are integral to any solution, certainly.America has an estimated 300 million guns within its borders.If, hypothetically, all those guns were rounded up and eliminated, criminals and the mentally ill absolutely would have reduced access to guns.However, outside that scenario, any amount of gun limiting can negatively impact lawful citizens while not materially impacting access to criminals and mentally ill. tl;dr:  Use a decentralized client, rather than a centralized web service. No argument.  But again, that is purely the merchant's view.Consumers, at least here in the US, have been trained by well known consumer advocates such as Consumer Reports, Clark Howard, NACA members and the local news "consumer beat" that credit card purchases, in particular, have a level of consumer insurance built into them.  Every 5-10 years, a new layer of consumer protection regulations are added or updated as well.The hurdles at the consumer level are twofold, assuming a future world where bitcoins see 1000x consumer and merchant acceptance (hey, 1000x is easily realistic in a few short years, given how small we are right now):1) Education.  "Use an escrow transaction" is a foreign language, an alien concept to Aunt Tillie.  It is not realistic for average consumer use, unless the software tools and legal system both evolve significantly from where they are today.2) Rational economic actor choices.  The current credit card system provides significant economic and legal protections to the consumer, while hiding the costs by making the merchants bury merchant fees inside the item price.  Buying an item sans merchant fees is not likely sufficient economic incentive to abandon the legal protections currently available, for average consumers.Now, please, don't misunderstand.  What BitPay is doing is great -- I retweeted and promoted the video.  And it is a necessary step in bitcoin's evolution.In an optimistic forecast, one could see bitcoin taking over the majority of hard-cash-like transfers.  I imagine merchants would prefer bitcoin over having to deduce whether or not a $20 bill is counterfeit, even using the latest ink tests and scanners one sees deployed at Wal-Mart, Target, payday loan and pawn shop locations.But the huge amount of built-in consumer protections -- and associated consumer advocacy at all levels -- is an unquestionable hurdle.It seems more realistic that bitcoin credit cards will arise, as an optional, supplemental layer on top of the base currency:  credit cards, with standard protections consumers expect, denominated purely in bitcoins.  Much like credit cards are an optional, supplemental layer atop the US Dollar right now.That would at least be a familiar system to current consumers. No-chargebacks is a selling point for merchants (admittedly the target of the video), but consumers love chargebacks.  And there are ultimately far more consumers than merchants.Bitcoin can be better-than-cash for any merchant or consumer who already deals in cash, but that is just part of the bigger picture.
Loose enough wording that I must clarify The Founding Fathers felt there were many dangers in a standing army, especially those of the type often raised by English kings.  Armies of the English kings were not necessarily comprised of the citizenry, which had often been disarmed... hello 1600s "gun control".However, America's founders knew the lack of a national army could prove disastrous in a time of war; thus they gave Congress permission to raise one.  This was not supposed to be permanent condition.  i.e. the national army was to be disbanded following a war's conclusion.  Long term, an armed citizenry, a militia that could be raised in emergency situations, was thought to be an effective compromise that would maintain liberty and freedom in the long term, while also providing breathing room, buying time to raise a national army for war.In addition to this logic regarding standing armies, anti-federalists in particular felt that disarming the citizenry was the most effective way of enslaving a people.  As one example, English kings had in the past raised standing, professional, often mercenary armies while disarming their citizens.  In response to this policy of universal citizen disarmament and resultant oppression, many at the time felt citizens should be universally armed.Given the march of technology, especially the Cold War arms race, we now have massive weapons systems that render the "disband completely, in times of peace" idea quaint.  No country is willing to be the first country to entirely scrap their carriers, drones and fighter jets, just because, e.g. America is not in an active shooting war with Russia or China.As originally published in Valparaiso Univ. Law Review, see     The History of the Second Amendment     http://www.guncite.com/journals/vandhist.htmlQuite long, but very readable (and skim-able). Good stuff.  Shared to my social media streams.Protip:  bitpay has a twitter feed... use it!    This kind of thing should go out on twitter. In America, gun-free localities are always high crime.  In America, that is not a fallacy. The prevailing idea is that you download the block chain from "archive nodes", which are nodes that retain the full blockchain. Pretty much.  Most mass shootings in the US happened in so-called gun-free zones. Those are just old nodes, prior to the strSubVer convention.  Look at their numeric protocol version. Title: A Eulogy for #OccupyURL: http://www.wired.com/opinion/2012/12/a-eulogy-for-occupy/all/This says a lot about bitcointalk.org:Let us just hope that BitcoinTalk.org figures out that freedom of association is also a right, and as a private website BitcoinTalk.org has the freedom to not associate with users that an overwhelming majority of site users downvote or ignore. A payment protocol is already being developed, with input from several on the bitcoin-development SourceForge mailing list.See https://github.com/gavinandresen/paymentrequest for software or the mailing list discussion archives http://comments.gmane.org/gmane.comp.bitcoin.devel/1574 URL: https://github.com/bitcoin/bitcoin/pull/21001) Create COIN_DUST constant, to represent the dust spam limit used.2) Update COIN_DUST from 0.01 BTC to 0.001 BTCRationale: With the increase in bitcoin value (US$13.67 as of thiswriting), it seems reasonable to reduce the value level of which weconsider "dust spam."3) Update TX miner and relay fee defaults to 0.001 / 0.0005 BTC respectivelyRationale: Reflects growth of dust spam in unspent transaction output dataset.Review of impact:a) Definition of COIN_DUST reduced from 0.01 to 0.001.b) Miners who mine with this code will require a fee >= 0.001 toinclude TX's with outputs <= COIN_DUSTc) Normal clients will require a fee >= 0.0005 to relay TX's withoutputs <= COIN_DUST Pretty much.  But just to put some facts on the table,Code:{    "version" : 79900,    "protocolversion" : 60002,    "walletversion" : 60000,    "balance" : 80.99950000,    "blocks" : 211953,    "connections" : 8,    "proxy" : "",    "difficulty" : 3370181.79927784,    "testnet" : false,    "keypoololdest" : 1337909229,    "keypoolsize" : 104,    "paytxfee" : 0.00000000,    "unlocked_until" : 0,}Ever since getting involved in bitcoin, it has been my goal to actually spend my bitcoins, and buy more on the open market as needed.  That helps stimulate and build the bitcoin economy.Those with short memories, and trolls, forget that I have also given away over 15,000 bitcoins through various developer bounties. 100% agreed  +1, Pieter has been doing the (majority?) of the Satoshi client heavy lifting.  He deserves lots of kudos and free beer.Actually, we do!  We need to stabilize 0.8 as quickly as is reasonably possible, because people are beginning to avoid 0.7.x due to slowness, choosing instead less secure but faster bitcoin clients.Any and all testing, on any and all platforms, is greatly appreciated.Even posting "it works, my platform is [Ubuntu version X | Fedora version Y | Windows version Z]..." is helpful. +1, quoted for emphasis. SatoshiDICE exceeds 50% of block chain transactions currently, but transaction count is not relevant to any economist.  Consider, you can have 100,000 SD gamblers each betting 0.01 BTC daily, and nobody would claim that such gambling represents a large part of the economy.  Large transaction count just reflects on a poorly designed solution that spams the block chain with "dust spam" for each losing SD bet.The number of bitcoins sent in the past 24 hours is 1,162,027 BTC (bitcoinwatch.com), including change.The average daily SatoshiDICE BTC-in is less than 8,000 BTC (dooglus).  Double that for conservative BTC-out.You have dodged the question.  On what evidence?If you are making the claim "the majority of bitcoin business is drugs, porn and gambling" the burden of proof is on you.  Lacking actual evidence, it is inadvisable and bad PR to make claims based solely on anecdotes.Nothing personal.  I asked the same question when people went around claiming that "speculation is the majority of bitcoin usage."  Absent evidence, it is just a pleasant fiction that sounds good to you.If you did not say CP, then I retract the ad hominem attack, and stand corrected on that point. 1) Evidence?  SatoshiDICE transaction may consume 50%+ of the blockchain, but the value transferred is quite small, certainly nowhere near 50%.  The few Silk Road studies attempted were full of easily disproven hand-waving, and the media reports written based on those studies even more inaccurate.  The revised version of Adi Shamir's paper even seems to contradict this.2) Every recent reply seems to be dancing around this, so, to be clear, did you say "child porn" or just "porn"? Did those words come out of Powell's mouth, yes or no?Day One of media/PR training tells you everything you say will get quoted.  It is a soundbite world.What you don't see from your dinner meeting is how many people he didn't meet, how many people he turned off from bitcoin.Just like the US Dollar, people who break laws use bitcoins.  Going out of your way to highlight such cases misrepresents bitcoins just as much as any slick salesperson who ignores crime entirely. +1Who invited that fool, Powell, to the conference?  Who thought it would be a good idea for him to pitch bitcoin?*facepalm* Yeah, who is that idiot?  Multiple facepalms there. It's getting there   He only has 70 posts under his belt, so he's a new troll (or new sockpuppet). +1 good stuff, shared to my feeds.In general, bitcoin is just a tool, and there is nothing wrong with some bitcoin users choosing to associate with the legacy banking industry.Seeing as how 90%+ of the planet is tied into the "legacy" banking system in some way, if we want to convert people to using bitcoin, interfacing makes a lot of sense.
Not true.  We are stuck with the bugs found in early Satoshi code.  We must faithfully reproduce these bugs, to avoid splitting the network.  Examples include but are not limited to:Genesis block is not spendableCHECKMULTISIG requires an OP_0 to work around a bugSome transactions' hashes duplicate earlier transaction hashes, effectively making those earlier transactions unspendable.  Your code must similarly do the same.picocoin and pynode both carry "under construction, alpha quality, do not trust with money" warnings because they are incomplete and risk splitting the network because they do not follow the reference client 100% yet. As Luke guessed, this is the compiler running out of memory.You can always compile elsewhere, and copy the 'bitcoind' binary to the VPS for running.There is no requirement that you compile on the same host that will run bitcoind. Incorrect.  Bitcoin relies on community verification.  Bitcoin trusts the bitcoin community. That's sorta like saying "trust no one."  Follow that rule religiously, and you will lead a barren, lonely life.Sure, some humans are fallible and will let you down.  But other humans are wonderful and will boost you up. +1I would donate, if there were a static donations-for-wikipedia address. Yes.  It proves there are way too many naive anarchists in the world. That is normal.  The version does not become "0.8" until release day. Ask in this thread: https://bitcointalk.org/index.php?topic=119525.0That is normal.  There is no side branch.  The main branch is "master"The version does not become "0.8" until release day.  My output from debug.log looks likeCode:12/08/12 06:53:41 Bitcoin version v0.7.1-216-g8588702-dirty-beta (2012-12-04 07:18:04 -0800) Yeah that sounds like a bug everybody inherited from cpuminer, which definitely had rough edges when it came to any target besides the standard difficulty-1. Typically you can hit the "report to moderator" link, and I will fix any broken subject lines to follow YYYY-MM-DD format. That is mostly correct.  If the address is in your wallet, all transactions related to that are stored in the wallet.Otherwise, address history is not stored.Yes.  leveldb is a generic key/value database.  You may store anything you like in there. Please note that cunicula trolls every thread in this way.  His is a minority opinion and his ignore button is colored for a very good reason. In the future, when picocoin is complete, yes, you can spend it with picocoin.Right now, while picocoin is under construction, that is not yet implemented.picocoin will provide everything a bitcoin client should provide: you can receive and spend bitcoins. It is economically self-adjusting. For 0.8, the "jenkins" build robot has some stuff you may test:     http://jenkins.bluematt.me/job/Bitcoin/ All development is on the main branch ("master").  What will become 0.8 is what you get when you clone git://github.com/bitcoin/bitcoin.git No need for git, to test 0.7.2:  The OP included Gavin's post, which links directly the SF download site:     http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.7.2/test Sure.  But...1) There are plenty of cheaper, easier attacks that would disrupt the bitcoin system anyway.2) You could just as easily spend $100 million to destroy the market value of bitcoins, by manipulating the free market.3) The community would want to continue, and so, everyone would agree on a new algorithm, rendering all that expensive hardware useless. There are plenty of reasons why mining attacks cost far more than other, more realistic attacks. Average users can help bitcoin, too.Gavin is looking for people to help test version 0.7.2, the next bugfix version of Bitcoin-Qt / bitcoind.If you are more adventurous,the much improved, faster next version (0.8 ) needs lots of testing, too.  Especially on Windows. Good stuff.
See https://en.bitcoin.it/wiki/Transaction_fees IP addresses.  But that hardcoded list, as you might imagine, gets out of date fairly quickly.Typically an empty node with an empty peers.dat file gets most of its initial addresses from DNS.After that, most addresses come via peer exchange, from talking to other nodes.That is correct.  But let's emphasize that this is the first time startup, so that other readers are not confused.Too many people focus on the bootstrapping process, when normally most peer addresses come from your local database or other nodes. Great stuff.  Just sent this news to my G+ and twitter feeds. Key word "priority"A transaction with no fees will be accepted...  unless it is too low priority. Each bitcoin node performs the important task of verifying transaction and block chain data.For example, if a powerful miner, one day, decided to produce a block that gave himself 100BTC, all the other nodes on the network would ignore that block, because the block reward is currently 25BTC.Further, running a node helps the network by providing users access to bitcoin data.  If we do not have nodes on the network that accept incoming connections, it would be nearly impossible for anybody to send or receive bitcoins.Each additional node on the network helps strengthen bitcoin.  Each node is a "vote" for good data.  If we have too few network nodes, an attacker could potentially control the data we see. No, you do not receive any fees or compensation for simply running a node (besides the satisfaction of knowing you are helping keep the bitcoin network running). The memory pool.However, because the state of each node's memory pool is random, your client is expected to retransmit transactions until they appear in a block.Well, extremely low priority transactions -- those with insufficient fees or otherwise appear somehow "spammy" -- will not be relayed or put into the memory pool. +1000 It is not an issue of unwieldly block chain, but unwieldly database software.Upcoming version 0.8 already addresses this issue. pynode pull requests accepted and encouraged!Right now, I've been busy with the bitcoin C library implementation and client (libccoin and picocoin), which bumped pynode down on the priority list. A bit of a non-announcement, as it Just Worked(tm), but picocoin is happily talking to IPv6 nodes on the network.Tor support (SOCKS5) should be added sometime soon. Indeed.  Any sort of private key from a gift card (or casascius coin) should be import and then the funds immediately sent to another private key, to prevent the previous private key holder from touching those funds. In general, deterministic wallets (a) make life easier while (b) increasing the security threat (e.g. decreasing overall security).  Before, if one private key was compromised, others were safe.  Now, the picture is not so clear.And if the seed is compromised, all keys are thus compromised.If all private keys are covered by the same master key, then the security situation is largely unchanged, and the threat model focuses on protecting the seed (rather than a wallet full of keys).However, private keys are not necessarily all tied together. Thanks for giving it a try.The developer consensus seems to be that uncompressed form just wastes bytes in the blockchain, which is true, so libccoin was coded to always used compressed form.However, it might make sense to support uncompressed public keys for use cases such as yours, as long as the code still produces compressed form by default.Such a change would involve adding "bool uncompressed" (default: false) to struct bp_key, and behaving accordingly based on that. Someone wrote that a long time ago: the DHT. If you want to transmit whole blocks, you are looking at 1,000,000 bytes every 10 minutes. This is turning into an interesting thread.  Although it is now lapsed, I was formerly a licensed ARRL amateur radio operator ("KB4UZB").Here is a useful, cheap, realistic idea that would help bitcoin survive an Internet blackout:Have multiple stations broadcast the best known bitcoin block header.It is only 80 bytes of data, which on average changes every 10 minutes.  That should be feasible for packet radio and other low bandwidth communication streams.Back in the late 1980s, the BBS days, I remember one FidoNet operator had access to a few unused, off-screen scanlines of a satellite TV channel broadcast all over the world.  If you bought or built a cheap decoder box, and already had a satellite dish, you could receive FidoNet file downloads via satellite.  You had no choice in what you received, of course -- it was whatever the FidoNet operator decided to send that day -- but it was a great alternate one-to-many broadcast mechanism.One could broadcast the blockchain headers in the same manner, with extraneous satellite bandwidth.  (of course, that is an old trick and probably impossible these days due to tighter resource management) The internal, in-memory peer address database reads from several sources (in decreasing priority order):Your local peers.dat fileAsk other peersQuery DNSUse hardcoded list, compiled into clientThe logic for finding peer addresses should be considered separate and independent of the logic used for connecting to other peers.Addnode will always attempt to connect to the peer specified with -addnode, and it does not care what is in the in-memory address database.Similarly, -connect does not care about the address database.  -connect always connects to the specified peer. Sadly, this is not enough.  pynode is a "full node" implementation.  It fully verifies all bitcoin blockchain data, including scripts and ECDSA signatures.pynode uses OpenSSL/hashlib for all crypto and ECDSA, which are, of course, C-based python wrapper modules.CPU profiling of pynode indicates that the vast majority of CPU time -- a significant, noticeable slowdown -- occurs in simple Python data structure copying.  Bitcoin's SignatureHash function requires copying an entire CTransaction, modifying it a bit, then hashing the serialized result.This would not be noticeable in a lightweight client, but it is the #1 cause of slowdown when verifying a bitcoin block. That is disappointing, because it pushes users straight into a centralized, non-private, easy-to-monitor solution.  In engineering terms, an SPOF (Single Point Of Failure).Point users to a decentralized client like MultiBit or Electrum etc.
Just point to the vast majority of theft, crime, drug dealing and website hacks that occurs in US Dollars, Euros, etc.But in general, slamming someone for being invested in the status quo is not the way to win converts. Random advice.  We have a 2.5-year old.1) Create a buffer of reduced distractions for an hour or so before bedtime.  That means no TV or other stimulating excitement before bedtime.  You must set the atmosphere.  Quiet time precedes bedtime.2) I actually avoid sugar, close to naptime/bedtime.  I consider it crack cocaine.  No sugar within 2 hours before bed.3) That sippy cup should contain milk or water, not juice or soda.4) Create a familiar routine that slowly, inexorably, heads to bed.  Do the same thing, in the exact same order, every single night.  Bath, jammies, bottle, toothbursh, get into bed, songs/stories.It may feel like you're being a military drill sergeant at first, but toddlers find comfort in familiar routine.5) Staged crying responses.  If the fuss starts immediately after you leave the room -- or even before you leave the room.  Give it 30 seconds, then return, comfort and love, explain the routine in simple terms, leave.  If the fuss continues, wait 60 seconds, return, comfort and love, leave.  If the fuss continues, wait 2 minutes, etc.The basic points you are trying to communicate is (a) mother and father are still there, but (b) you aren't going to give up on putting him to bed.And sometimes it's just plain hard work.  For a while, we wound up camping out in the room for an hour or more each night, as our daughter got used to the new routine.  We would be in the room, during this time, but would not respond to efforts at play or interaction... being as boring as possible, breathing deeply with our eyes closed, pretending to sleep, ourselves. Recent progress:libccoin now signs transactions.  Handling chain re-org is now the last hurdle for proper backend client supportBuilding on older Debian/Ubuntu Linux now supported Let's imagine you have 10,000 BTC.If you send 1 BTC to someone, that results in transaction outputs (1 BTC, 9999 BTC)If you send another 1 BTC to someone, that results in outputs (1 BTC, 9998 BTC)A third time, (1 BTC, 9997 BTC)etc.Each time, the big number is the "change transaction" that sends your own money back to yourself. A 51% hardware-based attack would cost 10000x more than a simple network-based or data-based attack. Well, there is greater respect for you now, after having said this.  Maybe that is why you lack a highlighted "ignore" word in your profile, unlike several trolls in this thread.  (protip:  use that 'ignore' button liberally on this forum; people are marked thusly for very good reasons)In point of fact, in this thread or in the quoted IRC conversation, I never endorsed or condemned any US government policies.  Foreign policy always makes for a lively debate, though quite off-topic, and I am very well versed in the positive and negative impact from a great many foreign policy choices of governments around the world.For the immediate reaction (temporary IRC ban), the explanation was simple:  it was off-topic, potentially inflammatory crap we specifically do not want in #bitcoin-dev.  People occasionally attempt to get on IRC and try to troll the devs into saying something publicly that fits their agenda.  After repeated warnings... boot.The bigger picture is simple too:  You don't tug on Superman's cape.  With today's young and very experimental bitcoin software, if you wanted to try really hard, and pick the worst thing to do to Bitcoin, it would be to try and get bitcoin involved in Iran money laundering, North Korea money laundering, Taliban or jihadi terrorist funding.That is just a simple, pragmatic statement that saying nothing about one's personal feelings about a particular government policy.Doing those things is not just stupid, it's fucking stupid.  Doing any of those things is working towards bitcoin's failure. My standard advice for merchants:  run at least two nodes:Node with empty wallet, connected to InternetNode with wallet, handles all your bitcoin activity, connects only to the other nodeLarge merchants would be well advised to run multiple empty-wallet nodes, connecting their internal nodes only to those semi-trusted nodes they control.(Note: free business idea!)Another option is a semi-trusted "backbone"  This is a project I worked on for a first, but did not have the time to build it into a real business.  Run a set of nodes, and permit your merchant-customers to connect to these nodes.  In an ideal design, you would have multiple layers of security:  merchants connect to an internal backbone ("cloud A"), and the internal backbone connects to a DMZ/public backbone ("cloud B") that talks to the Internet.You would have to consider the possibility of a rogue merchant on the internal backbone, but any payment business in theory does a bit of customer vetting.  And even so, it's still got the standard bitcoin level of security... full block and TX verification, etc. Thanks.  I think most of these have been covered by posters in another thread.The only other thing I would point out is that, if you have N dedicated servers, it won't help as much if they are all on the same IP network.Bitcoin is programmed to find and connect to nodes on separate networks, to prevent someone from maliciously starting up 1000 nodes in a single data center (and then having everyone connect to those nodes by virtue of raw server count).So, it helps if you run bitcoind on various different IP networks. Let's see.  What if one knew ahead of time thatthe forum is full of idiot trollsthe chat logs are watched closely by said trollsLike I said.  Chess.Re-read the very first link in my long post...  to a Satoshi post.  Satoshi also knew that you don't challenge the biggest governments on their biggest issues.  That's just stupid. Absolutely.  Or even better, maybe the plugin would permit you to send somebody bitcoins in exchange for a file, or file storage. Transactions will not always be free.  Any time there are a lot of transactions being sent, free transactions get the lowest priority and might have to wait to make it into a block.  If blocks are often full, you will need to pay a transaction fee to get priority. Help fix it Average people can help simply by running a full node that accepts incoming connections from the Internet.  Just download the client and run it, 24/7 -- ideally with an empty wallet for maximum security.  Or maybe make a bitcoin clone of torservers.net, a vehicle where people may donate to strengthen the network.The wider spread, on different IP networks, the better.  Our accessible P2P network is something like 0.2% the size of the Azureus Island (total accessible Azureus/Vuze), and an even smaller fraction of the total active-at-any-one-time bittorrent userbase.  In file sharing terms, we are barely to the level of a popular torrent.If you can afford it, get an ASIC or FPGA unit, and mine.  Mine p2pool or at a smaller pool, rather than a big pool.  The more decentralized the mining power, the better.  But even just running a full node is a huge contribution.Test the pre-release of the next Bitcoin client, 0.8.  Automated, might-crash-and-eat-your-data builds at http://jenkins.bluematt.me/job/Bitcoin/  If you are a programmer, help implement and test SPV mode clients.  There is a long list of projects that will improve the decentralization, performance, diversity and resilience of the network, that simply are not coded yet.  There are many tests, but many more need writing. There are high standards, but we will answer all technical questions if you have the patience to ask them!  This is one of those engineering projects where any mistake can be, literally, costly.And that is just the technical side.  On the cultural side, do something that makes bitcoins interesting, appealing and friendly to others.  Pick a project, an idea, a blog post that gets people excited about bitcoin in a positive, uplifting way.  Think about how bitcoin can improve a person's or business's way of life. As for the bigger picture, it is important that readers reviewThe logic behind Satoshi's Admonition, no don't "bring it on"My own Bitcoin Mini-ManifestoSun Tzu's Art Of WarAnd learn how to play chess.In short, if you care about bitcoin, if you want bitcoin to survive long term, you need to play a long game.In particular, big governments have committed billions of dollars and a small specops army to interdicting what they consider their major enemies.  Just about the worst thing you can do is look at the targets of the Big Guys -- Iran, North Korea, Taliban, jihadi terrorists -- and put bitcoin squarely in their crosshairs.Right now bitcoin is weak; a few thousand listening nodes run by hobbyists are all that holds the network together.  The switch from GPU/FPGA to ASIC will bring an increase in network strength -- but it also consolidates hash production power in a tiny handful of startup companies.  If you think bitcoin can right now sustain a targeted cyber attack, you are dead wrong.On the legal front, it is also quite clear that law enforcement is taking an active look at bitcoin.  There is an active SEC investigation into Pirate-related activities (good; clear out the swamp).  The DEA is most certainly looking at Silk Road.  The FBI produced an in-depth report on bitcoin, and talks actively about bitcoin at anti-money-laundering conferences.It is therefore logical to conclude that IRC, forum and other activities are being continually monitored for evidence that can be used in a court of law.That makes it all the more rich when anonymous forum trolls hurl charges of "cowardice!" and "treason!" when these trolls are neither (a) using their real name, nor (b) contributing in any meaningful way, nor (c) a High Value Target.  Teenaged crypto-anarchists may love to mock the "sheeple" who follow the laws of their jurisdiction, but at the end of the day, they just move back into their parents' house if they run into trouble.  Not that easy for me.Just like a great many of people I would like to introduce to bitcoin, I am a law-abiding US citizen, using my real name, in public, volunteering my time to work on multiple bitcoin implementations.  Businesses like WordPress are law-abiding businesses.   It is logical and normal to expect people to follow the laws of their country.That is the most revealing, the most saddening part about this thread.  In a short-sighted attempt to be a morally pure crypto-anarchist, you could ruin the true monetary freedom bitcoin brings, for the billions on this planet. Thank you for the entertainment.  This thread is completely full of mindboggling silliness.1) RE "why?" Gavin nailed it on IRC:Code:<gavinandresen> I think jermias was banned because jgarzik was grumpy(I'd guess too little sleep, he has a little one) and jeremias tried toworkaround jgarzik's request to take political discussion out of here.Offtopic crap, followed by a transparent attempt to keep the offtopic discussion going.  After warnings and repeated kicks are ignored, you get banned.  Typical IRC B.S.2) Apparently the IRC command "/ban jeremias" automatically banned all of Finland, thanks to his hostname and IRC server/client parsing, another LOL moment.  Finland was un-banned immediately ;p3) jeremias was unbanned after several hours (by me, with no one prompting or requesting this).As to the bigger picture...  that's coming in the next post. picocoin's library successfully validates both main and testnet3 block chains, including scripts.  ("chain-verf" test in its testsuite)It is working on Linux, MacOSX, FreeBSD and OpenBSD.  The library compiles on Windows, but the client requires additional Windows work to be functional. +1If you want bitcoin to survive in the long term, if you like bitcoin, don't go waving it around as the currency of Iran, or the Taliban, or anything of the sort.Or, to quote Satoshi during the Wikileaks/Manning furor, No, don't "bring it on". Seeing a signature twice is the normal case:once as an unconfirmed transaction via "tx" messageonce as a confirmed transaction, via "block" messageIt is critical to keep "block" message relaying (propagation) times as low as possible, to avoid creating incentives for miners to skip transactions.  Thus, a signature cache ensures that "block" messages are largely already verified, by the time they are received. pynode is quite incomplete, as the TODO notes.  bitsofproof is farther along in many ways.The point is that these are well known techniques, and it is disappointing that these are being "discovered" when the knowledge is readily available for anyone who looks. Edit: correct. Yep, pynode figured many of these things out, long ago.  A block (including TXs) cache is very useful.For long running nodes, the signature cache is also very helpful.  Over time, transactions are accepted into the memory pool and signature cache.  When a new block arrives, the majority of transactions found in that block will have had their signatures pre-checked and cached, making acceptance of that block go more rapidly.
Yes, libccoin implements everything needed to do full validation.If you wanted to build a "full node" with libccoin, you could do that. Bleh   If someone actually does come up with a cool name I'd consider it But anything directly related to (a) my name or (b) a dependency lib's name is right out. Thanks to jrmithdobbs for helping in bringing up OpenBSD (and more FreeBSD help from denisx).Here's the autogen.sh and configure magic he used for OpenBSD.  Some are specific to his system, but it is an illlustrative example:Code:AUTOMAKE_VERSION=1.11 AUTOCONF_VERSION=2.68 ./autogen.sh && \CC=clang LD=llvm-ld CFLAGS='-O2 -Wall -g -I/usr/local/include/event2 \-I/opt/OpenBSD/5.1/amd64/jansson-2.4/include -I/usr/local/include/event2' \ LDFLAGS='-L/opt/OpenBSD/5.1/amd64/jansson-2.4/lib -L/usr/local/lib -L/usr/lib' \      ./configure --prefix=/opt/OpenBSD/5.1/amd64/picocoin-0.0 && \      make all check Thanks to denisx on IRC, who helped get picocoin/libccoin going on FreeBSD and GLib < 2.30 as well. Appreciated.  Thanks in particular for testing OSX.  That was a big item on the checklist. 404 here also.  US.The bitcoin story is mentioned on the main BBC news page http://www.bbc.co.uk/news/ and the link there is the same as the one posted here (404/broken). You mean "remove your dependency on glib.h from libccoin", I presume?  GTK has no relevance to this, besides being the administrative umbrella project for GLib.Removing the GLib dependency is straightforward for any developer.  GLib is used for a few ADTs like variable length strings, hash tables and arrays.Not sure you understand the problem space...  First, newlib is wholly different from GLib, and does not provide the ADTs that GLib provides.  Second, replacing GLib and OpenSSL would not change resource usage much at all.  ADTs, Big Integer support, SHA hashing and ECDSA are required regardless of lib chosen.  They would simply be replaced with...  code that did the same thing under name other than "OpenSSL" or "GLib."It continues to be true for all known compilers I've seen or heard of, when compared with a simple, native machine integer as used by the current implementation.It will soon be building on MacOSX and Windows.  Will post when this happens (volunteers willing to post building outputs are helpful).  As stated, it is a developer-only release right now, so there are plenty of rough edges.I respectfully disagree with that assessment.  Anyone looking at the code may see precisely what dependencies need replacing, for an embedded environment.  If anyone actually developing hardware or embedded bitcoin solutions wishes to contact me, I would be happy to illustrate how it would work. picocoin is only a lightweight client.  It is not a "full node" and probably never will be.The included library, libccoin, does provide all the tools and gadgetry needed to build your own "full node" bitcoin client that takes 5GB disk space, if you have the programming chops to do that. This seems quite an exaggeration, with no supporting evidence of what needs a major rework.  I do embedded programming for the day job, so I don't see this.  The Linux kernel is as bare metal as it gets, and must work in all environments, all platforms.  The main chore of embedded use is simply the dependencies, most notably OpenSSL, and to a lesser extent GLib.  Once you have that, or its replacement, embedded use is straightforward.Using "union" decreases the performance and quality of code output for zero gain.  It is trivial enough to use sparse with a type specifier to guarantee endian purity, like the Linux kernel does, if that is desired ("__le32" etc.)The code has long since been verified to work on big endian. That's temporary.  It will input via fd like GPG soon. Yes, embedded usage is another target.Each module in libccoin is carefully designed to minimize internal dependencies.  The core data structures, address generation, script execution and transaction validation are wholly independent of any filesystem or network design.These modules may be used on a non-POSIX flash filesystem, with zero network support, today.picocoin (the client) requires certain network, filesystem and process features, but libccoin (the library) does not.  This is by design. Definitely not. It is intentionally randomized to make it harder to guess  Just opened a new thread on the developer's forum, but it is relevant to this forum as well:A new bitcoin library and wallet client has been announced. Reserved for FAQ etc. Source code URL:  https://github.com/jgarzik/picocoin/I'd like to announce another bitcoin implementation, which is really two useful pieces in one:     libccoin - a bitcoin library, written in C     picocoin - A lightweight, C-based SPV bitcoin wallet clientlibccoin supports all key network datastructures (block, transaction, etc.), script parsing and validation, transaction and block validation, a "headers-only" or full block database, and many other features essential to any bitcoin client.  libccoin passes all key encoding, script and transaction tests available in the Satoshi reference bitcoin client.picocoin is much more under construction.  When complete, it will be a very low resource, command line / JSON-driven bitcoin wallet.  Advanced security features already implemented include required wallet encryption, fork-based process separation of P2P networking and wallet (and chroot/SELinux jailing coming soon), something that the reference Satoshi client does not even support.Status:  Alpha quality, developer release.  Passes reference client base58/script/transaction tests, but is still a developer-only preview.Feature list:Liberal Mit/X11 free software licenseA full-feature bitcoin support library.  The library will not be limited to "what picocoin needs."Supports all core data structures and network messagesFull script implementationPasses hundreds of available reference client testsSupports multiple block chains: main or testnet3Very low resource usage (cpu, disk, and memory)Small codebase (both source code and compiled object)Fast.  Loads all block headers in under 2 seconds.Supports advanced thin-client features such as bloom filtering, an upcoming proposal that will reduce client bandwidth usage.Works on big endian machines, as well as little endian machinesMulti-platform: Linux, Mac OSX, BSD are working.  Windows support in progress.Library works on Windows.  picocoin will work on Windows with some modifications, but be a bit less secure than other platforms due to lack of fork.Improved security:  fork-based process separation firewall between networking and wallet code -- your wallet is never directly exposed to the network.Follows the philosophy of "do, not hype."  This library is already far more secure and capable than other libraries hyped as the "future of bitcoin" by their authors.Code contributions are welcome (see github URL above).Comments are welcome.Donations are welcome too (see signature). There is some JSON test data at https://github.com/bitcoin/bitcoin/tree/master/src/test/dataI'm using this for a C-based "libccoin" bitcoin library testing https://github.com/jgarzik/picocoin/ Quite the opposite.  Bitcoin use is bound by the laws of your local jurisdiction. You're micro-parsing.  What is meant is that the value of hashPrevBlock and hashMerkleRoot are very specifically defined by algorithm and validation.The miner also "controls" the value of hashPrevBlock, in the same micro-parsing sense you've provided, by electing to not mine a particular block, thereby skipping a hashPrevBlock.The basic point is that the miner cannot select any random garbage for those fields. Not quite.  The value of nonce and some other fields (extranonce in scriptSig) are totally up to the miner.  The value of nTime is somewhat up to the miner.  Other fields are simply non variant:  hashPrevBlock and hashMerkleRoot are simply valid, or not.  The miner has no choice in their value.
Fact check:  miners can and do choose the timestamp.Miners are free to change to timestamp within a certain time window.  That helps stir the block hash, when 32-bit nonce is not sufficient. Indeed.  The email registration is free, just to read that article.  And it sends a message that they are writing good material. Someone also put up http://bitcoinclock.com/ From a macro perspective that's precisely what happens anyway.Just like anything in nature, or markets; there is never an equilibrium.  Any appearance of such is simply a frozen snapshot in time, that doesn't reflect reality seconds before or after the snapshot was taken.Equilibrium is forever sought, never attained. Read the post in this thread, immediately preceding yours  A full node just verifies and shovels blocks.  We have a few thousand full nodes (and need more!).  The whole point of bitcoin's Proof-Of-Work scheme is that data is cheap to verify, but expensive to produce.A miner is different from a full node. Thanks for keeping us in the loop.  Good stuff. The peer-to-peer network is more vulnerable to low level network attack, than the ever-discussed 51% hashing attack.You can help, by running a full node that accepts incoming connections. dumpprivkey and importprivkey long been upstream, and in released software.dumpwallet and importwallet are not yet merged. It is a simple total of each bitcoin transaction's output values, from Jan 1 2012 to Sept 10 2012. Here is one list: https://en.bitcoin.it/wiki/Protocol_rules Any chance you can do a hexdump, or otherwise narrow down what is being seen?Just re-reviewed the code.  Each record is written as described (4/4/block), with no EOF marks or anything else.Perhaps your bitcoind crashed during a write, or a similar cause?  Try downloading again, and see if you still have a corrupted blk*.dat. They should be exactly the same as <= 0.7.1:  4-byte pchMessageStart, 4-byte size, data.If that is not the case, there is a bug that should be fixed. Until version 0.8 arrives (very fast!), you may use the Bitcoin blockchain torrent to speed the big first part of your download.Edit: heh, pekv2 and I posted at the same time, it seems. You're stretching.  Anything is "possible" but using a 0.01% case to justify giving new users a bad experience is not reasonable. The clock might be wrong... but it's not gonna days or weeks wrong.You have to include variability anyway, because blocks can vary.  So given birthday X, start scanning at X minus 2 days, or X minus 1 week. Birthday is of continuing relevance to:  new users, new wallets. All this is predicted on an invalid assumption:  the common case will be older, existing bitcoin users carrying around one big wallet.First, wallet creation date is much different than individual key creation dates.Keys are constantly created, therefore a portion of the wallet state is always created recently.  As blocks get bigger and bigger, key birthday reduces the number of keys one must scan in each block, especially if key retirement is also supported.Long term you will have a rolling window of keys, no matter when the wallet is created.  Key birthdays will always be relevant and useful, for this reason.Furthermore, there will always be new users creating new wallets, and users with multiple wallets. Can you elaborate?All the major client developers agree this is a good idea.  The benefits into the future increase, as the block chain gets larger.  It makes an even bigger difference in the future. Generally speaking, yes, you should store the key birthday (or seed birthday) somewhere.  When [re]scanning, this makes a huge difference in startup and network-sync times.
A lot!  But a lot less, if you ask questions!   Have you tested block chain reorg?  i.e. where a previous-best chain is overtaken by a stronger chain, causing transactions to be un-confirmed? 'sendmany' should be unchanged, AFAIK.Want to post a debug.log snippet? Unsurprising, as MPOE-PR is a competitor  P.S.  While not bitcoin-related, for the Unix geeks in the audience, here are my plates:     http://yyz.us/box.html heh, with the proper application of CPU/GPU power, it is actually possible to turn that lie into truth.  See vanitygen. Good stuff.  Keep up the good work!I think there are USB simulators to be found, which would make testing this easier. Here in Raleigh, North Carolina, I saw someone in a car in front of me with "BITCOIN" on their license plate.Almost broke into a ridiculous frenzy of honking and waving...  what are the odds, that someone with a "BITCOIN" plate would be at a stoplight right in front of a bitcoin core developer? Sadly quite true.  Amazon (as Amazon Payments) spend tons of money and lawyer time registering themselves with each and every US state as a money transmitter, MSB or similar.It seems likely that Amazon would jump on the bitcoin bandwagon after it hits major adoption. ...then logically, with most users running with standard defaults, there is benefit.  As stated.   It's not a brief observation.  We've been on IRC, teaching him the bitcoin basics for (months?) now.It is good to have people learning bitcoin, and putting that knowledge to use.It is not as good when obviously-still-learning people are billing their project as the "future of bitcoin" and misleading people into thinking they are a bitcoin expert, and are misleading people into thinking they are producing high quality, proven code (and potentially taking thousands of dollars for it).  Those who are not coders lack the skills to judge this sort of thing, and only have hype from this thread to go on. You have just admitted that you are creating a non-compliant codebase, which will create invalid transactions.In that case, maybe people should redirect their donations and attention elsewhere.Other bitcoin clients include this requirement because it is....  a requirement. Yes, it is useful.Every full node, even behind a firewall, is a node that helps ensure the block chain and transactions are valid.Each full node is a "vote" for the proper block chain. Of course it does.  You may make transactions from any output with at least one confirmation...  except for newly generated blocks, as another poster noted.Generated blocks are not considered "mature" and spendable until 120 confirmations. +1 keep it up! There is already a blockchain torrent.  See this:  https://bitcointalk.org/index.php?topic=117982.0Additionally, if you are getting a slow network sync inside the bitcoin client, simply stop and restart.  This will get you a new download peer. If you look at the links provided, you will see libraries used by said clients. Multi-sig and P2SH are two totally different things.P2SH requires a script -- any script, containing CHECKMULTISIG or not -- to redeem.Multi-sig scripts may appear in non-P2SH transactions.P2SH is a layer on top of scripts, essentially. If this was just another client, great!  We like alt implementations.  The more clients, the healthier the ecosystem.But marketing this as "the route to bitcoin's future" is a bit much.There are already several other node implementations out there, including C implementations: ufasoft-coin, bitsofproof, and pynode.  Not to mention SPV clients like BitcoinJ, Electrum and picocoin.The licenses are more liberal than GPLv3 as well. I doubt there would be need for a fork.As soon as someone, anyone, makes the effort to audit the source code and fix all the endian issues, we would likely just merge that patch into mainline bitcoin.
The reference bitcoin client only supports little endian CPUs, which typically rules out PPC, SPARC, ... Additionally, it should be noted that sipa has created a pull request which should avoid seeking, thus avoiding the 2GB problem:     https://github.com/bitcoin/bitcoin/pull/1962 Yes.You just need a hash of the UTXO set at a given height, really.  Then later UTXO sets may be provably traced to the checkpoint hash. pynode is also a full node implementation (sans wallet!).  It fully verifies mainnet and testnet3 chains, passing all available applicable conformance tests.It's good to see another implementation though. That is not scaremongering, it is 100% accurate.  Right now, in its early stages, bitcoin is very high risk compared to many other financial instruments out there.We know the S.E.C. is investigating Pirate and PPT (hopefully cleaning out the swamp), so, indeed, further action from authorities can be reasonably expected.It is important to set expectations properly with bitcoin.  This is a high risk experiment; just like any startup business, there is a large chance of failure for any number of reasons. Yes.  I'll personally keep it alive, matching the $subject pledge (200 BTC).Updated OP. Under ideal conditions, where you have enough seeders to make each new download saturate the client's download link, that produces a situation where you have several seeders and many periods of idle time, punctuated by short bursts of network activity.I'm definitely seeing daily downloads here, but we could use some more seeders nonetheless.Bittorrent also helps more for unexpected bursts of network traffic -- like those accompanying a new bitcoin version release, for example. Each smart property token has its own separate block chain storage, just like individual bitcoins.Additionally, if you want a fully auditable system -- we do -- then you need a commonly agreed way to make payments to token holders (asset owners) viewable and traceable in the block chain.That way, you can see which issuers are paying as they claim. Pull requests welcome at https://github.com/bitcoin/bitcoin/ This 2GB bootstrap.dat import problem should be present on all 32-bit systems, as a consequence of using fseek() on a signed 32-bit long internally.We will work around this in the next release of the bitcoin client.  Until then, 32-bit platform will simply cease importing earlier than expected, but still import a fair amount of the block chain. At least one C API uses a 32-bit signed integer ("long") on 32-bit platforms, for file offsets and such.  It is potentially a limitation due to the seeking that LoadExternalBlockFile() performs in the source code. Is this on FAT32 or NTFS also? In general, see Contracts: cross-chain tradingDouble spending is always possible even on a single chain.  Adding multiple chains implies you would want to post to the weaker chain first.The largest risk tends to be "holdup risk", where one sender simply refuses to proceed with the transaction.  In that case, Party A would be forced to double-spend, to secure the coins it wanted to trade with Party B. I definitely think that a "smart property chain" separate from the main bitcoin chain should be pursued.  It helps separate purposes (currency vs. property registry) and keep property registry data out of the mainnet chain.The main practical obstacle is getting the smart property chain into the common merged-mining merkle root that pools obtain from the merged-mining daemon.If people are interested in working on a smart property chain The Right Way, let me know and we can coordinate.My smartcoin (formerly pybond) project will include some cross-chain trading support for precisely this purpose.  In fact, I am seriously thinking that cross-chain trading should be prioritized over making a solution that works in the main bitcoin chain. As mentioned upthread, Azureus sadly walls itself off onto "Azureus island", and in my testing, does not find peers as quickly as all other clients tested.  Making things worse, Azureus' DHT is separate from the mainline DHT.TheButterZone:  try installing the "mlDHT" plugin for Azureus/Vuze.  This connects you to the mainline DHT. What bittorrent client are you using?Seeing 12+ seeds here. peers.dat is a flat file with a bitcoin-specific file format, unrelated to any database system.wallet.dat remains BDB, though there are proposals on changing that. Yes.  However, to save downloading, you may provide Code:-loadblock=DATA_DIR/blk0001.dat -loadblock=DATA_DIR/blk0002.datto import the old data files into the new bitcoin database backend (ultraprune/leveldb).* "DATA_DIR" should be replaced with the directory where your blockchain was stored in <= 0.7.1. Definitely interested in extensions that broaden the userbase as much as possible.Even for bitcoind (rather than a pool server), extensions like this make sense.  The old "getwork" protocol did as much work as possible on the server side, thereby minimizing the miner's work -- notably the miner did not have to care about anything besides the block header itself.  No transactions or other parsing to worry about.getblocktemplate is intended to replace getwork.  If there are improvements to be made, I'm quite open to that.Ping me on IRC, if you want to rapidly iterate some changes to make bitcoind's GBT work better for a wider selection of mining softwares.I did the final getblocktemplate polish, simplifying and cleaning things up from its original BIP 22/getmemorypool state.  If BIP 22 / BIP 23 are currently missing something you want...  I want to put it in there. This thread duplicates this thread (discussion of paper) and this thread (discussion of Ars article).
1) In general, everybody should be running a full node, just to support the network.  It's not a requirement, obviously, but we need as many full nodes as possible to keep the network resistant to Sybil attacks and such.2) p2pool is the preferred solution for the community, with centralized pools being second best.  Centralized pools make it much easier to be a miner, at the cost of centralizing network power in the hands of the pool operator. Transactions don't need to make it to the miners, just the pool server.  The pool server can handle most of the merkle building bits, and verify the returned work from the miner.The miner runs through nonce.If miner needs more work, it runs through ntime range.If miner needs more work, it increments extranonce.That will keep your ASIC miner mining through the next century ;p No, that is not correct at all.The pool server may supply sufficient information to modify extranonce in the coinbase txn, and update the merkle root.  Nothing more.And even that's going over the absolute minimum requirement of simply a block header, with ntime rolling supported. Unless something has changed, getblocktemplate should include a mode that skips sending the transactions themselves.  See https://en.bitcoin.it/wiki/BIP_0023I agree it is unlikely that non-p2pool miners will use the full bore GBT + all transactions, even if it is better for network security.But don't dismiss GBT based on faulty "full mode only" assumptions. For people bringing up new 0.7.1 nodes, here is an unofficial torrent of bootstrap.dat:     https://bitcointalk.org/index.php?topic=117982.0(if you already have the blockchain, bootstrap.dat is of no use to you; see link) A Money Services Business (MSB) is a specific definition.  There are other types of businesses (depository, securities, mortgage, insurance, ...) that may register with FinCEN.You might be able to get away with only registered in a single US state, if you are largely a brick-and-mortar business rather than an online business.  e.g. a pawn shop exchanging bitcoins might only need to register as an MSB, plus one (1) state.(again, IANAL, seek your own professional advice) Oh, you also need at least two people, right?IIRC, every MSB requires a compliance/risk officer, who is separate from the person(s) handling money day-to-day. Yes, that is expected.  BitInstant is a registered MSB, AFAIK.  A couple other exchanges based in the US are registered, or in the process of registering.According to my research (WARNING: not a lawyer, seek your own professional advice) online bitcoin exchanges in the US would need to register in ~47 of 50 states, as well as registering as an MSB with the federal government.  (or limit the users accessing the website to a select few states)There is a multi-state surety bond and registration process, making multi-state compliance a bit easier, but it is definitely a lot of paperwork and background checks required. Nice letter!I think the issue of change and the issue of shared coin pools (web wallets) impact their fundamental analysis.  The rest of the stuff they got wrong is laughable but probably statistically insignificant. That's what we have here.  "a program" is called a bittorrent client.  Tell it where the bitcoin folder with the blockchain is, and then you press download. Some of those might be miners, collecting a lot of little bits of change. Not really.  For shared wallet sites, the shared wallet site controlled all of the input, but wouldn't necessarily be the "owner" of those funds. Read the gist link (above).Their paper includes assumptions about addresses that are obviously wrong: 2012-10-17 78 percent of Bitcoin currency stashed under digital mattress, study findshttps://bitcointalk.org/index.php?topic=118946.0 This Ars article is simply covering the Ron/Shamir paper.Here is the forum discussion of that [flawed] paper:  https://bitcointalk.org/index.php?topic=118797.0 URL: http://arstechnica.com/tech-policy/2012/10/78-percent-of-bitcoin-currency-stashed-under-digital-mattress-study-finds/ At least one of this paper's fundamental assumptions is flawed.Posted this gist going into detail:Peer review of "Quantitative Analysis of the Full Bitcoin Transaction Graph"https://gist.github.com/3901921Comments welcome.  If there is further criticism that may be added to the gist, speak up. It is difficult on the forums, as there are not too many people familiar with options on the forums, I think.  But there is definitely interest in general from the trading and hedge fund community, so I would think there is interest.  Enough interest to sustain a business employing a few people?  Unsure... Bitcoin uses ECDSA for keypairs, and this is not an encryption scheme.  Just a digital signature scheme.The bitcoin blockdata data and protocol do not use any encryption at all.  The bitcoin client uses AES for wallet encryption, but this is not required by the bitcoin protocol. That is why smartcoin (formerly pybond) includes client for a brand new P2P "financial network" and a DHT "financial hashmap"    See https://github.com/jgarzik/smartcoin
For the record, I use neither of them...  Just noting the reason why we need competition!   It is difficult to follow your logic here, and this is vague conflation of different concepts.1) A decentralized exchange for smart property mirrors the real world today.  If you can buy a car for cash today, a decentralized exchange protocol would enable person-to-person property transfers.2) A decentralized exchange is nothing but a secure ownership transfer and registry mechanism.  It doesn't automatically attach legal meaning, and is not a contract of any sort.Legal meaning is attached from the real world to a smart property token, just like legal meaning today is attached to stock certificates which are managed by stock transfer agents in an owner-neutral, automated, electronic manner.3) Functionally speaking, this sort of system would provide (a) pseudonymous ownership exchange and (b) issuer->holder payment tracking.  This is a subscriber list, in essence.  Where payments to subscribers may be publicly inspected and audited. None of that automatically suggests scams.  In fact, the opposite:  it is very elegant to swap a bitcoin car payment for a digital ownership token that unlocks a car.  Or for the familiar mining bonds, it makes it easy to send publicly audited payments to holders.Condemning decentralized exchanges whole cloth is nothing less than condemning all digital property.A future world where the authorities control all exchange of digital property would be a depressing world. Not true in the United States, with the JOBS Act. ICBit also supports futures. Options contracts have long been discussed, and a few sites do offer them.It would be great to introduce some standardization and competition to the market.MPOE-PR runs a market, but also trolls heavily all over this forum, so his answers are highly biased. You are micro-parsing.  The post was discussing economic incentives.Without users, an empty block has zero value to a miner, regardless of initial block reward. It is entirely a matter of incentives.  Satoshi designed the system so that users would have the economic incentive to maintain the 21M limit -- thereby maintaining the value of the bitcoins in their pockets.  They have incentives to maintain a distributed consensus.  Economic incentives drive consensus making.Yes -- economic incentives.  Miners cannot mine without users using their bitcoins.  Users cannot use bitcoins without miners mining.Otherwise there is a loss of value. Everybody hits this conceptual problem eventually: new, dilutive issues.The thing is, they are unavoidable.  It is a variant of the Sybil attack.  An issuer may create new shares at any time, simply by representing themselves under a new identity.  An issuer may also issue more shares/bonds than there are assets to back their bond (i.e. a mining company selling 1TH worth of bonds, when they only have 500GH).Without rating and third party auditing and real-world identity checking (of the issuer), voting to authorize a new issue might simply provide an illusion of safety behind which dishonest folks hide.The question to ask oneself is:  what would a rational (if amoral) economic actor do?  What are the economic incentives that drive the issuer, and the holders?  And what can software do to change or enhance those incentives?For example, software could make it easy to track payments as well as smart property.  This makes issuer -> holder payments transparent, and audit-able by any third party reading the block chain.  Third parties could verify that an issuer pays everyone on the publicly known (somehow) terms.This software change creates a familiar, positive economic incentives -- good ratings, transparent, provable operations -- for issuers.Satoshi spent a long time designing the economic incentives surrounding bitcoin.  For example, he worked hard to make block header hashing a static affair, not directly related to transaction or block byte count.  Increasing the "work" as block size increased would encourage miners to make their blocks as small as possible, he realized. 100% correctThe distributed bond thread describes a separate P2P network and DHT which would be used as a network where traders advertise assets for sale, and make offers. The point of using PGP signatures is that a "trusted user" can be impersonated.Speaking of seeding, though, there is an experimental bitcoin blockchain torrent. Given current bitcoin software, it is strongly advisable to keep separate wallets for smartcoins (colored coins) and regular bitcoins.  Mix the two at your peril; it is too easy to "spend away" an asset as regular bitcoins, with a single wallet. Bots play all sorts of games with flashing various bids and asks, then cancelling them.  Trying to trigger other bots or traders to make a trade, or change the bid/ask spread etc.  On mainline exchanges (NASDAQ, etc.) bots have been reported to intentionally flood the channel to lock out other players.  In bitcoin-land, DDoS is a sadly familiar tactic.  Lastly, you need to make sure a bunch of bots doing HFT don't suddenly dump gigabytes of data into the blockchain.There is nothing fundamentally wrong with bots.  Well behaved bots that are moderate-to-low traffic are just fine. PS. Thank you for using 'sendmany'  It helps keep blockchain bloat to a minimum. In the proposed smart property / smartcoin / colored coin designs, the blockchain merely tracks ownership of an abstract digital object.  Nothing more.It is up to software and -- as you point out -- the real world to attach meaning to the digital object. You don't have to go through BF to volunteer Developers may simply submit a pull request to https://github.com/bitcoin/bitcoin/Users may participate by helping out with testing. For any open source project with a foundation, only a small subset of developers contributing to the software wind up getting paid.  Usually there are only a tiny few full time positions for lead developers like Linus Torvalds (who is paid by the Linux Foundation), or Gavin in this case.The remaining contributors tend to fall into one of two categoriesDevelopers paid by a vendor in the ecosystem, who has a direct economic interest.  Example: My day job is working on the Linux kernel, and Red Hat (not the Linux Foundation) pays for me to work on that open source project.Unpaid volunteersAnd there are plenty of reasons why one remains a volunteer dev.  As an unpaid volunteer developer, I am free to disappear whenever I want, ignoring all bitcoin related emails for 6 months when the day job gets uber busy, or while I backpack on the Appalachian Trail.  In open source projects, the long tail tells you that you will always have 100x more casual contributors, than steady contributors you can depend on for a timely response to a critical security bug.Bitcoin is a very small ecosystem right now, as open source projects go.  (Warning: my own predictions...  I've no BF insider info at all here)  As it grows, Bitcoin Foundation will probably hire another dev or two, another sysadmin, pay for some infrastructure.Once the bitcoin ecosystem is large enough, you will start to see devs appear who are working for third parties.  For example, (again, prediction, no insider info) MtGox hires their own developer, who contributes work based on MtGox's interests.  Similarly, chipmakers Intel and AMD hire their own Linux kernel developers to represent their interests, and submit Intel/AMD-specific code to the open source Linux kernel.But that is a ways off.An open source project is a rich blend of paid devs and unpaid volunteers, everybody working together on one common piece of software, to make it better for everyone.  As the saying goes, you work on an open source project to "scratch your own itch."  That is the engineering equivalent of pursuing one's own economic self-interest, the essence of the free market. Yeah, post the .torrent file far and wide. RE lead dev:Lead dev is not an elected position governed by rules and procedures.  Satoshi chose Gavin, and the community consents to agree by their use of software.  He has been a good steward of Satoshi's vision.It might also be fair to say that lead dev is just someone who failed to say "not it!!" fast enough   Lead dev means not only wrangling releases, but also being a big fat target for any bitcoin criticism or paranoid fear.The whole point of open source and git is to make it easy to fork the project, and go your own way.  The second any developer does something disliked by users, the software will be forked.Thus, open source makes it easy to "fire" any dev.  If you make it easy for leaders to come and go, make it easy to change leadership, then that creates a powerful incentive not to piss off your userbase!Leaders are simply chosen by the free market (of ideas and engineering output, in this case).RE absence:If Gavin gets "hit by a bus" -- the popular jargon for losing an open source project leader -- commits and releases will happen as someone steps up and the community accepts them.I think most of us would run away screaming, if Luke-Jr were lead dev ;p In general, spreading the torrent far and wide is fine.But for trackers or accounts of friends, it is nice to ask [the tracker site / friend] first  Indeed.For the record, I do not have any mining operation nor even have thousands of bitcoins.    Not that there is anything wrong mining securing the bitcoin network.In fact, I'm the one who gave away over 15,000 bitcoins attempting to jumpstart the bitcoin economy, and incentivize developers to join bitcoin.
Not at this time.  It is possible that somebody might create a bitcoin-firstrun.exe application, separate from bitcoin, that torrents the blockchain.For most users the initial blockchain download will be a one-time event, so there is little interest in directly adding bittorrent code to the bitcoin client.The import-bootstrap.dat feature was added so that bitcoin does not have to care about the source of the data.  As long as you have the file, it will import it.  Maybe you downloaded the file via torrent... or maybe HTTP.  The point is, from the bitcoin client's perspective, it is agnostic to the download method. The difference between 0.7 and 0.7.1 is that 0.7.1 automatically runs "-loadblock=bootstrap.dat" at startup.The torrent will probably be a faster download...  but if you have an ultrafast network peer, the regular download will be just as fast.  This torrent is just adding option for users; it is not the New Official Recommends Means for getting the blockchain.  As the OP emphasizes, this is an experiment. Quoted for emphasis. You are welcome to become a member, and have a voice in how to best use the funds.The focus on Gavin is simply prioritization:  if there are enough funds to pay a full time developer, they should go first to Gavin (IMNSHO).  It is better for the project if Gavin is working full time on bitcoin, rather than full time on $SomethingElse and scrambling for whatever remaining bitcoin time there is.  If there are Foundation funds left over, they should probably go Q/A, infrastructure, other full time devs, as the members decide.As to myself, I already have a job I love, so I have self-selected myself out of any direct salary (as previously stated in this thread).  Like Pieter, I work on what I like to work on, and have the freedom to ignore boring stuff.  Obligation-free beer money donations are always welcome of course (hence the sig). The most important concept to remember is that colored coins are like rules of the road:  they only work because everybody agrees on what side of the road to drive.  There is no law of physics preventing cars from driving in the opposing lane of traffic.  There is no software rule preventing you from using your colored coins to buy Alpaca socks at a web shop.The basic process works like this:1. Publicly declare a list of coins in the existing blockchain as colored.2. Transfer the colored coins to their new owners.  These new owners may freely transfer them to other owners.3. If the colored coin transfer follows the Colored Coin Rules(tm), software may search the blockchain, and precisely identify the list of colored coin holders.4. If the colored coin transfer does not follow the Colored Coin Rules(tm), then that person is essentially "burning the money", by making it impossible to track the colored coin beyond a certain point.It is up to each colored coin owner to keep track of their own public keys.  All other information is stored in the public blockchain. There is only one blockchain, the public blockchain.Let me try to draw an analogy:Every US dollar has a serial number on it.  The US dollar version of colored coins would be analogous to: "the holder of $20 bill with serial number ABCD1234 owns Chevrolet Corvette VIN 137YA9031WE239523"Colored coins says "bitcoin ABCD1234", whatever its value, is somehow more special than regular bitcoins.This requires special software for the bond issuer and the bond holder, both, that recognizes bitcoin ABCD1234 as special.  This is simply an agreement enforced (or not) by running special software.The bond issuer runs software that searches for the current public key holding ABCD1234, and pays dividends to that public key.  The bond issuer does not know or care who is the owner.The bond holder runs software that stores ABCD1234 in a special wallet, separate from other bitcoin wallets.  This guarantees that the bond holder does not accidentally spend their "special" coin accidentally -- analogous to accidentally giving a rare coin to a vending machine for soda. Yes.  The issuer may determine what public key currently controls a colored coin.  That is the only information present in the public blockchain data.It is obvious that voting is possible:  a colored coin holder may use the 'signmessage' feature to sign any arbitrary text using their bitcoin ECDSA keys.Let us assume that a colored coin has been sent to bitcoin address 1ABCD1234ABCD1234.1. A public notice of voting is posted <somewhere>, of a vote.  This notice includes a sample ballot, a simple text message format.2. The owner of 1ABCD1234ABCD1234 downloads the sample ballot, edits it to reflect their vote, and then uses the 'signmessage' RPC to add a cryptographic signature.3. The owner of 1ABCD1234ABCD1234 emails the signed ballot to voting@mycompany.com, or maybe, voting@thirdpartyballotservice.com.4. The bond issuer, or 3rd party vote tabulation service, looks at the blockchain to verify that the email just received is signed by the holder of public key 1ABCD1234ABCD1234, and that 1ABCD1234ABCD1234 does indeed still control the colored coin. The .bitcoin directory is for a different app.pynode is a full bitcoin client, separate from bitcoind.  The script mkbootstrap.py requires access to the pynode database, after you have downloaded all the blocks.Sadly you do need to be a bit of a programmer to generate a bootstrap.dat file. Quoted for emphasis.Blockchain.info data is wrong on deepbit, so it either skips that work, credits other categories with deepbit's work (because deepbit's blocks are first seen by blockchain.info from other sources). It works for cars...  as long as the car's security system is keyed to anyone who can prove they are the holder of the smartcoin.  Your mobile phone can easily generate an ECDSA-signed message proving this, given the proper key.  And Wired articles like this one show that it is feasible near-term for a mobile phone to be your car key.It should be straightforward to trace a 1-satoshi output through the chain, to prove to the car's bitcoin API that the mobile phone is last holder of that coin, following standard colored coin rules.Frankly, multiple colors of coin are not that interesting to me.  The main point is simply proving that (a) a given txout represents car ownership, traceable back to the "root property," and (b) you have the key associated with that txout.To me, the basics are fairly simple: Within a single bitcoin transaction, you must distinguish between a smart property transfer and payment transfer, and ensure the two don't mix.  You must also ensure smart property transfers don't mix. Correct.  A small bit of transaction metadata has been proposed, however:  https://github.com/bitcoin/bitcoin/pull/1809This has the disadvantage of not being a standard transaction right now, and additional chain bloat.  But it is very useful to atomically attach a signed hash (metadata) to the transaction.  It is potentially more reliable than entirely depending on an external entity to assign meaning to the smartcoin/bond.  And it makes third party verification of bond holder claimers more reliable, as bond activity is easier to publicly track.A purely colored coin solution does not have any external linkages.  This has the advantage of being a standard transaction right now, and does not carry metadata that might be accidentally or maliciously corrupted/lost.  The disadvantage is you miss any value obtained by atomically attaching signed metadata to the transaction.Correct.  It is in the bond issuers interests to accurately track this -- they do not want to pay interest to everybody who inserts a "BONDHASH<abcd1234>" into the blockchain ;-)Correct.This is true, and it will typically be agreed beforehand who is paying fees.  An atomic coin swap involves two parties, but only one will likely pay fees.  If it is the smartcoin transferee, they will need to keep some small change for fees, yes. (warning: highly biased answer from smart property dev follows )It would be nice... but I think this first round of Bitcoin Foundation funding should focus more closely on higher priority issues, like getting Gavin paid or getting some basic Q/A resources in place.There are many urgent issues facing bitcoin-the-currency, as outlined earlier in this thread.  After those are all solved, some attention to smart property and other advanced bitcoin uses (escrow, smart contracts) would be great. The GUI is already decoupled from the "engine" as demonstrated by how bitcoind and bitcoin-qt are built from the same source code.  bitcoind is the base, built with zero GUI libraries.  bitcoin-qt is simply "bitcoind + GUI"In general, there is wide agreement that separation should be improved, along similar lines like ones you suggest:core class librariesblockchain enginewallet handlinggraphical user interfaceSeparating out the class libraries would enable more applications to share the core code.Separating out wallet handling into a separate process (and executable) will greatly increase security, ensuring that any bug in the P2P network triggered by a remote attacker would never overflow or corrupt the wallet process.etc.But as >90% of the full nodes are the reference implementation -- which remains the most complete and secure implementation to date -- keeping the network running securely has to take priority over these other things.If you know C++... help!  Unlike what the tinfoil hats would have you believe, the dev team is still volunteers working on our own time (hopefully Gavin will be funded by BF real soon now, easing the pressure a bit).  It is easy to join the dev team, too:  just submit a useful pull request.  No forms to sign or anything So file this under...   we agree with you, but need more developer resources and bandwidth to make that happen. pybond has been renamed to smartcoin, as it will support more smart property and colored coins, than just bonds.  Github URL: https://github.com/jgarzik/smartcoinThat is all. A couple pybond implementation notes:1) pybond will add a "<BOND+hash><OP_DROP>" for tracking purposes, so I'm not doing much in terms of color tracking for now.2) pybond / smartcoin will use two RPC endpoints:  one for smartcoins (colored coins), and one for bitcoin payments.  Thus, two wallets.  This seems safer than mixing smartcoins and regular bitcoins.  This "firewall" prevents any client from accidentally spending the wrong coins. The best place to watch is probably this thread, though I am open to other suggestions. Yes, leveldb is a pre-requisite for ultraprune. It depends on your definition of "share"... locally or remotely?A single torrent is simply a hash-of-hashes.  Each stream is a different torrent, with different hashes, even if torrent A is a strict subset of torrent B.Your client may be modified to share streams which are multiple versions of the same file.  Would probably only need some small mods to existing clients, and would not break the network protocol.  So from that perspective: "yes"Remote clients will see different hashes, and assume that each stream is separate and independent of each other.  So from that perspective: "no" This thread was created as a meta-thread, intended to help collect various bitcoin "recipes."  What is recipe?  It is a concrete example with step-by-step instructions, understandable to programmers, that describes how to execute a specific type of bitcoin-enabled transaction.Everyone understands the simple, popular send-bitcoins-to-pubkey transaction, but bitcoin offers so much more.  This cookbook, it is hoped, will showcase some of the less common, advanced uses of bitcoin.If you would like to contribute a recipe, please start your own thread, and then post a link in this thread.  The OP will be updated as needed.  It would be great if these recipes were copied to / linked in the wiki, but since discussion facilities on the forum are better, this seemed like a better home for the cookbook.Another goal is to eventually have a set of scripts which demonstrate these features.Recipe:  2-of-2 escrow, using multisigLink: https://people.xiph.org/~greg/escrowexample.txtBob wants to pay Alice 50tnbtc but prevent Alice from cheating him.  A good example of using multisig from start to finish.Recipe: Trading between two bitcoin-like chainsLink: https://en.bitcoin.it/wiki/Contracts#Example_5:_Trading_across_chainsCurrencies that implement the same ideas as Bitcoin can be traded freely against each other without trust. Recipe:  Atomic Coin SwappingLink: https://bitcointalk.org/index.php?topic=112007.0Two parties negotiate to swap bitcoins between themselves.   This is presented in the context of atomically exchanging payment for smartcoins (colored coins), but is not limited to that use case.  P2P mixing was another example use case someone suggested. Hopefully version 0.8, with "ultraprune" will reduce the costs associated with running a full node.  Ultraprune is vastly more efficient, and can be run on slightly older/slower machines than current versions.
Once the height of the next checkpoint is publicly known, everyone may run that script to independently generate bootstrap.dat with the exact same file size and SHA256 checksum. It will result in seeders already having 90% of any new torrent, thus having to fill in the remaining 10%.Yes, this is open data and an open file format.  Seeders may independently generate a byte-for-byte identical bootstrap.dat by running https://github.com/jgarzik/pynode/blob/master/mkbootstrap.pyEach time the blockchain torrent is updated, seeders may run that script to guarantee they have 100% of bootstrap.dat immediately.  A nice, decentralized solution  This is special to our use case:  bootstrap.dat is essentially an append-only file.  Blocks are simply concatenated onto the end.Today's torrent at height 193000 is 2,491,771,562 bytes in size.The next torrent, a few months from now, will have the same first 2,491,771,562 bytes.Thus, to bittorrent, the next torrent will simply appear to be a truncated / not fully downloaded bootstrap.dat.  Bittorrent is built to fill in the missing pieces of a file, so that is what it does here  At present, that sort of setup would be challenging for users to use effectively.  It is far easier to have one file to import (automatically, in 0.7.1+) than a collection of files.Longer term, the idea is to fix any issues with bitcoin P2P peer selection, so that downloading recent blocks from your peers is faster and not burdensome.That's the plan, with a slight change:  each new torrent will contain all blocks from zero to X.For bitcoin users, the largest user population served by this is those that have zero blocks, and are jumpstarting a fresh node installation.  Other bitcoin users will likely have blocks fresher than 3-6 months old; catching up via P2P network is fine for them.  There is only a tiny remaining segment of bitcoin users who would then be served by new-torrent-for-checkpoint, those that only turn on their bitcoin clients once every ~6 months.Note:  For existing torrent seeders, they may simply swap out the .torrent file, perhaps kick their torrent client to manually re-verify a file, and bootstrap.dat in their Uploads directory will simply be extended.  Seeders will automatically already have 90% of each new torrent's bootstrap.dat. That is the open and operative question.  GLBSE had bots, bidding and asking.  It seems reasonable to assume that any P2P solution would quickly see the same, right out of the gate. Correct.  It is not much use, without participating seeders.  We definitely have several right now... but it does look like users occasionally get partitioned off into "Azureus island" or "rtorrent island" or "everybody else's island." Yes, that's the hope.  Already had reports of 7 MB/s downloads... Sadly it varies wildly depending on your hard drive configuration.  Import time here is under an hour. Not quite...  this data is the precisely the same data you see on the P2P network.The client validates bootstrap.dat data to the same level it validates data downloaded from the P2P network.If all checkpointing code is disabled, this data remains fully valid and useful.A lot of the time is due to Berkeley DB slowness (fixed by ultraprune).  Another yet-unfixed cause of slowness is poor bitcoin P2P network peer selection, for block download.We want to do exactly the same amount of validation as the client does with network blocks...  break no additional link in the trust chain  UPDATE Feb 2013: This thread is obsolete.  See the non-beta Bitcoin blockchain data torrent thread for further torrents and updates.This is a beta test of a blockchain torrent project.  Interested participants are invited to try, and comment.Version 0.7.1, which just entered testing, includes a new feature:  If the file "bootstrap.dat" is found in the bitcoin data directory, it will validate and import all blockchain data found in that file.  The following torrent presents a bootstrap.dat file for that feature.Here is the PGP-signed torrent information.  Details follow below the signature.-----BEGIN PGP SIGNED MESSAGE-----Hash: SHA1Torrent info hash: 0bb0521942f586ed96203c6f4d136324756f8a9aTorrent magnet link:magnet:?xt=urn:btih:0bb0521942f586ed96203c6f4d136324756f8a9a&dn=bootstrap.datFilename: bootstrap.datByte size: 2491771562SHA1: e70ca90775dfdb13fd0014425805a0bdf4a31677SHA256: a3f258e7af030165360596e4cb0b9beb24b4ce97352c22e65349b89ad5fc5d3e-----BEGIN PGP SIGNATURE-----Version: GnuPG v1.4.12 (GNU/Linux)iQIVAwUBUHeHSdodwg8tvwyoAQJ2DA/8CcINxuD7DzLv96fE+R6GVLvRASLcy0ig8d2YyDbJ9r9dPVODDPGC7I/ooDVJAcQsqdrLYHST2DTCt6c4zZ/7iXzFEahRopsHPmxYOgkHie7438nqpmH9uC+d5t0pPHUFS6dBSBgdSVPaLfS86fToXrV/bx30rHBi60FJz5A99aXrrrUny0cGIjafqVv8XjqNoA1lzjsRjeiu3EgTm8Ibcr8ZI6DLp/80Siv3potlOArTI6sxjc/vKUa6nZILnW8mKdwc/d8LUdRaBPoo71c6Q4YOSQh/OVhtB1rZ8NEX/2SlS3PbhhMELcY/2wvgPGovkIqOgiw6dDIkhsD8iJAD1DqCkZbsq9S1kKobGmceuQBcyRUCavkafdHJpZzyCAKLnQLV3FvZ3O4QZQVmYGPYn1H8a5UFRDQqLGKcQmwm4Cet7162woEiNAaR9p7HvTJ4LV2uEvY56m2GfZbToCk2aiycO+v6Fm8KZY8cX+cbEOW3AM5rYVa6Rks029LIrFFzIutlo5MJ7uc7oMqciWrcsPtEh59QY+yJSENk6cLyWCAHl4jsvUTBvdNGy3fHKSEyQOjG5cmAMXiJTX/iiB/DJf7koTZAj4ubwez3/HwuenMYjHgjsVXJAXprcEpTjpEcicg4W0MIDw07dPjol0dnRRNpwfJ1HMRcdlTqLwlXqgs==uwRB-----END PGP SIGNATURE-----What is bootstrap.dat?It is a flat, binary file containing bitcoin blockchain data, from the genesis block through height 193,000.  Height 193,000 is the height of the current checkpoint baked into the reference client.Version 0.7.1 (when released) will automatically validate and import a file in the data directory named "bootstrap.dat".  Version 0.7 or later will also import this file by passing the command line argument "-loadblock=/path/to/bootstrap.dat" to bitcoin-qt or bitcoind.Who wants bootstrap.dat?Anyone bringing up a new node using the reference client.  This is one method of accelerating the initial blockchain download process, while helping the bitcoin P2P network by offloading data download traffic from public P2P nodes.This download is not for those who are already running the bitcoin client.NOTE: This torrent requires DHT torrent capabilityThis torrent is a so-called "trackerless torrent", to avoid making any of the open torrent trackers targets of any bitcoin antipathy.  Peers for this torrent are discovered via DHT, and early results seem to indicate that some bittorrent clients take a while to find their initial peers.  We have also discovered clients (rtorrent) that disable DHT by default; you will need to turn it on.Please report results, good or bad, on using this trackerless torrent.How often will this torrent be updated?Assuming this project is deemed useful and worth continuing... the torrent will be updated once every few months, when the checkpoints are updated in the reference client source code.Why not update the torrent more often?A torrent works best when it is a large, static dataset that changes infrequently.  That maximizes the ability to seed the data, enabling even part-timer seeders to contribute meaningfully.  Less frequent changes also minimizes the risk that a malicious torrent will appear, with a long, malicious side chain.  The current policy only updates the torrent after blocks are buried many thousands deep in the chain.Why should I trust you?You don't have to:  This data is raw block chain data.  The client will verify this data during import.Independent third parties may generate their own bootstrap.dat, up to height 193000, and verify that the sha256sum matches that posted above.  The file format is simple and publicly known:     <4-byte pchMessageStart><32-bit length><CBlock, serialized in network wire format>Torrent file download?If the magnet link does not work, download http://gtf.org/garzik/bitcoin/bootstrap.dat.torrentComments welcomePost any comments or experiences in this thread.  I'll update the OP as needed.Maybe trackerless will be a #fail, but let's see how it goes. ...and here it a call for "it works" testing, for the current release candidate of 0.7.1:https://bitcointalk.org/index.php?topic=117874.0Any testing beyond "it works" is appreciated as well of course.  Volunteers are encouraged to self-organize in this thread to come up (and execute) more formal test plans. Search the forums for distributed bonds and colored coins. It seems likely that people will hook up bots to distributed bonds as soon as they pop into existence.  Some sort of mitigation strategy will be needed, at a minimum.  Otherwise the P2P network will be flooded with sales offers. It would be really nice to have that option.  Bitcoin-funded AWS accounts seem like niche that needs filling. True, however:  a chain specifically for smart property could potentially keep bloat out of the main chain. Yes, torrents would be useful -- and some infrastructure is coming down the pipe for this.Upcoming version 0.7.1, released hopefully this week or early next week, will automatically import 'bootstrap.dat', if that file exists in the bitcoin data directory.This feature is intended to enable a bootstrap torrent to be downloaded.  Simply drop the torrent's data file (bootstrap.dat) into your directory, and bitcoin will do the rest.The next step is for some volunteers to generate the torrent, and other volunteers to "beta test" the torrent by downloading it, and making sure it imports correctly into bitcoin.The nice thing about this process is that these volunteers may be untrusted:  bitcoin will fully verify the input data, just like it does over the network.  A malicious torrent would largely waste everybody's time, but be quickly noticed as malicious. pybond follows the distributed bond design laid out in that post -- including the P2P and DHT bits.I am thinking there will be a third component as well:  P2P network will permit traders to advertise "coordination points", a single address where traders may connect for high-speed trading between themselves.  These coordination points may be created or destroyed at any time, and are self-organizing among participants. No -- losing color by accident (or intentional design) just means the property is lost.  Just like you can "burn money" today by throwing away a private key, or sending bitcoins to a non-existent key, or any number of other ways. Yes.  More generally, many RPC and P2P requests require a functioning (or simulated) network with remote nodes to query.A lot of coverage may be gained with simply two nodes, a "local" and "remote" node talking to each other.However, two nodes will not exercise code important to peer-to-peer software, like good peer selection. As an aside, typically this is the point where hardware engineers suck in a shocked breath, then gasp "what??? you do not already test every single function?"  That is the an ideal goal, but it is incredibly difficult given (a) all the different configuration permutations and (b) the need to rely on a mostly volunteer Q/A army.
Any level of testing is useful and appreciated.  Various types of testing that are helpful:"it works" testing:  Simply run the latest Release Candidate (or latest version, if released).  Make sure all the basics work (for whatever definition of "basics" you desire).  This is the level most accessible to casual users.Major features testing:  Develop a short checklist of must-work features, and organize volunteers to work together and go through that checklist, item by item.  Test each major feature on each major platform.Stress and fuzz testing:  Attempt to "stress" the system somehow, or randomly corrupt bits of data.  See what breaks.Regression testing:  Record bugs fixed, and develop automated test cases that successfully reproduce the bugs on older versions, and verify newer versions remain fixed.Unit function testing:  Rigorously exercise each C++ class to ensure it behaves as expected at a micro level.Full peer automated testing:  Automated testing of RPC and P2P functions is non-existent, because of the difficulty in doing so.  Find a solution to this problem.Data-driven tests: If possible, write software-neutral, data-driven tests.  This enables clients other than the reference one (Satoshi client) to be tested. Embed tests in testnet3 chain, if possible.The community at large can be a big help simply by doing the first item:  download and run the Release Candidates and the latest version, and report any problems.  Even reporting success is fine by me, for example: "Version 0.7.1 works for me on Windows 7/32-bit" posted on a forum thread.It is always very difficult to organize any sort of testing regime with open source volunteers that come and go.  Each volunteer chooses their level of involvement.  Any amount of testing and test-case writing, large or small, is helpful to bitcoin. Thanks for the report.  We definitely hear you, and hope you will try 0.8.  The network sync (processing blocks) is significantly faster, minutes instead of hours. Correct.  -loadblock=FILE is the answer for the current client (0.7 or later).  That imports and validates blocks from the given file(s) in the same manner as the Initial Block Download (IBD) performed over the network. Old ideas -- Search for "colored coins" and "smart property". Miners only select (or ignore) transactions provided to them.The bitcoin client you run chooses what transactions and blocks to validate and relay.Miners cannot change the rules without bitcoin user agreement. The on-disk block file format was just updated to match the network's "block" message format.This is an incompatible change.  You will need to delete, and re-download, your block databases. Thankfully, the network is not centrally-controlled.  And hopefully never will be. The existence of an incentive does not presuppose all will follow that.Thankfully, most do, otherwise value would collapse. And if everybody's bitcoin transactions take forever to confirm, users will abandon the network, and bitcoins will have no value.Miners have an incentive to encourage users to use bitcoins, over and above simple fee income.The more users, the more value conferred by the block reward + fee total.No users, block reward + fee is worthless. Block's nVersion policy is already specified, in the recently accepted BIP 34 - "Block v2, Height in Coinbase"Please do not use nVersion as an additional nonce.Stratum mining and getblocktemplate (BIP 22) already have provisions for ASIC miners, through the extraNonce field and other possibilities.  This provides unlimited nonce range.Any change to the block header is a hard fork upgrade, and should be avoided at all costs. We are overly cautious because any screwup costs real money.  Literally. Sorry, this is just not true.  Nobody started off "suggesting that users use online wallet services."The advice has always been "run a node, if you can.  Please please please run a node.  If you absolutely cannot run a node...  use a mobile or online wallet."Online wallet has always been a last resort, because that is a centralized solution.The more people that run nodes, the stronger the network. No.   Any miner doing that will cause bitcoins to lose all value, at which point the network will route around the troublemaker. Limiting your mind to a decentralized, distributed currency is thinking too small.Think decentralized, distributed financial system.  Bitcoin is just the base for something bigger. Too centralized.  Try distributed bonds.Or even better, a merge-mined data timestamping service...  no blockchain bloat, as it is just another merkle branch in the merged-mining merkle tree (of which a single merkle root is then published in each block's coinbase). AFAIK, most simply do not bother to detect network mischief at all, outside of what bitcoind protects.  No algorithm.You cannot defend against the "miner spends, while simultaneously withholding a block containing a double-spend"  This is impossible to detect beforehand with any algorithm.Merchants simply make a business decision to accept the risk of a double-spend, by (a) being well-connected, and (b) only selling inexpensive items where it is not worth the difficulty of an attack.Edit: and (c) employing external anti-fraud mechanisms to hopefully select customers less likely to double-spend. As has been repeatedly stated, Bitcoin Foundation will not be directing the dev team to work on specific projects.More likely the reverse is true:  the community and dev team will suggest things that need funding (like Gavin's salary).  If the Foundation's members agree, it happens.  Otherwise, it doesn't. It is generally inadvisable to come up with licenses on your own.Smart lawyers spent years on the current licenses, including rounds of open review and comments across multiple jurisdictions in the world.It is doubtful lone efforts will match that sufficiently to make a bulletproof license, compared to existing ones.Typically the choice is GPL (and variants like LGPL) or BSD (and variants like MIT/X11).  Those licenses are much more likely to have established court and legal precedent. If you read the thread, you will see many examples where it is clearly beneficial to open source:  Linux Foundation, Apache Software Foundation, Tor Project, ...I'd wager much of the open source software you use every day, even if unknowningly via remote, is covered by one or more open source foundations. No.  Version 2 blocks are accepted and relayed just fine.Mining a version 2 block will not hurt your chances of propagation.  You should mine version 2 blocks, if possible.
This is true, but from a practical perspective, the US government itself recommends Tor, and according to one analysis provides over 80% of the Tor project funding.  Tor Project itself claims "militaries use Tor" and I have heard similar claims.There is plenty of precedent that EFF will not get in trouble for using and recommending Tor.Once that CIA starts paying clandestine agents with bitcoin, the EFF will start accepting bitcoin donations again, one presumes  Correct.  BitcoinJ is primarily focused on lightweight client mode, but BlueMatt has been working on adding the necessary verification code.  Not there yet, though. The rest of the world does not consider that free software.Closed source does not permit easy reverse engineering or modification, by its very nature. pynode and ufasoft-coin are full, verifying nodes.  purecoin is too, I think, as is mtve's Perl bitcoin implementation.The full nodes actually on the network are still 98% reference client (bitcoind). LGPL:Proprietary, closed source versions of the library are NOT permitted.Proprietary, closed source applications using cbitcoin library are permitted.GPL:Proprietary, closed source versions of the library are NOT permitted.Proprietary, closed source applications using cbitcoin library are NOT permitted.In either case, LGPL or GPL, your cbitcoin code remains free software.  Nobody is permitted to modify and distribute cbitcoin without also providing source code. +1    Quoted for emphasis.There should not be any major revamp in how development decisions are made. This is incorrect.BitcoinJ, pynode and ufasoft-coin do not depend at all on bitcoind.  Other alternate implementations also exist, in varying states of completion (bitcoin-alt, purecoin, ...) LGPL prevents distribution of proprietary copies of the library. I bet on Skein.  Oh well, this makes my Linux kernel patch worthless  It's Keccak.See http://www.nist.gov/itl/csd/sha-100212.cfmHard fork time, let's switch!(just kidding) On a practical level, it is doubtful that the user community would trust a closed source implementation with their money, when so many open source implementations exist. Where is the hate, in my message?  I am simply stating facts.  Linux kernel developers have been deeply involved in the arcane legal issues of licenses and linking for well over a decade.And even excluding my kernel work, you will see that many of my projects are GPL license: https://github.com/jgarzik    (basically all the non-python projects are GPL'd)The Linux kernel example is simply not applicable to the cbitcoin licensing situation, because it is not a library against which people directly link their end user applications.The facts are:1) If cbitcoin is LGPL, an application using cbitcoin may be any license.2) If cbitcoin is GPL, an application using cbitcoin must be GPL.3) Linux kernel is not a library against which user applications directly link.  The kernel is GPL, but applications using the kernel's system call interface may be any license. Irrelevant example, comparing apples and oranges.  The Linux kernel is not a library.Applications do not link directly with the Linux kernel, therefore applications (obviously!) may be any license.Not so, with cbitcoin. +1Most libraries are LGPL'd or similar.A GPL'd library requires that all users be GPL'd. The entire network does not upgrade at the exact same moment.There will be many not-yet-upgraded nodes that will serve blockchain data to those upgrading to a new database index.3GB chain data1GB indexis what I have here. Over the P2P network, the Satoshi client will accept and relay nVersion=1 blocks until a super-majority of the network has upgraded to nVersion=2.Locally, if you are mining, the Satoshi client provides nVersion=2 blocks via 'getwork' or 'getblocktemplate' RPCs. Yes, there are ongoing discussions about choosing metrics which encourage shrinking the UTXO (unspent output) set. The block format used on the network has not changed.  It is underlying database index on-disk that is changing.It is trivial to rebuild the database index:  just delete blk*.dat, and download fresh from the network.The blockchain data itself has not changed, and continues to be self-verifying (integrity protected by hash). Yep.  Open competition means there is always a chance somebody will create a better-than-bitcoin alternative currency.  It is refreshing to see people trying new ideas beyond "change block #0 and call it jgarzik-coin" P.S.  Note the color attached to smoothie's "ignore" link.  This indicates that a profile is a frequently-ignored profile, usually for trolling reasons.
Not true at all.  It was a matter of "when, not if."  Structured ASICs were pursued very early in bitcoin's life.  ASIC was always expected as the next step. ultraprune looks at the set of unspent outputs, zero value or not.There are some proposals to create certain transactions obviously impossible-to-spend, and therefore obviously pruneable immediately (or after some length of time). *plonk* critic != trollThere is a clear difference in this thread between honest criticism and paranoia unsupported by evidence.All the evidence to date is that the Gavin-led dev team encourages a more-decentralized ecosystem than even Satoshi did.  A voluntary organization has been organized to help provide resources to continue that work.Absolutely there will be bugs and problems at startup.  It is better to start, and fix those bugs, than to endlessly debate about what is the perfect form that satisfies everybody. See why hazek is a troll?I have self-selected myself out of the pay pool, as previously stated in the main BF thread:     I'm quite happy with my day job as a kernel hacker, and don't forsee     leaving there;  that makes me a "community dev" for example.  (though     I'll certainly accept beer money donations and the like... see sig)Real world continues to disprove paranoid suspicions.Gavin has been doing hard work, the community clearly accepts and approves of it.  If a voluntary organization makes that sustainable, that is positive for bitcoin. You fail completely at logic (and economics).   The cost of a one-time movie != on-going engineering costsThe problem space is finding a way to fund ongoing engineering and testing.  One time bursts of funds are not predictable nor sustainable.  Try finding an example relevant to the problem.  (hint: you can't)A rational economic actor prefers a stable, predictable income stream. Did not work even after paying 15,000 BTC of my own money.Facts and real world experience have disproven bounties as a way of funding anything approaching full time engineering salaries. I don't see much point.  I'm just calling nValue==0 invalid and moving on. Already disproven by reality.  Bounties have been tried, and did not work. I disagree with Mike, here, and am avoiding zero-value outputs in pybond.  Here's why:The reference client does not consider zero-valued outputs standard.  Failing the is-standard check implies the transaction will not be relayed by many.  Miners may also avoid the transaction for the same reason.nValue may be employed to efficiently hold multiple smartcoins, in a single output.  For example, nValue==3 may imply you are holding 3 of the same type of smartcoin (bond).1-satoshi outputs have an obvious cost.  The fee requirement for relaying "dust spam" also adds to the cost.  This economic signalling encourages conservation and reduces blockchain spam. The fundamental premise is flawed...Bitcoin-the-network and bitcoin-the-source-code are no more centralized yesterday, than they will be tomorrow.  You are accepting the troll propaganda to call anything that has happened in the past 30 days "centralization."Frankly, the trolls might even be pushing their agenda so hard, that they are creating a Cult Of Gavin Personality where none existed before.Satoshi's design always emphasized user freedom and decentralization of money and P2P network.  And the client has stayed true to the Satoshi design.But even more than that, everything we've done has decreased centralization, as you can see in this post from theymos.  The dev team practices are far more inclusive, open and decentralized than during Satoshi's tenure.If you look at actual practices employed by the dev team, there is clear, provable evidence of becoming less centralized, in the engineering department. [as mentioned before] this is a fair point, but really bike shedding at this juncture.What is a proven better DDoS protection service?An understandable criticism, but I think this is within the realm of member policy.A fair criticism, AFAICS?Bogus criticism:  the foundation will disappear if its members dislike its actions.  Thus there is a free-market economic feedback mechanism and members are the customers.Another, just like making it easy to fork the code, you can fork the foundation:  there is no barrier to doing your own foundation, and doing it better.  People will join the better foundation, even devs.True, though I don't see this as a problem.<shrug>  All this is necessary to deal with USD and other fiat exchange.Don't hate the playa, hate the game ;pEvery single large fiat exchange will behave in exactly the same manner. Yes, on the troll side.If you are looking for simple facts, there are these:There is not a single technical change to the protocol or reference client that may be highlighted as disliked/evilThere are plenty of technically component people here who may fork the reference client, should any such change appearsThere are alternate client implementations, in various stages of completionThere is zero hard, technical evidence of anything supporting the trolls positions.There is zero evidence of anything beyond the dev team wanting to complete Satoshi's decentralized vision. Fact check:  that is incorrect on multiple levels.  No one person "owns" git access... if that is even a concept.Multiple developers share git write access -- but that is completely irrelevant, because anyone can fork the git repo the moment a disliked commit appears. That is quite insulting to the large numbers of people on these forums who understand bitcoin, and have the ability to fork it at a moment's notice. Thanks (again) to socrates1024, pynode has switched to using the leveldb database, plus a flat file format for raw blockchain data.This database upgrade is wholly incompatible with the previous GDBM-based database.When signature checking is disabled, the entire blockchain may be downloaded in 34 minutes.When signature checking is enabled, the blockchain download process takes many hours (6-12), due to slowness of python. The dev team employs open verifiable processes, making it easy for anyone to fork the code -- or the development team -- and do a better job. +1Would love to see a conference in China, or Hong Kong. This is known as a magic number.In bitcoin it performs two primary functions:1) Guarantee two network nodes belong to the same network.2) Guarantee blockchain file format matches the active network.It performs the secondary function of guaranteeing that we are always sync'd on message boundaries in the TCP stream. They will be able to soon, yes.  "am writing"  Right now the P2P network and DHT framework are being debugged.  Once that works, it will be easy to hook up the rest.
I think users with older clients, holders of older bitcoins quite appreciate the struggle to maintain backwards compat.Nobody wants to wake up in the morning, to discover that their money is unspendable outside of a required upgrade. Before:  Gavin and other lead devs could have been funded by shady unknown, undisclosed -- or, more realistically, non-shady but unpredictable -- sources.After:  Gavin and other devs may be funded by known, disclosed, predictable sources. https://en.bitcoin.it/wiki/Difficulty Already opened a thread in the Staff forum (which might not be visible to non-moderators). None of the replies answered any of the above, specific questions.Yes there was an explanation, possibly innocent.  It was good that he responded -- thanks!  I agree the intentions may have been innocent, but it does not look good as a critic, to edit the post of those on whom you are critical. I remain curious about the following unanswered questions:Has hazek edited any other non-hazek post in this thread?  If yes, what were the edits?Has hazek ever edited any older posts of the following people: Gavin, me, satoshi?Is there an audit trail of moderator post edits? Right now the answer is lame:  wait a while.  If you don't see it confirmed, hope that it is forgotten by miners and network and initiate manual wallet coin recovery.  Double-spend with additional fees, and hope that works.There is a proposal on bitcoin-devel for giving transactions a defined lifetime in the "memory pool", after which they are ejected.  Since the bitcoin client has designed from Day One to periodically resend unconfirmed transactions, this should increase the probability that you can cancel/update a transaction. Really?Code:$ cd bitcoin/src$ make -f makefile.unixPerhaps with optional build-openssl and build-bdb steps first, if your distro does not provide.  If your OS makes it more difficult, get a better OS ;p Are you talking about valid ECDSA keys, or random garbage stored as a guaranteed-to-fail pubkey? Oh, I completely agreed with you   Centralized solutions are easier, and still provide plenty of value.However, given real world experience in this community, such exchanges also have a nearly 100% chance of (a) getting DDoS'd and (b) getting attacked by determined, knowledgeable thieves.That is why decentralized, open-review systems are preferred. Same payout, less server <-> miner traffic. Woah.  That is a significant abuse of moderator power.Has hazek edited any of your other posts?Has hazek edited any of my posts?Has hazek edited any of satoshi's old posts?Editing another's posts is far worse than deletion, when it comes to abuse of moderator powers.  That is misrepresenting someone else's identity.Edit:  Yes, Gavin should have signed his post with PGP, to more easily spot things like this. Any added data, OP_DROP or fake-pubkey or whatever, typically requires two parties to agree to maintain the format of the in-chain metadata.But a bigger point is simply...  please please please do not encode data inside pubkeys.  Use OP_DROP or another visible solution.   In-pubkey makes it really difficult to detect and manage, for those of us trying to help the blockchain software  Incorrect.  You misunderstand how merged mining already works.You add one (1) merged mining merkle root to the block, covering all merge-mined currencies.  Each currency is an entry in the merkle tree.That can then scale to a billion private currencies, without bloating the block.Merged mining is obviously far more scalable than any solution that requires blockchain bloat, however minimal.The downside is that you cannot have atomic transfers between a smartcoin holder, and a payment holder. No, the foundation ensures it is one of many paying for development.  (if nobody else pays anyone else, then, yes, it is the only one paying)Anyone canJoin the dev teamHire your own dev teamand participate in the open source process.That is why we make it so easy to fork the code: easy software replacement and easy dev replacement. I raise the point because that is precisely what distributed bonds proposes, with its financial P2P network and financial hashmap. Absolutely.  As gavin said,     To take one example, I don't want to be the centralized decision-maker who      figures out who should or should not be on the bitcoin-press mailing list that      is on the bitcoin.org homepage any more.The bitcoin.org homepage is already moving in the direction of multi-client, in fact: http://bitcoin.org/clients.html  Hopefully there is a better process for choosing the default client on the main page (or simply those front-page links get removed).We want to make as much of the facilities as possible decentralized. It is simple observation.  The self-supporting route was already tried.  Bounties continually fail on this forum, as well as outside.  I have personally paid over 15,000 BTC of my own money in bounties, to juice the bitcoin economy.  Have you?For KickStarter, every single example is a single burst of money.  That is by definition not a predictable stream of income, year after year.  Any sane developer trying to support a family will prefer a predictable income.Put on your thinking cap (and take off the tin foil one).A group of free individuals created a voluntary organization.  The free market did decide.The world is full of example where free-market, profit seeking companies get together in a neutral, members-based trade organization for topics of mutual interest.No, this is open source, free market -- instead of whining you could do something.If there is a critical mass of people who dislike the Bitcoin Foundation, band together and propose alternate or matching funding.  Then propose your own development funding scheme.Or fund your own team of developers, independent of BF.It seems if the dev team were rational economic actors, a proposal ofLet BF fund 50%Let hazek's foundation fund 50%Therefore, no one entity can claim >51% control over fundingcould be economically in their interests (more diverse funding sources) and placate some of the bitcoin forum critics.You are, therefore, assuming failure when in fact there are many possibilities for a do-er.The community will follow a good idea, especially right now, before the supposed BF-led drones take over.1) BF is a voluntary organization.  You are forced to swallow nothing.2) The challenge is, as always:  provide a better solution. Yeah, it is silly and not realistic for any large software, because your maintenance effort scales up to involve tracking $N third party repos for security fixes and other updates.When Fedora or SuSE Linux distros push out zero-day fixes for OpenSSL or zlib, for example, your project remains vulnerable. Yes, agreed.Fully decentralized would mean any two users may meet at any time, and there is an efficient method of advertising (bids, asks) and meeting in the middle (transacting).Creating your own exchange, due to lower barrier of entry, simply means it is less centralized.  As you can see with, e.g. MtGox, being able to start your own exchange does not imply lack of defacto centralization. Well, it is trivial to watch stolen coins move through the blockchain.  You don't know who has them etc.
No, that is the opposite of elegant:  it adds blockchain bloat that is difficult to recognize or avoid or prune. Not sure "screwing with the blockchain" is accurate or fair.Merged mining is preferable to colored coins, because you do not bloat the blockchain with person-to-person property transfers.However, colored coins offer the unique advantage of being automatically swapped for bitcoin payment.It is a trade-off.  Merged mining is far more scalable, and many discussions about creating a "data chain" for timestamping have been discussed. You could experiment on testnet, or use testnet-in-a-box. If you want to check and see if you have corrupt files on disk, you may start with Code:-checkblocks=0 -checklevel=6Stopping and restarting the client will freshen the set of peers, in case you are stuck on something network-related.Watch debug.log for progress (or lack thereof). Bleh, hopefully a centralized solution like "trusted online wallets" is not preferred over a safer, more decentralized solution.If the coins are not easy to store in a safe, decentralized manner...  blame us!  Keep the heat on.  We need the best user experience possible.  Ideally you want to make it hard to not store your coins securely. WRT Tor and anonymity, it is still not easy:1) Protocol fingerprint shows you are using the bitcoin protocol2) If coins are not mixed perfectly, you can be vulnerable to network analysis. Centralized, privacy killing, often hacked website users do too.  They hand their votes, in big thick metaphorical bundles, to the website operator.What do you think is the result of creating obstacles to improvement and distribution of the decentralized client?  People will switch to easy-to-use websites and forget all about that silly decentralized nonsense.I would rather see focused resources put towards scaling the Satoshi client, keeping the network running under the strain of doubling data volumes and completing the Satoshi vision with SPV mode.Seeing the scalable Satoshi client (or compatible client!) in the hands of as many people as possible is the only way to ensure bitcoin's survival and thus the only way to ensure bitcoin's monetary freedom remains with us. That's the best we have.  All systems are ultimately human systems.  Bitcoin is just another system for humans voting on something.Bitcoin works without central authority, but only by replacing that with mob rule... with all that entails.Why do you do think we have code to spread network connections as widely as possible, guard against Sybil attacks and the like?  The entire blockchain (your money) is only as safe as the voting procedure (network peer selection).Well, that is disappointing...  but we are open to suggestions!What is a sustainable way to help fund devel, testing, network defense, security patch response, etc.?  Bounties fail.  KickStarter-like provides unpredictable bursts.  Anonymous donations are a beer-money tiny trickle.  Self-supporting through for-profit ventures steals developer focus and introduces clear, direct conflicts of interest (as opposed to indirect conflicts of interest through a trade association).On the other hand, voluntary visible donations through neutral trade organizations are a well worn path.What are the other realistic, sustainable alternatives are available?Maybe you haven't been paying attention to the wonderful stats that dooglus and others have been posting, but we need some serious engineering to avoid incentivizing users away from the P2P clients and towards centralized, privacy killing websites:One single gambling application has doubled the size of the blockchain in the past 4-6 monthsThe reference client, the "full nodes" keeping the network alive, is feeling the strainA punishing blockchain download may incentivize users away from P2P clients, towards easy-to-use websitesResultant P2P node counts decline, reducing decentralization factorWe are racing to implement ultraprune and other changes to address some of the scaling issues.But the most important part of Satoshi's design, the part that keeps the network scaling further -- SPV mode -- was only lightly sketched by Satoshi.  SPV mode enables anyone to be a fully decentralized P2P client, even on your mobile phone.It is a race to fully implement the decentralized design, otherwise users will simply not bother with apps at all and go straight to mtgox.com or instawallet.org or blockchain.info.  And even that is a race, to "seed" bitcoin across the world, making sure it is sufficiently entrenched before the inevitable legal and governmental and central banker push-back.So frankly I do not think many critics in this thread even comprehend the Clear And Present challenges looming, just to keep bitcoin alive and decentralized.The critics here are worrying about phantoms, tilting at windmills, while missing the freight train heading straight for you.  Every objective measure shows that Gavin and the rest of the devs are working as hard as we can to keep decentralization in your hands.The Bitcoin Foundation is the only entity that has stepped up to the plate with some real solutions that can help us complete the Satoshi design and scale beyond the next 12 months.  A truly decentralized solution, the private free market at work.If you don't like it...  fix the problem!  Start another foundation, and fund the dev team 50% matched with BF.  Or figure out another, more creative solution to solving the problems listed above. Yes it does -- see the previous "Aunt Tillie" example. You're right -- it is the community associated with the software that is vigilant.  The tools just help with the vigilance. Google "gitian", please. The devs would probably quit BF, I imagine.What does the protocol design say is possible?  What the majority of users want.  If the majority of users want IP tracking and a 400M coin limit, that is what bitcoin becomes.I wager the majority of bitcoin users will actively and fervently resist any such changes.  At least I hope so.(of course, if the majority of users wanted IP tracking or currency supply inflation, per manifesto I would quit bitcoin in a heartbeat, and hope you would too) Secret changes do not occur in the current system; that is the part being missed.Every git (or gitian, if binary) user around the world would instantly see the "secret" change. The bitcoin-development mailing list at http://sourceforge.net/projects/bitcoin/ currently has a thread discussing bitcoin testing.We welcome -- and need! -- more people testing the software. Bitcoin design was the answer, because bitcoin design is directly relevant to why these fears are unrealistic, paranoid fantasies.Satoshi created a design that enables open review, and gitian enhances that with provable binaries.Any "government pressured" back-doored executable file would be immediately noticed by the community, with cryptographic certainty.Aunt Tillie might wind up downloading bitcoin-paranoia.exe, but soon all hell would break loose, and forks would appear immediately.  Users would vote against bitcoin-paranoia.exe with their feet.  It is a self-correcting system.That's the beauty of Satoshi's design:  they do.  If a judge or a man with a gun orders someone to add IP tracking, the system is designed to make that immediately apparent, and route around that. And the community would reject any version that added such IP tracking.  As they should.Each user's use of bitcoin software is a vote to accept or reject changes.  If community does not like the changes coming down the pipe, they won't use them!  Every single change is public, out in the open for inspection.  The process for firing Gavin and any other dev is therefore simple.git and gitian guard well against "include an IP address with every transaction" back doors. Read https://en.bitcoin.it/wiki/AnonymityWhat is dangerous is telling an activist in an authoritarian country "bitcoin is anonymous" without further detail.  They believe you, and then get arrested or worse.Satoshi never claimed bitcoins were anonymous.  They are pseudonymous, and with a lot of work, can be mostly anonymous.  The bitcoin design permits what it permits, and prevents what it prevents.Government pressure does not change that.  Government pressure cannot magically compromise SHA256 or ECDSA -- that's the whole point of the system.The system works how it works. You're right that colored coins alone do not enable the tracking of buy/sell orders.The distributed bonds example describes how an added layer would enable this.Distributed bonds are just a special type of colored coin; the concept is the same. In October, it was written "Assuming there is rough consensus that a Bitcoin Foundation is a good idea, I would like to get something imperfect up and running quickly, with the expectation that it will evolve over time."
The timing of each confirmation is dependent on the network, not your client version.Sometimes blocks are confirmed more slowly, sometimes blocks are confirmed more rapidly.It is only the targetted average that is 10 minutes per confirmation.  This is a target that the network is always striving for, but -- due to probability -- never attains. Where did Gavin use the word "official" that you just quoted?  Be precise, please. Anarchists... unite! Yes, let's be precise.  You go first."The plan"...  what, precisely, was done in private and unexpectedly?  A large amount of details are simply obvious, falling out naturally from the creation of a legal entity:  You have to choose a name.  You have to file paperwork with a government in a physical jurisdiction.  You will be dispensing funds, thus you will need to collect some funds from initial funders and board members.A members-based trade organization for open source projects is a common sight, with a familiar structure.  Simply saying "foundation for bitcoin" tells you it will probably look and work like Linux Foundation, Apache Software Foundation, Tor Project, GNOME Foundation, etc., etc.So for anyone remotely paying attention... the plan and likely details are quite public.The only private detail I can see is simply the Board, funding and members present on Launch Day. This is reasonable -- I had suggested this to Gavin myself, e.g. Bitcoin Foundation pays Gavin Super Stud Dev, Inc. My suggestion was related to tax treatment, though other separation advantages may be apparent.However, this is intimately tied to Gavin's personal compensation setup, and touches in the realm of personal privacy.So this belongs in the "reasonable, but medium term suggestion" category.As a members org, I think it should be up to the members what it is called.But quite seriously...  let's hear some better names.  A suggestion of "change this" is vague.  Be specific about what the name should change to, and you have a basis for discussion.As an opt-in, private organization, members will self-select their behavior here. That is the rub:  when you find a better mechanism, yes, it will get used.At present, distributed, crowd-sourced, anonymous donations not tied to any organization do not tend to yield anywhere near the amount necessary to pay a full time developer on a consistent basis, much less a team. The plan was openly discussed.  And then linked in the OP.It is self-evidently misleading on the part of critics to portray the forming of a foundation as a "secret plot."  11 months ago the forum saw "I would like to get something imperfect up and running quickly, with the expectation that it will evolve over time."And that's what you do:  you find a group of people that can get something going, do-ers rather than talk-ers, and you pool initial funds and file legal paperwork.  If problems are found, you change.Otherwise nothing gets done, outside of rampant bike shedding over names and other superficial details.  "THE Bitcoin Foundation"?  "A Bitcoin Foundation"?  "A Bitcoin Group"?  "Cream of Mushroom Engineer"?At some point, it is better to do and get feedback and fix mistakes in an iterative process. It is a meaningless question, whose only possible answer is vague, not quantifiable, and entirely within the realm of politicians not engineers.But even as such, this answered the question.  Staying within Satoshi's vision is a clear limit on power.  Staying true to the protocol is a clear limit on power.As to the name...  come up with a better one that (a) doesn't sound lame and (b) doesn't sound ominous to other forum denizens. It is factually incorrect to call bitcoins anonymous.  See https://en.bitcoin.it/wiki/AnonymityEveryone from the EFF to the US Department of State recommend Tor for activists to secure their communications.What if that same activist, hiding from an authoritarian government, hears "bitcoin is anonymous" with no further detail?  They will get caught, by protocol fingerprinting, network analysis and other techniques.You have to employ several techniques over and over "using bitcoin" to achieve reasonable anonymity. This secret plot was openly discussed in this thread. That "broken compatibility" statement is factually incorrect.  Old clients may continue to communicate with the network just fine, and old bitcoins may continue to be spent.The fee changes referenced were not protocol changes. While agreeing with a lot of your points, this must be emphasized:The core team does not "report to" anybody.It is entirely possible that the Bitcoin Foundation and core dev team will disagree on some issues, as they are separate entities, of separate minds.The Bitcoin Foundation is not going tell the dev team what to do. Figure out how it happened, gather details, file a police and FBI cybercrimes report.Make sure the method of theft is not still open. +1 Well, let us not close off the option of governments adopting a currency like bitcoin.Think long game, as I pointed out in the mini-manifesto posted earlier in this thread. Well and succinctly spoken, +1 You can go back pretty far in the git history.Even the old pre-git subversion changes were imported. Absolutely.  That's a bit of what I just pointed out in "My rambling bitcoin mini-manifesto." Bitcoin needs protection from the Powers That Be until it is successfully established.  Right now, bitcoin is weak, and needs as much protection as possible until it is thoroughly engrained, established within our world.  This is the same reason why Satoshi did not want wikileaks donations.Think long game, people.Bitcoin is a new, game-changing concept for the world.  It potentially means monetary freedom for millions (billions?).  We have had a decentralized world currency before -- gold -- but bitcoin has many features even gold does not provide.  You cannot memorize gold (brain wallet) and transport it with complete privacy.Bitcoin is more stable than some real-world African fiat currencies.  Mobile phone technology is rapidly spreading across Africa, to even places where electricity and Internet do not reach.  Monetary freedom provided by bitcoin could transform lives in Africa today.Bitcoin enables border-free remittances for near-zero cost, enabling rich Asian and Western countries to send their poorer relatives bitcoins -- less money for the Western Union middlemen, and more for your relatives.Most of all, bitcoin is a truly unique, young gem of an experiment:  a currency (commodity?) supply that will slowly increase to 21M, then remain.  A decentralized currency, whose supply is validated by the global userbase and not adjusted at a whim by an elite few central bankers.That experiment deserves time to take root and grow.A heterogeneous mix of nation-state and decentralized currencies will provide a healthy check-and-balance ecosystem for world currencies.  With greater knowledge born of field experience and competition, each currency may learn from the other.If the Bitcoin Foundation can buy bitcoin some time to get established, while staying true to the original Satoshi vision (decentralized, global, 21M), it seems worth it.  There is no objective evidence that any of the founding members have or want to deviate from Satoshi's vision.A decentralized, join-if-you-like foundation works well, and is an established model proven successful in other open source projects like Tor or Linux.  If you have multiple parties who might have conflicts of interest, organizing a neutral entity is a logical step.  However kind, it is ethically questionable for Intel or AMD to directly pay Linus Torvalds' salary.  The Linux Foundation exists as a neutral entity, neutral ground where otherwise competitive interests meet for the good of the ecosystem.  It does not erase conflicts of interest, but does serve as an open, transparent body of action.If any of us ever deviates from Satoshi's core vision... fire us.  Please.  Satoshi gave you the power.  Refuse to upgrade or choose a new client.  Vote with your feet, your computer and your wallet. You are simply engaged in fact-free trolling.There was a thread on the forum discussing the idea of a Bitcoin Foundation:https://bitcointalk.org/index.php?topic=49841
If you think BF changes anything about how bitcoin-the-protocol or bitcoin-the-software will work, then you simply never understood how bitcoin worked in the first place.Satoshi designed the system so that you would not have to trust the developer (him, a total unknown, pseudonymous individual).The dev team, by introducing git and gitian use, has made that compact even stronger. The Foundation never claimed to own any of these.  git repository access policy will not change.  Some devs will be paid by the Foundation, and others won't.I'm quite happy with my day job as a kernel hacker, and don't forsee leaving there;  that makes me a "community dev" for example.  (though I'll certainly accept beer money donations and the like... see sig)It is a bit mystifying though that there is a complaint about the devs having a public, transparent source of funding (BF) as opposed to the current situation of no-funding or no-transparent-funding. You have a confused concept of "private":Founders: https://www.bitcoinfoundation.org/about/boardBylaws: https://github.com/pmlaw/The-Bitcoin-Foundation-Legal-RepoMission statement: https://www.bitcoinfoundation.org/about/Allocation of salaries: nothing is being paid yet, AFAICT from reading this threadIf you want to have a say in a self-organized group, become a member.  Or create your own foundation.That's the beauty of the free market. Sorry, none of this has been suggested or wanted.Any Bitcoin Foundation that I am a member of had better suggest decentralized solutions to merchants and users.One idea has been a turnkey open source kit for merchants, where bitcoind + paypal-like HTTP API is provided as software the merchant runs at their own location, 100% within their own control. No it is a silly correlation.Did actor Harry Morgan leave this Earth in 2011 because Gavin was going to speak at the CIA in June 2012?  One event happened before that other, so you never know.... </sarcasm>Satoshi had backed away from the project in December 2011, only sending a few scattered emails after that before finally disappearing. Bitcoin-OTC Because the majority of customers and businesses are law-abiding in their country.  If you want to reach a mass of customers, you play by the rules. Unfortunately that is damned-if-you-do, damned-if-you-don't.If this was announced without any supporting organizational structure, website or plans, it would get flamed to hell and back.I think it is better to have something in place, and then accept criticism and be flexible and change as the community wants.The organizational version of "show your code", if you will. No, I mean just what I said:  a majority of users.Frankly the conspiracy theorists should be far more worried about pool op power.We devs have to beg and plead just to get support for any network-wide feature...PS.  Use p2pool! No, indeed.  You seem to be one of the sane critics ;p It is a community where everybody is free to speak their mind, including banding together to speak collectively.laissez faire at its best, really.I think most of the negative reaction comes from one or two high volume posters, probably imported from the SomethingAwful forums  No, it would not pay for itself.   And that is an important economic incentive.If you "shut down the network" then bitcoins have no value.  The attacks costs a lot, for little direct monetary return.You can spend money and crash the value, or spend money and crash the network.  But make no mistake:  you are burning money that will not come back to you. https://www.bitcoinfoundation.org/about/board gives some info.As to CIA silliness:  if you cannot trust code written by a pseudonymous individual named Satoshi with unknown backing (CIA? NWO? Taco Bell? who knows?), it is not likely you will trust a lead developer using his real identity.*plonk*  into the Atlas file with you. (bits copied from other thread)I think you are missing how bitcoin software development works right now.  All source code is open, and widely reviewed.  We make it easy to fork the code, and find a better way than our own.  The moment Gavin or anyone else introduces code the community dislikes, the code will get forked and the community ignores the changes.Nothing in bitcoin happens without the consent of the majority of users, and that is by design.The bitcoin design is used and trusted because it is open and available for deep study.  Nobody needed to know who Satoshi was -- they only needed full access to the software, for review.For the technically minded, there are further processes in place to guard against hackers, or evil CIA-funded developers, adding backdoors to bitcoin:Other bitcoin client implementations exist, besides the "reference client" originally written by SatoshiFor the source code, we use git.  Just like the bitcoin block chain, git is a chain of hashes.  Each and every change is protected by a hash.  Anyone following git in a decentralized fashion may see and verify all changes.  Any "back door" is quite public.For the binaries, we use gitian, so that outside parties may independently verify dev team binaries precisely match their locally-built binaries.  Bitcoin binaries from the dev team are not published until multiple sig matches appear. There is a cool bitcoin KickStarter feature, just waiting for someone to employ:  Create a transaction that (say) sends 10500 BTC to Gavin, with SIGHASH_ANYONECANPAY marker.  Send it around.  Anyone may add a signature... but the transaction is not valid until the inputs reach 10500 BTC.However, for now, a foundation is the method that has proved successful in providing ongoing developer funding for other open source projects, even as funding sources themselves come and go.Even KickStarter does not provide ongoing funding, only bursts.  Not the model of stability that an engineer wants to raise a family on... That is precisely what is happening:  part of that community is banding together, in a free market opt-in way, to collectively fill in the basic gaps -- like actually paying devs for their time, or paying for testing -- because that is otherwise not happening right now. Sure.  Absolutely.While bitcoin is small, as it is today, bitcoin is vulnerable to manipulation just like any penny stock.A large buyer can cause the price to rocket through the roof.  A large seller cause drive the price to pennies.There are stories aplenty about hedge fund traders, daytraders and others manipulating the price of a stock, simply because they had the funds that gave them the financial ability to do so. Wow!  +100 thereYou gotta walk the walk. Adding new features or policies can and does happen.  See, e.g. BIP 34, which adds the block height to the coinbase transaction found in each block.Minor feature changes that do not cause a hard fork are feasible.  Anything that requires a hard fork requires major software upgrades and major community consent.  An intentionally high barrier. Overall, great press.  My household has a subscription; looking forward to seeing it.
At the moment, the vast majority of the dev team (all?) get paid... nothing at all for working on bitcoin.We're fortunate to have the chance to pay Gavin to devote his full attention to bitcoin.  Another developer might be securing permission to use a small part of his work week on bitcoin.Paypal, the US dollar, the Euro, etc. have collectively thousands of programmers to work on keeping it all secure.  We have the world's first decentralized global currency, and we have... a few unpaid devs.This is where the Bitcoin Foundation can really help. One confirmation takes, on average, 10 minutes.Sometimes it is faster, sometimes it is slower, as the network and probability constantly adjust. This is incorrect.Bitcoin client users vote by accepting or rejecting P2P network transactions to relay and include in blocks.  Each bitcoin client validates the block chain independently.  This is why bitcoin is decentralized.Miners have power to include or exclude transactions in blocks.  Thus, a super-powerful miner may DoS the network by excluding all transactions, but they cannot change the rules.The collective will of the bitcoin clientbase dictates the rules for validating blocks and transactions. Any miner may choose to include any valid transaction within a block.  Zero-fee and non-standard transactions are valid transactions.What is relevant, though, is what this Five Questions blog post is telling users does not match with common user experience.  Expectations must be set properly."0.001% of the fee of any modern USD payment processor" would get the point across without misleading. Yes.Each transaction's hash is incorporated into a hash tree, whose root is stored in the block header.  Every new transaction changes that merkle root.Remember that you don't "lose" any progress, or work, by hashing a different block header, with an updated merkle root.The probability of finding a hash is the same either way. Yep, we are desperately in need of the most basic things...  like paying the salary of the lead developer.Bitcoin is big enough that we can all get together and support things like that, I hope. Big sigh.Though the paragraph does go on to mention bitcoin thefts, it fails to distinguish between the secure-and-unbroken currency and poorly secured wallets. No, it doesn't simply wait a long time, it simply does not get relayed.Further, you cannot add anything once the transaction has been sent.Negative rate?  You are describing a hypothetical service layer on top of the bitcoin network that does not exist. This sounds like an excellent opportunity for education Why is the above not true?For the source code, we use git.  Just like the bitcoin block chain, git is a chain of hashes.  Each and every change is protected by a hash.  Anyone following git in a decentralized fashion may see and verify all changes.  Any "back door" is quite public.For the binaries, we use gitian, so that outside parties may independently verify dev team binaries precisely match their locally-built binaries.  Bitcoin binaries from the dev team are not published until multiple sig matches appear. JFYI, copying from another thread so everyone stays on the same page...pybond will also be a colored coin implementation, with a subset of colored coins being distributed bonds.  Have a lot of networking boilerplate to write first; the basic design is simply following "rules for colored coins" and "atomic coin swapping" though.P.S. My name for colored coins is "smartcoins."  Sexier, more marketing friendly name ;pOther thread references:Rules for colored coins - https://bitcointalk.org/index.php?topic=106449.msg1203918#msg1203918Smart property - https://bitcointalk.org/index.php?topic=41550.0Distributed bonds - https://bitcointalk.org/index.php?topic=92421.0Atomic coin swapping - https://bitcointalk.org/index.php?topic=112007.0On the wiki:https://en.bitcoin.it/wiki/Smart_Propertyhttps://en.bitcoin.it/wiki/Contracts Great stuff.  Glad to see others working on this.pybond will also be a colored coin implementation, with a subset of colored coins being distributed bonds.  Have a lot of networking boilerplate to write first; the basic design is simply following "rules for colored coins" and "atomic coin swapping" though.P.S. My name for colored coins is "smartcoins."  Sexier, more marketing friendly name ;pOther thread references:Rules for colored coins - https://bitcointalk.org/index.php?topic=106449.msg1203918#msg1203918Smart property - https://bitcointalk.org/index.php?topic=41550.0Distributed bonds - https://bitcointalk.org/index.php?topic=92421.0Atomic coin swapping - https://bitcointalk.org/index.php?topic=112007.0On the wiki:https://en.bitcoin.it/wiki/Smart_Propertyhttps://en.bitcoin.it/wiki/Contracts Yep.General opinions on IRC and "in the hallway" (at conferences) are that p2pool is preferred over pools, because p2pool is decentralized.  We appreciate pool operators -- bitcoin wouldn't be where it is without them -- but those tend to be centralized operations where the pool operator is in a much greater position of power over the network than most other users.  Recall that Deepbit had over 50% network power, at recent times in bitcoin's history.The pool operators of the largest pools, I'd say, are even more powerful than Gavin or any other dev.  We have to beg and plead, just to get things like P2SH deployed.p2pool is decentralized and does not place huge amounts of power into any one hand.  If you mine... please try p2pool! None of bitcoin's fundamentals have changed.Users continue to vote based on their choice of bitcoin client.If users suddenly dislike a commit from Gavin, they are free to choose another client.Just as they were yesterday. exMULTI, Inc. is a registered, tax paying North Carolina corporation, solely dedicated to bitcoins.One person company, too.  No shadow investors or mysterious step fathers involved, just me  1) My post never claimed that it was possible for copyright to be "taken"2) Existing practice and precedent on copyright is that just a line or two (i.e. one-line bug fix) might not be copyrightable.   i.e. lawyers continue to disagree, but he-copyrights-just-that-one-line is not taken very seriously even by those lawyers who are paid to defend copyright. +1OP is a bunch of conspiracy silliness.Though jimbobway and others are absolutely right that bitcoin is bigger than any foundation.  And that's the way it should be! Exact-a-mundo ;pSmart property simply proves that you "own" a digital token, nothing more.So, as such, I think it is less like DRM that protects Apple's iTunes.  Nothing is encrypted, you are simply proving ownership.The system that connects "proven ownership of digital token" to something useful is left open.  It could be as simple as "if you hold this token, I will pay you bond interest" in the distributed bond case. No, it is simply factually incorrect.To send bitcoins on the bitcoin network in small amounts, a fee is required.  Requires non-zero fee is precisely the opposite of "zero fees."Do not set up new bitcoin users to be disappointed, by selling them "zero fees!!" then letting them discover on their own that reality does not match hype. Bitcoin Foundation != dev teamWhile I hope the Bitcoin Foundation will address critical immediate needs -- like paying Gavin to work on bitcoin -- fiddling with the copyrights does not seem within the claimed Linux Foundation model.  The Linux kernel is copyrighted by the individual authors, not by the Linux Foundation.  It seems logical the code would stay the same.After all, the code is not just the dev team, even...  it is every contributor.  And every code contributor wrote has written more than a couple lines of code has a copyright claim.Full disclosure:  yes, I joined the foundation as a lifetime member. That is the trade-off.  GBT is far more compatible with existing software.  Stratum is a wholly new protocol requiring wholly new transport implementation, but it gains some efficiency over HTTP.
The pragmatic solution is to support both GBT and stratum, in mining software.Both are already deployed, and stratum seems to currently be winning the race for deployments.GBT is supported in bitcoind and p2pool, and has gone through the BIP process and more review, so a choice seems valid.  GBT is also more easily deployed in existing software, as it uses the more standard HTTP JSON-RPC that miners are familiar with. Please do keep us posted on any experiments.We need $A_Solution for timestamping data that does not involve storing new data records (transactions) in the main bitcoin block chain.My mental analogy is to a steam boiler.  Pressure is building from the community, to build all sorts of exciting digital notary / securely timestamped services.  We need a release valve, otherwise the bitcoin blockchain will simply boil over into a very expensive, inefficient method of instant messaging. If there is sufficient value attached, or potential for it, pool ops have been interested in the past.Especially if a lot of well known developers were behind a data timestamping service standard. Yes.  There are several push-data opcodes, the basic format looks like     <size of random bytes to push><random bytes>There may be many different data segments, e.g.     <size of data field 1><data field 1>     <size of data field 2><data field 2>     <size of data field 3><data field 3>nVersion 1 blocks may have any random bytes (subject to the push-data rules above).nVersion 2 blocks must have the block height as the first pushed-data object.See https://github.com/bitcoin/bitcoin/blob/master/src/script.cpp source code or on the wiki https://en.bitcoin.it/wiki/Script#Constants for more details. Just import Gavin's key once, rather than once each time you run the script. Someone appears to have uploaded video: http://www.youtube.com/watch?v=llKedWKdvU8An unexciting recitation of slide material really ;p Absolutely.  That is a perfect example of decentralized action at work...  we need as many people as possible checking these things. A single server doesn't help much against DDoS, and bitcoin sites have often been DDoS victims in the past.Multiple servers + active admin team can do it...  but at that point you've just reinvented SourceForge or CloudFlare.If you go through a DDoS hardened proxy, you are back to trusting SF/CF/... Sigh.  Come on Erik.  Most of the article is pretty good, but a few key bullet points are quite misleading.This is untrue, especially if they follow your lead with...which will require a fee, because microtransactions of low value will not otherwise be relayed.Why?  Satoshi pointed this out in his original paper, that bitcoin is not so great for microtransactions. Who says they have to be a fed at all?A lot of electronic intelligence action happens at private contractors, I wager. Yep. There are very few people who are on my ignore list.  He's one of them.  That "ignore" button in the left column profile area comes in handy  That is fine with the smileys and all...  as long as you realize these expectations are unrealistic and far beyond what major chipmakers like AMD and Intel guarantee. Adding extra data to the coinbase transaction found in every block is just fine.  That is how merged mining is accomplished today, and it is a scalable method of adding unlimited amounts of data to each block. Or green addresses. It should be in "troll - garbage". And the answer is probably predictable (I'm guessing, no inside info): "yes, but you void your warranty, fry your hardware, and have to deal with lockups" This is doable in a decentralized manner.  See https://en.bitcoin.it/wiki/ContractsIn particular, this specific example applies: https://en.bitcoin.it/wiki/Contracts#Example_4:_Using_external_state After big chip makers like AMD or Intel manufacture a chip, they run it through production quality control testing.  A chip that is theoretically the same as another chip may exhibit different behaviors under stress.  As a result, some chips in a batch may be binned and sold as 3 Ghz chips.  Other chips in the same batch, that did not perform as well in testing, may be binned and sold as 1.5 Ghz chips.It is very realistic and following standard commercial practices that the same chips from the same batch might run at slightly different clock speeds, to avoid manufacturing imperfections or whatnot.So perhaps Jalapeno units are 5 Ghash/sec that did not pass quals at top speed, but do pass quals at lower speeds.Any sort of scenario like this is possible, standard for chip manufacturing, and not "cheating." It is positive for bitcoin as a whole, assuming the S.E.C. only targets those breaking existing laws, and not simply all bitcoin users.There are many legitimate, lawful uses of bitcoin and it can only be a good thing for that to be on the record.It was clear to anyone sane that Pirate's returns did not match anything in the known lawful universe.  Or to quote Gavin,
Correct.  Once the initial merged mining pool server setup is created and tested, it is very easy to add new merge-mined alt-chains.  Pool users get extra rewards, with no extra work on their own part.This does not detract from the earlier poster's point that alt-chains are generally worthless or scammy or both. Yes, this sign-message capability is available via the GUI interface or RPC API.ECDSA signatures and keys also tend to be smaller than PGP-used forms.  That was one reason why Satoshi chose ECDSA.And, double plug, distributed bonds and smart property use bitcoin signatures already. The python implementation pynode does not have any notion of serialization differences between the two, either.  pynode successfully imports bitcoin-generated blk000?.dat files, as well as talking on the network.Perhaps this was for future expansion?  I would love to know any differences, myself. A major component of this is distributed bonds.One implementation, pybond, should have basic distributed bonds working within a week or two.With distributed bonds, you don't have to worry about your exchange going under, and taking all the bonds with you.Anyone with software that reads the distributed bond format may set up an exchange. Hardly.  BFL was mentioned because the OP is an ass who wants to make trouble.GLBSE is a reasonable target for a Ponzi investigation, as it was a vehicle for making investment in Pirate very easy (via PPT's).Mind you I'm not claiming GLBSE is guilty of anything...  just noting that reasonable people can understand why GLBSE is receiving attention from Ponzi investigators. Because of all the pirate pass-through bonds that were listed on GLBSE, one presumes.Gotta investigate, to determine if GLBSE was a "front" or "enabler" for Pirate's BS&T. See the rules for colored coins, linked above. ECDSA keys provably demonstrate who owns what.  It uses the same technology as the rest of bitcoin. JFYI...  we currently own two single family homes, right next door to each other.  We are trying to sell the smaller of the two, but renting it out has crossed our minds.  Many of our friends are landlords, too:  young, a little bit of financial headroom, own 1-2 properties.The main thing that stops us?  Being landlords to our neighbors.  Two data points:1) My story:  About a decade ago, when I was a renter, I lived next door to my landlord, who seemed a very reasonable fellow.  Late one night, I heard banging on our door.  It was the landlord's girlfriend, who had just been beaten by the landlord.  We protected her, called the police, who came and carted the landlord off to jail.  The next day, the landlord was out... and served us immediately with eviction papers.  It was a fraudulent eviction, I called our sexy attack dog lawyer, and things got legally nasty for a while.2) Friends' anecdotes:  As a landlord, they say, you will eventually evict someone.  It is inevitable.  Therefore,Follow eviction procedures in the lease to the letter.  Do not give second chances, accept partial payments, etc. or they will bite you in court.If you rent to friends, remember you may have to evict that friend.If you live near the property, you have to live near someone who hates you, for kicking you out of "their home."So go for it... as long as you are not next door neighbors to your renters. Inaba is correct about the database access needing multi-threading, or to be more technically correct, database access needs more than one database client connection running in parallel.Ditto for downstream bitcoind access -- pushpool should probably contact a farm of bitcoind's, not just one. Speaking as someone who is implementing this right now...  it is very elegant.One of the rules that will be encoded into pybond isA bond (a colored coin / smartcoin) is never zero-value (nValue==0 in CTxOut)Thus the value is intentionally dependent on bitcoin.  It raises the cost of creating each bond above zero, thereby creating an incentive to be conservative with your bond / smart property issuance.  It also serves as a fee signal (it is required to pay a fee to transfer tiny amounts of bitcoins), further discouraging spam and flooding, and encouraging efficiency.1000 bonds requires a minimum of 1000 satoshis.  A value of 3 satoshis may mean (this is bond-dependent) that the holder carries 3 bonds. Sure.  It could monitor whatever metrics you need, on the bitcoin network. What does Electrum use to talk to bitcoind?   pynode provides a JSON-RPC HTTP server interface, just like bitcoind... Longpolling is a very elegant and useful... hack.  It is a hack because HTTP clients typically initiate requests, and elicit server responses.  This HTTP client behavior does not cover server-initiated messages that the client is not expecting.Longpolling says "wait, until the next server-initiated message to me"Most custom designed protocols support server-to-client asynchronous messages, so there is no need for the hack. Thanks to socrates1024, pynode got a much needed upgrade from python's asyncore to the more modern gevent.  This opens the door to easy multi-peer operation, so expect full node status very soon. Yep, SIGHASH_ALL was the bit I was missing.  Looks 100% possible to do this, indeed. Yeah, tucked into a bit of a corner it is, away from other documentation on signatures and scripts.Might warrant its own page, or at least a reference from the Scripts page, for an enterprising volunteer.Anyway, it definitely works for this purpose, solving the problem. It sounds like SIGHASH_ALL is the hidden magic solution, that prevents parties from reordering or tampering.Edited example accordingly.Documentation on SIGHASH_*, particularly on the wiki, is severely lacking. Certainly it is part of the same transaction.  Let us adapt the example from the Smart Property thread:Definitionsprevious-txout 0: "smartcoin", standard send-to-pubkeyhash, nvalue==1b5bb9d8014a0f9b1d61e21e796d78dccdf1352f23cd32812f4850b878ae4944c,0previous txout 1: normal transaction, standard send-to-pubkeyhash, nvalue==1000007d865e959b2466918c9863afca942d0fb89d7c9ac0c99bafc3749504ded97730,0smartcoin seller        pubkey for to-be-sent smartcoin (CK)        pubkey destination for smartcoin payment (SK)        smartcoin required price (P): 100000smartcoin buyer        pubkey for to-be-spent payment (PK)        pubkey destination for smartcoin (BK)Round 1, smartcoin buyer and seller agree on a transactionPresumably the smartcoin seller has <somehow> advertised for sale smartcoin b5bb9d8014a0f9b1d61e21e796d78dccdf1352f23cd32812f4850b878ae4944c,0 at price P.Presumably, the buyer knows how to create a standard 2 txin, 2 txout format transaction that the seller expects.The buyer and seller communicating this basic information is outside the scope of this discussion.Round 2, smartcoin buyer creates incomplete TX, sends to sellertxin 0 (smartcoin transfer)  prevout (b5bb9d8014a0f9b1d61e21e796d78dccdf1352f23cd32812f4850b878ae4944c, 0)  scriptSig = zero-length (null)txin 1 (payment transfer)  prevout (7d865e959b2466918c9863afca942d0fb89d7c9ac0c99bafc3749504ded97730, 0)  scriptSig = <PK-derived signature> <PK>, SIGHASH_ALLtxout 0  nValue = 1  scriptPubKey = OP_DUP OP_HASH160 hash<BK> OP_EQUALVERIFY OP_CHECKSIGtxout 1  nValue = 100000  scriptPubKey = OP_DUP OP_HASH160 hash<SK> OP_EQUALVERIFY OP_CHECKSIGRound 3, smartcoin seller signs TX, and broadcasts completed TX to networktxin 0 (smartcoin transfer)  prevout (b5bb9d8014a0f9b1d61e21e796d78dccdf1352f23cd32812f4850b878ae4944c, 0)  scriptSig = <CK-derived signature> <CK>, SIGHASH_ALLtxin 1 (payment transfer)  prevout (7d865e959b2466918c9863afca942d0fb89d7c9ac0c99bafc3749504ded97730, 0)  scriptSig = <PK-derived signature> <PK>, SIGHASH_ALLtxout 0  nValue = 1  scriptPubKey = OP_DUP OP_HASH160 hash<BK> OP_EQUALVERIFY OP_CHECKSIGtxout 1  nValue = 100000  scriptPubKey = OP_DUP OP_HASH160 hash<SK> OP_EQUALVERIFY OP_CHECKSIGDiscussionPotential attacks, neither resulting in a direct loss of value:Buyer may stall or refuse to send incomplete transaction (wasting seller's time and DoS'ing an issue, if the seller prevents other buyers from attempting purchases in parallel)Seller may stall or refuse to send completed transaction (wasting a buyer's time and leaving the fate of their coins unknown) This seems like a fair criticism.  There are two parts to a typical bond transfer,1) Owner #10 must create and sign a well formed BOND message to Owner #112) Owner #11 must create and sign bitcoins to Owner #10Each party is holding something of value, and wants to trade for the other thing.  What does game theory say?    Each party's action may be instantly validated, but who goes first?At this juncture, perhaps some readers may be directed to the just-created Atomic Coin Swapping thread, if they have helpful ideas.
gmaxwell was talking about colored coins in IRC recently.  They are potentially interesting in the context of distributed bonds, which I am currently pursuing with pybond.Here is the problem I am trying to solve, does the crowd have an answer?1. Alice transfers a 1-satoshi colored coin to Bob.2. Bob transfers 100 BTC to Alice.  May be restricted to 1 txout, if that eases implementation details.3. Steps #1 and #2 happen as a logically atomic unit, all-or-none.4. Alice and Bob must both approve this atomic transfer of coins, with appropriate signatures.Is this possible within the current bitcoin system?  As far as I can see, the answer is "no" but maybe I'm missing something.My best guess to the answer is "possible, but requires a new SIGHASH_* type"?It seems like atomic coin swapping has great potential.Edit: thanks, crowd   See below. Transactions and blocks both have version fields.  In the specification, rule #1 refers to transaction versions ("transactions with a version [...]") and the other rules refer to block versions.Yes.Correct.  extra-nonce and block-height are both components of the coinbase transaction's script.  The script may have any type of data added via OP_PUSHDATA* Just posted an offer in that thread.Whether or not debt resale occurs, a recommendation:An order of restitution should be clearly defined, e.g. "by account number of original debtholder, in numerical order" (random/fair) or "by account, sorted in descending order by size of debt" (big first, encouraging sale of this debt) or "smallest debt first" (help the little guy) or "by account creation time" (reward early adopters)This is necessary and prudent if the debt repayment will occur over time, rather than all at once.  Necessarily, reality dictates that some must wait longer than ones for repayment.EDIT Nevermind, I see you posted something on G+ about this ("if 5% of the funds are available for repayment then 5% of your original pre-theft balance will be unheld") Counter-offer: 100 BTCP.S.  If you wish to PM, please email jgarzik@exmulti.com rather than forum or IRC PM.  PGP key is on the front page of http://bitcoin.org/Edit: offer now closed. That is an excellent suggestion.  Various forms of debt are sold, with varying risks as to whether or not that debt will be repaid.  It has value. Do you have any more technical details?Does this apply with the 0.7 bitcoind upstream, with vastly revamped RPC? A lot of little strategies, rather than one big obvious fix.  DDoS typically involves flooding of some type of traffic.  A simple DDoS might be a flood of TCP/IP open-a-new-connection packets, designed to confuse and overload OS kernel networking software.  Other DDoS's are simply a massive amount of valid traffic, i.e. sending HTTP requests to compute-intensive script on the web server, over and over again, hundreds of thousands of requests per second.Each DDoS is different.  The traffic sources may come from different parts of the world, originate from different ISPs.  They may originate from a criminal DDoS black market, where armies of "zombie" machines may be rented by the hour to perform DDoS attacks.One thing is certain, though:  there is very little economic reason to pay DDoS ransoms, as that simply serves as a clear economic signal that you are a mark, and can possibly be taken for even more money.  Paying ransoms encourages further DDoS.  Criminal parasites don't need your business to be profitable and sustainable.Typically a business will take unspecified technical steps themselves, or hire a security firm or DDoS-proof hosting firm to do it for them.Sometimes it is possible wait out a DDoS, but that's not realistic for most web businesses/services.  It could take weeks or months, as the cost of zombies is probably below the several-thousand-bitcoin payout that other thieves have seen in the bitcoin press headlines. Of course, many people do not have time to check a bazillion different websites for news on every bitcoin business, either.  That's the reason the concept of a community bulletin board has existed for hundreds (thousands?) of years. A bitcoin is a crypto-signed message.The blockchain is an archive of signed messages. Many were mined by satoshi, who probably isn't out spending them ;p Surprising that mining has not yet moved away from difficulty-1 mining. To repeat, for the cheap seats:     testnet-in-a-box     http://sourceforge.net/projects/bitcoin/files/Bitcoin/testnet-in-a-box/testnet-in-a-box is a simple setup that provides a two-node network suitable for fully validated, off-network testing.  testnet-in-a-box testing is fully private, and will not disrupt mainnet and or testnet.Further, note that testnet has special rules just in case a miner blasts the difficulty through the roof, then disappears:Code:            // If the new block's timestamp is more than 2* 10 minutes            // then allow mining of a min-difficulty block.For BFL, testnet-in-a-box would provide validity testing without disrupting any public network. IRC ops, you mean.  IRC itself is easy to DoS.DDoS on networks is handled manually.  Most ISPs refuse to host IRC servers.  etc. More like testnet-in-a-box. It's not a waste of time.1) It raises the bar, deterring simple bots.  Even a bot with access to a mechanical turk will likely have to pay for said access.2) It reads books, doing a better job than OCR. No.Still pending. That last question was asking who built the previous, working version?  Who built 0.6.3?  Gavin, you, or other? You were asking for ~US$120,000.  Most people put a lot more effort in for that kind of cash. Random chance.  Sometimes miners find a new block within seconds of the previous block.  Sometimes miners find the next block an hour or two after the previous one.10 minutes is only the average target.Not sure what you mean by "flag" but ok  Well...* This is bitcoin, meaning the fees would not be anywhere near as steep.* KickStarter is not the same as pre-ordering.  Some rewards are equivalent to pre-orders, others are not.That sounds like a direct quote from a brick-and-mortar investment banker, trying to steer you away from KickStarter and other JOBS Act innovations.Dust off the inbred assumptions about funding...  we are reinventing finance here 
It sounds like PPoweredP wants a KickStarter-like system.  That way, investors are protected because a project will not fund unless it reaches the fundraising goals. The level of trust for any website -- be it mtgox, blockchain.info or whatever -- is surely lower than a decentralized client or paper wallet.  blockchain.info seems as much a SPOF as the infamous MyBitcoin web wallet.  (note: not accusing the site owner, just noting its vulnerability and untested nature)None of the other websites are as attack-hardened as mtgox, but even then, the recommendation for people storing large amounts of bitcoins (> 500 BTC) should be a decentralized solution.Yes, websites are easier for Aunt Tillie right now, as we've seen with MyBitcoin and Bitcoinica, storing large amounts of bitcoins there for extended periods can lead to large thefts.Be your own deposit insurance. Blockchain data is validated by every P2P node, miner or not.Thus, even a miner with 100% network power cannot rewrite basic rules that other users disagree with. Miners choose which transactions to include in a block.A valid choice is "no transactions" [besides the required coinbase transaction]. KickStarter has shown upfront financing can be highly effective.Sure, there are flame-outs.  That does not detract from the successes. Blatant guessing, based on:  number of claimed mtgox users, number of peer nodes on network, number of forum users, previous data posts around here, ...Not a reliable number at all.  Just trying to find a number that we could say "probably over X" Any chance of doing zlib-compressed JSON on the wire, rather than uncompressed text? hmmm, it sounds like there may be an OSX-specific problem.What is the previous known working version?Was that an official OSX build from Gavin, your own build, or a third party build?Thanks. Correct.And beyond that, the RPC API has never had the same ironclad backwards-compat guarantees that the blockchain and P2P network have.  From satoshi's time to present, RPC calls have been considered an internal control plane.  Compatibility with existing use cases is very important, even with RPC API, but sometimes there are exceptions:  deprecated, unused APIs; APIs where we've discussed and planned for changes ahead of time, etc. For the main client it is low priority.But in a blatant plug... https://github.com/jgarzik/pynode does support big + little endian out of the box. Just for reference, last year's talk (warning: outdated) is available at     http://gtf.org/garzik/bitcoin/2011/state-of-the-coin-2011.pdf Astute readers noted that the table of contents jumped from slide 10 to slide 12.The PDF in the OP has been updated to include a "Reality Check" slide, which was authored and intended to be presented... but due to an errant mouse click ("hide slide") was never shown. Or...When bitcoin value goes up, the incentive to mine increases.Just had a big bitcoin conference, with interest spreading.But most clearly, if BFL's ASICs are anything remotely to spec, mining with even 500 would be far more noticeable than the current hashpower increase. It is highly unlikely that a merchant would ever see a double-spend until it's too late.  The favorite double-spend example involves secretly mining a block containing the second transaction, TX #2, the double spend.  The merchant sees TX #1, hands out the goodies with zero confirmations, and then the evil thief releases his block containing TX #2.In the other double-spend case, where TX #1 races TX #2 across the network...  Presumably the merchant is well connected to the P2P network, receiving and broadcasting transactions normally.  Any double spend not sent in a block, but rather simply sent out to the network, would probably be rejected by all the merchant's peers.  The merchant would likely never see TX #2.  The moral of the story here is merchants should always be well-connected.Zero-confirmation transactions are fraught with danger and possible mischief.  We recommend against zero-conf transactions.It has been shown that even 1-confirmation transactions are within the realm of a determined attacker, so I would never go below 2 confirmations for anything remotely valuable.  But at that point...  if you can wait 20 minutes, surely you can wait 60 minutes for a full 6 confirmations.The merchant must simply ask themselves about their risk level:  if the transaction is low value, then will an attack cost more than the price of the good being sold (coffee)?  That is a business decision and not a technical decision.  Can you afford the occasional double-spent coffee, in exchange for convenience of zero-confirmation? Makes sense for new issues...  for existing issues, one presumes that a contract change -- even to add defaults -- requires shareholder agreement. No. A double-spend is not relayed by the network, nor accepted by miner.  That economic incentive does exist, though, you are correct.Also, one a transaction has been placed inside a block ("confirmed"), all nodes will refuse to relay a double-spend transaction for those same funds. Close.Each node decides what to relay, or not.  Miners have no control over relaying.As you say, the user does not have control over what nodes relay -- apart from knowing that "standard" transactions are likely to be relayed, and "non-standard" transactions are not likely to be relayed.Miners do have control over what transactions are placed inside each block, but that is a separate issue from relaying. That will always be a separate project, as far as I can forsee. That is one distributed bond effort, yes.There is no Official Blessed Distributed Bond effort; each developer just scratches their own itch.  In pybond's case, I am writing a basic distributed bond implementation, with no pay-to-policy stuff, just to prove the basics work.
Using P2SH at least means the unspent txout is small, and does not carry the extra data. +1 agreed... It is only RPC at this point. For the audience (I'm sure etotheipi already knows this) "pain in the ass" might be more specifically translated as:  it is an Out Of Band problem.You definitely need to collect together the keys somehow. Appreciate the thought but (a) I.B.D. speed-up was the work of many people, not just me, and (b) it has already been stated in this thread (or linked to, I forget) that the announce is not some technical software feature found in the Satoshi reference client. Probably far more than that, if you include obvious costs external to the youtube upload, like the videographer's time. Sounds like a great idea for next year:  pay some bitcoins for this service, rather than complaining about not getting something for free. CIA != FedI know a lot of people see "the government" and instantly assume that a presentation at government office A will instantly result in the entire federal workforce becoming aware of said presentation's contents, but that's not how real life works In 2010, the federal government workforce numbered at 4.4 million people.  And most of those are hunkered down in their little slice of government, not talking to other branches. The conference organizers recorded all the talks, and hopefully will have them up on youtube $Sometime. All the talks were recorded, and should be posted $Somewhere, $Sometime. sipa's presentation at Bitcoin Conference 2012 including some information, because his "ultraprune" branch slated for 0.8 will specifically index unspent txout's.  Not quite the information you wanted, but it is worth a look for you. My conference talk "State of the Coin 2012", which covers bitcoin technical and non-technical changes over the past year, is posted at     http://gtf.org/garzik/bitcoin/2012/state-of-the-coin-2012.pdf This is sadly already common in the poker world, HYIP forums, etc.  It was only a matter of time I think somebody has already tried DDoS+ransom on MtGox, a while ago, IIUC. Evidence, to back up this hand-waving? Indeed.Yep, do something productive and get paid in bitcoins.That is how the bitcoin economy is built. Of the core dev team there's myself and Pieter (sipa), and I think Nils (tcatm) is coming too. hmmm, I think the HTTP client internal to bitcoin did not get updated to make IPv6 connections.  Worth filing an issue at github. Custom binary protocol using Google Protocol Buffers would be much preferred.  You writeYour list of supported languages is woefully incomplete, and therefore, does not support the argument.  PB are supported for: C, C++, Python, Perl, Java, PHP, Ruby, and Haskell at a minimum.  Any language used by the bitcoin community is highly likely to be supported by PB.Furthermore, PB encoding is strict and well debugged, unlike any newly created protocol (including my own binary protocol from years ago) and this new protocol.Something for ASIC miners should be bandwidth and CPU efficient, and text/JSON is not that.  This has already been shown to be a problem in bitcoind, where pool server operators replaced the default JSON hex decoding routines with a faster routine, to decrease CPU usage associated with useless text encode/decode.PB is used in thousands of apps, including most of the Google applications we all use (like search). Pretty much everybody on the speakers list will be there, at least, including me About to board my BOS->London flight right now... Try commenting out the entire lineCode:#USE_IPV6:=1
Yes, it is possible via the raw transaction RPC API.  Your software is required to know how to construct proper binary-format bitcoin transactions.None immediately, no. The old addr.dat is never deleted.  You may wish to swap back to an older version in an emergency.New users will never see addr.dat, once 0.7 is released. Summary: Add small-data OP_DROP transactions as standard transactions.URL: https://github.com/bitcoin/bitcoin/pull/1809This is likely to be controversial.  It is useful to highlight this ancient thread, where satoshi, gavin, myself and others discuss the merits and perils of data in the chain.The consensus tends to be,It bloats the chainIt incentivizes non-currency chain usage, which negatively impacts all who use bitcoin as a currencyIt is unavoidable......so we might as well figure out a way to permit a few tiny uses, such as carrying a hash or auxiliary transaction id or comment along with each transaction, while creating some limits that discourage wholesale binary data storage in the main chain.This change is intended to enable use cases like Mike Hearn's distributed bond markets example. What specific technology would you rather we use? Lots of minor bug fixes.Git users may view the shortlog withCode:$ git shortlog --no-merges v0.7.0rc1.. valgrind is your friend  In general, it is simply not advised to expose the RPC server to the Internet.  There are a great many things that should be done before it would be considered safe for exposing to the Internet.A proxy server is a much better suggestion.  Then you may expose precisely, and only, what you need.  That's how pool servers work.  Proxy servers also permit accessing multiple backend bitcoind's and other flexible solutions. The BIP links directly to the code change.  It's hard to be more explicit than that. Not AFAIK.  If you have access to a bitcoin node, the debug.log file will showCode:SetBestChain: some_number of last 100 blocks above version 1 Version 4.8 is the recommended and upwards compatible version.  Version 4.8 is what the official binaries are built with.However, your operating system may ship a more recent version by default.  Or sometimes data downloaded from third party websites (not recommended!) is built with another version of BDB. The raw transaction API provides coin control, and is accessible via the GUI's RPC console.There is no coin control dialog, if that was your question. Version 4.8 provides maximum file format compatibility, and is the recommended version.More recent BDB versions work also. It sounds like you did not read gmaxwell's post; it covers this. Multi-threaded signature verificationConsider the number of P2P commands needed for your proposal, versus today.  It's like 10x the number, with associated additional latency. It would be nice to improve block relay latency but the above proposal introduces a large amount of additional latency to the optimal case (bitcoin on tmpfs w/ MT sig verf).  We don't want to slow things down like that. That's where the source code lives.Bitcoin software releases are uploaded to SourceForge: http://sourceforge.net/projects/bitcoin/ At a minimum, you do not need the entire blockchain history just to validate the block matches the target.By "stupid" ITYM avoiding pointless, redundant support that would exist only to enhance the artificial sense of completeness that some computer scientists need.It's quite efficient, considering the limited storage (32 bits) into which a much larger number is stored. In addition to the fully validating node and python-bitcoin module, pynode also maintains a branch that contains a non-validating node calling a "mini-node", naturally found in the "mini-node" branch of pynode.git:      https://github.com/jgarzik/pynode/tree/mini-nodeThis is essentially ArtForz' half-a-node, with the minimum needed to work on mainnet.Forks have already started appearing.  blkmond inside pushpoold existed for a long time.  And bitcoin network sniffer fork also just appeared. Script verification is now enabled by default.Unfortunately it is quite slow, for an unexpected reason: Python is very slow copying data structures.  Therefore, I strongly urge users to download the chaindb.tar.bz2 archive mentioned earlier in the thread.  Otherwise the block download could take a day or two.Plans to mitigate this include:Do not verify scripts earlier than a checkpoint (reference client does this)Store database of only unspent CTxOut (sipa's reference client ultraprune branch does this)Swap out slow GDBM database for new pagedb database It is very important to change pchMessageStart.  This will cause all manner of software confusion, because peers with the same pchMessageStart will exchange addresses and otherwise think they are talking with peers of the same network and block chain.A hard fork is not required to change pchMessageStart, just a tiny bit of bootstrapping.  Blockchain integrity is not impacted.
Given that the exchange rate is free-floating (as it should be), changing the block reward from halving every 210,000 blocks to a constant 50 would probably not cause much difference at all.But the speculation is moot... nobody's changing that part of bitcoin. Just pushed chain reorg code to github.  It seems to survive a static test... let's see how it fares on the live network. We can!  Get a github account and start submitting pull requests.It's open source:  if you have a need, we welcome those changes being submitted.  The Qt part of the client certainly needs more Qt hackers!If you can't program, hire someone who can write the feature for you. That's pretty much it.  The reference client needs to be correct first and foremost, and that is primarily where the "core dev team" attention goes.But isn't "core dev team" a meaningless term?  There are many other developers working on web wallets and alternative clients that are far more usable.  At a minimum I would trust the clients built upon BitcoinJ.Using MtGox or another web wallet means zero blockchain download time, too. Because pynode startup may take a while, here is a set of pre-indexed database files you may download:     http://gtf.org/garzik/bitcoin/chaindb.tar.bz2  (2.3 gigabytes)     SHA1 a8e093ce7eedb3434a3a97570be8c3b855fa7529This was generated by pynode git HEAD (commit b93b91b1bb659b0477eeff8b0a6771bdb595f0f4).If you wish to treat this as untrusted data, you may verify hashes and TX connectivity with the dbck.py script.  Runtime should be under 1 hour in most cases.If you wish to verify scripts, this will take much longer, possibly 10-12 hours.  testscript.py will verify scripts in the database. Think for a second.  Who cares if bitcoin is a country's official currency?  Bitcoin use need only be protected by law in a certain country to gain added legitimacy...An affirmative law saying "yes, bitcoin is legal" would be wonderful, would it not? My guesses:1) Gavin is working for the CIA2) Gavin is working for Goldman Sachs3) Satoshi's real name will be revealed on the 11 o'clock news. gmaxwell already made a basic patch, but it wasn't good for privacy, so it's not ready yet.Regardless, that does not fix all the implementations in the field now, nor does it fix non-Satoshi clients such as MtGox etc.Because the network must always track every unspent coin, creating tons of difficult-to-spend coins is network unfriendly. URL: https://en.bitcoin.it/wiki/BIP_0035     AbstractMake a network node's transaction memory pool accessible via a new "mempool" message. Extend the existing "getdata" message behavior to permit accessing the transaction memory pool.MotivationSeveral use cases make it desireable to expose a network node's transaction memory pool:SPV clients, wishing to obtain zero-confirmation transactions sent or received.Miners, to avoid missing lucrative fees, downloading existing network transactions after a restart.Remote network diagnostics. SpecificationThe mempool message is defined as an empty message where pchCommand == "mempool"Upon receipt of a "mempool" message, the node will respond with an "inv" message containing MSG_TX hashes of all the transactions in the node's transaction memory pool. An "inv" message is always returned, even if empty.The typical node behavior in response to an "inv" is "getdata". However, the reference Satoshi implementation ignores requests for transaction hashes outside that which is recently relayed. To support "mempool", an implementation must extend its "getdata" message support to querying the memory pool.Feature discovery is enabled by checking two "version" message attributes:Protocol version >= 60002NODE_NETWORK bit set in nServices Note that existing implementations drop "inv" messages with a vector size > 50000.Backward compatibilityOlder clients remain 100% compatible and interoperable after this change.ImplementationURL: https://github.com/bitcoin/bitcoin/pull/1641 DiscussionSee the bitcoin-development list on sourceforge. Can you fix the SatoshiDICE software to stop generating a ton of tiny outputs, in the event of a loss?  One of the long term drains on resources is tracking unspent coins -- and SD creates 0.00000001 outputs for losing bets.  We have to individually track each one of those outputs until it is spent.  Of course, it is difficult for users to find ways to spend 0.00000001 BTC, so the obvious database bloat for each bitcoin user results... Perhaps we should request that Nefario lock this thread, and create a new one.There are already many Bitcoinica threads...  please use those.No matter your position on this issue, you are spamming this thread with off-topic content.  Yes, even you, genjix  If you are using python, please consider using the 'bitcoin' module found in https://github.com/jgarzik/pynodeIt already does full script and block verification.The only major to-do is chain reorg, and that does not impact the 'bitcoin' module at all. Please move this off-topic discussion to the dozen other threads covering the situation. Incorrect.  The project started on subversion on SourceForge. That's automated from git, and satoshi predates git actually would be my guess. On the front page of http://bitcoin.org/ Satoshi is clearly listed first under Developers. pynode's script engine now successfully verifies all scripts in the mainnet and testnet3 chains. Updated OP to indicate the "python-bitcoin" nature of the project.  Programmers may use some or all of pynode's library, without using the node itself. Updated status:pynode now verifies all known scripts on mainnet and testnet3, except for the OP_IF opcodes.  OP_IF is not present on mainnet right now, so this should not be a problem for testing.pynode now includes a JSON-RPC server like bitcoind.  Only a few RPC API methods are implemented right now.  Check back in a few days, to see more RPC API calls implemented, such as parts of the raw transaction API.pynode is not officially stable yet, as script verification is disabled (run testscript.py instead) and chain reorg is not implemented yet.Possibly yes.  Chain reorganization is not yet implemented.  Small 1-2 block forks happen on mainnet every few days.  If the chain forks, pynode will not understand this, and get stuck.  Known problem, will be fixed.The workaround is to delete your chain database, and re-download it.  If you know python, you could save download time by writing a simple script that deleted the last 100 blocks.You may ignore orphans, as long as you see new network blocks being stored in the database, with 'height' increasing.I trust people can figure this one out on their own   They will need avoid using RPC username "XXXX" and password "YYYY" also  pynode now successfully verifies all transaction scripts on mainnet.  testnet3 verification still a WIP.
Use a 'switch' statement rather than a super-long if tree  +1, agreed I occasionally think about making the number of rounds variable, based on some algorithmic factor:  ALGO_A(passphrase), take lower N bits (16? 20?) as number of rounds of ALGO_B(passphrase) FWIW the set of unspent tx-out's should fit nicely in RAM, for some time to come.I know that's not helpful to applications doing historical queries, but it may be helpful for other queries. This is certainly not true.  If the Satoshi client did not forward transactions, nothing would get relayed on the network.But I'm guessing you meant new transactions?If so, you want the recently added sendrawtransaction RPC from the 'raw transactions' API. LevelDB provides the backend to Google's services, so it is not surprising that it is so heavily optimized.  One of the key optimizations is that writes go to a log, and then another thread comes along in the background and "optimizes" the log data back into the main database, using hueristics to hopefully place the data in a useful, locality-friendly location on disk.BitcoinJ author Mike Hearn has proposed replacing BDB with LevelDB in the Satoshi client, and we are looking seriously at that.  Here is his pull request: https://github.com/bitcoin/bitcoin/pull/1619 Actually, XKCD has packed an amazing amount of password wisdom into a single comic:     http://xkcd.com/936/Title:  "password strength" There are many ways that the bitcoin software is more conservative than the protocol Only relaying standard transactions is another well-known example... (emphasis mine)Relaying nodes do not receive any fees for relaying.  And there are more than sufficient nodes on the network to prevent an attacker or miner from preventing a transaction from being relayed to others in 99% of the cases. Had to ask sipa for the answer:  1 for external transactions, 0 for change or send-to-self ones None of those incidents had anything to do with the core bitcoin software.Responsibility means evaluating the impact on users, recognizing that every situation is different, and that every solution takes a different amount of time to deploy.It is not responsible to pick an arbitrary length of time for disclosure, and stick to that regardless of circumstance or feelings of involved parties. During the output overflow incident, we were all rather glad that the collective client base did not do this.  Once miners upgraded, everyone reorg'd back into working order.This is just one of many reasons why there is a 120-block new-bitcoin confirmation policy in place. Trying to investigate a luke-jr claim from IRC:The dev team is working on BIP 34 - height in coinbase, and if what luke-jr says is true, then there is a buggy p2pool implementation out there generating invalid version 2 blocks.For those hackers out there, this is the BIP 34 change:Code:-    pblock->vtx[0].vin[0].scriptSig = (CScript() << pblock->nTime << CBigNum(nExtraNonce)) + COINBASE_FLAGS;+    unsigned int nHeight = pindexPrev->nHeight+1; // Height first in coinbase required for block.version=2+    pblock->vtx[0].vin[0].scriptSig = (CScript() << nHeight << CBigNum(nExtraNonce)) + COINBASE_FLAGS;All that is required is that nHeight be the first element of the coinbase. Bitcoin was built so that anyone may validate data from untrusted sources, eliminating the need for super-nodes.If indeed you are downloading headers, why would you compromise privacy and security by adding a trusted super-node back into the mix?Connect to the normal network, get addresses, then "getheaders" (P2P command) Transactions that cannot be connected to the main chain are known as "orphans."  The standard bitcoin client will keep up to 10,000 orphans in memory, before randomly deleting them to keep that at or below 10,000.Connect-able transactions are stored in the "memory pool" -- the zero-confirmation state -- until they appear in a block.Assuming that A is broadcast as well as B, you are connected to the chain, and your transactions will not be orphans.  Nodes will relay A and B for you.As another poster noted, A and B may appear in the same block. Pull requests for cpuminer are still welcomes.cpuminer is definitely used on testnet and various other alt-coin scenarios. Neither are true.All connectable blocks are stored and connected, so that we may switch from the current chain to a new chain at any time. If the users of bitcoin did not like the chain lock-ins from bitcoin/bitcoin.git, then it is trivial to ignore or compile-out those updates.  Users vote by choosing the client they use to store their funds.  They vote on chain rules, checkpoints, and any number of other technical details.A block chain is ultimately a community consensus. Reserved. Github URL: https://github.com/jgarzik/pynodepynode is a simple bitcoin P2P client, originally based on ArtForz' half-a-node, which maintains a blockchain database and TX memory pool.  All bitcoin-related code is separated into a "bitcoin" module, permitting you to use core features such as CBlock or P2P message serialization, without actually using the node itself.Therefore, pynode has two goals:1. As a generic "python-bitcoin" library, for any project.  Update: Now a separate project, https://github.com/jgarzik/python-bitcoinlib2. As a P2P node that may be used as a base for other projects, such as a network monitoring node or P2P proxy.At present, it is mainly for developers and not end users.  Here is what pynode does not do:key management (wallet)Here are the limited things that pynode can do at present:Outgoing TCP connection to a single remote P2P nodeInitial blockchain downloadMaintain a transaction memory pool, with TX's removed as they are confirmed in blocksMaintain an indexed blockchain databaseRespond to JSON-RPC requests via an internal HTTP serverOver time it will become more capable, but this is an alpha quality release for developers at present.
All clients will reject blocks larger than 1MB as invalid.Changing this is known as a "hard fork" change, something to be avoided because it knocks old clients off the network, limiting their access to their own bitcoins, and creates other technical problems. If you have billions at your disposal, you can always "buy" bitcoin through mining domination.However, economic incentives don't really exist at present to motivate big players to destroy bitcoin (== net economic loss). Yes, the interface is potentially limited to signed 32-bit. Hence "about" The maximum block chain growth[1] is about 1GB per week.[1] given 1MB max block size, which cannot be changed without a hard fork Pieter said "at most".  Bitcoin will not split a single block across two files, therefore blk0001.dat will almost always be smaller than precisely 2032 MiB. The bitcoin address is basically a 160-bit hash, yes, but you need the private key to actually spend the bitcoins. The ECDSA private key behind it all is 256 bits. There is no need to add anything to the bitcoin client.The raw transaction API provides everything needed for full input/output control when building transactions. Connected nodes is a poor measure of users, as several sites like instawallet, blockchain.info, mtgox etc. have hundreds or thousands of users. Outside of popular forum theories like ponzi, my current favorite guess is gambling-related lending or trading -- bitcoins for pokerstars or whatnot.  Depending on the US state (hello, Nevada), it might be legal or at least a grey area, rather than obviously illegal. What's the first thing a lawyer will do?  Advise their client to stop talking, and stop messing with bank accounts (or the Bitcoin equivalent thereof) associated with disputed funds.The beginning of a lawsuit might even mandate a freezing of funds by court order -- a temporary restraining order -- outside Bitcoinica's control. Some houses in Detroit are listed for under US$ 1000.  Or Braddock, PA under US$ 10,000.Buy one, list it on bitmit, see how much the "first bitcoin house sold" fetches. Well, the portable representation of an IPv6 address is the network representation.You may need some platform-specific code to store it in the right structure and struct member.bitcoin/bitcoin.git (satoshi client) works on linux/mac/win, and supports non-blocking IPv6 sockets.  The system calls and addressing are the same in C and C++. Nice!  Bitcoin is an excellent settlement currency for real estate purchases, too.I have always been tempted to buy a cheap property in a US city, and then auction it on bitmit. It is irrelevant whether or not the funds would be used for legal defense (one presumes they would not).If lawsuits are threatened, as another mentioned, most lawyers would advise stopping refunds until all legal challenges are completed and the court settles refund amounts and claimants.  Bitcoinica would not want to refund, and then have a court show they should not have refunded X amount to Y person.So, good show, chaps.  You have now delayed your refunds for at least another year or two. Make sure all relevant law enforcement authorities, in all jurisdictions, have all available evidence required to chase the thieves responsible.  This includes Bitcoinica involved parties, assisting with all their available data, one hopes. There is no "force", there is choice.  Each user chooses the software they run to validate the chain.  If a majority of users choose to switch to SHA-512, that is what will happen, regardless of the number of miners who switch.51% hashing power, or even 90%, means nothing if clients collectively refuse to accept and relay your blocks. At this early stage, lawsuits will have a chilling effect on trying to bring new people into the community, especially new businesses.It seems unlikely that lawsuits will recover funds or successfully locate the thieves. Well, for one, SHA-3 does not exist.In general, bitcoin users and miners may collectively choose to do anything they wish.Changing the hash algorithm is a "hard fork" that makes new bitcoins unspendable by old clients, and therefore, is a change only undertaken under the most dire of circumstances.
According to US law...Q. Do I have to register with your office to be protected?A. No. In general, registration is voluntary. Copyright exists from the moment the work is created. You will have to register, however, if you wish to bring a lawsuit for infringement of a U.S. work. See Circular 1, Copyright Basics, section Copyright Registration. From http://www.copyright.gov/help/faq/faq-general.html No, for reasons like this. Existing auditors probably do have experience in websites, databases, public key-signed messaging and avoiding data theft. Absolutely, the diff can be changed.  Just a couple constants, and an additional check. The difference is in degrees.  Each is not a binary choice.  MtGox, for example, has been forced by circumstance (trial by fire?) to develop good legal and technical defenses.Even so, I never trusted any exchange and unknown website -- MtGox included -- to store any significant wealth for any period of time.That's what paper wallets and bank safety deposit boxes are for. Everything except source code visibility is different. Some of the reasons why I avoided bitcoinica with a ten foot pole, which were obvious right from the start:The big one -- Zero hard evidence they actually had all the funds claimed, or could produce funds if outsized events (big selloff, big withdrawal, etc.) occurOpaque ownership structureZero independent source code auditing or visibilityZero proof of any experience at securing wealth from virtual and physical threatsZero appearance of adhering to any regulatory structureTherefore I was not surprised when bucket shops were mentioned. It is never hypocrisy to live in the real world, while trying to change it. sipa has been working on his "ultraprune" branch at github.  It is discussed on IRC. I agree, the above needs changing.The size of the pool of reserved keys -- the keypool -- is 100.  By default, you absolutely must backup every 100 transactions, or risk opening a window in your backups where keys may be missing.  A wise person backs up much more frequently than that, say every 25 transactions or so.However, it is standard practice to increase the keypool size to 1,000 or 10,000 ("-keypool=10000").  Merchants would definitely want to do this. The standard recommendations for all bitcoin users includes waiting for 6 confirmations, before spending your coins.  This is why a transaction appears as "unconfirmed" in the original Satoshi client until such time.One presumes a merchant will follow the standard recommendations, unless they have a specific reason to increase their risk by accepting fewer confirmations.The chance of a 51% attack reversing your confirmed transactions is astronomically low. The thread title is thoroughly misleading.There is, in fact, zero proof that pirate runs a ponzi.(however, as you and others have pointed out, there is zero proof that it is not a ponzi also) Your curl-devel (or libcurl-dev or whatever) package is missing the requisite autoconf macros needed to properly regenerate the configure script. You do not have to resubmit the pull request.  Squash the commits into one, and then "git push --force" to "rebase" the branch. Alterna-coins are a natural outgrowth of bitcoin introducing a new idea into the ideasphere; the fact that it is open source makes cloning the idea trivial.  Alterna-coins were always inevitable.If someone can come up with a better bitcoin than bitcoin -- that's great!  Humanity benefits from the competition.Speaking as a developer, though, contributing patches back upstream would be nice  Good stuff.  I'll test a T-Mobile refill. This new service is a welcome addition to the community. The preferred "fixes" for Red Hat, CentOS, Fedora systems are, if you want to do it yourself,1) Download SRPM2) Download associated source code from openssl.org3) Edit SPECS/openssl.spec, a) replacing source tarball filename with the downloaded oneb) comment out all references to source1c) remove the "no-ec" stuff from the configure line4) rebuild with "rpmbuild -ba SPECS/openssl.spec" or similar5) install build rpms found in RPMS/ +1,000 
I was disappointed that the bit-pay receipt did not include a line-item listing of what was purchased. Sounds like fun  Stealing someone's computer resources is malicious. Post is over a year old... No.  BFL has not yet entered the ASIC market; they have issued a press release.  Others have spewed hot air about doing an ASIC as well, and no doubt a few others are working silently on one.Another erroneous assumption.  There is only a single hurdle to leap -- money -- in building an ASIC.  Once you've handled that problem, the rest -- using the latest industry process and die size, etc. -- will come naturally to any new ASIC competitor. That low?    It was over 9,000 unconfirmed just a few days ago... tl;dr...  (IMO) producing a virtual currency is hard, and the governments would prefer that we use fiat People can and will compete with BFL, producing ASICs of their own.  The world will move on. An effort to create a bitcoin backbone is now underway... The most interesting analysis will be on what types of transactions (big, small, SD, non-SD, fee, no fee, priority) got into a block within 10 minutes or so.  If that 65% [who didn't make it in one block] is spammy, that might be normal. The most recent bitcoin/bitcoin.git has "signature verification cache" which should speed up block validation quite a bit. Amusing. Agreed...  a bitcoin-denominated kickstarter seemed like a natural early-stage service.  Surprised it has not appeared. I think the responses from a few thread participants have been a bit more... strident and heated than is productive.The main apparent fact is that SatoshiDice transactions are crowding out and slowing other bitcoin transactions.  Thus, ignoring all other technical arguments, we can show that SatoshiDice is hurting other bitcoin users' confirmation times. This site is dead, yes? It might be worth considering transactions that self-identify into certain traffic classes, similar to the hints provided by IP ToS / DSCP. Agreed -- thanks for being open, and explaining these rules in a public forum.Just imagine HSBC or Bank of America being willing to do the same, and you'll see how different the bitcoin community really is. IIUC, the very basics of contract law require only agreement between legally recognized entities: a natural person, or an incorporated entity (corp, partnership, etc.)It is doubtful that an anonymous, undefined entity ("internet nickname 'foo'" or "IP address 10.20.30.40") would be found to be a valid entity under contract law, but I would love to hear the opinion of an attorney. bleh -- we need to look into transaction pruning... ObPlug: http://bitcoin-otc.com/
Absolutely.  But none of that is being done right now, so the answer to $SUBJECT is "yes" Hardly.  What matters is the protocol fingerprint, not the amount of bandwidth used.The timing and size of bitcoin packets are unique to bitcoin.  It is obvious even over encrypted links such as Tor.Or, to put it another way:  your cable modem or DSL router's blinky lights go blink-blink each time a bitcoin transaction or block is broadcast throughout the network. Our DNS seeds are now returning AAAA records. It is shocking, shocking that an outsized return from an investment with zero transparency is related to major illegal operations.  Who would have thought? Good stuff, thanks for messing around with this. See XKCD's take on password strength:  http://xkcd.com/936/ Some of this is putting the cart before the horse You cannot know what is the best allocator until you have an idea of the lifetime and usage pattern of the allocated objects... Well, it can (and should) be encrypted on-disk.At least that makes it more difficult to steal private keys (must steal from memory). Quite true...  In the Real Banking World, my withdrawals from a well known brokerage to a well known US bank can take 24-48 hours, or longer on weekends.It only seems logical that dealing with large amounts of withdrawals would lead one to introduce delays for the purposes of security.If you are withdrawing $10,000, it surely seems beneficial to all customers if your withdrawal is delayed a bit to enable additional fraud validations.The bigger the withdrawal, the larger the validation.  It costs the same for the network to transmit 10 bitcoins as 100,000 bitcoins... but that does not mean that large values should have the same lax security as small values.Sometimes I think programmers (like myself!) have a mental weakness:  programmers want to treat all customers, all transactions, all $Whatever equally.  Simple rules make coding easier to validate, debug, and run But when you're dealing with money, the simple obvious truth of "more money means more fraud, makes you a bigger target" means a lot of special-case coding and additional business [non-coding] procedures. If I understand correctly, ZipConf is essentially a private network, that guarantees only specific sites where they have a backchannel method of verifying transactions besides the P2P network itself. This is a commonly encountered idea...  Go for it!For more adventurous people, read gmaxwell's post about autonomous agents like StorJ providing P2P storage and also https://en.bitcoin.it/wiki/Agents Personally I think the bitcoin economy would be useless if the only thing going on is currency exchange.A healthy bitcoin economy includes vendors and customers, everyday commerce. All true.Nevertheless, a wide swath of very fundamental libs provide hooks for similarly fundamental services, most notably memory allocation and m-t locking primitives....regardless, all this is really discussing useless details.  The main focus, I hope, should be that cbitcoin is actually doing something unique to bitcoin like parsing blocks and talking network, and not simply wasting a lot of time reimplementing basic software services like crypto or hash or data codec. Not true at all.Bitcoin's (so far) highest volatility period, making all others seem insignificant, came and went before Bitcoinica existed.During bitcoinica's lifetime, bitcoin volatility has been lower than during the previous Big Bitcoin Bubble period. You can do it with software.  It is merely a chain of TX's.One wonders how quickly wallet theft would disappear, if the other major exchanges started rejecting well known, stolen coins. sipa just pushed out IPv6 support to bitcoin/bitcoin.git.If you have IPv6 support on your network, please help test.  (note - this requires being able to compile the source code yourself) Then link statically.  Or use one of the many embedded tools out there that ensures your lib has only the code your filesystem actually uses.This is a solved problem, and does not exclude OpenSSL use in any way.And OpenSSL likely supports outdated OS's and tools...  they maintain support for MS-DOS to this day because that remains a common embedded target. Ummm...OpenSSL is heavily used in the resource-constrained, embedded space, and runs on Windows, Linux, uclinux (embedded linux), VxWorks (an embedded OS), OSX, Solaris, HPUX, OSF1/Tru64, IBM mainframes, ancient MS-DOS systems, netware, and others old and new.  It works very well on almost every known 32- and 64-bit  platform in existence.It does not require "gobs of memory"; the state structures for AES or SHA algorithms are almost always smaller than 1,024 bytes.  Compiled code size is already small and compact.Copying OpenSSL code into your own codebase will not save any memory, regardless of linking style.  Libraries are internally split into modules and demand-paged in.  At best it will save disk space for unused code, at a cost of always lagging behind whenever security problems in the code are found. It is rarely a good idea to reinvent the wheel, when it comes to security-sensitive, time-tested, well-reviewed-by-experts cryptography code.Once bignum has been reinvented, what about ECDSA and similar gadgetry? Why?  Just use OpenSSL for bignum and move on.  People have already written that part.Bitcoin-specific data structures for storing blocks, transactions, etc. are the fundamental building blocks.
Correct, there needs to be a domestic exchange... +1 Cross-posting this, current top link on cryptome.org: http://cryptome.org/2012/05/fbi-bitcoin.pdf Current top link on cryptome.org: http://cryptome.org/2012/05/fbi-bitcoin.pdf Current top post on cryptome.org: http://cryptome.org/2012/05/fbi-bitcoin.pdf Kudos to Gavin and the other developers and testers for this release. In the USA, JOBS Act that relaxes these requirements significantly, both WRT investor requirements and in solicitations you may make.IMNSHO, USA just legalized GLBSE on April 5, 2012.Irrelevant.No, the GLBSE securities are not "issued in bitcoin."  A security is a thing, a unique and independent legal entity.  That GLBSE makes it easy to buy and sell with bitcoins is incidental; GLBSE could just as easily use USD or EUR or gold or bananas.If GLBSE tightens up its boilerplate and some requirements (i.e. investor limit), it is quite possible that an IPO on GLBSE could be a fully legal security in the US.In general, even excluding securities law, GLBSE could create contracts between all market participants, where everyone has a click-through agreement (==contract) describing basic rules. This is very interesting, and potentially very impactful on startup business plans. According to my research (dated ~6 months), operating in the US implies getting licensed in ~47 states.  Only a few states, such as NY or CA, have a law that requires out of state businesses dealing with NY/CA residents to be licensed in NY/CA.As you probably know, that implies a surety bond and background check in ~47 states I would have opened a US exchange over a year ago, if not for the state licensing requirements.I talked to State of North Carolina banking/securities people as well as lawyers... The material also matches my own legal research in large part. Seems awfully specific.Usually subforums split off after they reach certain traffic levels. Would be nice... but you still have to deal with chargeback issues not present in bitcoin.  That requires some sort of middleman handling fraud issues (and taking a cut of the action). BIP16 means any script matching that hash is considered valid to spend.It doesn't matter whether it is a simple password or a complex script that matches the hash. Clicking on any category link gets a database error.Another thing I'd like to see is some level of answering the question "who runs this?"It takes a while for a new business to earn the trust of its customers, and one way new bitcoin businesses have of bootstrapping that trust is publishing information on their corporate structure -- who runs the biz, where is the biz incorporated, etc. +1 Personally, all this seems far too focused on a centralized website (http://bitcoin.org/), and presents far too many choices at once to the user.On bitcoin.org (registered by Satoshi), I would rather see the Satoshi reference client and perhaps an "other clients" link on the wiki.Modern websites are working hard to reduce the number of download links, not increase them.  See, e.g. http://fedoraproject.org/en/get-fedora or http://www.mozilla.org/ where a single download choice is presented, and then an "other options" link is below the great big download button.You don't see people calling for Mozilla to link to other browsers.  Rather than fighting over what a particular bitcoin.org page should look like, why not maintain an independently managed BitcoinClients.org website?  Or GetBitcoinClient.org or somesuch.Most of all, solve this problem in a distributed fashion, rather than stuffing it all onto bitcoin.org.  Bitcoin.org, IMO, is the home of the "reference project" not the entire bitcoin community.  Emphasizing that months ago was why the forum was moved to bitcointalk.org. Indeed...  IMO new users will just be bewildered by all that info. Let's not list other clients until we are assured they can (a) properly handle a block chain reorg and (b) properly handle BIP16 transactions, and do not have otherwise glaring usability or security issues that prevent mainstream endorsement and use. 2012-04-30 How online black markets work [csoonline.com]https://bitcointalk.org/index.php?topic=78653.0 Link: http://www.csoonline.com/article/705316/how-online-black-markets-work
Updated first post to reference NEW articles thread. See http://bitcoinstatus.rowit.co.uk/ for a few stats and graphs. The following domains are expiring soon, and are available for sale if anyone wants to grab them before they go on the market:bcfx.cobcfx.usbcfx.orgbcfx.bizbcfx.infobcfx.eubcfx.ccbitbanc.combitforex.cocoinfx.coemultipay.comfxbit.cofxbit.comAny offer is acceptable.  Email jgarzik@exmulti.com to make an offer. Please add YYYY-MM-DD to the subject line, as Guidelines for this board indicate. Appreciated... but note the format is YYYY for a four digit year.  For some examples, look at the rest of the Press board. Please update subject to use standard YYYY-MM-DD format at beginning, as noted in Guidelines for this board. Not sure this qualifies as "press" but I'll leave it alone.  The purpose of the board is not to list promotions by bitcoin fans, but more when the outside world notices bitcoin, i.e. journalist articles, TV shows, scholarly articles in scientific research publications, etc.If we get too many of these, moderation might have to tighten a bit (but as I said, I'm leaving this one untouched, preferring to err on the side of caution) I noticed theymos moved the 'Bitcoin hits' thread to the new Press board, and jumped on that. The Press board replaces the Bitcoin press hits, notable sources thread.  The original motivation of the thread was to collect links that fit Wikipedia's definition of Notability.  Once bitcoin was deemed sufficiently notable (a milestone!), the thread became an ongoing log of links.  Discussion was discouraged.The Press board is a great improvement.  These general guidelines should help keep the board usable:Create a new thread for each new linkBegin each thread with article date, YYYY-MM-DD format.Thread title should usefully summarize the link.  julz has suggested DATE-SITE-HEADLINE format, but use your best judgement.Duplicate links, off-topic, and meta discussions may be moderated (locked or whatever the mods prefer)Post a link to the NEW articles thread.As always, comments and suggestions welcome!  The main goal is to keep the noise down. Locking this topic.Please post new press hits in the Press board.  Create a new thread for each new story. That bit is certainly corrupted. You're just not gonna do it one musician at a time.CoinDL needs to approach music clearinghouses, MP3.com and other entities that can offer a huge libraries of music.  Because CoinDL is a startup, presumably you would have to give up a big cut of the per-download price, to avoid paying large up-front charges for such bulk library purchases. run it in gdb, and use the "bt" command when a segfault occurs.  Make sure to enable thread tracing, if that is not default / built in. Really?Maybe we should reactive jgarzik/cpuminer then. and start merging pull requests. Bump. Thanks to all our contributors and testers for their hard work. As long as they are including valid transactions, who cares if they have the entire block chain, or by what method they are selecting transactions to include in the block?Any invalid transaction inclusion will result in their hard work being wasted, as that block would be disregarded by all.  Miners only get paid if the blocks are relayed, accepted, built upon.  Picking random transactions seen since last block, without any validity checking, is a valid strategy, if inefficient and potentially costly. Personally, I favor a drastic rule such as* Build a list of "likely to be in next block" transactions, from memory pool* Do not relay blocks unless they contain at least 50% of the transactions in the "likely to be" listThis is "drastic" in my estimation because such a rule has notable downsides,* Increases possibility of short term fork* Creates de facto requirement that at least 50% of each block are standard transactions (as defined by isStandard)* and some other minor falloutHowever, it is a strong rule that does address the issue at hand, while permitting valid, no-tx-activity zero-transaction blocks to exist. To encourage users to use the network.A network's value increases as its userbase increases (and vice versa). Incorrect.  Including transactions creates incentives for bitcoin users to use the network (faster transactions).  Slower transactions discourage users from using the network.  This is why deepbit includes as many transactions as it can, and doesn't really worry about fees too much.  Deepbit wants to create incentives for bitcoin use.Too many no-tx blocks, and users will drift away, causing the value of each bitcoin to drop.Thus, in the short term, no-tx blocks may make money for the botnetter, but in the long run it will make their (and yours) bitcoins worth less.The value of bitcoin lies in the strength of the network, and the number of users.
Fine by me. See the tail end of this thread for other views on the "attack." See the tail end of this thread for others views on the "attack" CBS Press Release mentions "Bitcoin for Dummies" episode of "Good Wife":http://www.cbspressexpress.com/cbs-entertainment/releases/view?id=30177 ...and "not intelligent" does not mean lack of value.To bring the thread back (somewhat) to the land of concrete, real world possibilities...  there is a huge difference between narrow AI -- a dumb, real world AI that follows a simple script -- and AI found in movies and the heads of dreamers.Narrow AI is feasible with today's technology.  Narrow AI is just a list of goals, a series of if-then propositions, along with the necessary code to implement goal execution.  In this case, narrow AI may interface with humans through a mechanical turk, to solve discrete problems that require human judgement ("is user interface A or B more effective?"). Not quite true.  In mega-doses, DDT is lethal to some types of birds.However, as you observe, DDT tends to be safer and more effective than other treatments, when more measured doses are applied. ...and then people use bitcoin as money / a store of value, in exchange for goods and services.Any court in the world will see that it is more than a "data protocol" in practice. The other bits you listed are doable; the above one is highly difficult without some form of human interaction.  "identifies code" that it thinks it can use to improve itself is far beyond Narrow AI.  And, you cannot really do effective genetic algorithms without many thousands or billions of iterations.I'd say code changes need human reviewers (c.f. mechanical turk) as well as automated testing and verification by the bot itself...  and the issue of whether or not code changes at all, and who gets to see what part of the bot code to decide this, is difficult.Been thinking about this problem for years...  I have been focusing on design of a "cell", trying to decide what the software running on a single node should look like.  A "cell" is a single automaton running on a single CPU core, which performs a small, well-defined role in support of The Digital Organism.  Some cells collectively form the brain (encrypted, distribution storage of bot source code and metadata), other cells cooperate to create the desired service (StorJ == customer data storage), etc.To be concrete, it might look like a bytecode engine, and a very basic firmware that rotates through a list of high level goals.  Bytecode engine may look quite a bit like Parrot VM: may execute any programmatic script, and includes necessary built-in capabilities (file i/o, network i/o, and encryption) that permit bot bootstrapping and basic cell-to-cell communication. For a great book following along this thread's theme, read Daemon and it's sequel, Freedom. You need to install postgresql, mysql and/or sqlite development libraries. You need to install postgresql, mysql and/or sqlite development libraries on your system. Not at all.Months ago, I ran the Bitcoin Store, which sold bitcoins in return for Liberty Reserve / GlobalDigitalPay / etc.  Tried to add Google Checkout, and was explicitly denied within 24 hours of adding G.C. to my site.  When bitcoins were explained to Google, they pointed me to the "no digital currencies" portion of their ToS. No idea why this thread suddenly went un-sticky.Moderator, can you fix? Yes.  0.4 does not introduce any breaking changes for pushpool. Well, for the record, I wrote the initial implementation (which BlueMatt then reworked):     https://github.com/jgarzik/bitcoin/tree/crypter Please help test, no matter what platform (linux/windows/mac) you are using! The binary protocol is documented here:  https://bitcointalk.org/index.php?topic=3493.0No mainstream miners support it, so most people will not need it. Just be honest:  Tell them that open source project Bitcoin uses IRC for P2P network bootstrapping.You can disable this with -noirc. And yes, if this problem is fixed -- p2pool includes user transactions in blocks -- then the objection is removed.forrestv was indicating on IRC that a fix is being deployed... we'll see from the next block p2pool generates. Sorry, but that is just spin.p2pool delays transactions, running directly counter to the service bitcoin users want to provide.This also sets an awful precedent:  imagine more miners following p2pool's examples, or p2pool gains hash strength.  There would be huge transaction delays.Failing to include transactions is harmful to the network, plain and simple.
bitcointalk.org was separated from bitcoin.org to emphasize that it is not official in any way. One hopes so.Until then, p2pool is actively DoS'ing the bitcoin network, by delaying transactions until a non-p2pool miner builds a block.That is very harmful to the network. If there are no transactions being recorded, that is a major design problem. It is important to separate out a few issues.Regardless of all other issues people seem to want to bring up, Pattaya is simply not what anybody thinks, when you think "financial center of Asia." Wow...That sure is... a lot of conferences. BTW, please consider the example of E-gold, with regards to FlexCoin's regulatory posture.In broad strokes, E-gold obtained legal counsel that said they did not have to register as an MSB or file CTRs and SARs, because their gold-backed virtual currency was not "money."  The US federal government -- and common sense -- disagreed, once substantial amounts of value were being transferred overseas using E-gold.Precedent has shown that the US government wants to track the movement of "funds" all over the world; be proactive about compliance and use common sense: bitcoins are money for all practical purposes.And yes, I read your Terms of Service in its entirety. Bruce,Consider focusing the bitcoin conference locations on world financial centers (hong kong, london, dubai, nyc, ...) rather than fun vacation destinations  lurk lurk  The 2011 Bitcoin Conference demonstrated plenty of people and businesses working towards this. I hate to say it.... but I agree.Hong Kong would make a lot more sense.The quality of the crowd matters.  Getting together 100 random people is irrelevant.  Getting together 100 people who are working on doing something interesting in bitcoin is -- and was, last weekend -- very useful.  Building Community 101. MIT Technology Reviewhttp://www.technologyreview.com/computing/38392/?p1=Mag_story1CryptocurrencyThe bitcoin, a virtual medium of exchange, could be a real alternative to government-issued moneybut only if it survives hoarding by speculators. Conference was a lot of fun.  Plenty of people and lots of energy and interest in bitcoin. Here's an uploaded version of my slides: http://yyz.us/bitcoin/TheStateoftheCoin2011.pdfEdit: fixed some minor slide errors, that were corrected verbally during the presentation SRV records would be nice......but it is difficult to make that work in a cross-platform manner."A" records have a higher Just Works(tm) value, even if we are forced to compromise and hardcode port 8333. Linux.com is not controlled or owned by Linus Torvalds. Personally, I prefer "bitconf" to "bitcon" Unfortunately I will only be able to attend on Saturday, August 20.Arriving Friday night, departing Sunday morning... doh!You missed one key differentiator:  bitcoin forks should change pchMessageStart. All officially posted and signed build checksums are SHA1 (note the length difference from MD5).Code:$ sha1sum bitcoin-0.3.24-win32-setup.exe ; md5sum bitcoin-0.3.24-win32-setup.exe d4b5425eff673551a326d5326b92a06359dc1a3d  bitcoin-0.3.24-win32-setup.exeb9a71a0a25ac090a3c0e370e01366ae8  bitcoin-0.3.24-win32-setup.exe Indeed.  mtgox requires 6 confirmations, IIRC.
'gethashespersec' and getinfo's 'hashespersec' are only for the internal, largely unused CPU miner inside bitcoind.You must use submitted shares to calculate that. That is one of the reasons why the Satoshi Client includes hardcoded block chain checkpoints. +1, the devs monitor for threads like this, and the title is definitely misleading That is definitely an area in need of improvement:  we are always desperately short of hosts that accept incoming connections on the network. blockexplorer's API can get you the balance of an address. The 50% mark is not really a tipping point, as you can still get left behind in many potential attacks.  Percentage of network power just means are you ever-more-likely to be able to double-spend while waiting with a chain of length X in the background.  The attack is still very, very difficult and reliant upon probability even at 60%, 70%, etc. Review the wiki, Dan Kaminsky's slides and Brian Warner's slides.Avoid any unconditional claims like "bitcoin is anonymous", "bitcoin is untraceable" etc. which will be quickly proven silly. No, it's not "just theory".By observing timing and size of network traffic bursts, one may deduce who is the sender of a bitcoin transaction, even if the network connection is encrypted.  And by default, the connection is not encrypted.This is obviously predicated on someone already observing you, as well as actively sampling the P2P network.  If you find out about a crime after the fact, it is a lot more difficult to associate a transaction with a network address.Other spends from the same wallet may compromise your identity, if you have ever posted a public bitcoin address somewhere.In a closed ecosystem without ISP wiretaps and social engineering, bitcoin is highly private.  Use of dead drops, transaction delaying, mixing services and other means help increase anonymity, but are too difficult / time consuming for most people to want to use.  So we must live in the real world, where methods of discovering who is using bitcoin are already well known and used in the field today (keylogging, data sniffing and snarfing, network timing analysis, ...) +1 agreed, it should be compatible, not force changes to all miners I doubt that is a big issue.It is transfers going in the other direction -- deposits -- where scammers can cause problems.Generally, going from bitcoins -> { something else } is pretty easy.  I'm surprised that mtgox, TradeHill and others have not bothered with PayPal as a withdrawal method.  Paying with PayPal is certainly safe, and the exchange's account would be 100.0% fraud-free. No, cpuminer does not check for hash < target. You claimed that cgminer would break with a different difficulty.cgminer and its ancestor, cpuminer, will push all H==0 solutions.  This is not the same thing.Your income remains the same, either way. No, that will not break cgminer.  All miners are built to handle any difficulty.You're just confused. +1, though I think this thread would largely duplicate said wiki page... This is not a discussion thread.If you do not have a "press hit" or other link to post, please post in another thread.  Thank you. The init steps are as follows:1. other stuff2. init network ports3. init database4. print "initialized"It sounds like your database is causing some sort of crash upon init. Yes.  That is always a bit silly, because the OS will cache frequently accessed bits of files anyway. After looking at that URL, my question remains unanswered.  One must assume it is not available for download, which implies programmers would need to create one from scratch -- a decidedly non-trivial task that could take months to complete.Not a realistic answer, unless you are volunteering a team of programmers, or paying a bounty or something? More than embarrassing.  Blatantly illegal stuff creates real legal risk for the people developing bitcoin software, which may or may not matter to the people who are not taking those risks.URL to DailyKos-like software for download? Where does p2pool get its transaction details, in order to rebuild the merkle tree with a new coinbase + block header?That is not clear to me, from either this thread or the wiki.A better technical description would be greatly appreciated.
Agreed, the main bitcoin wiki is what I had expected... I think a better answer is:  collectively, most of "us" are here to stay faithful to the technical design parameters Satoshi set forth.  In particular, the important basic rules 21 million bitcoins, decaying block reward (50 -> 25 -> 12.5, ...), 10 minute average target, etc.  Hash algorithm may change; max number of bitcoins will not (not if I can help it, anyway).Bitcoin is an experimental engineering tool.  Any such system will behave in the wild as the majority of users deem it so, regardless of the creator's intentions.Anything more is outside the realm of engineering, into the mental and ideological space you project onto bitcoin. Boy, all this attention from Atlas.  Amusing. There is a clear vision... it's just lost in all the forum noise. This change is intentional, as part of the effort to make the current forums less official. Eight connections is the maximum outgoing connections by default.Therefore, if you find yourself stuck at 8 connections, then you are probably not receiving any incoming connections.  That tends to point towards a firewall or port forwarding problem. Pointing to Google is a baby step towards de-emphasizing this current set of forums as "official" in any way, shape or form.They are an embarrassment to anyone trying to help build and maintain a positive image for bitcoin, especially with merchants who may potentially adopt bitcoin in their businesses. +1 agreed, from someone who is trying to encourage merchants to adopt bitcoin. It's not just politics; it is the sheer number of useless posts, resulting in a high noise-to-signal ratio.I'm not the only one who feels the forum has been overrun by 4chan types, image spammers, and other reactionary, content-free posters. Oh, and can you update the top post to include useful info and URLs, rather than just crossing out stuff?Just delete inaccurate info. Can you (a) create a JSON endpoint that bitcoinwatch can query for the speed, and (b) poke tcatm to add it to bitcoinwatch?Also, like other pools, updating the thread subject to include last 24 hours hash performance estimate would be nice. This forum is full of low-value noise, and things that are either NSFW or blatantly illegal.Most businesses and most citizens are tax-paying and law-abiding, and that is the target audience for achieving bitcoin acceptance as a global currency.  It is rather difficult to convince new merchants to accept bitcoins, if the forums are their primary contact point with the bitcoin community.Bitcoin is an ideology-neutral currency; we're not here to convert the world to libertarianism or crypto-anarchism.  We're here to make the first global, decentralized currency successful. Is anyone yet posting Ghash/sec stats? Post the blockexplorer link, as another poster requested. Mac OSX version of bitcoin client finally posted at https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.3.24/Updated sums (stored as SHA1SUMS.asc on SF):-----BEGIN PGP SIGNED MESSAGE-----Hash: SHA14909c17a1cc025c6f6c88d036f0b487c51c510f6  bitcoin-0.3.24-linux.tar.gzfed0afebe0b0c0f77a637600ac4abecbe5d098ed  bitcoin-0.3.24-macosx.zip58531249230f769fdc755822b41e0f18ba59512c  bitcoin-0.3.24-src.tar.gzd4b5425eff673551a326d5326b92a06359dc1a3d  bitcoin-0.3.24-win32-setup.exe520aed70ee28a0a91ed49dd983639cb1fab2a93c  bitcoin-0.3.24-win32.zip-----BEGIN PGP SIGNATURE-----Version: GnuPG v1.4.11 (GNU/Linux)iQIVAwUBTiTMHNodwg8tvwyoAQL8CRAAgraSWP12lbwrhpiElvB7LIWoPbiE1dUxi2ZO4MVJYKMbyuHu55j1Uq7a4ZqpNhXqq7U6efnoDTCl9sdpyhKxiql0SpsYBLs1IehX4UEVGVMUE5uepmOs+cYnYuAhNzvxNqKFPv3D7uEOXPmSxlUa4s0GEnTgVR1l0GFYf2T615MoGAak3+afahp4WB4XlHshttHT2P3o2/7N4Oh7iwFFtkmOj/Sb3PrcC8skW83kUZ4i8W1HlZTmtr4YlQbKnx6bF6mbkTY1aQa1AV/8htenALkmR2+eCgsdEY9WM8qruxnVLt/ao+VYw5jYLSYVKHt31ZD4rJM+5lKcTtU1NmNsGloen+hdLwC+hggqnUQmvBzM7SKqvg4zI9SbgGR5fS3poTrFX7yDKZyLSPcjBND/lWi8evRiSEP0yftCKL7zotdRy6QTG7tI1Fye1fyYuQdTB1nimE+7VJ8Q2O4DwE0iZKMuXm3GfaOrT20Znvns9caMKED9T1gg42QgYM6EMMbeukBUkIXPt2tloDnn2tMzvvrKzgGBS1Lcqv2ndhBCunBxNCQCHly4T2Rz8TJnm2XglS0d/VygcMuMSL0San5DwXYNnN4P0xD/MXOdqrxcusIzKBbSHWPqInRmYUTymDtcqXWK3Cz6kRUXjBkRoSvDs8PBAvnaC2361xol6uyMqZo==aMy0-----END PGP SIGNATURE----- Maybe I should take up a collection for OSX server edition(only half kidding) There is nothing wrong with bot trading.Your attention span is that short, sure.Grown-ups take a longer view. Bitcoin has always been a risky proposition.  Anyone who has ever thought otherwise is a fool."no forward moves of late" and "very little upside going forward" is clearly a troll, or a daytrader.  The sample size (timescale) is far too small to make any such prediction. NPR is left / pro-nanny-state government.  NPR editors likely believe that bitcoin is in the same category as (from their thinking) those evil Ron Paul goldbugs, and therefore are Very Wrong. Oh good grief, let's not reinvent the wheel again.Just use the efficient binary protocol already supported by pushpoold.
Sorry, cross-thread stupidity on my part.  Wallet encryption was pulled, not import/export -- though we do want to merge import/export soon! Thanks for taking over "the C miner" project! Sorry, this is not scalable approach.  Please re-think.If all miners implement this, then each pool server must implement version checking code for every supported miner.  Each pool server must update their source code for each updated or new miner.In contrast, if a miner client provides "X-Feature-Supported" in HTTP headers, then there is a simple check in the server that never needs to be updated.User-Agent is the wrong approach. Correct.  In addition to changing EASY_TARGET, you must update check_hash.IMHO the bounty should go to the person submitting a patch that makes difficulty variable, without recompiling the source code! To repeat, for the cheap seats:  you cannot steal existing coins without the proper keys. cpuminer has largely been superceded by Con Kolivas's cgminer fork.  See cgminer's official forum thread for updates and details. Read the whole paper.You cannot "steal" existing coins without the proper keys.With sufficient CPU power you can double-spend, and mine a lot of new coins for yourself. pulled into upstream It sounds like 'the joint' is not running 0.3.24 either, and so, is using an older fee schedule with much higher fees. Yes, most definitely.Nodes requesting block chain downloads can have their downloads cut off abruptly, on older versions of bitcoin.The more people running 0.3.24, the less this awful behavior will be seen. Bump.  All users are encouraged to upgrade to 0.3.24, to avoid block chain download issues currently seen in the field. Yes.  See the original post in this thread. No.The problem is with miners submitting old work.  They should not submit work older than 60 seconds, much less 120 seconds. pushpool keeps a log of the last 120 seconds' worth of work received from bitcoind.unknown-work error occurs when a miner submits work that is not in that log. ...and how does the client inform the server that it supports this feature?From the server's perspective, it must support may different clients, and cannot know if 'target' or 'midstate' is optional without additional information. Just to be clear...The upgrade / wallet update procedures are the same as with the last several bitcoin versions.  There is nothing special about updating to this release, versus past releases.The advice posted in this thread is standard, general advice that you should always follow when updating:  back up your wallet (you are doing this anyway, right?) That is referring to this git commit: It is coming soon.  OSX builds are always delayed a day or so, because they are not integrated into our gitian build process like linux/windows. Patches welcome... To what does this refer?The installation procedure is unchanged since 0.3.21 (or before).
Bitcoin v0.3.24 is now available for download athttps://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.3.24/This is another bug fix release.  We had hoped to have wallet encryption ready for release, but more urgent fixes for existing clients were needed -- most notably block download problems were getting severe.  Wallet encryption is ready for testing at https://github.com/bitcoin/bitcoin/pull/352 for the git-savvy, and hopefully will follow shortly in the next release, v0.4.Notable fixes in v0.3.24, and the main reasons for this release:F1) Block downloads were failing or taking unreasonable amounts of time to complete, because the increased size of the block chain was bumping up against some earlier buffer-size DoS limits.F2) Fix crash caused by loss/lack of network connection.Notable changes in v0.3.24:C1) DNS seeding enabled by default.C2) UPNP enabled by default in the GUI client.  The percentage of bitcoin clients that accept incoming connections is quite small, and that is a problem.  This should help.  bitcoind, and unofficial builds, are unchanged (though we encourage use of "-upnp" to help the network!)C3) Initial unit testing framework.  Bitcoin sorely needs automated tests, and this is a beginning.  Contributions welcome.C4) Internal wallet code cleanup.  While invisible to an end user, this change provides the basis for v0.4's wallet encryption.Full changelog ("git shortlog v0.3.23.."):Dawid Spiechowicz (1):      added polish translationDoug Huff (1):      Add OSX App bundle and correct build instructions to reflect reality.Eric Hosmer (3):      Updated Visual C++ makefile.      Further updated Visual C++ makefile.      Add keystore.h to makefile.vs's header list.Gavin Andresen (3):      Boost unit-testing framework.      Block-chain lock-in at 134444      Do not use comma as thousands separatorGiel van Schijndel (2):      rpc server: send '403 Forbidden' to rejected clients      rpc: don't send 403 when using SSL to prevent DoSHan Lin Yap (3):      Double check translation and improved a translation string      Update swedish translation      Consistent Bitcoin example addressJames Burkle (1):      Edited init.cpp to include a check that -datadir existsJeff Garzik (6):      FormatFullVersion: build fix related to recent translation improvement      doc/release-process.txt: minor updates      CWalletTx::GetAmounts(): pass NULL for CKeyStore*, rather than false     t      Enable DNS seeding by default.      Bump version to 0.3.24.      Bump OSX version to 0.3.24 (missed in previous commit)Joerie de Gram (1):      Fix connection failure debug outputJordan Lewis (:      Only include irc.h when needed      Only include db.h when we have to.      Only included rpc.h when necessary      Only include net.h when we have to      Only include init.h when we have to      Only include strlcpy.h when we have to      Remove some globally unused headers from headers.h      Only include certain boost headers if necessary.Matt Corallo (:      Update translations and remove obsolete translations.      Add new DNSSeed dnsseed.bluematt.me.      Only use dnsseeds and static seeds when not on testnet.      Make UPnP default on Bitcoin but not on Bitcoind.      Give more detailed error messages for connection failure.      Added a couple minor things to match newer build process.      Revert "Make UPnP default on Bitcoin but not on Bitcoind."      Enable UPnP by default on bitcoin, but not on bitcoind (on gitian)Pieter Wuille (6):      move wallet code to separate file      CWallet class      Bugfixes walletclass      Fix segfault when creating new wallet      Limit response to getblocks to half of output buffer size      Fix synchronization of default keyShane Wegner (1):      Fix missing includes needed for Boost 1.46.Stéphane Gimenez (1):      Fix AddressBook syncrhonization between a CWallet and CWalletDBWladimir J. van der Laan (1):      add GetTotalBlocksEstimate() function, move magic number to constant-----BEGIN PGP SIGNED MESSAGE-----Hash: SHA14909c17a1cc025c6f6c88d036f0b487c51c510f6  bitcoin-0.3.24-linux.tar.gz58531249230f769fdc755822b41e0f18ba59512c  bitcoin-0.3.24-src.tar.gzd4b5425eff673551a326d5326b92a06359dc1a3d  bitcoin-0.3.24-win32-setup.exe520aed70ee28a0a91ed49dd983639cb1fab2a93c  bitcoin-0.3.24-win32.zip-----BEGIN PGP SIGNATURE-----Version: GnuPG v1.4.11 (GNU/Linux)iQIVAwUBThd13todwg8tvwyoAQKnVhAAnQzWKk5HrY5eMIprWwtsFZL0VOxAV2nVKn8NISmYk7PtfhzRm2sf0YYr369e7NtKAzdVNTRl+9m4RwQ6HhvzrChWG3OXxueAAYg2JkS3oXbU2p4zOQT0/0ILp7iiHGhXCrEyd3bU5KkWOJhUnV0lS3ZzsELf8sabI5MYQsrpZ9HZUI13e1ak/E0cub2gvxl+4D5Eg7EkNP71APR1MXGGzcfF7vlDYf4/j1JTtkrBVZU6yFi8fNUxMQ/8G/0vyWLOOoCxaSvl5u5kssbI4rklhTA+BaqE1apxxZN9Re0KjQ8cZiLQnVG9RhJsPhWe5tJRGqnKmaKF0gDELihFw9JLBDQkeSlhkhGxwYtOfMClTDbd2qj5+dmvIrJPmDYHpGvmEO6xPsiv0qaNMZ1X/yMd9pp7nyCYosWBu/vcPF0i4I27SDgRZ1TCPSgJgDQ4gEwKgzO69HywJw4KSkJq5MdecJDGRqTaYaf2QI757pBXzFF3qORECSt5QIOjV1+bUc+1pB6450OfrZ+fTMMyWGF8t9t+TMAOwqoRE0AMx2V+g+w6AXtpar4vsh0erexissREf6g1tW5ogy21Cv91MbIGZA9lUKNeU0NpOgYSTNd5DvlbF7VpRZemSIz9gGWayqEi0G1oBQDo6DFcjeCS0okrIWPep4o1uoYzxhxoauT2XEM==hgmn-----END PGP SIGNATURE----- 1) pushpoold will submit all solutions with at least 40 leading zero bits.2) cpuminer (and cgminer?) will submit all solutions with at least 32 leading zero bits.This implies that some solutions will be rejected, because they do not meet the mainnet target difficulty. Why not just use a current version of poclbm, which automatically switches instantly when any issues appear? Are you sure that you are passing a list of servers to "--servers" ? Use a miner -- such as recent poclbm -- that automatically falls back to another pool.Why run home at all, for a simple miner hiccup such as temporary pool downtime? The default client requires the current hash at 134444 to remain unchanged.  This is exactly like all previous block chain lock-ins. Watching thread. Speaking as the thread creator, the purpose of this thread is to create a log of bitcoin press links.It is not intended for any discussion of links whatsoever.If you feel a link will generate discussion, feel free to create a new forum thread, and include that link in your post here. Bitcoin 0.3.24rc3 has been uploaded.Fixes appeared after -rc2 was tagged, so we just skipped straight to -rc3.Maybe final release on Friday?Changes since 0.3.24rc1:Gavin Andresen (2):      Block-chain lock-in at 134444      Do not use comma as thousands separator     Using the comma as thousands sMatt Corallo (3):      Added a couple minor things to match newer build process.      Revert "Make UPnP default on Bitcoin but not on Bitcoind."      Enable UPnP by default on bitcoin, but not on bitcoind (on gitian)Pieter Wuille (1):      Fix synchronization of default key-----BEGIN PGP SIGNED MESSAGE-----Hash: SHA1dec9ff63fe6d0cffb2abc723281a4135c22f19ef  bitcoin-0.3.24rc3-linux.tar.gzc171c6e5128d570d5d7d5a6896b672fcab778933  bitcoin-0.3.24rc3-src.tar.gzd4b5425eff673551a326d5326b92a06359dc1a3d  bitcoin-0.3.24rc3-win32-setup.exe0653302ac7f8b052d58667ae30da53c4f6230be5  bitcoin-0.3.24rc3-win32.zip-----BEGIN PGP SIGNATURE-----Version: GnuPG v1.4.11 (GNU/Linux)iQIVAwUBThS+Xdodwg8tvwyoAQINthAAqxOnungGYS1o7IB3D3M1NRPD/O/WNoB4ANIn+oZLYy5+0yZylckT/gbkPY3PkhsIE8hVqbxGDYaDzUpjwN+DLd+EMPg5/2vrTp2b77Lzh6QszZzZhrs9LPLsB8Q/jzCAbbChAekkAAe4sGm0MFkxMEYaXE+RF/ujPX36hdtmWYMzeXwf3PtbI8rAE9ESwXVVF8B7/qFvDhy4lrbXaNnGb3hGyowrNVBMm1s4jyk/Lq5pPcoKlRN6kiujCbZBIy6VKgc74YaoMOrznHryoeYQVCg4tySfKkuGgfiZFEL6EwYeY8ipjcRBVLFGxbwzCbIhBcBO/Je2yC+EwAOplfyy+GBE3rXLuUknAzMiL1i5nX6dNmkYqVE0+pbv81FeT+uc1i63CIjquLdVbxh3omdpYdYHs9q/zN/9geHU4WnpwwZhTFEclzZUOGo8IJ0wiNsTyQv9mwVEjoslnubXh4omqbW7Tpm7cXiPjlDZ42Ay+Z+AvafdLYP27vfjWJoMbjcu6qU2EXBOhmpkeaIcV43oEAd7suy0OLUq8iNMpQHjlLnH0pcN8r38Tq+vuCuhPZtiPZd5dVKSF3PaCB6vAv8MulE0yhP2LEq3Q4MzxSlgGNEWCGIv19YfMnURxGMNMKB0cyQ8SMdLDR+IIB3NB5SreeG8c8P97s5pVnHOvTnpHyw==vKTJ-----END PGP SIGNATURE----- You must rotate/trim the logs yourself.The logrotate package can help you with that. Good thing poclbm supports any number of fallback servers...  btcmine is my primary, and it is down for me too.Looks like several pools, not just btcmine, are having problems. Sending a normal SIGTERM signal is the normal way to shut down pushpoold.  So killall works... provided that it does not send a SIGKILL (kill -9) immediately.pushpoold will receive the SIGTERM, and initiate safe shutdown procedures, closing files and database connections properly, etc. OSX build uploaded, new sums:-----BEGIN PGP SIGNED MESSAGE-----Hash: SHA15340ee00a777e5b87a0d742ea931760916a1fac4  bitcoin-0.3.24rc1-linux.tar.gz6c13efa277a0648a6a57f7033877cfbd7cf872e4  bitcoin-0.3.24rc1-macosx.zipf7f941a4fc33da7225262ccaad6147352dd2b342  bitcoin-0.3.24rc1-src.tar.gzefcdf578bb60a056c43f8dd40505461ea7d7c930  bitcoin-0.3.24rc1-win32-setup.exe0b2560b3facba4301562441f6b8dea9eb2249d77  bitcoin-0.3.24rc1-win32.zip-----BEGIN PGP SIGNATURE-----Version: GnuPG v1.4.11 (GNU/Linux)iQIVAwUBThEmr9odwg8tvwyoAQIQFA/+PyjKAXU0admjAKjXl1sMgEdhpURTntnGVMds34pEO6aD/E1mVvBqaSTZFsCCv69VNn2rF3Vr1JAL5HNMTIyo95XhXteXNS93z+w9bCnHaaYG3xMjA5g4OXr4+zVRedsL/P9uCn3qfRkchU8frT8O+2E3CQs//BpwuMP3tbyNQJMJC74YbICFLKLqDUKCFABuly42QuEnEZuhPNifBVOj3sDggWKMxWaLUyH0g9Yz1gE5Z+FGhZpJBKvb53Hqc7euHBpOTJw/QNGC6JFoBh+7DAg7FtuGScQ/fZvPd5PlskPVasl88LB7rzLuubT/wGXfgOGaysx0kgxaYQyaeDOhmmC4XTy1xTUJ46QWc4sXUTIbD8H6WOp20xndt5cAne/BM3GFc5TLzUt2K6OdiZ8d2khGaXXGmamNxPwm6zyTLR57QRVOxXROA10H7Attl76f8UpKhOJMtSxxosGgJ4gV85TORk0WWMgFBxeR4Ib9qN4eA1sPbGrb5d8WHsNuv7mD7r2CWvBqxu2rApLrMLezIAXPWZnmrlAKjmwrRu8PfvKd6g95d7tE6YAmgmHkPSiByvHS8hBl3JVYsIS7H6JaXbLonX+KrlhQvyiB6EpWGVsU5TBm1MI3Ebq3H/Ca/KCOxvr1sQewagwuKlaJgkGvPOJzk/DaQiZBiNmrhYqaSvA==zEK0-----END PGP SIGNATURE----- Can you change the name to something other than the now-misleading "cpuminer"? Bitcoin v0.3.24 release candidate #1 is now available for download athttps://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.3.24/test/This is another bug fix release.  We had hoped to have wallet encryption ready for release, but more urgent fixes for existing clients were needed.  Wallet encryption is ready for testing at https://github.com/bitcoin/bitcoin/pull/352 for the git-savvy, and -hopefully- will follow shortly in the next release, v0.4.Notable fixes in v0.3.24:F1) Block downloads were failing or taking unreasonable amounts of time to complete, because the increased size of the block chain was bumping up against some earlier buffer-size DoS limits.F2) Fix crash caused by loss/lack of network connection.Notable changes in v0.3.24:C1) DNS seeding enabled by default.C2) UPNP enabled by default in the GUI client.  The percentage of bitcoin clients that accept incoming connections is quite small, and that is a problem.  This should help.  bitcoind, and unofficial builds, are unchanged (though we encourage use of "-upnp" and port forwarding to help the network!)C3) Initial unit testing framework.  Bitcoin sorely needs automated tests, and this is a beginning.  Contributions welcome.C4) Internal wallet code cleanup.  While invisible to an end user, this change provides the basis for v0.4's wallet encryption.Full changelog ("git shortlog v0.3.23.."):Dawid Spiechowicz (1):      added polish translationDoug Huff (1):      Add OSX App bundle and correct build instructions to reflect reality.Eric Hosmer (3):      Updated Visual C++ makefile.      Further updated Visual C++ makefile.      Add keystore.h to makefile.vs's header list.Gavin Andresen (1):      Boost unit-testing framework.     make -f makefile.{unix,osx,mingw} test_bGiel van Schijndel (2):      rpc server: send '403 Forbidden' to rejected clients      rpc: don't send 403 when using SSL to prevent DoSHan Lin Yap (3):      Double check translation and improved a translation string      Update swedish translation      Consistent Bitcoin example addressJames Burkle (1):      Edited init.cpp to include a check that -datadir existsJeff Garzik (6):      FormatFullVersion: build fix related to recent translation improvement      doc/release-process.txt: minor updates      CWalletTx::GetAmounts(): pass NULL for CKeyStore*, rather than false     t      Enable DNS seeding by default.      Bump version to 0.3.24.      Bump OSX version to 0.3.24 (missed in previous commit)Joerie de Gram (1):      Fix connection failure debug outputJordan Lewis (:      Only include irc.h when needed      Only include db.h when we have to.      Only included rpc.h when necessary      Only include net.h when we have to      Only include init.h when we have to      Only include strlcpy.h when we have to      Remove some globally unused headers from headers.h      Only include certain boost headers if necessary.Matt Corallo (5):      Update translations and remove obsolete translations.      Add new DNSSeed dnsseed.bluematt.me.      Only use dnsseeds and static seeds when not on testnet.      Make UPnP default on Bitcoin but not on Bitcoind.      Give more detailed error messages for connection failure.Pieter Wuille (5):      move wallet code to separate file      CWallet class      Bugfixes walletclass      Fix segfault when creating new wallet      Limit response to getblocks to half of output buffer sizeShane Wegner (1):      Fix missing includes needed for Boost 1.46.Stéphane Gimenez (1):      Fix AddressBook syncrhonization between a CWallet and CWalletDBWladimir J. van der Laan (1):      add GetTotalBlocksEstimate() function, move magic number to constant-----BEGIN PGP SIGNED MESSAGE-----Hash: SHA15340ee00a777e5b87a0d742ea931760916a1fac4  bitcoin-0.3.24rc1-linux.tar.gzf7f941a4fc33da7225262ccaad6147352dd2b342  bitcoin-0.3.24rc1-src.tar.gzefcdf578bb60a056c43f8dd40505461ea7d7c930  bitcoin-0.3.24rc1-win32-setup.exe0b2560b3facba4301562441f6b8dea9eb2249d77  bitcoin-0.3.24rc1-win32.zip-----BEGIN PGP SIGNATURE-----Version: GnuPG v1.4.11 (GNU/Linux)iQIVAwUBTg/c7Nodwg8tvwyoAQIptA/+M4fSPxk994B2+CeVGX3lt0MzxQpaNpJNelZjgf2E7gp6sBFxkDGeL2ZtWl9Txswco8UzrehVCY8ne7Q2FrBWgXs6wibwLlWbLa0ll2rA8iGysyJPgd9exaN97Etq/onBjxDYHmlKYLeH/VFdIj3LfO2CWPBGRayDQqQzT59glNqObLN81Bnj0nHChZS682ycsgT+iGppCeynz5URhxO0IZ3FCj0PFnW1jbUki5gTCgiuDth7ADymfd/lqN3LeZJYppd9BzjrSSUTujwvhyPUppfUMoYV8Tm+Tg/zskTRiYcTxE182lmTYH1vKGSV8AQ5wT0JkB/HbhXqMRJgMr5Fly8tJqYKKeg9XQvP2l0flcsUuzCecFiYeltc74P4dSe04EzYStavfYYdrW6ftkWk08yfeLb7owOIaPgXGJkUTsWIu/Ld4GrvdXtlSeuowXkjhdjiKTgBzKuWl8KGOLVSFLmFz24LBYjKFUxLmc1S2p71kQ2Aq+t97WhA7FKpLbf2TmHAv2KobujWDCIzJ96duGbvZpg1bYNyNp58E31x2gGTJ7Wswddhs0ZSnIcEvZ5U6bohlpzPTKXLUxEFtg1ERoYWt/htjTCVDKV2I6VpBww2U9atOiIe93+O6f9aYDro9HQXsLeyFHbgx//2fiuHzsvWwIoey/k4zeUIPUe5TQk==O8dr-----END PGP SIGNATURE----- EDIT: nevermind Send SIGHUP to the process, to re-open the logs (such as after rotation or deletion). That's because it is called 'getblockbycount' not 'getblock' these days. Sounds like user error.  INSTALL file covers the basics of how to use a standard GNU autotools configure script.  A script cannot magically detect site-specific directories for software installation.If you have a bunch of stuff installed into non-standard directory /usr/local -- common on FreeBSD -- then you want something likeCode:CFLAGS="-O2 -Wall -g -I/usr/local/include" LDFLAGS="-L/usr/local/lib" ./configure The pull queue is basically empty, so I'm not sure what you're talking about.
These requirements seem quite heavyweight.Consider asking for reverse [caching] proxy volunteers.  Just need to install one piece of software on each mirror, presuming that the main blockexplorer server provide useful last-modified and/or etag headers, and potentially other cache-control headers.A reverse proxy with a reasonable disk cache will only touch the main blockexplorer server the first time a new request is seen. Just for knowledge...  what performance do you get with 1 thread per card? Version 0.5.1 released.This is a bug fix release, with two minor bug fixes:- fix stderr logging- better configure script host detection pushpool makes you work harder for your testnet coins Patches to implement a full and correct target check are welcome. pushpoold requires 40 bits of zeroes before submitting upstream, not 32. Hopefully we can get out of the business of distributing Linux binaries altogether.  It is very difficult working on all Linux OS's and versions, and this problem has long been solved by others:  packages.  Each OS needs a trusted packager to handle proper builds for that OS. Amusing.  So the blogger can view public information on public websites (yet not even get my name right). Now that cpuminer is being updated to support OpenCL mining, a new thread has been created for support for the GPU mining aspects. The software formerly known as 'cpuminer' is being updated to include OpenCL GPU mining capability, thanks to Con Kolivas.  Until this software is fully "baked" and ready, it is being developed on a git branch at https://github.com/ckolivas/cgminerOnce stable, we intend to merge Con's work and rename 'cpuminer' to something more appropriate.Update:  See this cgminer thread for official cgminer support and development. Greek savers rush for goldhttp://www.ft.com/intl/cms/s/0/c986823e-9bf8-11e0-bef9-00144feabdc0.html(free registration required, to read 10 or so articles per month) This has nothing to do with pushpoold.  pushpoold is just an HTTP proxy, sitting between mining clients and bitcoind.All commands such as listtransactions go straight to bitcoind as usual.  'getwork' is the only JSON-RPC method supported by pushpool. Folks, in the grown-up world, trades are unwound when the market malfunctions. Talk to MyBitcoin and law enforcement about the IP addresses involved.And maybe suggest that MyBitcoin implement IP whitelisting, like any other sane financial website. A user randomly emailed the following sha256 core update:http://yyz.us/bitcoin/sha256_xmm_amd64_atom.asmAnybody want to test this, and prove his assertions? Agree -- please download from bluematt's repository or https://sourceforge.net/projects/bitcoin/files/OldFiles/As Maged indicated, if you download the block chain outside of P2P, the block chain will not be verified and could potentially be quite wrong.  Users are urged to avoid the download provided by the OP. This is...  60% true It is bad PR, but it is also the primary current attack vector, because wallet stealing is so easy right now.  The majority of trojans and malware are stupid, and are actively exploiting this. This sounds like a griefer who does not understand how bitcoin works. Nobody claims this will solve malware infections.A simple keylogger can defeat this.But we need to raise bar so that "cat wallet.dat | mail" thefts will not work. I was not offered a referral bonus.I was offered money, specifically, to say that bitcoin7 was better than mtgox.  The text of the email has already been posted. Some minor updates to the released files:1. Linux tarball regenerated with properly named directory inside.2. Win32 .zip archive added.3. PGP-signed SHA1SUM.asc added to SFThe following are the updated checksums:-----BEGIN PGP SIGNED MESSAGE-----Hash: SHA1d7a34e1151dedfba5af1bf7496ed041f5b4955e5  bitcoin-0.3.23-linux.tar.gz42e8a86a97edcafb12d09fa69b56ad0451baa140  bitcoin-0.3.23-macosx.zip779c6bb227801a51084be9594dc185d0a054ed53  bitcoin-0.3.23-src.tar.gz12952b1c4a15ce55564500dace18ee22eb2feaa8  bitcoin-0.3.23-win32-setup.exe89194d3b3ee87f450f520cf365b863e0fab8bc9f  bitcoin-0.3.23-win32.zip-----BEGIN PGP SIGNATURE-----Version: GnuPG v1.4.11 (GNU/Linux)iQIVAwUBTfp5k9odwg8tvwyoAQIJ9Q/9GHiSA8oEuQM29qu1laCD45AY9lnsJeNNZNRiAE92WJ7SiSKxW6V1M1phMk4IMG/0MmR8L/PRqJfWDg+6FQzAzpZLobH0HnflMujhKIhRcP1zs7m/t/zwjQxRXT+N6UotfdwvO+GLbBnUSVZC2zr/9XdSs65gLIhqlMkJUwYLEBvuXvo98Sbp5MeXHdfWUqAQufuYnMvRsCT9BcX5cP8cmaxvICLANRbc89kU+7JQ7fauiHTnYJ0GkK/xIyCnlwfGsEe8GQsIgWF0RBpayszCxSOsuzFYMsED7cIjN9AscDiJ3UmhXSg6xbRi4LZGXm195TmMdxJdRNHWqjfpFkxEXoW7iuUvxVDUtiMMA+yXMTUSdbn2IxdZFLqKpgXcpf05T91g9w/ll1VMxkmOOcTSZc5dCbMMUn0zkA12PagjDlH+xz3Qab9GNV13XlHKbG0VT8AsE1No+HJCV8qugMdI6hgZqMDucbmQU2KiG0EpwNx2G31l2K99yIxuumE7nDslhkfzSosVXhgHwqzr4ukl5ykFwfZnJjHFBJ0zrcWCViGes+3awHwASQvlIGcvXprEzC0ZKEsbalZkAoCYYiGoZbNHtEMq3lZqd0siUzwEPA31xfS/dACbX8ml8jC0jBmEy296WZ2LX7pZOcqa2ayMbGE81tg+5NvyUYihPYX4FS0==9NXu-----END PGP SIGNATURE-----
Incorrect.  Besides being slower than other CPU miners, the built-in CPU miner has never supported pooled mining.  It only mines full blocks.  Thus, users either get zero BTC (highly likely) or 50 BTC (highly unlikely).At current difficulty, you get a block once every 8 years, at 10 Mhash/sec.  http://www.alloscomp.com/bitcoin/old_calculator.php See the big bold text in the top post -- most transactions are free.I am quite sympathetic to this PoV... Setting scantime far too low will probably cost you money.  At some point overhead becomes more significant than hashing, as cpuminer is not fully pipelined. It is highly suspicious when the site operators do not appear on the forums or IRC or otherwise introduce themselves and build trust.Rather, they simply hand out free money.  They first contacted prominent members of the community in an attempt to proxy trust.An exchange is a huge responsibility, basically a bank, and there is literally zero rep. This is smells like a scam, particularly with Mr. Kz3ro's multiple posts and free money.See this other thread for more details. Well, it's not a very good scam if it's immediately detected.  A smart scammer builds up a bunch of USD and bitcoin deposits, and then disappears. Several mini-proposals related to protocol version were just posted to the bitcoin-development list. Here is the first paragraph of the first email sent to me by bitcoin7:(emphasis added... mine) Do not feed the trolls... At the present time, eastern European cybercrime is a far more clear, present and real danger to bitcoin users. Yes, these people are total unknowns in the community.  Be wary. How much were you paid to make this posting?bitcoin7 contacted me, and offered me coins in exchange for a positive forum posting.They have never heard of AML, and are run by unknowns from Bulgaria. I see a whole lot of handwaving in this thread, and very little substance.  But Mike makes a relevant point,The relevant question to me is:  what widely used software enables UPNP by default?If UPNP is enabled by default on widely used software, as your post seems to indicate, then it seems reasonable that bitcoin may follow suit.  I know plenty of P2P software supports UPNP, but what about default-on? Then he should contact the dev team:  http://www.bitcoin.org/It is known that there are certain ways to DoS a P2P node, but amplification attacks and DDoS are a different beast. Version 1.0.2 released.Changes:Christian Ludwig (2):      Fix libcurl include path      configure.ac: Beautify yasm test outputJeff Garzik (3):      only read processor count via sysconf on non-Windows platforms      Fix number-of-threads init logic on Windows      Version 1.0.2.ckolivas (2):      Linux + x86_64 optimisations.       Cope with older linux kernel headers that don't have the newer scheduling  Version 0.5 released.Changes:Jeff Garzik (2):      applog: fix memory leak; check asprintf() return value      Version 0.5.Joerie de Gram (1):      Make ntime rolling support configurableLuke Dashjr (1):      Bugfix: libraries must be in LDADD, not LDFLAGSMtRed (1):      memcached_get & memcached_set key length is off by 1. Double null make getShane Wegner (1):      Output times on STDERR in human readable format. RE merchant (receiver) paying fees:  not really workable in bitcoin.RE always pay fees:  it is silly to discourage bitcoin users with fees that are not necessary.  The vast majority of transactions do not need a fee, as the miners receive the block reward for securing these transactions.It is available today from bitcoin.org.  Isn't that wonderful? Many people worry about such a feature being hijacked, and rightly so.  One SF hack, and you can steal many bitcoin wallets through a trojan'd binary + auto-update.In theory this is possible through a chain of trust, but it is quite complicated.  Do not expect this any time soon. Can you pastebin the error, or take a screenshot? How about re-reading the top post, which (a) mentions wallet encryption and (b) provides a link to code implementing wallet encryption.
Your OS needs to update /usr/include/sched.h to include this definition.If you add   #include <linux/sched.h>does it fix the problem for you? RE microtransactions:  this is a FAQ.  It is even in satoshi's original paper and crypto postings.  Bitcoin was never intended to be a useful microtransaction network.  Bitcoin is not optimal for microtransactions, and probably never will be.RE fees:  the rapid increase in value caught everyone by surprise.  Months ago, we were dealing with "penny flooding" on the network.  Now, 0.01 BTC is a non-trivial amount.Right now we are releasing new versions of the software as fast as possible, trying to fight the biggest fires ("triage") impacting users on the network.  We know fees need work, and there are already pull requests trying to deal with this:  https://github.com/bitcoin/bitcoin/pull/289Longer term, we want the community to participate in a discussion about how to best balance (a) rapidly changing bitcoin value with (b) protecting the network.Right now most transactions do not require a fee, but the default client requires a fee in a few situations:1. Transactions smaller than 0.01 BTC2. Transactions whose byte size larger than the 27k free transaction area (very rare)So, to answer the question "why not make it easy to ignore fees?" is really unspending is very difficult.  If it's just a checkbox for users, a lot of users will uncheck it, their transactions will not get relayed or confirmed, and their coins are simply lost in limbo: never confirming, and no way[1] to recover.Losing coins is a horrible user experience, far worse than having to pay 0.0005 BTC.But we are open to all suggestions about transaction fees.  You just have to understand the "unspend" problem in its entirety, and the support nightmare that goes along with it.     Jeff[1] Technically, this is not really true.  You can "unspend" by restoring a wallet backup or some other esoteric means, but this is not something within the reach of your average user. MacOSX uploaded.checksums:-----BEGIN PGP SIGNED MESSAGE-----Hash: SHA15ca82c5b694fc432b4b342dde5cd1b145e265f13  bitcoin-0.3.23-linux.tar.gz42e8a86a97edcafb12d09fa69b56ad0451baa140  bitcoin-0.3.23-macosx.zip779c6bb227801a51084be9594dc185d0a054ed53  bitcoin-0.3.23-src.tar.gz12952b1c4a15ce55564500dace18ee22eb2feaa8  bitcoin-0.3.23-win32-setup.exe-----BEGIN PGP SIGNATURE-----Version: GnuPG v1.4.11 (GNU/Linux)iQIVAwUBTfanjtodwg8tvwyoAQKpiw/9EnLaoU+X8tCn2fDxxVNwukxE5voMfRB+zxx2Sp4RuCwwylkQe6QgvdyNU0lk3lRkIkmI3RpzgK4fkR0KyvIKX30oHRpnUBz1ck5W9sK9fFfxML044sonSMVXwWxsStaHGdvkCxH1Tpy6ZGW15g1QuS9oo/l3jHu1EGbvE6fU/dL8X35TOEnPScWGdl0gm3bZLWaZ52vN77MUtBF9Fu1NDuS9sw90fr5loMZH/BRbnFDARGiH5j/hd5fBKlJ3CS2lonAHdt6MUXbm8VPax4yu2N62dZ7xWVUbL7Hl6XMTdDqT8q2Q57Xyg471C2BwGGX7MzBnYtGMQOTi8+4EtH40PSyskb9lv5PdVsFdkLxAS1HTJ/maM4FVoYs3Db6ELb+4pkCJRUXneFQkhwWEu2QxesYwl9pbbi3jOdFqElCCQnEZ19vNLXEkh1OdRBPAqiuq3xmeHJ2V7kFOrT0ZEx8oDNe1og384AP0iMg/jFMKFSdCJjJJwrovzxsXm6EJJeiyfdZ74Ph0aMO6ANMioep+oOENQyatfoH9tLi9hmlJlREt1ALL+XY4ceoZWvBiWv5CCwBNtRE+NzlVoCJGRZXacAUqbXrohpbPIZrDIZyv3PCKaVe0cgOJte3ygtxUtJweu/VLFx7CpTO3w12mLRpPxDk75zH/ogBVh8UGunKnOQc==PEok-----END PGP SIGNATURE----- Hoping to make this a priority for the next release.Review requested!  https://github.com/bitcoin/bitcoin/pull/232 Win32, Linux, MacOSX and source releases for bitcoin v0.3.23 have been uploaded tohttps://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.3.23/This is another quick bugfix release, trying to deal with the influx of new bitcoin users.Priority for next version:  wallet encryptionMain items of note:P2P connect-to-node logic changed to reduce timeout a bit.  The network saw a huge influx of new users, who do not permit incoming connections.  This change is a short-term hack, to more quickly hunt for useful P2P connections.  Better "leaf node" logic is in the works, but this should let us limp along until then.  One may use -upnp to properly forward ports, and help the network.Transaction fee reduced to 0.0005 for new transactions (see note below)Client will relay transactions with fees as low as 0.0001 BTC (see note below)NOTE:  There has been some fee confusion recently.  Free transactions are supported and relayed as they always have been, according to special anti-spam rules.  See https://en.bitcoin.it/wiki/Transaction_fees for details.Full git changelog:Dean Lee (1):      Updated Chinese Simp translationDoug Huff (3):      Fix rfc1918 and rfc3927 compliance for ignoring non-internet-routable host      Add common temp files to .gitignore.      Demystify a few magic numbers.Han Lin Yap (2):      Added Swedish translation      Remove unused variableJeff Garzik (4):      Bump version to 0.3.23.      Reduce minimum TX fee for new transactions, to 0.0005.      Lower minimum relay TX fee to 0.0001 (from 0.0005) BTC.      Add minimal release process docs.Matt Corallo (1):      Fix CPU Usage bug when using -nolisten and have no connections.Nils Schneider (1):      create keypool in LoadWallet()Pieter Wuille (3):      Update transactions already in the wallet when rescanning.      Fix for small change outputs      Faster timeout when connectingThere were no changes between -rc1 and -final. Multiple pushpoold's and multiple bitcoind's.  The only question is about database scaling... Standard advice -- your autotools installation is old or broken.  Use release tarball. *facepalm*This is stated in satoshi's original paper, and should be patently obvious to anyone.  Block chain confirmations equal transaction security.Pretty much.  The vast majority of this stuff is covered in satoshi's original paper, the wiki or FAQs -- all of which are easily accessible. It's open for discussion...  some people want it default.  Others are concerned about bitcoin opening a port on a firewall by default, a potential security issue, they claim.Input is welcome, particularly examples of popular, in-the-field software using UPNP by default. There is also -upnp option... Probably not, we've taken steps to make sure that works.  But if you jump back too far in time, that could create a problem.Define previous version.  All recent versions handle full precision correctly, though the UI might not display it or other cosmetic details like that. There will be a lot of fee-related UI changes in the next version.  Matt C already has a 'better fee UI' pull request at github.This version is just to triage the P2P network, until we get to that awesome, big next version with wallet encryption and other useful things.The point of v0.3.23 is to release it fast, fast, fast...So people: test, test, test!   We're working on a forum reboot, switching the current mess for a more business-professional one at weusecoins.As the "official" bitcoin forum, this is just an embarrassment. Hum... good question... RE speeding up client:  -dnsseed does the same thing as manually grabbing fallback nodes. Bitcoin is tiny, and will be for a while yet.That means, necessarily, that one bored VC or trader can create a major move in the market.Volatility is a given when it's young. Oh.  This is an old and well known problem.  Nothing to do with pushpool at all.luke-jr worked around it in bitcoind with http://luke.dashjr.org/programs/bitcoin/w/bitcoind/luke-jr.git/shortlog/refs/heads/getwork_dedupe but there are other options for varying the coinbase as well. No, you have to hack the client in order to send spam.In the future, people are considering a checkbox to avoid the recommended fee. MacOSX -rc1 binary uploaded.  Updated sums:5ca82c5b694fc432b4b342dde5cd1b145e265f13  bitcoin-0.3.23rc1-linux.tar.gzcdf6f76a41c880ebac53455e373fa78602da7be7  bitcoin-0.3.23rc1-macosx.zip8853206ec4d9e48bb41a0482ac1367f6fb01bcad  bitcoin-0.3.23rc1-src.tar.gz12952b1c4a15ce55564500dace18ee22eb2feaa8  bitcoin-0.3.23rc1-win32-setup.exePGP signed: http://paste.pocoo.org/raw/405159/ *facepalm*  Wrong.  If major miners deviate from what the rest of the network accepts, then they are simply self-selecting themselves away from their client population.If 80% of the hash power suddenly decides to start minting 100 BTC per block, that does not imply that clients will follow their lead.The entire community, including holders of bitcoin, must decide on major network changes.
For normal transactions yes.  For spam transactions no.  Quoting, SHA1 sums for rc1:5ca82c5b694fc432b4b342dde5cd1b145e265f13  bitcoin-0.3.23rc1-linux.tar.gz8853206ec4d9e48bb41a0482ac1367f6fb01bcad  bitcoin-0.3.23rc1-src.tar.gz12952b1c4a15ce55564500dace18ee22eb2feaa8  bitcoin-0.3.23rc1-win32-setup.exePGP signature of same: http://paste.pocoo.org/raw/405066/ See also https://github.com/kylegibson/poclbm for a poclbm fork that offers fallback support.  A bit easier than a proxy. This is already possible.Sounds like a great project.  Are you volunteering?Shockingly...  people are already doing that which you describe as "very hard" simply by upgrading.Re-read the part of my post about people voting with their downloads.Then re-read the other post about transaction fees already changing.Then read the thread on transaction fees changing to 0.0005.And maybe study how mining works, too.No idea what you're talking about here. This problem has already been solved.See this thread and https://github.com/kylegibson/poclbm See my comments in this thread, also.The forum just isn't suited for introducing new people to bitcoin, anymore.  It scares off more business-professionals than it attracts. So...  you won't even tell the author of pushpool?pushpool certainly cost me a lot more than "10 BTC + a whole day of hard work."Zip for donations or thanks, just people asking for free support all the time, too. You'd have to ask Gavin to be 100% sure, but I think that anybody working on software that deals with the bitcoin network should be welcome... FWIW, all that is encoded into -dnsseed No, that is completely random.  Mining does not affect your P2P connectivity.'Generate Coins' has been removed in recent versions, anyway. Two workarounds for slow bitcoin network:1) Patience:  Wait a long time, possibly several hours.2) Try the 0.3.23 release candidate, which attempts to address this problem.The network has been flooded with new users, many of whom do not support incoming connections.  This causes a problem with the P2P code in versions <= 0.3.22.If you are brand new to the network, -dnsseed may also help. Bitcoin has always been a thinly traded market.  A $150k buy causes the price to skyrocket, 1000% or more.  A $150k sell causes a huge price drop, 60% or more.  $150k is nothing to a VC or bored trader.This is precisely how thinly traded, volatile markets behave.  Penny stocks are quite similar (including all the vocal lovers and haters on twitter and various message boards).More importantly, on weekends, bank transfers and big money are completely asleep.Absolutely nothing has changed fundamentally about bitcoins in the past days/weeks. Two workarounds:1) Patience:  Wait a long time, possibly several hours.2) Try the 0.3.23 release candidate, which attempts to address this problem.The network has been flooded with new users, many of whom do not support incoming connections.  This causes a problem with the P2P code in versions <= 0.3.22. Note to self -- actually compile the newly updated translations. Yep.  It's just like any thinly traded penny stock.  A single VC or bored trader can skyrocket or tank the value. A list of people who agree with you:1. the dev team2. major exchange operators3. major pool operators4. people trying to start bitcoin businesses5. people trying to convince existing business to accept bitcoins Well,1. Big money and bank transfers are asleep on weekends.  Bitcoin always dips.2. Bitcoin has always been a thin, highly volatile market.  After a huge rise amid "200,000% increase!" headlines on the front of Yahoo! Finance, you can expect huge drops. Business professionals -- the people we are trying to convince to accept bitcoins -- are very turned off by the forums.We are hoping to swap this forum with weusecoins, prefer a "professional code of conduct" and make that the primary forum. Win32, Linux and source releases for bitcoin v0.3.23rc1 have been uploaded tohttps://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.3.23/test/This is another quick bugfix release, trying to deal with the influx of new bitcoin users.Main items of note:P2P connect-to-node logic changed to reduce timeout a bit.  The network saw a huge influx of new users, who do not permit incoming connections.  This change is a short-term hack, to more quickly hunt for useful P2P connections.  Better "leaf node" logic is in the works, but this should let us limp along until then.Transaction fee reduced to 0.0005 for new transactions (see note below)Client will relay transactions with fees as low as 0.0001 BTC (see note below)NOTE:  There has been some fee confusion recently.  Free transactions are supported and relayed as they always have been, according to special anti-spam rules.  See https://en.bitcoin.it/wiki/Transaction_fees for details.Full git changelog:Dean Lee (1):      Updated Chinese Simp translationDoug Huff (3):      Fix rfc1918 and rfc3927 compliance for ignoring non-internet-routable host      Add common temp files to .gitignore.      Demystify a few magic numbers.Han Lin Yap (2):      Added Swedish translation      Remove unused variableJeff Garzik (4):      Bump version to 0.3.23.      Reduce minimum TX fee for new transactions, to 0.0005.      Lower minimum relay TX fee to 0.0001 (from 0.0005) BTC.      Add minimal release process docs.Matt Corallo (1):      Fix CPU Usage bug when using -nolisten and have no connections.Nils Schneider (1):      create keypool in LoadWallet()Pieter Wuille (3):      Update transactions already in the wallet when rescanning.      Fix for small change outputs      Faster timeout when connecting Gavin created bitcoin-development mailing list at SourceForge, for more focused devel talk.The forum is rapidly becoming unusable for 'serious work'.
I am deleting all animated image posts that I can find. 1) Well, bitcoin already has an API for transactions, and a test system (testnet) to verify that your software works without losing money.It would be nice if mtgox/mybitcoin had a merchant API on testnet, to verify that works without dealing with real money.2) Transactions are not timestamped, but blocks are.  IOW, the transaction is timestamped when it is verified by the network, wrapped inside a block.  You may combine that with historical exchange prices.My CPA advises me to note the BTC/USD exchange rate at the time of a BTC-only transaction, as well as noting all BTC/USD conversions of course. "xslush" is an example of a configuration that is site-specific, and not standard.Anything with the "x" prefix, at the top level, is fair game for pool servers to define whatever they want, while the other items are those standardized by the community of mining clients.Yep... Currently, pool server extensions such as long-polling provide static configuration information -- the long-polling URL -- via a special HTTP header.  This is sub-optimal, because the long-polling URL is unlikely to change, yet many pool servers utilize the simple approach and send the same LP URL to each mining client, over and over again, wasting bandwidth.A server list, used in mining client fail-over (something I have been pushing for), would be another example of static configuration information communicated from pool server to client.Therefore, I began updating cpuminer to download $POOL_SERVER/config.json.  This will look something likeCode:{ "name" : "slush",    "description" : "slush's super-big pool",   "longpoll" : "/LP",   "ntime" : true,   "server_list" : [ { "url" : "http://srv1.net" }, { "url":"http://srv2.net" } ]   "xslush" : {       "my server-specific option #1" : "my value",       "my server-specific option #2" : "my value"   }}This should give pool servers a lot more flexibility in defining optional features and metadata, without needing to transmit that information redundantly in every single 'getwork' HTTP header. Currently, pool server extensions such as long-polling provide static configuration information -- the long-polling URL -- via a special HTTP header.  This is sub-optimal, because the long-polling URL is unlikely to change, yet many pool servers utilize the simple approach and send the same LP URL to each mining client, over and over again, wasting bandwidth.A server list, used in mining client fail-over (something I have been pushing for), would be another example of static configuration information communicated from pool server to client.Therefore, I began updating cpuminer to download $POOL_SERVER/config.json.  This will look something likeCode:{ "name" : "slush",    "description" : "slush's super-big pool",   "longpoll" : "/LP",   "ntime" : true,   "server_list" : [ { "url" : "http://srv1.net" }, { "url":"http://srv2.net" } ]   "xslush" : {       "my server-specific option #1" : "my value",       "my server-specific option #2" : "my value"   }}This should give pool servers a lot more flexibility in defining optional features and metadata, without needing to transmit that information redundantly in every single 'getwork' HTTP header. As you can see from my participation in that thread, as well as previous ownership and operation of The Bitcoin Store, I'm well aware of FinCEN regulations.  I even linked to that FinCEN administrative ruling months ago. That does not preclude nor prevent mtgox from KYC'ing a high-dollar deposit, especially considering that the new owner and servers are both non-US. IMO if a user is willing to provide full KYC info to mtgox, mtgox should permit removal of that limit. Dedicated server pay-as-you-go quotes from xf2.org:120 BTC / month:      AMD X2 3400+ Dual-Core, 2x 1.8 GHz, 2x320GB SATA II, 4GB RAM, 100 Mbps shared unmetered150 BTC / month:      AMD X2 3400+ Dual-Core, 2x 1.8 GHz, 2x500GB SATA II, 6GB RAM, 100 Mbps shared unmeteredSoftware setup and management assistance available for a one-time 50 BTC setup fee.  If you just need an OS installed, and can handle the rest of the setup and server management, the setup fee may be waived.Discounts available if you pre-pay for a year, instead of month-to-month.  Email info@exmulti.com if interested.A free xf2.org account, normally 2 BTC/month, is included with every dedicated server. You must (a) edit the source code to add a flags parameter to json_loads() function call, or (b) you must downgrade your jansson library to 1.x. I was wondering what happened, when I logged into the site just the other day, and was not able to enter my postcard code.Yeah, it is really tough to bootstrap.  For me personally, I can still sell bitcoins pretty much cost-free, which makes life difficult for any for-profit exchanger...This is fantastic.  I was pretty sure that FinCEN ruling applied to bitcoin, but it is very good to have official confirmation of that.Do you have a pointer to more detail on this?Thanks, and sorry to hear this is closing.  I never saw much about BitcoinUSA on the forums after the initial announcement, but was nonetheless following it with great interest. Dedicated server pay-as-you-go quotes from xf2.org:120 BTC / month: AMD X2 3400+ Dual-Core, 2x 1.8 GHz, 2x320GB SATA II, 4GB RAM, 100 Mbps shared unmetered150 BTC / month:AMD X2 3400+ Dual-Core, 2x 1.8 GHz, 2x500GB SATA II, 6GB RAM, 100 Mbps shared unmeteredDiscounts available if you pre-pay for a year, instead of month-to-month.  Email info@exmulti.com if interested.I'll check stock and see if any older, cheaper servers are available. You are using a too-recent version of jansson.  Either downgrade to 1.x, or add a '0' for the new flags parameter in 2.0. Work on the build process exists at git://github.com/jgarzik/bitcoin.git branch 'autotools' Yep, that should work just fine. For the record, after my wiki edits were reverted, I wash my hands of the matter.  I do not participate in edit wars. Actually, it was not futile:  http://www.theatlantic.com/national/archive/2011/01/the-unexpected-return-of-duck-and-cover/68776/ I wouldn't say you need a shitload of money to do that. MtGox has seen some 100k+ days.  One method is simply buying slowly from MtGox over the next few months. 400k / 90 days == 4.4k per day, something the market can absorb IMO.But even if you double the volume, there is not going to be a huge disruption.  Yes there is a tipping point, but I wouldn't necessarily judge MtGox by the current slow period.Agreed, though you might try some of the manual exchangers such as nanoimogold or aurumexchange.  They probably have a stock (where "stock" is a few thousand bitcoins).vladimir, mrb and BitcoinRigs offer something vaguely similar:  You pay for Ghash/sec, and they give you zero-variance BTC payouts based on the purchased hash rate + current bitcoin network difficulty.But this is quite expensive, and you'll reach a point of diminishing returns rather quickly, much more quickly than your goal.The bitcoins are definitely out there to be had, as the price increases.  MtGox makes life easy and should accomplish your goal over time, but I bet you can find a fair amount by canvassing various community exchangers. Feature request:  "sendmany" for CoinCard.[Tycho]'s use of coincard's paypal API is pretty neat, and I was thinking of doing something similar.  However, if I have a queue of paypal payments to make, it would be much more useful to send a single, large BTC transaction to coincard, and specify multiple (address, amount) pairs for paypal recipients.Bonus points if this can be done entirely via JSON   Escrow.com's fee for transactions over $25,000 is 0.89%.Clearcoin's fee for large transactions is 1%.With the BTC buyer using escrow.com and the BTC seller using clearcoin, I bet something could be arranged.
If you submitted a block in solo mode, then you presumably solved that block, meaning that a brand new block is ready and waiting for your next 'getwork'. Can you define "better"?Definitely interested in hearing ideas... IIRC, one of the goals of the dark pool was to eliminate the need to to write bots that accomplish the same end result as the dark pool (reducing visibility).Thus, it sounds like people may choose to reduce their visibility regardless of the absence or presence of the dark pool.I voted "keep it as is", purely because that seems the simplest approach.  But I would be just as happy if the dark pool disappeared, and the market was 100% transparent. Nice!I'm glad you added this service.  Given that LR->PayPal is very easy, this provides another easy way to BTC->PayPal. Note that the wallet's coins are first randomized, and then coin selection is initiated. Note this has the potential to charge 2x paypal fees... Not with the new 'sendmany' transaction, designed specifically for pool operators and similar situations. pushpool git repo is now live at https://github.com/jgarzik/pushpool What is occasionally?  Once a day? If the "entire market" is a single corn dealer or one lone public company, that may be true.  But that's a dumb way to set up a stock system anyway (strawman?).  No one in their right minds would want a block chain for every company on NASDAQ -- over 2,000 block chains for that one market.The bitcoin decentralized notary system would be well suited, however, to the task of transferring shares of stock for multiple companies, between untrusted parties. That's useful, thanks.  I was looking at this page, and assumed that the "C API Function Descriptions" was a full and comprehensive list.I use bound params with sqlite and postgresql already, but [mistakenly] thought mysql lacked same.* jgarzik goes to update his just-written code... And?  At the end of the day, a human can ignore my bitcoins.  At the end of the day, a company can ignore my Charles Schwab stock purchase.  All they are are ones and zeroes in a computer, just like those dollars my bank claims I possess.A distributed, notarized database of digital tokens has a large number of uses that may extend directly into real world goods.  It is readily apparent that value exists in a neutral, distributed entity maintaining a database rather than a single entity (== single point of failure).Not true at all.  Bitcoins would have zero value, if you could not trade them for real-world goods, services and currencies.  People trust that the value of their bitcoins will be there tomorrow.  That is the mother of all external trust dependencies. None, for the purposes of this thread's examples.I have no idea what a virtual future is.But if you wanted to trade corn contracts, bitcoin is an excellent notary service for such contracts.Everyone who purchases a real-world good with bitcoins, or fulfills a contract with bitcoins, begs to differ.With cryptographically-signed digital certificates, you have as much flexibility as you need, to describe anything in the world.Corporate entities can certainly back digital certificates if it is in their interest to do so.  If I was rich and wanted to back bitcoins with gold, there is no reason why I cannot do that. See this thread.  You might consider offering RPC mining, in addition to payouts. That's morpheus, not mtgox.  And considering the risk of dealing with unknowns who could charge back or dispute their PayPal, 7% is understandable. IMO it makes much more sense to add multi-pool support to each mining client.That way it doesn't break long-polling, and you can more easily utilize pool-specific features as they appear (such as using BDP).A meta-pool is an additional point of failure. Unfortunately the widely used Mysql C API does not support parameterized queries AFAICS. That's true for corn, yes, but not stock, which can be traded electronically, automatically and securely.And for corn, that is analagous to selling a coffee or a car for bitcoins.  You are relying on an external point of failure.So what if the corn (or coffee) is never delivered.  Having one element outside the scope of the project does not eliminate the utility of the bitcoin approach. Who said anything about each company starting their own chain?  That's not distributed, nor decentralized.The future of satoshi's proof-of-work technology is a chain marketplace.  Multiple chains will exist for different purposes (bitcoin, BitDNS, BitX).  Multiple chains will exist in the same competitive space (bitcoins, jgarzik-coins).Wall Street firms may cooperate on a single "Wall Street NASDAQ chain", where all NASDAQ stocks are traded, for example.  That would be cooperative and super-strong, yet secure against double-spending (aka naked shorting, etc.) Yes.  Luke-jr's node is special.
Quite the opposite.Satoshi's key invention is that bitcoin is really a distributed notary service.Securely transferring stock from person A to person B is a perfect application for this invention.As is securely transferring a DNS domain, or another digital entity. PayPal is a layer on top of bitcoin.Bitcoin will be a success when PayPal-BTC currency is offered alongside PayPal-USD and PayPal-EUR. Except for his appalling inability to quote properly... Yes, a highly interconnected, high bandwidth network -- such as those already used by HFT'ers -- could support a proof-of-work chain at such rates.  You're looking at about 600,000 - 1,000,000 transactions per 10-minute block, I'd say.The main hurdles will be efficient TX broadcasting, and trying not to be CPU-bound doing ECDSA signature verification.Also, the proof-of-work algorithm would need to not regenerate its mining block on every TX, but upon every $N TX's.If you're talking about using the main block chain, that would be fine, albeit it costs you money to allocate points.If you're talking about a totally separate block chain, then you must consider how much you wish to investment in the "strength" of the block chain.  A tiny chain would be easily vulnerable to double-spend attacks, compared to the main chain, if some naughty HFT trader decides to plunk down $100,000 to game the system.I cannot see how this would cause problems.  It would greatly benefit bitcoin... go for it!You are correct, there is very little volume in bitcoin's current exchange markets, as compared to any "real" market.  I guess bitcoin is roughly analagous to a super-thinly-traded penny stock, without a single market maker.A player that narrows spreads would be a welcome addition, IMO, as long as the market maker(s) policies and actions are open and transparent. Not at present.  But I have an open proposal for people to expire TX's from the TX cache, which would permit this. If you just wanted bitcoind or pool server hosting, there's this...     http://bitcointalk.org/index.php?topic=3614.msg78994#msg78994 Bump.  Increased bounty to 400 BTC.Here's a link showing several examples of asm shaders on ATI:http://cgit.freedesktop.org/xorg/driver/xf86-video-ati/tree/src/evergreen_shader.cand here is some useful Mesa code for building asm shaders:http://cgit.freedesktop.org/mesa/mesa/tree/src/mesa/drivers/dri/r600/r700_assembler.chttp://cgit.freedesktop.org/mesa/mesa/tree/src/mesa/drivers/dri/r600/r700_shader.c The State is a collection of men, just like any other.  Anarchy doesn't work. Yes -- and a great many Internet forums make efforts to avoid discussion and encouragement of illegal activity. BitcoinMarket v2 supports stop-loss orders. It's very simple:  using Digest auth by default will reduce potential for problems, over existing practice of using Basic auth.  Is SSL better?  Yes.  Do potential problems exist even with Digest?  Yes.  But neither of those factors implies that Digest is useless, given current client implementations and practices.Remember:  don't let perfect be the enemy of good. Using encryption is better than not using encryption.  Thanks for that news flash. ...because not all users will or can use HTTPS, rendering most of those points moot. That does not excuse sending cleartext passwords with every request.  Users have been known to do strange things, like re-use passwords.Decades of security practice has demonstrated that cleartext passwords should never ever be used. This standard was started by bitcoind, and is used outside of pools.  Furthermore, if I intercept a worker password, I can make an attack look like it's coming from another user, possibly getting them kicked off the pool server. Related to HTTPS:  I am planning on adding support for HTTP Digest authentication, on top of current HTTP Basic auth.  While not perfect, and SSL is better, this will move community away from sending base64-encoded passwords (easily decoded) frequently over the 'net. The source code to Bitcoin Central exchange is also open:     https://github.com/davout/bitcoin-central If you use my cpuminer or ufasoft's CPU miner, you will get far more performance on CPU.poclbm and puddinpop were not built for CPU mining.  That is largely an afterthought, and it shows with lower performance. WARNING -- spesmilo and other clients are not ready for prime time.  IMO, they should not be recommended at this time.  Other than mainline, no client can yet handle bitcoin details such as a block chain reorganization.(besides the fact that the wiki and some of these clients are filled with specious things like Tonal, which will only serve to confuse the average user) Updated the git repo with many bug fixes.  pyminer.py successfully generated a block on testnet, and a share in slush's pool.
BitcoinMarket v2 is professional, and too-often overlooked: https://www.bitcoinmarket.com/ The government can and will go after criminals by attacking their money.  Who knows, they might require bitcoin exchangers and other law-abiding bitcoin-friendly businesses to ban certain coins.IMO, the only way bitcoin will remain a viable currency is to demonstrate over time that the vast majority of bitcoin users are law-abiding.  I do not want to see such a wonderful invention destroyed by the likes of Silk Road.  Bitcoin is truly unique, in its infancy, and an experiment that could fail for any number of reasons.Associating bitcoin with criminality in the public mind is a sure path to quick failure and marginalization. It's definitely not that easy  GPU mining will not be added to the bitcoin client...  too many annoying dependencies. For the moment, email to jgarzik@exmulti.comAlready fixed in local gitA GET request without a JSON payload is a bad request   What is your preferred behavior? PM sent... Sure, here's a git repo:  https://github.com/jgarzik/pyminer Yep.FWIW, pushpoold is part of my weekend project -- xf2.org -- which will be offering private bitcoind node hosting, and private pool server hosting.All this will be available via an automated system "soon", but the basic backbone and infrastructure is up and running.  If anyone has an immediate need for bitcoind or pool server hosting, PM me.  I can setup something up manually, until our automated system is complete.Tentative prices (per month):     5 BTC - Pool server, max 50 workers     5 BTC - Private bitcoin P2P node (aka private wallet), max 1000 RPC requests per day     8 BTC - Private bitcoin P2P node + pool server, all you need to service a small, friends-only bitcoin mining poolPrivate nodes are connected exclusively to xf2.org's P2P backbone, providing an insulating layer away from the public net.Our server farm, with servers in the US and EU -- real servers, not VPS's -- can also accomodate public pool servers and public bitcoin P2P nodes, but those prices are much higher, due to increased resource usage and increased risk of DDoS.  PM me, if you want a quote.  Paypal-USD is accepted too, with the proviso that you must pre-pay a year in advance. I describe mining as "transaction verification and distribution" Well, KYC with an outfit like https://www.bitcoinusa.com/ and then buy as much as you want.Most bitcoin exchanges until now are fully automated, which means they cannot accept funds that require some amount of trust.  Call them the First Generation of exchanges.Newer exchanges like https://www.bitcoinusa.com/ that are local to your country, comply with money transfer laws, and can perform some amount of due diligence on their customers will be the best source of bitcoins, in the long run. The same algo is available elsewhere on more platforms, with more performance.  The bitcoin codebase lost the CPU mining competition long ago.  It's even more pointless to use either algo for CPU mining.The only question is whether or not to retain one miner as a reference implementation (IMO, yes) or remove all CPU mining code.  And the reference implementation should lean towards readability, rather than super-optimization.  ScanHash_CryptoPP() is pretty darn straightforward.Removing 4way from bitcoin.git largely costs us nostalgia, as you point out  Most people are divided between removing CPU mining entirely, or leaving in a simple reference miner that is hidden from normal users.Either way, 4way is superfluous. Do you send SIGUSR1 to pushpoold, when a new block arrives?pushpoold assumes you will implement your own block monitoring solution, and notify it when a new block arrives. True -- but I don't see anything wrong with that.  It is equivalent to an announce-only mailing list, of which there are many in open source.It's just another flavor of moderation, and the creator of the thread should be able to pick their favorite flavor:  open thread, moderated thread (moderator may hide posts), closed thread (only moderator may post), etc.As long as the moderator is up-front and open about their thread policy. no problem. Quoting IRC conversation...<tcatm> jgarzik: how could a GUI user disable the miner after upgrading to a version with that patch?<jgarzik> tcatm: good point...<tcatm> I'd say move the setting to the options dialog and rename it<jgarzik> tcatm: I'd rather just disable at startup, if (GUI && wallet_generation_enabled)<jgarzik> tcatm: command line can [override this behavior]<tcatm> jgarzik: sounds good, too URL: https://github.com/bitcoin/bitcoin/pull/142Description:Hide this capability from GUI users, who are unlikely to understand upon first contact that they will waste electricity for year(s), before possibly generating a single block.This patch does not remove generation, which remains available via a command line option.  It only removes the ability to select coin generation from the GUI. URL: https://github.com/bitcoin/bitcoin/pull/141Description:While there is no hard consensus on what to do with CPU mining inside bitcoin, in general, I think most people will agree that 4way can go.This implementation (with performance enhancements) lives on in cpuminer. bitcoin's 4way was only available on *nix, while cpuminer's 4way works on Windows and Linux.I conclude that, if you are really serious about CPU mining, you are more likely to use ufasoft's CPU miner, or mine, and so we don't need multiple implementations inside bitcoin. Here's an unlocked thread, for discussion of BitcoinPool.com.I believe in free and open discussion.  This thread will not be locked. Most mobile carriers permit some method of sending email to a phone...   free SMS Most people know that bitcoins are, in investor lingo, "very high risk."  There are any number of well known collapse scenarios that can occur while bitcoin is small.  So I would not assume that "major players" in the bitcoin community are putting a lot of stock in a particular technical analysis.  Technical analysis is a well-known tool for analyzing price movements, but it clearly does not account for external forces such as "someone shows up one day to buy $1million in bitcoins" (or sell a similar amount). 
It is likely this will go into 0.3.21. A more efficient binary data protocol for this has already been implemented:     http://bitcointalk.org/index.php?topic=3493.0This is what I plan to add to bitcoind, as it supports multi-mining / push mining / block broadcasting and a host of other applications.The linked implementation is usable in production already.  Patches for cpuminer will be forthcoming.  If you could add BDP support to poclbm, that would be great! ID is unique per connection, and multiple threads / instances should use their own id counter.  It is used to match query and response. There is a list in the source code and top post that answers these questions... See this thread for a python class that handles bitcoin's JSON-RPC, including proper decoding of JSON float-like numbers into python Decimal. When hacking JSON-RPC calls together for bitcoin, in python, a common solution appears to be using python-jsonrpc.  This choice is less than optimal, for [at least] two reasons:  (1) no way to use Decimal with JSON values, as is required in monetary software, and (2) does not support HTTP/1.1 persistent connections.So, I have created the python AuthServiceProxy class specifically for bitcoin users, based on the usage model of python-jsonrpc:     http://yyz.us/bitcoin/authproxy.pyThis creates a python object whose methods are the JSON-RPC method calls.  Example:Code:import authproxyimport pprintBITCOINRPC = 'http://myusername:sekritpass@127.0.0.1:8332/'pp = pprint.PrettyPrinter(indent=4)bitcoin = authproxy.AuthServiceProxy(BITCOINRPC)data = bitcoin.getwork()     # call bitcoin 'getwork' RPCpp.pprint(data)data = bitcoin.getinfo()        # call bitcoin 'getinfo' RPCpp.pprint(data)This should be all that is needed for python programmers to use bitcoin's unique flavor of JSON-RPC over http or https.In the latter 'getinfo' case, you can see that Decimal values are properly returned, rather than floats, as recently discussed in this thread:Code:{   'balance': Decimal('1.10000000'),    'blocks': 116260,    'connections': 48,    'difficulty': Decimal('68978.89245792'),    'errors': '',    'generate': False,    'genproclimit': 1,    'hashespersec': 0,    'keypoololdest': 1296778330,    'paytxfee': Decimal('0.01000000'),    'proxy': '',    'testnet': False,    'version': 32100} Good one  And then slush offered to prove it...But then...So...  you demand evidence of a particular cheating method.  Then, when someone offers to satisfy your demands, you tell him to go away?Um, ok. You're not really supposed to use the default name/password...   Well you get more if the pool operator pays extra, like BTCMine was doing recently. FWIW, this is the python recipe, straight from Python documentation:Code:>>> import decimal>>> json.loads('1.1', parse_float=decimal.Decimal)Decimal('1.1') Which is, again, a second API to support on top of the first.  Twice bugs, twice the pain. Because it changes the data format of every number in every RPC call. hmmm....   I might have to try this with my pool. This is expected.  As mentioned, sse2_64 only works on 64-bit Linux at the moment, so this high speed is not available under Windows. Is there a language that does produce fixed-precision from JSON?jansson (C) and python's json both produce float, from a JSON number containing "." I think you've got a configuration problem, because nobody else is reporting such bizarre behavior   Maybe you could head over to the cpuminer thread and provide technical details sufficient for a bug report? Don't assume a decimal (".") implies floating point.Explanation by example:  Remember the difference in SQL between a FLOAT and DECIMAL.  Float is Approximate-number data type, which means that not all values in the data type range can be represented exactly.  Decimal/Numeric is Fixed-Precision data type, which means that all the values in the data type range can be represented exactly with precision and scale.Anyone who deals with money demands DECIMAL-like behavior.  Bitcoin's internal use of int64 for values provides that fixed-precision, DECIMAL-like behavior.Decimals (".") are common in monetary software.  Floating point data types are not. Thus creating a new, second parallel API, conditionally present or absent?  Ugh, no thanks. As an aside:   Using GMP (or similar) is overkill for two big reasons:We already link with and use OpenSSL's bignum (CBigNum), so there is no need for an additional library for Big MathsIt's just silly to want GMP when we already handle money properly internally, as int64.  The only issues present are interface issues, and you don't need to link with GMP in order to display an int64 with a decimal point somewhere in the middle.
If we want to be taken remotely seriously by the banking and merchant communities, floats need to go.  Whether the end result is "1000000000" or "10.00000000" is largely cosmetic.  But I do agree that -- long term -- JSON's "number" and internal floats fall short of what is needed for proper money handling software.But....    it just hurts to change the API right now, because we will see very little payback for a large amount of pain. LMGTFY's code is correct, and you are mistaken (about not only this, but macro abuse etc. also) cpuminer already supports long polling. Actually, as long as you make sure all your IEEE compliance options are turned on... cpuminer's sse2_64 should be the fastest, but it only works on 64-bit Linux (sse2_64 is a port of ufasoft's code).ufasoft's miner works on Windows.puddinpop's stuff can do CPU mining, but is slower than cpuminer or ufasoft. Yep, I've been thinking about this idea for a while.  In general we need more merchant-friendly APIs (and more merchant-friendly depositories, like MyBitcoin).PayPal even has a "sandbox" where developers can test their software against PayPal's API, without spending / losing real money.    Bitcoin has testnet, and a PP-compatible API would be a perfect complement. Same with cpuminer's "sse2_64" algorithm. The source code for bitcoin central is also open: https://github.com/davout/bitcoin-central I'm not an AES expert, so permit a dumb question:  does AES decryption require knowledge of the IV used to encrypt a given ciphertext?With the only information persisting between sessions being the user's passphrase, that would seem to imply storing the IV for each encryption? I don't know about hung, but Pecunix withdrawal is not automated, because Pecunix does not offer an automated payment API to the public.That means Bitcoin Central's PGAU deposits are automated, but withdrawals probably have to wait for davout to return to his email. Shocking:  he discovered the "> 50% power" attack. A setup that user might reasonably be expected to understand could be:  one password to unlock the wallet (whole-file), and a second to spend money (ECDSA private keys).However...    It remains a PITA with the current bitcoin implementation to perform whole-file encryption on the wallet.  db4 has whole-environment encryption, so that implies an encrypt-everything solution would encrypt the wallet, addr and blkindex databases.One could encrypt the 'value' part of each db4 key/value pair, by modifying bitcoin's database Read() and Write() methods.  But with the keys being plaintext, I'm not sure that's useful.With the current implementation, you are locked into a lot of design decisions, where if you deviate you must rewrite a lot of code all over the codebase.For that reason, I had hoped a patch would focus discussion on what is reasonable with the current codebase, rather than a perfect solution that will never see the light of day. The dependencies are listed in README.The need for a "-dev" package is just required general knowledge:  to build any source code, not just minerd, you must install each -dev package required by that source code. xlisttransactions shows immature blocks as "mixed_debit":Code:    {        "address" : "1111111111111111111114oLvT2",        "label" : "",        "txid" : "81862a4db4edb6b919355f5f70c32e5cecaae0c7f6f67f86ea586a9392ae33bd",        "txtime" : 1301242706,        "category" : "mixed_debit",        "amount" : 0.00000000,        "confirmations" : 10    },And so several miners already use a different transaction category in the field (those that patch it in, which apparently several big miners do). That's a bit self-referential -- they were removed with a comment referencing your complaint.MyBitcoin is pretty prominent and continues to work for a lot of people, so I do not think they should yet be removed from the Trade page. Bitcoin Central and Bitcoin Market (v2). This might be a bitcoinwatch FAQ.  Many people often assume that the gold/BTC value is simply calculated from the BTC/USD price, after getting a spot gold quote from some third party financial website.But bitcoinwatch tries to calculate directly from the most recent BTC/GAU trading prices, which can sometimes appear "outdated" versus current GAU/USD price due to slow BTC/GAU trading. Well, my weekend project for last month or two has been building a useful bitcoin P2P backbone, on top of which I hope to provide services such as smart payment processing, transaction services, private wallets (private bitcoind nodes), private pool servers and other gadgets.  Buying mining capacity makes sense for this microbiz, even if the generation comes at a slight loss.This is of course assuming that it is even possible to negotiate with the provider to obtain RPC mining to my own servers, rather than simply a zero-variance payout (some providers are zero-variance only, which is not useful to me).Anybody with reliable > 1 Gh/s to sell, with stable power and not in mom's basement or next to the cat's litter box, feel free to post on Marketplace forum...  If Raulo is right, surely there will be offers under 500 BTC/month... The xlisttransactions patch will show that to you.  It was built with the intention of showing precisely what the GUI shows, in the GUI transaction list. There's been a lot of feature-requesting and demoing and such.  By posting real code against current bitcoin, it was hoped that we could move on to a more focused discussion (w/ real code) about what wallet encryption should look like.We need to answer questions such asIs the presented method cryptographically strong?Should we encrypt the entire wallet, and not just private keys?Should we encrypt the plaintext data concatenated together as a single huge memory buffer, enhancing cipher block chaining, or encrypt invididual records as my patch does?How to handle wallet upgrade + downgrade?  "ekey" creates unspendable coins, when moving to older clients.How to check for invalid passphrase?  It seems cryptographically unwise to use the naive implementation (encrypt a static, well known string; check for invalid passphrase by attempting to decrypt to well known plaintext).
This patch adds one form of an opt-requested feature, wallet encryption:     http://yyz.us/bitcoin/patch.bitcoin-wallet-crypter     or git://github.com/jgarzik/bitcoin.git#crypterBIG FAT WARNING: This patch is dangerous, and could create unspendable coins.  Do not use, unless you really know what you are doing.Implementation details:With this change, encryption (and associated passphrase) is now required, otherwise the program will exit.  The user may set their passphrase in the WALLET_PASSPHRASE environment variable, or in a GUI dialog if GUI is present.A new type of wallet record, "ekey", is used to store a public key + AES-encrypted private key.  All new private keys are stored in "ekey" records.  Old keys stored in "key" and "wkey" records will continue to be read and supported indefinitely, but bitcoin no longer writes these records.Caveats:Totally untested rough draft.  It compiles and makes logical sense, that's about it.  I haven't even bothered to test it, though I welcome feedback from brave souls!The implementation is bare-bones.  No provisions for wallet recovery, or detecting use of the wrong passphrase (easy way to corrupt!), etc.Let the comments begin.  Hopefully this will spark discussion about the proper solution for wallet encryption, now that code is out there. Pull request: https://github.com/bitcoin/bitcoin/pull/136Direct link to commit (patch): https://github.com/jgarzik/bitcoin/commit/4feff786546448e2c436956ad77b9081167e3124Unfortunately the commit is larger than it should be for easy reading, because large blocks of code were un-indented. The RPC 'sendmany' was added to bitcoin specifically for pool operators and situations like this. As long as UPnP is off by default, it's just an easy way for the user to proactively drill a hole.  The bitcoin network will benefit from UPnP users, and other P2P technologies such as bittorrent clients already use UPnP. You didn't think The Chain would be the only one, did you?  Competition is practically inevitable in this space. Hum, this sounds like either impersonation or spamming? Unfortunately c3f140033c531e9c5eae920c16fe2ecc80faa1a2 in bitcoin.git catches SIGSEGV, which means no more core dumps :/ Have you played around with -rpctimeout ? FYI, the longpoll specification should say POST, not GET.It is incorrect for GET to be receiving data in the body of the HTTP request (the JSON-RPC payload).  This confuses HTTP libraries. If Amazon made that announcement, there would be a sudden increase in demand, vastly outstripping by supply available from miners, in the short term. There is no doubt that everybody likes a free lunch. Use -limitfreerelay in current git.  That will reduce spam, while still allowing free transactions.  Non-spammy transactions with larger amounts and older coins will still have higher "free" priority over spam transactions, while continuing to avoid fees. Paying a fee was always likely necessary in the long run.  You might like sending free transactions, but that also means spammers can spam unlimited numbers of transactions, unless there are some counter-incentives in place. I think they are generally useful, as the topic of anyone-can-spend transactions comes up repeatedly.I was thinking it would be useful to make a small service for redeeming scratch-offs, but no concrete plans have been laid. The patch/git and example at top-of-thread have been updated with several changes.  We are getting closer to a pull request.  Security parameters are now dynamic, offering a range of security modes, depending on available real world UI constraints, or lack thereof:Low security: 64 bit random password, no saltHigh security: 1024 bit random password, plus user supplied salt...or any range of settings in between.  You could generate a 64-bit random password, then supply a 100 gigabyte salt string.This is accomplished by the following changes:Key generation algorithm changed to init pipe1, pipe2 with variable-length password and salt.  See this updated post for details.'sendscratchoff' RPC now takes a JSON 'options' object, allowing the TX creator to specify range of bits (64-1024) and optionally supply a salt string (default "bitcoin" if not provided).'sendscratchoff' RPC returns full txid (see example in top post).  JSON object return value "id" renamed to "txid".'scratchoff' RPC takes optional salt string'scratchoff' RPC now calls AddKey() to store key (fix for bug noticed by sipa)The following to-do items remain before this can become a pull request:'scratchoff' must create a transaction to spend the coin, not just store key/TX in wallet'scratchoff' ignores 'toaccount' param'scratchoff' requires full 256-bit txid, even though btree database enables lowering number of bits required to find tx significantlyNevertheless, it should be working (famous last words).  You should be able to test with an empty wallet (thus guaranteeing you can spend the scratchoff coins), or on testnet. Yes -- that's what they're doing right now.  So why add an extra step. Your libcurl installations is broken.  It lacks autoconf macro(s).As another poster noted, you should build from tarball instead of git, to avoid having to regenerate configure. We should remove the option, but not the miner.If we remove the CPU miner from bitcoin, then people starting alternative block chains will not have a self-sustaining system.Just disable it from the GUI, so that new users won't find "Generate coins?" This is a FAQ (or "FMC", frequently misunderstood concept?).1) Bitcoins can be divided into millionths of a bitcoin, leaving plenty for everyone on Earth.2) "it won't buy you a lot"  There is no economic reason why 0.000001 BTC cannot be worth $1,000 USD.  It is entirely supply and demand.Where you place the decimal is completely irrelevant. Version 0.8.1 released.  Some non-critical bugfixes, and one feature (User-Agent) that assists pool server operators in isolating problems to specific miner clients.Changes:- Make --user, --pass actually work- Add User-Agent HTTP header to requests, so that server operators may  more easily identify the miner client.- Fix minor bug in example JSON config fileSHA1: 0e60652fb0d29c6d20ed40bfce721bcd7a231b51  cpuminer-installer-0.8.1.zipMD5: cc42cf0ff88958325dfedbd199f71a9e  cpuminer-installer-0.8.1.zip
The front page doesn't show anything? --user/--pass is broken in version 0.8.  Either obtain the latest -git for a fix, or continue to use --userpass until the next release. Bitcoin, the original C++ implementation, was first built on Android months ago.  That's as native as you can get. One of my major bitcoin criticisms remains non-deterministic transaction behavior, from the user PoV.  Transactions that are non-standard, or too large for the included fees, will be resent hopelessly, without the user ever having any resolution whatsoever.  I call these "zombie transactions."In the real world, transactions tend to be more binary:  they either succeed or fail.  They don't sit around in limbo forever.Therefore, I propose a new network rule:Note the current block height, when a TX is received at a node, X.When block height increases to X+T, and the TX has not yet been put into a block, remove it from the TX cache.  T could be 150 blocks, around 24 hours, but that's open to discussion.In the short term, this should have little effect, as clients will continue to resend transactions ad infinitum, until they get into a block.  And TX cache is flushed in any case, when a bitcoin node restarts.In the long term, this guarantees predictable behavior for each transaction.  With this network rule in place, a user will know that their TX will probably either make it into a block, or disappear from TX caches [and thus be eligible for resubmittal].  This should open up the possibility for users to recover spent coins that never made it into a block (never confirmed).  The current inability for a user to recover unconfirmed-and-never-will-be money is a flaw that should be corrected, though luckily these are rare cases today.However...   Such unspending is difficult:  a spend potentially creates a change transaction, which itself could then be spent, and so on.  Of course, these zombie coins will never confirm, because their originating transaction is a zombie transaction.  But it is difficult to unroll a chain of spends reliably.Comments welcome. I think byte swapping is simple enough that we can afford to create compat/byteswap.h, and include inline versions of byteswap macros for the case where the OS does not provide.  This seems like an area of breakage that we could solve permanently.#ifdef __APPLE__ is fine, but we should provide fallbacks nonetheless.Volunteers?    Those with the ability to test can add     AC_CHECK_HEADERS(byteswap.h)to configure.ac, and then check     #ifdef HAVE_BYTESWAP_H     ... current code ...     #else     ... OSX code ...     #endifafter running ./autogen.sh with proper autoconf/libcurl/etc. build dependencies, to regenerate configure. +1 agreed Version 0.8 released.  See top of thread for URLs.Changes:- Support long polling (beta): http://deepbit.net/longpolling.php  By default, cpuminer will enable long-polling automatically, if the X-Long-Polling HTTP header is present.  To disable this autodetection, pass option --no-longpoll.- Adjust max workload based on --scantime (default 5 seconds, or 60 seconds for longpoll)- Standardize program output, and support syslog on Unix platforms- Suport --user/--pass options (and "user" and "pass" in config file), as an alternative to the current --userpassSHA1: 2b89588a99912d3980a9d5871b439fdbbd1d806b  cpuminer-installer-0.8.zipMD5: 12464cf941dee3e317d98c643dfaee5a  cpuminer-installer-0.8.zip I spotted one potential problem source, and pushed a fix out to git. Does it happen with any other algorithm, such as 4way? Perhaps, but I think we should continue on this fool's errand of backwards compatibility a while longer... It would be nice if directories such as http://bitcoin.bluematt.me/bitcoin-nightly/ included a README that described the contents of the directory / purpose of the project / etc. Which algorithm are you using?Which cpuminer version?  Longpolling/git or a release version? Because scripting is mostly disabled and difficult to get right in a secure way, I would rather just strip it out, for btc2.You can do signed validation and multi-in, multi-out without a script engine. Well, the usage so far has been backwards compatible AFAIK.  You start out unversioned, and if a field is added, an nVersion check is also added.  If no nVersion check exists, that data structure is unchanged.The current system seems straightforward and is backwards compatible, so why add superfluous checks? With the original algorithm, yes.  Not with the current, totally different algorithm. +1 agreed Agreed... According to the Department of Justice press release, the Liberty Dollar far too similar to the US dollar, to the point that the US mint had to issue warning that LDs were not official currency.Bitcoins have zero similarities with US dollars.Let's add this to the FAQ:  the Liberty Dollar case is not relevant to bitcoin. Largely arbitrary.  8333 is bitcoin's TCP port, and 100,000 was the number of iterations required for a single thread on my 3Ghz CPU to take a noticeable pause during computation.     RFC 2898 suggested at least 1,000, and I thought 1,000 was far too low.Thinking about some more modifications, though:Allow user to specify number of bits in password.  Range 64 - 256, must be divisible by 8.  Or perhaps as low as 57 bits (limit of 16 decimal digits), with some brute force to bring it up to 64.Allow user to specify optional plaintext string (salt).  Default is "bitcoin" if not supplied.  If no salt is supplied, due to limitations of what can be presented to the consumer, then the current minimal implementation stands as is, with 64 bits of brute force security.  However, if the scratchoff creator is able to communicate an additional string, be it an order id, or even "bitcoin.example.com", we can hash that at the beginning of key derivation, thereby getting much better security than 64 bits alone.
...unless nTime field is also incremented, which is a permissible optimization...In the coming months, it is expected that the standard miner will use the algorithm of     1. server sends new work, interrupting current miner work     2. miner crunches nonce+ntime     3. when new block arrives, go to step #1That completely eliminates polling, unless a new block is not found on the P2P network in ~2 hours or more. CPU miner supports long polling, as noted in the CPU miner thread:  http://bitcointalk.org/index.php?topic=1925.msg67246#msg67246Switching CPU miners to long polling will likely have more beneficial effect on server load, versus GPU miners + LP, because CPU miners under long polling change to 60-second polling intervals. One option is simply to raise the difficulty.I've been thinking about increasing the difficult by 16 bits, in one of my pool server projects. Patch and git updated with a new 'scratchoff' RPC, which will redeem a 'sendscratchoff' transaction.The scratchoff system should now be minimally functional.  Because the hash of the public key is what is seen in the block chain, an attack should not better than brute force of the 64-bit random space.Current limitations:scratchoff should immediately create a new transaction to claim the scratchoff, but it does not.  It only adds the initial spend, and the keys, to your wallet.  Internally, this requires selecting coins for the new transaction very specifically, which the current code does not easily support, unless I'm missing something.scratchoff requires full 256bit txid, not the truncated 32bit id returned by 'sendscratchoff'.  Operationally this is fine, but from a consumer-friendliness standpoint, we want to be able to lookup a transaction using as few digits as possible.  Internally, bitcoin stores using a btree, so this is possible, just not yet implemented.The 'toaccount' parameter is ignored.The scheme could be further strengthened by adding brute force bits on top of 64.  Unfortunately, any scratch-off scheme is ultimately limited by what a consumer card might be reasonably expected to show.  Credit cards in the US have 4x 4-digit blocks, so I picked 4x 4-hex blocks == 64 bits.  Suggestions for increasing the bit count in a consumer friendly way are welcomed. The scratch-card ECDSA private key generation algorithm is the following:     password = random 64-1024 bits     salt = user-supplied string, or "bitcoin" if salt is not supplied/zero-length     pipe1 = SHA256(password, salt)     pipe2 = SHA256(salt, password)     for i = 0 to 108333          pipe1_out = SHA256(pipe1)          pipe2_out = SHA256(pipe2)          pipe3_out = SHA512(pipe1_out + pipe2_out)          pipe1 = first half of pipe3_out          pipe2 = second half of pipe3_out     raw ECDSA private key = pipe1 Well, you can see precisely where the 50 BTC from each block goes, at http://blockexplorer.com/ Become an open source hero, and help bitcoin too!OK, I think this project would see some real return (in BTC) on Linux, for all the miners out there.  It would benefit open source as well.The Project-------------------------------------------------------Successfully load and execute a sha256 "compute shader", using 100% open source video drivers on Linux (using closed source ATI tools to produce shader binary is permitted).  Any Linux OS/distribution, as long as it's a recent version.  Must work on ATI 5870/5970 hardware.Rationale-------------------------------------------------------1. In theory, the closed source ATI SDK and video driver should not be needed, once we have a compiled shader.  It would make life much easier on Linux, and expand our miner base, if stock open source drivers can be used for GPU mining.2. Open source GPGPU efforts are moving slowly, and this would help jump-start those efforts, by providing a working example.  This has the potential to be a high profile contribution to the OSS community.Details-------------------------------------------------------According to some knowledgeable hackers, it should be possible to upload a "compute shader" using current Linux/OSS video drivers, via the Linux DRI APIs.  The programmer (or team) would need to figure out how to coax ATI's SDK to produce a compiled, binary object that is then loaded into an open source driver, and executed.The person or team collecting this bounty will need to be able to accomplish tasks such as rebuilding and replacing the kernel, rebuilding and replacing Mesa (OpenGL/DRI), and rebuilding/replacing the X server.  Even though these are non-programming tasks, they are decidedly non-trivial.This code (from ATI?) should be helpful in demonstrating how to work with 5870/5970 hardware: http://cgit.freedesktop.org/mesa/r600_demo/tree/?h=masterAlthough this task should be largely a "put together existing pieces and make them work" task, it is still quite complex.The Pledges (in BTC)-------------------------------------------------------I'm hoping to raise at least 200 BTC for this task, if not more.  Miners on Linux, consider pledging a block (or part of a block).15     jgarzikIf you wish to pledge anonymously, send me a PM and I'll coordinate.Pledges should be payable within 24 hours of a working example being posted publicly. If you're using long polling, you should not need a local client, nor get any stales. I doubt anyone would use a scratch card for a large sum of money.Think of this as a 192-bit salt.  It is well known how to use multiple salts. Long polling was just added to git, and I posted a test Windows version here:     http://yyz.us/bitcoin/cpuminer-installer-0.7.2-lp1.zipTest feedback appreciated, on Linux (build your own from git) or Windows.  http://deepbit.net/ is known to support long polling, and slush's pool should be able to do it soon, too.This should increase people's CPU mining efficiency quite a bit, while also reducing network usage (and load on pool servers). Countermeasure is to laugh as their CPUs barely make a dent in our hash rate. This feature was written pool servers in mind.  It seems likely that pool operators -- they who mine a lot of blocks anyway -- will upgrade sooner rather than later. I seriously doubt you can get anything close to checking a trillion combinations per second on any modern GPU. You can see two 'sendmany' transactions in block 113931:     http://blockexplorer.com/b/113931 Part of the point is to prevent ugly, useless polling...  ;pSure. It seems some ability to script local bitcoin wallet actions would be useful.  For example, give the user the ability to add "rules" to the local wallet which specify operations such as if local block generated, send to address X when it maturesif money received to account A, move it to account Bif money received to account A, send it to address Y Block chains can fork.  The longest, most strong block chain is the one that's trusted.But with satellite and other means of communication, it seems likely that blocks and TXs would inevitably leak back and forth. That's how my patch is implemented, yes.You can make it stronger by, say, having 1000x 176 bits of well known private key, 64 bit password, and 16 bits of brute force required to redeem. If we are creating new transaction types, a far more elegant approach can be had...  a new 'anybody can claim' transaction added to the client could be made more secure and elegant, but at the disadvantage of being easy to spot in the block chain, and therefore a more likely target for attack. Would be interesting to have more specific criticisms, now that code's out there.  The main question, as ByteCoin indicated, is whether or not there is an attack that is faster than brute force, if you know a portion of the private key.As the Variations section hints, the implementation presented was the most simple to implement, not necessarily the most consumer friendly or the most secure.  When deploying this into production, should it make it into the bitcoin client, I would do a couple things, such asrequire some level of brute forcing for all redemptions (have bits neither in well-known private key subset, or the password)ship 1,000 well-known 192-bit private key subsetsEach valid redemption would therefore require some amount of brute forcing, while an attacker has a lot of work to do comparatively -- they have to first recognize a scratch-off from a normal spend, in the block chain.  Then they would have to find the remaining ~64+ bits of private key, having only the public key (or a hash thereof) as a starting point.I readily admit I am no cryptographer or math genius, though!   Hopefully the future will bring more substantive criticisms from #crypto than "exposing part of private key leaves me vaguely unsettled"   
Is this based on poold.py?  That does a thread per connection.  If you get too many connections at once, or too many connections total, you can hit your OS's per-process or per-thread thread limits.During the mining pool test I ran, that happened at least once. 0.01 minimum fee will be changed over time. See http://bitcointalk.org/index.php?topic=4555.0 for an implementation of scratch-off cards. This patch adds the "sendscratchoff" RPC call, which creates transactions that are an electronic attempt at scratch-off cards:     http://yyz.us/bitcoin/patch.bitcoin-scratch-card     or git://github.com/jgarzik/bitcoin.git#scratch-cardTo create a scratch-off card for 0.82 BTC from the 'master' account via JSON-RPC:Code:$ bitcoind sendscratchoff master 0.82 '{ "bits" : 64, "salt" : "myawesome.com" }' 1 "my awesome scratch-off"{    "txid" : "4a16969aa4764dd7507fc1de7f0baa4850a246de90c45e59a3207f9a26b5036f",    "password" : "719d17195638f937"}And presumably you will have a fancy print-out or display saying     Redeem this card for 0.82 bitcoins!     card# 4a16 969a     presented by: myawesome.com     password 719d 1719 5638 f937Some time later, the holder of this card may redeem their 0.82 BTC with another new RPC 'scratchoff':Code:$ bitcoind scratchoff 4a16969a 719d17195638f937 "myawesome.com"994dd0219f6dea648a6d5f8d33850114a2a0787e136a36e8b24ccafcd6ff0e59               ^^^ transaction that "claims" the scratch-off cardHow it works--------------------------------------------------------------------After re-reading this old thread, a discussion on IRC led ArtForz to note that ByteCoin suggested a way to create bitcoin scratch-off cards within a standard transaction.  Unless I've totally bollock's up the works, which is entirely possible, here's how it works:Our EC private keys are 256 bitsGenerate 64-1024 random bits (def. 64) -- this is your scratch-off passwordPerform a great many rounds of hashing the password, and a user-supplied salt string (default "bitcoin"), to produce 256 bits of dataCreate EC keypair with the resultant 256 bits of post-hash dataCreate transaction, sending n.nn BTC to the hash of the EC public keyReturn 32 bits of transaction hash ("id") and scratch-off password ("password") via JSON-RPCTo redeem a scratch-off,Retrieve transaction by looking up N bits of the transaction hash ("txid")Build raw 256-bit private key, through many rounds of hashing the password ("password") and salt ("salt")Create EC keypair from raw private keyVerify transaction output's pubkey hash matches EC pubkey hashAdd EC keypair and scratch-off TX to local walletCreate transaction that sends bitcoins from scratch-off TX to a new key in your own wallet, thereby "claiming" the card.You may now spend those bitcoins, once your claim is confirmed (requires at least 1 confirmation by default)Because this is an entirely normal transaction, willingly relayed by all existing clients, no outside observer will know that this spend is a scratch-off card, rather than a regular spend to a regular bitcoin address.Variations:(1) Use decimal digits instead of hexidecimal, for id and password.  More consumer friendly.  Requires a small amount of brute forcing, if one limits the password to 16 digits, to recover the lost bits.(2) If you have a full block chain, and EC pub/private keys, the transaction hash ("txid") is optional.  One could simply scan the block chain for an unspent transaction to the given bitcoin address (derived from the password).Credit for all bugs goes to me.  Credit for the ideas goes to bytecoin, art, theymos and the authors of RFC 2898.EDIT: Updated to reflect changes through March 23. Yep -- a bitcoin backbone, one might call it. Although not really the same thing, this reminds me of ArtForz' idea for theymos' bitcoin scratch-off cards.  Seems like a neat and doable idea. I would rather not advertise Silk Road, and frankly wish it would go away. Good stuff.  Glad this is written down somewhere outside the source code. I was thinking this would be mostly about non-breaking changes, such as those patches people are already applying manually and running in production.disagree - breaking changedisagree - breaking change (people must rewrite their code to expect the RPC server to appear early)That's more like it   I think this sort of change -- presuming it doesn't break any existing APIs, which I don't think it does -- would be perfect for these "useful patches" nightly builds.Sounds like a great bitcoin business or website for somebody... Associated patch summaries...Adds "xlisttransactions" RPC call.  This lists all wallet transactions, using logic similar to the GUI's display code.Adds "getblockbycount" RPC call.  This dumps the block on the main chain at the specified height, in its entirety.  All data fields, including all transactions, are dumped in a single JSON response.A clone of "getblockbycount" RPC call.  Same behavior as "getblockbycount" -- dumps block at specified height.  Adds a "_fulldump" boolean to the output, indicating whether or not the entire block is present on disk (preparing for lightweight block chain support), hoping to address some objections of satoshi.Add "settxfee" RPC call.  This permits changing of the 'paytxfee' variable at runtime.Print a response for every work solution submitted to bitcoind.  Since we already logged successful proof-of-work solutions, the only thing remaining was to log when a proof-of-work check failed, which this patch does. my patches---------------------------------------------xlisttransactions RPC: http://yyz.us/bitcoin/patch.bitcoin-listtransactionsgetblockbycount RPC: http://yyz.us/bitcoin/patch.bitcoin-getblockdumpblock RPC: http://yyz.us/bitcoin/patch.bitcoin-dumpblocksettxfee RPC: http://yyz.us/bitcoin/patch.bitcoin-settxfeeprint POW failures: http://yyz.us/bitcoin/patch.bitcoin-pow-failother peoples' hackery------------------------------------------------------ gavin's monitor* stuff- gavin's portoption branch- UPNPthings to avoid----------------------------------------------------Breaking changes, like Luke JR's RPC versioning changes.administrivia---------------------------------------------------IMO require people to submit (or write yourself) a summary of each patch, so that people know exactly what's in there. I disagree.  That's a good way to make bitcoin fail, early in its life. That's the purpose of the field.  Whenever we have a four-dotted release 0.3.20.1, we set pszSubVer.  It is part of the overall program version.  It is separate AFAICT because satoshi needed an extra field, and the dotted-triple 0.3.20 is already part of a fixed encoding scheme that sets converts X.Y.Z to a single integer number.Presumably you're aware of the network protocol  so presumably you can see how it is not feasible to add a fourth qualifier to the encoded version.So, I disagree with your change, it stomps on a field bitcoin has used in the past six months.We can change this if/when the client version becomes separate from the protocol version.  cdecker proposed this in https://github.com/bitcoin/bitcoin/pull/63  His implementation was not desirable, but I think the genesis of the idea was sound. This is incorrect.  The client has used this in the past.To get the history behind a single line of code, use "git blame $file"  You can see the official client made full use of this field in a790fa46f40d751307f86c37a709eb119768ce5b, and presumably older clients exist that use this field. Yes, that's correct.  HashMeter output is per-thread, not a total for all threads.Do you really have a 12-core?  If not, I bet you could do better with fewer threads and perhaps another algo. Agreed.A nasty briar patch, IMO.  If you ever reach ~50 investors in a single company, you trigger securities laws.  And in some countries, you probably trigger securities laws anyway. I agree it's a slow news month.It is also worrisome that the recent slashdotting seemed to bring largely an interest in mining, and not so much a horde of people interesting in helping build the bitcoin economy.If bitcoin is to survive, we need good, solid, reputable businesses and interesting applications to attract consumers.  We need easy merchant APIs that do not require running a bitcoin P2P node.  We need lightweight client mode.A lot of work to do!   Yes, ".bitcoin" is the proper directory for you.  I set mine to "data", sorry for the confusion. FWIW that may be an automated transfer, so I wouldn't build any assumptions from that. Delete data/blk*.dat and re-download the block chain, see if that helps.
I have no clue what is wrong with the biddingpond folks, but I have been bugging them for a simple, working payment method for well over six months...MyBitcoin people usually respond to my support emails within 2-3 days. I'm not so sure.The consensus on IRC was that pool performance is measured by submitted solutions, and I've never seen slush contradict this.Do you have some evidence / numbers / URLs? Well, there is CoinPal: Buy bitcoins with Paypal.For a more complete list of currency exchanges see https://en.bitcoin.it/wiki/Trade#Currency_exchange Version 0.7.2 is released.  Changes:- Add port of ufasoft's sse2 assembly implementation (Linux only)  This is a substantial speed improvement on Intel CPUs.  Big thanks to mmarker/chromicant for this work.- Move all JSON-RPC I/O to separate thread.  This reduces the  number of HTTP connections from one-per-thread to one, reducing resource  usage on upstream bitcoind / pool server.  This is prepartion for adding long-polling support.See top of thread for URLs and info.SHA1: 2673c5f5c2cd85acc332a9c8a1f48415b8dd0fc9  cpuminer-installer-0.7.2.zipMD5: 24211f26b1d6b0c68fe696662b3082e7  cpuminer-installer-0.7.2.zip Yes.  It will permit miners (CPU miners, in particular) to get cut their number of HTTP connections and ask rate quite dramatically. Very nice.  If you have this JSON, you shouldn't need anything else IMO.According to my research, the sad fact is comments are outside JSON scope   You may add faux-entries likeCode:    "_comment1" : "privkey is the private key associated with your request",    "_comment2" : "firstblock is the first block where it appeared",Ugly hack, I know. Seems like it would be better for the entire community, if you simply worked with other pool servers to accomplish the same goal.If you support long polling, then the default upstream poclbm (m0mchil's) -- and soon, every other miner -- will only ask for work once every ~60 seconds.Community standards like this benefit everyone. Also, I would rather like to see a feature that permits bitcoin to sign and verify simple messages.  That verifies you control a private key, without needing to send any in-band data. I think providing the first [working, sustainable] decentralized digital currency is enough.And what that means is, people should remember that supporting currencies have multiple layers.  The US dollar itself does not provide any hooks for payment APIs, nor chargebacks, nor fraud protection.  These are all layers on top of the currency itself, and occur out-of-band with respect to information transiting with the currency itself.If we keep the base currency simple, and not used for other exotic goals such as distributed data publishing, that makes it most likely that bitcoin-the-currency will succeed.So, adding a 512-byte opaque data area to each TX, for this merchant, seems excessive because1) It could be done elsewhere.  Merchants are best served by a merchant friendly solution that provides gadgetry like order id's.  Bitcoin is a money transfer network, and traditionally merchants do not hook directly into a money transfer network.  They connect to a provider (FirstACH, PayPal, ...) who then connects them to the transfer network.  The great freedom that bitcoin provides is universal public access to the money transfer network -- but that comes with a high maintenance cost of living directly on a beta-quality P2P network.  Your small business coffee shop or flower shop should not be encouraged to connect directly to the bitcoin P2P network unless their staff has the time and skill to understand and handle P2P security issues.2) Privacy-eroding poor programming practices become easier, such as storing unencoded order data in that area.  Programmers should never store anything except cryptographic hashes or encrypted data in such a data area, but they will be tempted to do otherwise because it's easy.3) It would seem to open the door to other data storage applications.  Is data storage possible now?  Yes.  But that doesn't mean we should encourage non-currency uses.That said, as a programmer I certainly recognize the value of being able to attach a piece of my data to a transaction whose contents is entirely outside the control of the creator, save for $BitcoinAddress and $Amount.  Thus, my fallback position on this issue has always been, if overruled by the community, argue for no more than a 32-byte data area.  Enough to store a cryptographic hash of your own, but small enough still to (hopefully) discourage people from storing Lady Gaga music in the block chain. Also, I think it is a bad idea for most merchants to run a local bitcoind node.  That implies they will need to know a good deal about P2P networking, in order to defend their installation against attacks.  You have to track bitcoin software closely for security updates, that sort of thing.That's just not realistic for most merchants, IMO.We should be directing most merchants to APIs such as mybitcoin.com's SCI or mtgox.com's merchant API.And they can provide an order id (I think MBC does already?) through those Web APIs. Latest gnutella release adds support for UPNP and NAT-PMP...   If this data is stored in the block chain, it reawakens the entire BitDNS/BitX debate.512 bytes of blank data space in the chain just makes it trivial for non-currency users to use bitcoin for its generic data broadcasting services... Keys have a standard PEM format... I strongly recommend a merchant solution such as mybitcoin.com's SCI or mtgox.com's merchant API.  Running a bitcoin node yourself is maintenance intensive, and requires additional knowledge on the part of the site owner. The pool test has been closed for a few weeks.  I'll update the top post. Yep.  I was on proper.com (and that site) from inception until they banned lending North Carolina due to regulatory issues.Very educational. There is IMO absolutely nothing wrong with lending bitcoins.  I think any healthy economy must involve lending -- which is essentially human beings investing in other human beings, moving progress and civilization forward.When used wisely, debt may better direct capital to useful enterprises (== entrepreneur borrowing to invest in new business you would have never thought of, or have time to run).  The lender understands there is a risk that money may simply never be recovered, in certain cases (bankruptcy or theft). Well done.In particular, kudos for working on a license.  This is the best way to legitimize bitcoin, and take it mainstream. See the history of Prosper.com for peer-to-peer lending... Unfortunately, you are duplicated work.  This CPU miner supports VIA padlock: https://github.com/jgarzik/cpuminerThe main client does not need any CPU mining tweaks.  In fact, we discuss from time-to-time how to hide / disable / remove CPU mining from the main bitcoin client.
You seem to be implying that I am attempting to interfere with "allow[ing] us to run our pool the way we choose to."  That implication is false, just like the assertion that changing the ask rate from 5 to 20 or more seconds "would find more shares" (direct FairUser quote).You are and have always been free to run your server however you choose.  I don't have the power to interfere with that, nor do I want to.On the other hand, I and others are free to hang out in this forum thread and point out things like the above quote.In any case, long pooling in slush's and Tycho's pool looks interesting.  If it takes off, maybe that will eliminate the need for policies like this, in your pool. Yep, OSX is known broken at this time.  Waiting for someone to fix it, in a way that doesn't break everyone else's build... Instead of bolding an unsupported claim, how about presenting this real-world proof that sha256 has been broken, and certain hashes are acquired more rapidly than others?Did I ask you to change anything?  No.  Simply stating the facts. This is simply not true.Your chances of finding a suitable H==0 hash are the same, regardless of whether your ask rate is 1 work unit per nonce (a few nanoseconds), or 1 work unit per 0xffffffff nonces (minutes, on a CPU).Furthermore, the chances of working on stale work increase as you slow down the ask rate.  A 60-second period means a lot of CPU miners could waste 59 seconds worth of electricity and CPU cycles, only to discover their solution is stale and invalid. Well, it benefits the network, which benefits the node.But I agree:  it should be off by default. This server averages 80-100 connections normally.  I modded the outbound limit, it's not behind a NAT, and it advertises itself on IRC.So it is designed to be popular.  But 360 block chain downloads per day?  I have no idea if that is realistic or not for this server. Relaying blocks, relaying TX's, and a lot of initial-block-downloads, I suspect.  I don't have hard data besides "bitcoind was the only thing running on that VPS." Mining consumes very little bandwidth.Running a bitcoin P2P node consumes a noticeable amount of bandwidth -- my VPS ran out of its 1000GB allocation this month. Patch updated, to remove lower bound on TX fee. Directly storing the information in DNS is much faster, with newer network lookups and connections.The official bitcoin client simply isn't designed for storing and serving lots of little bits of static data to the general public. Blockexplorer agrees with your gettransaction output, too:http://blockexplorer.com/tx/2a59d5910721dd5729d19737f300bf9b953fc55d32e6cd16dabb8bd5885280beSounds like a rounding issue somewhere... EDIT: nevermind  If you are using a provider, then the provider can use TXT records. I agree it should be change-able at runtime.  Long-running nodes will want to adapt to changing network conditions, without needing to restart bitcoind.Here's a patch:  http://yyz.us/bitcoin/patch.bitcoin-settxfeeAny volunteers to test ? Added to DNS seed list.  That's just the sort of DNS seed I was hoping for, thanks. Just use TXT records and the current x-btc: URI specification. It does not seem prudent to enshrine a "reboot it frequently!" policy as part of standard operating procedure. The Scottish would say yes. Is the pool remotely near capacity?  If not, then it makes zero difference. The modified poclbm does not give you better performance -- more hashes per second -- nor does it find more shares than the unmodified.
Seems easier to abuse than just hardcoded trusted DNS names, where site owners proactively indicate interest in being listed.Long term, I hope some community members step up to administer a domain bitseed.example.comuse https://github.com/gavinandresen/bitcointools to dump bitcoin's address databaseselect 5-6 "fresh" addresses on port 8333dynamically update your DNS bitseed.example.com to list those 5-6 addresses in A recordsThis sort of dynamic P2P sampling + export is preferred over simply listing long-running node jgarziks_node.example.com. This efficiency number is a bit misleading, IMO.There is no guarantee that a solution exists in a 'getwork' data unit.Better to rename "efficiency" as "luck."  It is more clear. URL: http://yyz.us/bitcoin/patch.bitcoin-dnsseedThis patch adds "-dnsseed" command line argument, which causes bitcoin to read P2P node addresses from DNS A records retrieved via lookups against a precompiled list of DNS names.Presumably, trusted community members running long-running nodes could list their nodes here.Also, someone might wish to create a service that examines current P2P addresses from addr.dat, and exports a random selection of fresh nodes via DNS. Call for hacking:Anybody want to volunteer to add server failover support to cpuminer?  (m0mchil's miner, too...)Server failure should not interrupt mining [much], ideally. Who says the BTC community is mostly miners? Under the plan by theymos, it would be stored in the bitcoin main chain.satoshi suggested an alternative, where there would be multiple bitcoin chains, and the non-currency data such as BitDNS would be stored there instead of the main chain. I think that one requires custom clients and custom protocols...Here's an example using standard 'getwork' RPC call:  http://yyz.us/bitcoin/poold.py Fixed little endian is just fine, and happens to match 99.9% of our current usage.Big endian adds pointless byteswapping.  "network endian" is just so that Sun could sell more hardware, back in the day. This functions as a proxy as well: http://yyz.us/bitcoin/poold.py I think you misunderstand the latitude miners are given.A block may only belong to the 'best' chain if its transaction inputs may be connected and verified.Thus, anyone who creates a block may create a non-standard transaction, but that transaction -- once it makes it into a block -- must still be verified by the same basic checks that guard against incorrect signatures, double-spending, etc. In bitcoin, one only knows (a) input addresses, (b) output addresses, and (c) amount.  That tells you send, receiver and amount. +100 agreed.  This should be a high priority, IMO.  Here's my own, off-the-cuff, probably-wrong theory:Create transactions with a specified lifetime, either in wall clock time or number of confirmed blocks.If the transaction is not recorded in a block by the deadline (24 hours or 144 blocks?), all nodes will refuse to relay it and miners refuse to incorporate it, thus giving the user the opportunity to resend it with a proper fee.In general, transaction fees -- from a user perspective -- is still a bit opaque, and easy to get wrong.It would be nice to have deterministic behavior for transactions that are not incorporated immediately. Each miner should include code to fallback to a separate miner. Eventually a botnet or two was bound to connect, see how poorly CPU mining pays, and disconnect.   +1 agreed here, too Indeed.  ArtForz' node implementation was posted over 3 months ago.I'll be interested once people can store and verify transactions and blocks, and handle a block chain switch.  Until then...  we have achieved 3x message encode/decode engines.  Color me unexcited The best task for all these python programmers is a lightweight bitcoin client, one that only needs block headers, its own transactions and associated merkle branches. Anyone can put up an electronic exchange by downloading the source code for bitcoin central, and integrating support for GlobalDigitalPay's GBP currency. Bingo. That won't disable getblocks uploading.But even so, the ideal would be to simply stop reading until the write buffer clears... Ultimately, the goal is flow control.  Your OS has a buffer for outgoing data.  When that gets full, we need to stop sending more data, and wait for empty buffer space.The worst case buffer size of a hacker is zero.  The worst case "normal" buffer size 8k.Since bitcoin needs to send more data than that in a single message, an implementation must choose:  (a) store a pointer to the middle of the object you were sending, for later resumption of transfer, or (b) provide an application buffer that stores a copy of all outgoing data until it is transmitted.  satoshi chose (b) but placed no limits on the size of that outgoing data buffer.It does sound like the limits are tighter than they should be.
We don't get these warnings when building with gcc and other compilers. The logfile keeps expanding, under copytruncate, here. Separated out log timestamping at https://github.com/bitcoin/bitcoin/pull/91 All quite true...  though I have been thinking that it would be nice to include a set of DNS bootstrapping nodes built into the bitcoin client.Long-time community members with long-uptime nodes could include their DNS hostnames in this list.  Inventive programmers could mine bitcoin's addr.dat for addresses, and return those as DNS A records. Version 0.7.1 is released.  See top of thread for URLs.Changes:- Add support for JSON-format configuration file.  See example  file example-cfg.json.  Any long argument on the command line  may be stored in the config file.- Timestamp each solution found- Improve sha256_4way performance.  NOTE: This optimization makes  the 'hash' debug-print output for sha256_way incorrect.- Use __builtin_expect() intrinsic as compiler micro-optimization- Build on Intel compiler- HTTP library now follows HTTP redirectsSHA1: 5520112505b16f89b473ed897b89e1593aeb1371  cpuminer-installer-0.7.1.zipMD5: 1b77192b76bf50938c005b2c26d3809f  cpuminer-installer-0.7.1.zip URL: https://github.com/bitcoin/bitcoin/pull/90This change does two things:Timestamp each line in debug log, for easier problem tracking.Close and re-open debug log every 2000 lines, to enable log rotation software to replace the log while bitcoin continues uninterrupted operation.I've seen the request for log timestamping come from several people.  Log rotation is something I wanted for server operation. +1 mtgox The value of a transaction does have bearing.People are far less likely to spam using 10000 BTC transactions.  Faster confirmations for bigger sums encourages use of bitcoin for larger amounts, which is always a good thing for the economy.  And as ArtForz pointed out, it encourages sending larger amounts per tx, which implies less block chain size for the same volume of currency flow. Such a policy increases the ability of third parties to force the entire network to relay garbage. Current block chain height is not stored in the getwork data.getwork data returns a block header, which includes things like previous-block-hash (forms the block chain).  See this example of a block:  http://blockexplorer.com/rawblock/000000000000aaa7a48683e8a184ebd4de700d3c7f29524d95a417b086793ac6 I can see a possible use case for a "mass pay" feature, but that does not really solve the problem here, where slush is generating a bunch of free transactions.  The use of a mass-pay feature without paying a TX fee might result in creating a single transaction that is larger than the entire free-transaction area (27k).You wind up with the same end result: stalled transactions.  The root cause of the problem is that the pool is generating a lot of work for the network, without paying for it.  This is called Tragedy Of The Commons, or less graciously, free-loading.So, I would support the following tweaks,Convert 27k free-TX area to purely score-based, eliminating 4000-byte limitMake -limitfreerelay the defaultAdd a mass-pay JSON-RPC method, provided that the user interface requires a TX fee parameter (NOTE: zero is a valid TX fee)Reduce dust-spam/fee triggers from 0.01 to 0.001 That is correct. This is pretty simple:Code:diff --git a/main.cpp b/main.cppindex a47f3a9..0e56b59 100644--- a/main.cpp+++ b/main.cpp@@ -739,7 +739,8 @@ bool CTransaction::AcceptToMemoryPool(CTxDB& txdb, bool fChe             return error("AcceptToMemoryPool() : not enough fees");          // Limit free transactions per 10 minutes-        if (nFees < CENT && GetBoolArg("-limitfreerelay"))+       bool fLimitFreeRelay = GetBoolArg("-nolimitfreerelay") ? false : true;+        if (nFees < CENT && fLimitFreeRelay)         {             static int64 nNextReset;             static int64 nFreeCount; Agreed x 2Lack of that size limit is really an unfixed DoS issue. I disagree.  You cannot change that without vastly increasing the ability to spam the network with useless transactions. If you have enough CPU power to dictate specifically which transactions into a block, we have bigger things to worry about (double spending).There are plenty of validity checks on blocks and tx's in the client.  It's just that fees are not one of those checks, permitting miners to choose their own policy. At present, fees are nothing compared to the block reward.  It makes no economic sense for a miner to avoid fee-free blocks. It is a natural consequence of the system that any free TX space will be used up, quickly, once bitcoin is popular.Therefore, it is expected that adding a transaction fee will be strongly recommended simply to have one's transactions confirm in a reasonable amount of time."free tx" is just a nice feature while the bitcoin system is under-utilized.  Once bitcoin network sees more transactions on a daily basis, getting a slot in the free-tx area will be like winning the lottery. I think gavin already has a 'refund transaction' patch in his repo somewhere.Overall, I think transactions should have a maximum lifetime outside of a block.  If they exist past 24 hours or 150 confirmations, clients should drop the TX from their cache. This offer is now closed.
Evidence?I see plenty of blocks with zero fees. See this thread for discussion of how block size limit caps transaction rate.The block size limit caps bitcoin at 463 transactions/minute, or ~7 transactions per second. Someone has already posted a Smith and Wesson .38 special for sale.In the US, these sales need to be shipped to licensed firearm dealers. Thanks to everybody that's responded so far!   Still looking for more trades, of course. You'll hit maximum block size, before ECDSA becomes a bottleneck. 8 mhash/sec per thread???The comparison seems off.  You know that cpuminer only prints out per-thread khash/sec not total, right? Standard GNU assembler should accept MASM format, with a command line switch or two... Yes, it's possible.  ufasoft has released assembly source code....  just takes someone with free time and knowledge to integrate into my cpuminer repository. Have $1000 mtgox-USD, looking for PPUSD.Terms:- requires good reputation on forums or #bitcoin-otc- 1:1 exchange rate- you pay paypal fees, if anySend PM or email jgarzik@exmulti.com if interested. That's painting with a broad brush   Most bankers probably have never heard of bitcoin, and when they do, they won't care because it won't change their daily lives one bit.  The bankers I talk with say "hum, that's pretty cool" and then go back to filing Bitcoin is a currency.  When bitcoin is big, they will use it.  While bitcoin is small, they will ignore it just like they ignore the currencies of hundreds of tiny, inconsequential countries.Bankers are just there to make money while handling money.  It's not an ideology  The idea of bitcoins existing in some ethereal world outside government regulation is fantasy, and always has been.I want bitcoin to succeed; that means doing stuff like paying your taxes with bitcoins.TANSTAAFL. I haven't used this yet, but...  kudos for filling a useful niche in the bitcoin community! All this patch is doing is moving race windows around.  Currently RPC server init happens last, and that is sufficient to see that bitcoin is initialized. +1 agreed I'm talking with the conference organizer right now...Although the conference literature and speaking schedule has long been set in stone, the organizer is interested in squeezing in something about bitcoin somewhere... This service has been discontinued.  Bitcoin Block Explorer is far better than this rudimentary service, so bitcoinwatch is now linking directly to BBE. "dumpblock" RPC command is a variant of getblockbycount.  I believe that a program should come with easy data inspection tools, and that was the motivation of the original getblock (then renamed to getblockbycount).  One apparent objection to the merging of this patch into bitcoin was that the output would vary in the future, when lightweight clients and partial blocks are far more common.  I have attempted to address this objection, with this patch.So, I propose to include this patch     http://yyz.us/bitcoin/patch.bitcoin-dumpblockinto bitcoin 0.3.21.  It adds the "dumpblock" RPC command, which takes a block-height parameter.  A "_complete" boolean is inserted into the JSON output as a convenience, to indicate whether or not all transactions in the block are present (lightweight client).Although not shown in the this, if this proposal is acceptable, I will further modify the 'dumpblock' RPC command to accept a hash parameter as an alternative to a block-height parameter.  This will permit JSON-RPC users to query by either height or hash, to obtain the desired block dump. Patch updated for latest git.  See top of thread for URL.Note:  there remains an undiagnosed crashing problem, so this is not considered reliable or stable yet. Patch updated for latest git.  See top of thread for URL. This patch is now un-deprecated.  People continue to find value in a 'listtransactions' display that uses [almost] the same logic as the GUI's wallet display.The patch has been updated to latest git.  See top of thread for URL.
Patch updated to latest git.  See URL at top of thread. Yuck.  Exponents and money do not mix in a user friendly manner.Nanocoins[1] are stored as 64bit integers.  That is the native representation.  Any change should move towards alignment with that representation, not away from it. This is not a new idea.One could put a bitcoin address inside a TXT record, for example. 50 BTC sent, txid fa29552286adfa2a4456bc08557110caaef7261caa041a694137bc2f5ec353d9 +1 tcatm, who completed the programming and design for a python/django websiteHe also gets the credit for improving bitcoinwatch.com look and feel a few months ago, which used to look like HTML 1.0 circa 1995 (hey, I'm a programmer not a web designer). It is naive to simply think "64 bits is better."64-bit code uses more memory for data -- pointers and long integers are twice the size of 32-bit code.   64-bit code instructions tend to be larger as well (though this is mitigated on x86-64, as x86/CISC is essentially a compressed instruction set and x86-64 adds many more general purpose registers).This is why many non-x86 platforms ship 32-bit userland with 64-bit kernel.  Code and data are more compact on 32-bit, which is far more cache-efficient.Thus, on the same machine, 32-bit code might actually use fewer CPU cycles than 64-bit code. Note that ~500,000 BTC number includes change transactions.Why is that telling?  The amount of USD exchanged on various Forex sites is only tangentially related to the amount of USD used worldwide in everyday commerce. That is the total number of bitcoins in circulation.  The more relevant statistic is the amount of bitcoins and USD on deposit at each exchange, which is a substantially smaller number than 5.49M BTC. Just to clarify, that was 2,211 transactions, whose values totals ~500,000 BTC...  Not ~500,000 transactions... See this thread for more information.The mining pool was a test, and it was shut down after that test.A new, commercial mining pool should appear in a week, though. There is no reason why Windows users need a 64-bit version, really.  Bitcoin does not need the address space, nor does it need to be uber-optimized.The 64-bit version would benefit you for CPU mining... but if you are CPU mining, you will get better performance from ufasoft's CPU miner or my cpuminer. Agreed.  And that's almost become one of my mantras:  it's not about mining.This most recent wave of slashdotting (and Security Now'ing) has brought a lot of mining activity and interest in mining, but I've been disappointed that forum posts about interesting new bitcoin businesses were notably absent.  In the past, we would see a flurry of new posts to the We Accept Bitcoins thread (now en.bitcoin.it/wiki/Trade) and the Marketplace forum.  Not as much activity.If bitcoin is to survive, it needs a wealth of goods and services available, in multiple countries.  Bitcoin cannot exist without the bitcoin economy. Gotta wonder why they were willing to dump BTC, no matter what the price, huh? The value of BTC has gone up quite a bit since this was opened :/  I cannot afford a 100 BTC pledge anymore, so I must unfortunately reduce my pledge to 50 BTC.If the 15 most popular wiki pages are translated, I'd say that qualifies for the bounty in my opinion. There is a big difference between shorting and naked shorting.  Normal shorting adds information to the market.  And I doubt the bitcoin community would be willing to create a vehicle for naked shorting. Anyone creating g-coins could simply allocate all 21M (or whatever) to themselves in the first block...  why generate if you control the network anyway? Sure, do a manual short:  borrow BTC from someone, sell the BTC, and buy back the BTC later on. Someone could pay davout or another programmer, to add support for GlobalDigitalPay's GBP currency at Bitcoin Central (which is open source). Agreed.The bitcoin client does not support mining pools, so it's either winning a block (50 BTC) or nothing. Pasting linked changelog to this thread, for simplicity's sake:<gavin>Summary of changes and new features (see pull requests for details):-nolisten : https://github.com/bitcoin/bitcoin/pull/11-rescan : scan block chain for missing wallet transactions-printtoconsole : https://github.com/bitcoin/bitcoin/pull/37RPC gettransaction details : https://github.com/bitcoin/bitcoin/pull/24listtransactions new features : https://github.com/bitcoin/bitcoin/pull/10Bug fixes:New seed nodes : https://github.com/bitcoin/bitcoin/pull/59New testnet genesis block : https://github.com/bitcoin/bitcoin/pull/53Optimize database writes : https://github.com/bitcoin/bitcoin/pull/43-maxconnections= : https://github.com/bitcoin/bitcoin/pull/42RPC listaccounts minconf : https://github.com/bitcoin/bitcoin/pull/27RPC move, add time to output : https://github.com/bitcoin/bitcoin/pull/21several improvements to --help output.</gavin>
Starting a new block chain tends to imply the new block chain having much less "strength", making it easier to gain >50% network power. 6 Charts Which Prove That Central Banks All Over The Globe Are Recklessly Printing MoneyURL: http://www.businessinsider.com/6-charts-which-prove-that-central-banks-all-over-the-globe-are-recklessly-printing-money-2011-2 If we simply output the raw int64, this is an unrelated bug.So, jansson remains the only known JSON implementation that has trouble with int64 values? You were lucky.  In 3-4 days, my 1000 Mhash/sec generated no blocks.It's a lottery.Over time you should see the statistical average, but right now your sample size is tiny. Of course bitcoin is high risk, and might fail due to any number of factors.See post "The beginning of the beginning of something great". Can you be more specific?  I know of jansson, which has problems because the author arbitrarily declared all integers in his API to be 32-bit.  What other problematic implementation exist?If everybody except jansson works with 64-bit integers (the bitcoin native coin size), I'd be OK with moving forward.  We can deal with a single, buggy implementation.  Perhaps I could even contribute an int64 patch to jansson's upstream.Now, back to your proposal.1. I agree with a proposal to change RPC to showing native int64 values for monetary amounts, in JSON output.  No special tricks like $coin.0.2. I disagree that this issue, alone, requires a breaking change to RPC.  It's "nice to have" but not a driver for inclusion.3. I strongly disagree with multi-version code at this early stage in bitcoin's life.  We should just pick an RPC version and stick with it. BDB is common on Windows, too, but nobody sees it because it's embedded in your applications.And because BDB is embedded (linked) into your application, no external server is required (unlike MySQL). Thanks for posting an easy-to-review diff.Comments:We should not support multiple RPC versions in the same binary.  We are at 0.3.x, early in bitcoin's life.  If we need to change the API, we just change it.  Adding a 'version' arg to many functions pointlessly increases complexity.However, I don't see a driving need to change the API just for this issue.It is strange that SelectCoinsMinConf() needs any change at all.In general, I understand the desire to avoid faux-floating point in JSON output, as is currently done, but "$nanocoin.0" seems like an absurd attempt to avoid weird implementation issues, when those issues should instead be confronted directly. Because it's a database, and thus easy to use, compared to building your own file format. A business that charges for its services seems more sustainable. This post got me thinking about bitcoin support.  Most major open source projects have consulting and technical support readily available to newcomers.  As the linked post illustrates, individuals -- especially entrepreneurs that we want to attract -- need ready access to bitcoin-knowledgeable technical support personnel and software programmers.To that end, one hopes that https://en.bitcoin.it/wiki/Trade will grow a "Bitcoin Support" section, listing qualfied individuals and organizations willing to do tasks such asPatiently explain how the block chain and P2P network worksTroubleshoot bitcoin software installsAssistance with backing up, encrypting and securing a walletIntegration of bitcoin into existing websitesThis thread is now open for comments (or orgs promoting their support services?).Disclaimer:  I am speaking solely as a bitcoin activist, who thinks this will help bitcoin succeed.  I have no interest in running, participating, or investing in such a business myself; I already have a day job  Bitcoin definitely needs to grow some organizations that can offer technical advice and software support for bitcoin itself.  Most major open source projects have one or more companies doing this.  That would help with bitcoin adoption, too.Bitcoin is a currency, literally, in its infancy.  The concept (distributed notary service with digital signatures) is, as far as I know, the first of its kind.  It is still being "bootstrapped," meaning that bitcoin does not have a self-supporting economy -- which must, by its nature, encompass mundane things like buying gasoline with BTC, paying rent or mortgage with BTC, buying groceries with BTC.So, what can you do with the bitcoins you have right now?  Not a lot, if you ignore bootstrapping services (services like currency exchanges or bitcointo.com).  Mostly software services like web hosting, and an odd assortment of tangible goods.But it seems like most folks in the bitcoin community recognize that we just started construction of a very interesting and unique experiment in currency.  Any endeavour is, unfortunately, very high risk from an investment standpoint.  It might fail for dozens of reasons...  but wouldn't be fun and interesting if it succeeded?Step 1: Turn off "Generate coins" option.  It is a waste of time and electricity.Step 2: Wait for all the blocks to download.  As of this writing, there are 109245 of them.Step 3: Don't panic, and read the forums.  If you can post specific problems you are seeing after following steps #1 and #2, you can get answers.Step 4: Hire better SYSADMIN's.  They should be able to answer these basic questions and offer basic support, or not install software that neither you or they understand. There are a zillion and one SDK versions, all proprietary and changing rapidly.  This is a huge effort for a program that runs on Windows, Linux and Mac.  We have enough trouble just getting the current Windows code to build, as it is.It is far more likely that we remove the CPU mining code from bitcoin, than add GPU mining code. Please post a link to a diff versus mainline bitcoin, showing just your RPCv1 changes.It increases the burden on reviewers, if we must clone and diff and do all sorts of things, just to see what changed.Thanks. mcdett has it right.VISA and PayPal are services layered on top of a base currency.Neither the Euro nor the US Dollar has any fraud-protection services attached to it; if your Euros are stolen, your only recourse is calling the police.  And their job is to catch the criminal, not get your money back.Same with bitcoin.  All we need to do is provide a sound base currency that prevents double-spending.  The rest can be left to outside services. Quite true, though I really wonder now if bitcoin will ever be used for micro-transactions or in-game / in-network simple currency.  If bitcoin becomes remotely popular, you're looking at amounts such as 0.0001 BTC.I imagine that people will create their own micro-currencies (like Microsoft or Facebook Points) backed by bitcoin, rather than directly using bitcoin, simply for user interface issues such as presenting "400.00 points" rather than "0.00000385 BTC". No, just the URL. Well, that is disappointing.  If true, yes, that is a bug.  Updated. My cpuminer work on Windows (32-bit) as well as Linux.No build environment yet for Windows (64-bit), alas. A link to satoshi's paper is an absolute requirement:  http://www.bitcoin.org/bitcoin.pdf
FWIW, bitcoin is already being used to fund new investments... mtgox works fine as simply a place to store bitcoins. Ok, implemented the H==0 test shortcut (hey, everyone uses, might as well document it) and pyminer.py now gets 250 Khash/sec for one thread, on my box. No, we really do need a 256-integer, because that is the fundamental proof-of-work test in the bitcoin system, comparing two 256-bit integers:     hash < targetAlmost every practical miner simplifies this test to simply verify that the final, most-significant 32 bits are zero. Protocol buffers for the P2P networking protocol have already been discussed.  Not really realistic now, but "it would have been nice."For the purposes of this thread, protocol buffers have three disadvantages:Duplicates data structure layout of a C/C++ data structure.  You wind up encoding C/C++ data structure -> another C/C++ data structure.  Python hides this from the programmer, but it is the same net result.Less flexible than JSON in describing dynamic, multi-dimensional data structures, because the structure of every data field is compiled into the application.  Simple JSON is much more flexible, and data structures may be changed at will.Like current JSON, requires a native -> encoded -> native encoding for each miner clientBasically, any packetized protocol -- let us say JSON-over-TCP (rather than JSON-over-HTTP) -- requires some amount of low-level raw binary parsing to locate message boundaries.  To simply pass through data unchanged, rather than decoding compressed JSON, comes for free in such protocols.Therefore, logically, any JSON-over-TCP protocol already has the ability to skip the pointless native->encoded->native step that each miner client performs, by using this pass-through method.  Passing raw binary work directly from bitcoind to the client eliminates the possibility of bugs and problems related to the unnecessary encoding+decoding an additional JSON step would require. I'm not sure you caught my point.  If one (a) iterates over each 4-byte sub-string, (b) uses struct.unpack to perform endian conversion, and (c) uses Python integer math to build a 256-bit long, there should be no need for hash=hash[::-1] or bufreverse/wordreverse. I don't mind optimizing bufreverse/wordreverse, but I would like to avoid optimizing Miner.work() so heavily that it cannot be read.  That's the function that must be most-readable to other humans.  And remember, that bufreverse/wordreverse/encode/long sequence exists solely to build a 256-bit integer.  It would probably be more optimal to simply build a 256-bit integer using a per-word loop and shifts, such asCode:s = 'binary string...'r = 0Lfor i in range(8):    w32 = struct.unpack('>I', s[i:i+4])    r = r | (w32 << (i * 32))According to the docs, we can specify the byte order to struct.unpack() Been covered exhaustively in these forums; search around for hoarding and lost-coin subjects. Updated the source code with your suggestions.  Thanks -- this is my second python program, so I guarantee there are other improvements that expert Python programmers can discover. Patent issues lead it to be excluded from major distros like Fedora. If I were to rewrite bitcoin from scratch, I woulduse another algorithm than ECDSAdrop the script engine entirely, and simply support one or more fixed-format data structures for transaction signing The easiest would be to specify a program to be executed, when a block/share is accepted.Then you can write a script / batch file to send an email, play a sound, send an SMS, whatever. Here is a new high performance, highly optimized CPU miner:     https://github.com/jgarzik/pyminerThis pulls a whopping 256 Khash/sec per thread on my box.The main purpose is to demonstrate the mining algorithm, in a small amount of portable code.  And to have a bit of fun. The precise packet sizes were given in first post.  WORK message can easily be made smaller, too.If you are packetizing data for JSON-over-TCP, you are unpacking binary data to obtain message size of message sent via TCP.  Furthermore, inside each work unit, existing miner clients are unpacking binary data in order to perform hashing (miners hash binary data!).  High-level python language happily unpacks binary data -- we have miners written in Python and Java today.   Or see ArtForz's bitcoin client:  http://pastebin.com/ZSM7iHZw"don't do additional, redundant, unneeded work" is not heavy optimization.  It is reducing complexity in the miner client. The protocol supports multiple use cases:getwork polling (ie. how every single miner is written today).  C:GETWORK  S:WORK  C:GETWORK  S:WORK ...push mining   C:CONFIG(push mining)  S:WORK  S:WORK  S:WORK  S:WORK  ...monitorblocks   C:CONFIG(monitor blocks)   S:BLOCK   S:BLOCK   S:BLOCK   ...The protocol supports LAN or WAN, bitcoind or pool server.If the miner client prefers polling over push mining, they may choose to do so. You are being too literal.  Even python must do this step:  work = json_result['data']Doing all the extra, pointless work of binary->text->compression->text->binary also increases the chances for programmer error.Once you have a binary, packetized protocol, the easiest, least error-prone thing to do is receive (or create, in bitcoind's case) a raw binary packet, and pass that directly to a connected miner. Because sending work as compressed JSON involvesencoding binary data to hexidecimalstoring that hexidecimal string in JSON structurecompressing JSON(sent to client)decompressing JSONreceiving pointer to hex stringdecoding hex string to binary dataIt is obviously more simple -- less CPU usage and less bandwidth usage -- to send binary work data directly.  Remember, binary data is the common case for mining.JSON is in the protocol for flexible feature negotiation and configuration.  But we must to avoid today's binary->text->compressed->text->binary redundant data encoding, because the miners work on binary data. When it takes a year to earn a single block, you are not being green.  You are spending $$$ in electricity, for a single 50 BTC block.Any environmentalist with an iota of common sense will see this as pointlessly burning coal to generate wasted electricity.Input your hash rate here to see how useless is CPU mining:  http://www.alloscomp.com/bitcoin/calculator.php This is not a network protocol issue.  You can easily add these rules to your pool server or bitcoind, once the protocol is deployed. CPU mining is pretty useless.  The only work I see being put into the official bitcoin client would be to hide the Generate Coins option so that newbies don't trip over it.
If they cannot be lost, then by definition they must be retransmitted.  And you must build logic to determine how often to retransmit.  When to stop retransmitting and give up.  Reinventing TCP, in other words.The loss of a WORK message can mean the loss of money, due to not working on the latest block etc.  No miner will stand for this, therefore, WORK must be acknowledged by client, and retransmitted by server.  TCP does this for us automatically.UDP has no notion of connections, so a heavily loaded NAT box must rely on timeouts and other hacks, unlike TCP.  But in focusing on NAT you ignored "firewall";   TCP far more readily passes through firewalls than UDP.  I've seen this at plenty of large corporate sites especially.  They'll do a local DNS server, and no UDP traffic will traverse the firewall into the outside world.  If you want universality, UDP is not the way to go.  TCP is simply more likely to succeed.Only if you don't mind losing money  The solution here is easy:  don't build from git, build from tarball releases.  The tarball already has the proper configure script generated, so you don't have to worry about missing macros or broken OS configurations. Yes, this is a good idea for the future.  If someone wanted to contributed a clean implementation of this, I would accept it.As it stands now, simply starting completely independent threads was easier to code.  Breaking up the nonce work implies some level of coordination among threads, which must be done carefully to avoid hurting performance due to locks / asynchronous queues / similar threading details.  One must also take care never to stall one thread, while it waits on other threads.  This is not a hard problem... but it must be done right to avoid these pitfalls.Pooling already exists.  See this thread, or see this thread for a binary pool protocol. A miner does not want to lose a WORK msg, GETWORK msg, nor have their solution lost.  Every single message -- LOGIN, GETWORK, WORK, ... -- must be retransmitted or retried by one side or the other.But that's just one of many disadvantages of UDP.  TCP is also better supported by most programming language libs, and is more firewall- and NAT-friendly.Having implemented many UDP servers of various sorts -- financial data feeds, gaming servers, and cloud computing coordinators -- you really do wind up reinventing TCP while attempting to simply have a robust UDP implementation. According to the license, the code is public domain, so perhaps somebody might want to integrate this into cpuminer itself ;-) That's my conclusion.  One of the websites I'm planning on releasing RSN will feature 0-confirmations.  Average transaction will be ~2 BTC.I also think people will notice if double-spends start appearing with any frequency. Retransmissions imply you wind up reinventing TCP. Is this faster than cpuminer? Is this two pool servers connecting to same bitcoind... or two pool servers connecting to two bitcoind instances? 0. The URLs----------------------------------------------------------------------------------URL: http://yyz.us/bitcoin/pushpool-0.4.tar.gzRepo: https://github.com/jgarzik/pushpool1. The Problem----------------------------------------------------------------------------------With the recent slashdotting and resultant influx in new users, the 'getwork' network protocol used in mining is showing some strain, particularly on the pools.  Miners request work once every 5-10 seconds using HTTP JSON-RPC, which has several glaring inefficiencies that lead to unnecessary server load:HTTP/1.1 persistent connections are uncommon, possibly because bitcoind does not support them.  This results in a new TCP connection from every miner, every 5-10 seconds, to the same network host.'getwork' data is a mere 256 bytes, but HTTP headers and binary-to-hexidecimal encoding for JSON increase the payload to more than double thatofficial bitcoin client's RPC server implementation is essentially a single-threaded loop, where requests from clients B, C, and D will be stalled and ignored until client A's request is finished -- or a 30 second timeout (see -rpctimeout).  This algorithm does not tolerate a high TCP request rate from multiple threads / computers.Several people, pool operators in particular, have a keen interest in solving these problems.  In addition, push mining (see below) has been discussed as a future alternative to the 'getwork' polling method currently employed.2. Design goals for a solution----------------------------------------------------------------------------------I have written a demonstration pool server (aka a 'getwork' proxy server) that functions in a similar fashion to the recently-discussed poold.py:  large numbers of miners connect to the pool server, which proxies 'getwork' JSON-RPC requests to the official bitcoin client.  This demonstration server implements a new binary protocol that was designed to meet the following goals:Persistent TCP connections, to eliminate TCP disconnect+reconnect behavior by minersNetwork-efficient for the common use case:  one network packet for 'getwork', one network packet for the returned data.Network-efficient for similar use cases (monitorblocks, monitortx) where clients connect, and then passively wait for real-time events to be deliveredExisting miner client workflows supported, to minimize network protocol change impact on minersSupport "push mining," where server delivers new work to miners unsolicited (ie. without the miner first sending a 'getwork' message)This is not intended to replace JSON-RPC API, but to supplement it for specific use cases.  Yes, that means bitcoind will listen to three network ports: P2P network, JSON-RPC, and binary RPC (though as now, only P2P is required for operation; the servers are always optional).3. Let's start with a protocol example: today's getwork mining----------------------------------------------------------------------------------The specific details of the protocol itself are in ubbp.h and protocol.h of the above URL (pushpool-0.1.1.tar.gz).  Here is an example, to provide a suitable introduction:* TCP connection is broken up into messages.  Each message has a 64-bit header, with 8-bit opcode and 24-bit length fields.* Miner client connects to TCP server, and issues a LOGIN message, which is compressed JSON login data + sha256 hash of (data + shared secret).* Server responds with an OP_LOGIN_RESP msg, compressed JSON, indicating options and capabilities* Client issues an OP_GETWORK msg (8 bytes)* Server responds with an OP_WORK msg (264 bytes)* Client uses its CPU/GPU to work on proof-of-work solution...* Client issues an OP_GETWORK msg (8 bytes)* Server responds with an OP_WORK msg (264 bytes)* ...The above example intentionally matches existing 'getwork' JSON-RPC miner client workflow today.  Miner clients may even support stateless operation by pipelining the OP_LOGIN and OP_GETWORK requests together, and closing the TCP connection.  Stateless operation is not recommended, but it is supported, in order to support the widest range of existing mining clients.4.  Tomorrow's mining:  push mining----------------------------------------------------------------------------------When a block or tx arrives, it is preferable to begin working immediately on the new work.  From the server's perspective, this is a classic data-broadcast problem, where the server wants to broadcast N different pieces of work to N miners.  Hence, "push mining" where the server pushes new work pro-actively to the miner clients.This new network protocol supports pushing mining, as demonstrated in this example:* Client connects to server, issues a LOGIN message with the "send_me_work" flag set* Server responds with OP_LOGIN_RESP msg* Server sends a OP_WORK msg* Server sends a OP_WORK msg* Server sends a OP_WORK msg* ...5.  A similar use case:  monitorblocks----------------------------------------------------------------------------------Gavin Andresen has a patch in his github which provides a very useful feature:  when a new block is received (monitorblocks) or new wallet transaction (monitortx), bitcoind sends an HTTP POST to the specified URL.  Thus, monitorblocks provides real-time monitoring of the bitcoin network, and monitortx provides real-time monitoring of the local wallet.  This sort of featureset pushes data as events occur, rather than forcing a website operator to poll JSON-RPC for certain operations to complete.Monitoring new blocks on the bitcoin network is a very easy data broadcasting problem that this binary network protocol may easily support:* Client connects to server, issues a LOGIN message with the "send_me_blocks" flag set* Server responds with OP_LOGIN_RESP msg* Server sends a OP_BLOCK msg* Server sends a OP_BLOCK msg* Server sends a OP_BLOCK msg...monitortx is more complicated, because one may specify transaction-matching criteria.  But with this new protocol's support of JSON, flexibility is not a problem.6.  A plan to proceed - this is just a rough draft----------------------------------------------------------------------------------I'm thinking of the following steps to proceed, given the need to coalesce several potentially parallel push-mining efforts:write a pool server / proxy server that supports the new protocol (done)hack existing miner clients (cpuminer, oclminer seem easy targets) to support new protocol. volunteers?iterate, test, comment.  iterate, test, comment.  lather, rinse, repeatOnce people are happy, implement in official bitcoindin parallel with any of the above efforts, update official bitcoind's rpc.cpp with a smarter httpd implementationLet the comments begin...  hopefully someone will volunteer to mod a GPU miner to support this?Appendix 1:  FAQ----------------------------------------------------------------------------------Q. Why invent a new protocol?  Why not use Google protocol buffers or XDR?A. protobuf and XDR both require an underlying packetizing format, such as UBBP that I've presented here.  That implies the choice would be UBBP+protobuf or UBBP+JSON.  Given the bitcoin community's embrace of JSON, the latter was chosen.  JSON is actually more flexible than protobufs, because more dynamic data structures may be described using JSON.Q.  Why did you not address glaring problems in getwork?A.  I focused purely on a network-efficient protocol.  getwork implementation choices are outside the scope of this work.Q.  What is the state / quality of this code release?A.  Uh, it compiles and runs... but no clients yet exist for it.  Without a miner client for testing, it's about as useful as spitting on a fish... The code is correct as-is.   This is the normal way someone defines bitmap constants, and is found throughout the Linux kernel among other places.In the future, you would probably seeCode:enum {     NODE_NETWORK      = (1 << 0),     NODE_FOO          = (1 << 1),     NODE_BAR          = (1 << 2),};etc. github pull request, emailed pull request (Linux kernel-style) or a posted patch are all welcomed.  It's a small project  autogen could not find your libcurl autoconf macros.  Sounds like you have a non-standard installation, outside the normal autoconf/automake paths. To mine, you really need to know the bitcoin data structures quite intimately...  ultimately that means reading the bitcoind source code. byteswap.h is provided by your OS.  cpuminer will probably need a few minor patches before building on osx.   Patches welcome!Why is that weird?  That's the standard CURL autotools macro invocation. There is the paypal chargeback -- scammer disputes their purchase, and gets back funds -- in addition to the credit card chargeback.The scam, and the net result, are the same:  PayPal seller loses funds from purchase, and scammer keeps the hard cash (bitcoins or LR). You can look for it in the OS process list. Presumably, a commercial bitcoin payment processor would spend the bucks to enter the network at a wide array of points, implementing their own double-spending detection and prevention. The completion of AppInit is signalled by the availability of the RPC service -- that's why JSON-RPC is initialized last in AppInit. Highly redundant HTTP headers are probably >50% of your overall bandwidth usage.  My proposal eliminates that entirely.The cost of stateless is huge.  Think about it -- those HTTP request and response headers are sent, uncompressed, over and over and over again.My proposal cuts 'getwork' down to a single network packet.  That is maximum network efficiency.
It's far too late for patches, for 0.3.20. Yes.Correct. The help shows you need two dashes (--), but you are providing only one dash (-). Or you could just deduce same from getinfo's "blocks" and "connections" output... Feature request:  support HTTP/1.1 persistent connections, to maintain the TCP connection across 'getwork' JSON-RPC requests, when the server supports it.That makes JSON-RPC much more network-efficient.  Hopefully bitcoind will be upgraded to support this, soon, and I believe slush's server already supports it. CPU miners are urged to upgrade to cpuminer version 0.7 (link).Hopefully this version will reduce the load on slush's server -- and speed up cpuminer's "getwork" turnaround time for users.  Win-Win.See the release announcement for other details. I think this should be done -- because we will reach this end state eventually, anyway. The stats and payment processing code were too ugly to be released.  Any competent programmer should be able to do so, from looking at the SQL statements inside poold.py.A commercially-supported pool is coming in the next week or two with these features, but it will not be open source. cpuminer version 0.7 is released (see top of thread for URLs).Changes:- Re-use CURL object, thereby reusing DNS cache and HTTP connections.  Pool users are strongly encouraged to upgrade to this version of cpuminer.- Use bswap_32, if compiler intrinsic is not available.  Fixes "__builtin_bswap32" compile problems.- Disable full target validation (as opposed to simply H==0) for nowSHA1: 9fb370d019e475d9a01a34c42fbcbcae823d971b  cpuminer-installer-0.7.zipMD5: 3546f606c99bdba9ad2796ecfa86f2cc  cpuminer-installer-0.7.zip This is a bug in the current version, that is fixed in git.  Scroll up for the bswap fix, check out the fix from the git repository, or wait for the next release. The "generate coins" option is CPU mining, which is mostly worthless these days -- you'll have to generate for a couple years, before getting a single block, most likely. GPL'd pool servers are available, for anyone who wishes to run their own:  http://yyz.us/bitcoin/poold.pySee this thread for details of a pool test using this software. +1 for mtgox.  He usually gets to my emails within 48 hours, though you gotta expect a business to be less responsive through weekends. If you'll take out of state customers, and your rates are reasonable, I am personally interested.Furthermore, I think the bitcoin community desperately needs more exchanges such as yours.  Legitimizing bitcoin means proactively complying with government regulations, and playing within the rules.Well done! satoshi never signed any tarballs.  He posted SHA1 signatures, but anyone can do that.Ideally, gavin or satoshi or whomever will post SHA1 signatures of 0.3.20 release inside a PGP-signed message. The current solution in git is sufficient: We re-use the CURL object in each miner thread, which implies we fully cache DNS entries according to their cache timeouts. It's at github:  https://github.com/davout/bitcoin-centralThe "Download" button will generate a tarball from the latest git tree. Search the forums for discussion of the MrBurns floods.Basically, there is a limited amount of free transaction space in each block.  Once filled, transaction fees are usually required if you don't want to wait longer.  See https://en.bitcoin.it/wiki/Transaction_fees for some details. Note use of "should be"  In reality, BTC market value is determined by BTC supply and demand.  If there is no demand, difficulty is irrelevant, and mining profitability plummets. I hope this wiki page has some minimal level of sanity checking / moderation?
As discussed on IRC, bitcoin's JSON-RPC httpd should be converted to use select(2) (or poll or epoll) as is done now in ThreadSocketHandler2(), which enables HTTP/1.1 persistent connections.But let's leave that aside for a second.However, for monitorblocks and push mining ("pushwork"), I would urge consideration of running a TCP server on a third port (8331?) with a simple protocol designed for long-running TCP connections, and data broadcasting.Server (bitcoind) simplified pseudocode for monitorblocks:Code:processed_new_block_event(block):    for each incoming TCP connection on port 8331:        if (connection mask & BROADCAST_BLOCK)            write(socket fd, block)Client simplified pseudocode for monitorblocks:Code:TCP connect to host:8331send curtime, protocol version, client version string, username, [possibly empty] list of options, sha256(all previous args + password)wait for server response ("auth ok, here are my capabilities", or "rejected, goodbye")send "send me new blocks" messagewhile (true)     select/poll for new input from remote server (bitcoind)     read message from server ("hi, I'm a new block!")     take client-specific action based on message...In this manner, bitcoind's logic is simple because you don't have to keep track of a list of monitored URLs, nor care about retrying a monitorblocks HTTP POST if server is down, etc.This same client connection model can be used for "push" mining, where miners are automatically delivered new work if bitcoind receives a new TX or block from the P2P network.Server (bitcoind) simplified pseudocode for push mining:Code:processed_new_block_event(block):    for each incoming TCP connection on port 8331:        if (connection mask & BROADCAST_WORK)            work = RPC.getwork()            write(socket fd, work)And client miners would behave similarly (warning to efficiency nuts: this is a simplified example):Code:TCP connect to host:8331send curtime, protocol version, client version string, username, [possibly empty] list of options, sha256(all previous args + password)wait for server response ("auth ok, here are my capabilities", or "rejected, goodbye")send "send me new work" messagestart proof-of-work GPU/CPU mining threads in background:     while (true)          send "get work" message          read work from server          execute GPU/CPU miner core          if solution found:               send "found solution" messagewhile (true)     select/poll for new input from remote server (bitcoind)     read message from server ("hi, I'm a new work unit!")     interrupt GPU/CPU miner core, restart with new workOr something to that effect.The general idea is simply a binary protocol and connection model that's efficient for data broadcasting tasks such as: monitorblocks, push mining, and a future monitortx feature. When monitoring blocks, it is obvious when you have missed blocks from the data.  A block chain reorg is something to think about, though.  And when monitoring for work, it is ok to miss a 'getwork' unit and simply retreive a fresh one.Monitoring transactions is, as noted, more difficult from this perspective as well... Scroll up for test results ("smashing success").I agree, the more pools, the better for bitcoin.  That's why I published my code! It is presumed that transaction fees will be large enough that fees will provide the incentive to support the network and verify transactions, after the per-block BTC rewards reduce to zero. This is true, and in fact, that was my plan for a push-mining implementation.   hmmmm. I think we should go ahead with 'monitorblock', because it is simple and immediately useful.  monitortx requires a more complex API, that specifes how bitcoin should select (match) which transactions to POST.Suggested RPC API:     monitorblocks add URL [senddata]          Add URL to list of those monitoring incoming blocks.          senddata=true: bitcoin will send block contents in JSON format          senddata=false (default): bitcoin will indicate new block chain height to URL, and nothing else          Returns: numeric id, represented URL just added to monitor list     monitorblocks del id          Deletes URL [id] from monitor list.          Returns: success / failure     monitorblocks clear          Clears monitor list, and stops all monitoring.          Returns: success / failure The mining stats are delayed by two hours, among other things. Someone implemented a work queue a long time ago.  The reason that changed was never merged into upstream:  it basically guaranteed that you are always working on "old work," lagging a second or three.  Ideally, a background thread polls for work, carefully observing timings sufficient that it issues a 'getwork' JSON-RPC call, downloads and parses the JSON response just in time for a thread to request new work from the queue. Just committed two changes to git, based on suggestions here:Re-use CURL object.  This means persistent HTTP/1.1 connections, if your pool server supports it!Use bswap_32(), if compiler does not provide intrinsic.  Useful for older OS's. You will need to intimately understand the mining process, notably the binary layout of the 80-byte bitcoin block headers.  The best reference is the C++ source code for the official bitcoin client. Bitcoin going mainstream means embracing government regulations.  Mt Gox has already started, by limiting withdrawals to $1000/person/day (or equivalent withdrawal in bitcoins).Everyday consumers simply want an easy way to pay vendors. 'listtransactions' gives you 'time', which is Unix time (seconds since Jan 1, 1970 UTC) That illustrates the difference between mainstream and non-mainstream users.In the US, your real name, address, and tax ID # are all associated with your bank accounts and brokerage accounts.  This obviously does not alarm the populace at large, who continue to bank or buy stocks.If Mt Gox started requiring KYC for accounts > $100 or > $500, I think that would be a fantastic signal of mainstream bitcoin acceptance, and a sign that Mt Gox will remain viable long term. The pool has been shut down.  Thanks to all who helped test!  Only one block was found during this test, from beginning to end. <shrug> After years of building my own computers, I learned the value of pre-built computers with warranties and support.  Plus, my own time has a cost. In the US, this is called a Money Services Business (MSB).  Mt Gox is probably an MSB, but there is FinCEN administrative ruling that states "our regulations define a money services business to include a seller or redeemer of stored value who sells or redeems stored value in an amount greater than $1,000 per person per day in one or more transactions."So it can be argued that limiting daily withdrawals to $1000, exchanging for stored value (==bitcoins), fits this definition.  At least for the US jurisdiction.Nevertheless, I would certainly recommend to Mt Gox and others in the US to register as an MSB.  It's not as complicated or expensive as it sounds, and it basically involves the following:AML: requires at least two people.  One is an auditor/reviewer of anti-money-laundering (AML) practices, who should not be involved in implementing AML.  For small websites, this means the website owner (mtgox) must find another person willing to review his code for security/privacy/KYC/AML.AML: You must file electronic reports on all transactions leaving the country, or are over $10,000AML: You are expected to notice transactions smaller than $10,000, that appear to attempt to evade the $10,000 reporting limitKYC: You are expected know to details on your website's users, primarily name, address and tax ID, in case law enforcement comes calling.There are more details, but these were the big details that stick out in my mind, from my own research. PM sent How much would you charge to assemble a rig with the following specs?  http://bitcoind.org/mediawiki/index.php/MinerHardwareAnd, what is your warranty policy? The pool will be shut down Monday at 11:59pm EST.  Until then, I'm keeping my CPU miners going on it, at least  cpuminer version 0.6.1 released (see top of thread for URLs).Changes:- Fully validate "hash < target", rather than simply stopping our scan  if the high 32 bits are 00000000.- Add --retry-pause, to set length of pause time between failure retries- Display proof-of-work hash and target, if -D (debug mode) enabled- Fix max-nonce auto-adjustment to actually work.  This means if your  scan takes longer than 5 seconds (--scantime), the miner will slowly  reduce the number of hashes you work on, before fetching a new work unit.SHA1: dca174e0e433cda072a1acd7884dbdc15fa4a53c  cpuminer-installer-0.6.1.zipMD5: 675242118b337c6d2bfc23a13eb2dd82  cpuminer-installer-0.6.1.zip
Not sure I want to give out all the secret sauce   Left as an exercise to the reader. This payout has been made. This mining pool test has been a smashing success.  Thanks to all who helped out with their CPU/GPU cycles.  Here's a quick briefing.1. What was being tested?--------------------------------------------------------------------I'm working on a suite of bitcoin-related services.  Mining pool capability is a small part of that.  This was a live test of code that will be deployed in production later on.  We found many bugs that a static, in-house test could have never found.  slush was also very generous with advice and cautionary warnings.To thank the community for the help, the core server source code has been GPL'd and released:  http://yyz.us/bitcoin/poold.py   However, it should be noted that that server is missing several data validations that need to occur (to prevent cheating).2. What is the current status of the pool?--------------------------------------------------------------------Only one block was ever generated by the pool (which IMO is fantastic, given current difficulty, short notice and informal nature of this new pool)You can get real-time stats at http://pool.yyz.us/stats.cgiAs I consider this a concluded test, I will be shutting down the pool next week -- hopefully enough time to generate another block for the remaining folks who contributed shares.  I have switched my own GPU miners back to slush's pool, though my CPU miners are still pointed at pool.yyz.us.3. What is the status of the payout -- where my money?-------------------------------------------------------------------------------------------We have one block (50 BTC), which was confirmed 87 blocks ago as of this writing.Based on a technical reading of slush's site, I wrote the software so that only miners who got shares in the block we generated got credit:  "When the pool mints a block, only users who worked on that block are rewarded, and only for work they did on that block."  But apparently I wrote the software incorrectly, because people expected to be rewarded based on shares contributed to all blocks up to and including the newly minted 50BTC block.So according to my software, this is the winning distribution based on those who worked on block 105839,     mine319.pit00     211     mine300pit04     48     BitCoinPurse     7     worker102     2     immaminer     2     Raulo     2     wtf     2     test     1     mine319.pit00     1That excludes shares contributed on blocks prior to 105839, and some ~18 hours of shares in the current round, and those records cannot easily be recreated due to since-fixed software bugs.So, since it's only 50 BTC and I don't want to argue endlessly about it, as a compromise I am going send 1.00 BTC to each of 41 registered users, and then divide the remaining 9 BTC up according to the distribution above.If the mining pool mints another 50 BTC block in the next ~5 days or so, those share records are present, and I can do a real, slush-like distribution of the reward.  After that, the pool server will be shut down.4.  What comes next?---------------------------------------------Here are some tantalizing hints:push-based mining (current RPC miners poll for new work every few seconds)geographically distributed mining servers in the US, Eur and Asia, for best possible latencyadditional share rewards -- sometimes we might want to compensate you above the 50 BTC reward itself, because your mining increases the security and value of our network slush is right, but he's being terse because we discussed the vulnerabilities in private...  Once my further changes survive testing on this new mining pool, I'll update the code again. This is GPL'd: http://yyz.us/bitcoin/poold.pyThough it's not necessarily exactly what I'm running on the pool at any given time, as I'm constantly tweaking and fixing the server. Yes, still running with plenty of miners attached. The pool found its first block last night, block # 105839.Now that a block is in the database, work on statistics may commence. How does one calculate that? The pool server was upgraded to a more robust multi-threaded model, which I'm hoping solves some of the timeout issues reported.Email (or post here) any questions or issues.  Still searching for that first block, so the payout code has not yet been exercised.  If you can spare some GPU/CPU power for testing this pool, it is appreciated.Right now the pool is around 9 getwork/second.Stats are definitely on the todo list. I consider the bounty paid.  I donated 2 GAU to davout and bitcoin-central, now that Pecunix GAU is supported there for trading. The pool will probably see many restarts in the first 24-48 hours of its lifetime.Additionally, I am currently using python's BaseHTTPServer, which seems to sometimes pause for several seconds before giving up on a socket, and processing more.  As soon as this is turned into a multi-threaded server, that should not be a problem anymore. A quick status update:Initial testing seems to show the pool database working correctly.  Shares are being found, and correctly being credited to workers.Still waiting on that first found block (and associated code), so more test workers are still wanted!I should have a stats page up in 24-48 hours.  Thanks to everyone participating in this test. Over the next week or two, I am testing some new mining pool software.  If you can spare a miner for an hour or day or three, testing is greatly appreciated.Worker registration and basic pool details at http://pool.yyz.us/register.htmlThis is alpha quality software right now -- still have not found a single block.  Payments are made on a best effort basis; this is brand new software and bugs are guaranteed.  The server will go up and down as software updates are applied, so don't be surprised if you occasionally see connection errors.Please send bug reports and other feedback to jgarzik@gmail.com.  Thanks! UPDATE:  After discussion on IRC, I think the change should be to represent "10.0" as a JSON string.That will successfully (a) avoid JSON implementations' int limitations, while achieving the goal of (b) never use floating point to represent bitcoin amounts. If there is to be any change, please change to use int64 integers with no decimal points at all. FWIW, this can also be used in conjunction with TCP_DEFER_ACCEPT socket option, which does not indicate a socket is available to accept(2) until data arrives. Problem is, "TBC" is your own invention, no matter how many times you repeat it. +1 agreed Yes.  I am very surprised that Tor and other VPN solutions do not already employ such obfuscation techniques?To truly obscure traffic, one must (a) send the same length of data at regular intervals or (b) saturate all available bandwidth with data at all times.  Anything else is vulnerable to statistical analysis.  The "random data at random times" method is not very practical for most modern TCP-like messaging applications; also, "random data" + your app traffic may not equate to random data... Quite true.I suppose the P2P network could advertise a 'I require SSL' flag, during the normal course of globally propagating the bitcoin P2P node addresses.And the bitcoin client could be changed to add an option that prefers SSL P2P nodes on TCP port 443.Still, ultimately you do not need DPI to simply observe bursts of incoming and outgoing traffic behave (a) like bitcoin P2P and (b) unlike HTTP.  Application fingerprinting by packet sniffers is quite advanced.  A lot of information may be deduced even without access to the unencrypted plaintext.
If I were to rewrite the JSON-RPC interface from scratch, I would probably use strings to represent the full int64 bitcoin value, without any decimals.But perfect is the enemy of good.Our current interface works just fine, and all this is making a mountain out of a molehill.  I do not see the value in changing what is currently in use. Irrelevant distinction.  The definition of "number" requires support for decimal numbers.That said, many libraries are smart -- such as jansson -- and will evaluate a number directly into an integer. SSL is (a) a good additional to the bitcoin P2P protocol, even if anonymous, and (b) easy to integrate into the existing protocol.As others have pointed out, SSL will not give you authentication, because you're still connecting to an untrusted party.  However, it will give you obfuscation, which has value.Modern protocols implement SSL by including a "start SSL" message in their plaintext, unencrypted protocol.  That eliminates the need for multiple TCP ports as in the HTTP/HTTPS design.  bitcoin can implement SSL obfuscation by adding a start-ssl message immediately after the version message.  The version message will tell us whether or not the node supports SSL, making it easy to integrate SSL in a backwards-compatible manner.Thus, bitcoin P2P nodes that wish SSL may request it, just like SMTP nodes that wish to use SSL for transiting email between untrusted nodes.It is a step forward for the Internet, when most protocols use SSL by default, even if obfuscation is the only added value. This is a deficiency in the official client, and should be fixed. cpuminer version 0.6 released (see top of thread for URLs).Changes:- Fetch new work unit, if scanhash takes longer than 5 seconds (--scantime)- BeeCee1's sha256 4way optimizations (faster!)- lfm's byte swap optimization (faster! improves via, cryptopp)- Fix non-working short options -q, -rSHA1: d4c21a3fc1c3f433771101cf1e71186df3a94032  cpuminer-installer-0.6.zipMD5: 1936f4f71574643825f8d8d31e456a3a  cpuminer-installer-0.6.zip PRI == SCI, at Pecunix.Thus, bitcoin central PGAU deposits can be automated, but bitcoin central PGAU withdrawals require you to manually login to their website and issue payments. That's over-thinking the problem.  Simply expressed, duplicate existing LRUSD support for Pecunix GAU, using Pecunix's API rather than LR's API.  PGAU balance will appear beside LRUSD, and BTC/PGAU may be traded as BTC/LRUSD are traded now. I just posted an advertisement on the Marketplace forum, to add Pecunix GAU support to bitcoin central. I'll offer 500 BTC to the person or group that contributes working Pecunix GAU support to bitcoin-central open source project. Don't be so literal   "Checksum" is convenient shorthand.  You see this with the "sum" prefix in binaries named "md5sum", "sha1sum", etc. One FAQ I get is "why not use Paypal?"My answer is:  Paypal is a layer on top of currencies.  Paypal offers digital access and fraud protection on top of various currencies (USD, EUR, JPY, ...).  In the distant future, Paypal would hopefully offer BTC as a supported currency, alongside USD and EUR. We should not be building anything except bitcoin itself.  Choose a distro with checksum'd packages, and you wipe out almost everything on your list. With modern packaging, checksumming is quite easy -- provided that prelink is disabled (prelink rewrites binaries).  So gavin's proposal seems reasonable, and reproducible. Encryption is not pointless, because it is unlikely an attacker can control enough bitcoin nodes today.Furthermore, it is nice to not be observed when I am submitting a new transaction to the network.  Those in the coffee shop have no business knowing that I am submitting a new transaction, even if the TX is propagated in the clear throughout the network. "Starbucks launches largest mobile payment program in the US"http://www.techspot.com/news/42051-starbucks-launches-largest-mobile-payment-program-in-the-us.html     and Yeah, the configure script is not intended to "recognize your cpu."  If you are doing your own builds, you are expected to be able to supply the best compiler flags for your CPU through the CFLAGS environment variable.  This is the standard, recognized method for passing compiler flags to 95% of all configure scripts:Code:     CFLAGS="-O3 -march=native" ./configure-march=native tells recent gcc versions to build programs tuned specificaly for the build machine's CPU (and may not work on other CPUs).  By default, the compiler tries to generate code that is best suited to a wide range of CPUs. 8333 is the hardcoded P2P port. Right now: yes, if you are highly technical and can obtain the full-bitcoin-for-Android build.In the future:  yes, people are working hard on an easy bitcoin smartphone app If you could fix this one JSON issue, I can get bitcoin-central listed on bitcoinwatch.That bitcoin-central JSON breakage is my only blocker. IMHO, most "average users" should be using a website, rather than bitcoin software.bitcoin software is mainly for highly technical people, or people very interested in privacy (ie. they might run bitcoin over Tor).
The JSON output is broken.  There is no comma following the "eur" data closing brace.  There may be other errors, but that's the one I'm seeing.Most languages have some sort of JSON validation code that you could use, just as a self-check against this sort of problem.  I would run your XML through an XML validation as well. Post contents from debug.log. +1 agreed"They're poisoning the water supply!" is clearly nutters, too. Just post your to-be-pulled branches on the sanctified git server of your choice. You should post in 'We accept bitcoins' thread, to get Bitcoin Central listed on http://www.bitcoin.org/trade MyBitcoin is a website.  Presumably they secure their wallet with strong encryption, but I don't know.There are two ways to use bitcoin:  (1) through a website, or (2) using the bitcoin software.When using the bitcoin software, you should employ encryption. These are all good suggestions, but I think there's a common problem:  people get mixed up trying to explain bits of technology.So, here's the challenge:  try to explain bitcoins, without explaining peer-to-peer networking.  You would come up with something like,"bitcoins are digital cash, stored in a computer file on some website, or on your personal computer.  They can get lost or stolen just like real cash.  There is no central authority, but a network that verifies all transactions, in exchange for a tiny fee.  Currently there are 5 million bitcoins; eventually, there will be 21 million bitcoins, and that's it." Software exists that will keep your bitcoin drive / filesystem encrypted always.  The only place it is not encrypted is RAM. Correct.  The website's database store the balances for each user.Encrypted data storage already exists in several forms; you should be using one or more of those, if you are running bitcoin. You got it partially right.MyBitcoin and similar websites don't batch processing and send to addresses at the end of the day; they keep all BTC internal, until one of their users sends BTC to someone who is not on mybitcoin.com.A BTC address or transaction on mybitcoin.com is simply an accounting notation in the mybitcoin database.  Transactions between two mybitcoin users never actually reach the bitcoin network. Banks can offer a central authority for resolving bitcoin electronic checks. It has now been exactly one month since satoshi was "last active" on these forums. If you think the entire society has gone mad, maybe it's time for some additional self-reflection. Then don't bid until the last few hours/minutes/seconds.  That's what happens on ebay anyway  Any web host -- it's the whole workflow that is insecure.  Install scripts are downloaded and run by the webmaster, which installs (for example) the latest version of phpBB inside their webspace.  Time passes, phpBB is not automatically updated, and the eventual intrusion occurs.Most software offered by the webhost themselves is more likely to be patched regularly, and stay up-to-date on security.Quite true. I sent 5678.00 BTC, so I consider my pledge already spent. A 5678.00 BTC incentive helps, too.   Sadly Linux installs with outdated patches tend to get penetrated quite often.  Hosting software, in particular, is often copied into a webspace by an "install script" and just left to rot, unpatched.The rate of infection on Windows is very high, much higher than Linux, but I'd argue that is due as much to raw numbers -- the largest attack audience with a single binary -- as shoddy engineering, today.And I say this as a die-hard Linux hacker, who was proudly Microsoft-free for over ten years (sadly this is no longer the case, with the Xbox and wife's laptop). Sure there are all sorts of problems with passwords and passphrases; those are at least a well known and defined solution space.But most modern crypto software has the ability to ensure your private keys remain in an encrypted store on the filesystem.  Good software has that encryption enabled by default. "7+ standard bitcoin nodes" has nothing to do with anything.Transactions are bundled into blocks, one block every 10 minutes.One block == one confirmation.It is standard to wait six blocks (6 * 10 == 1 hour) to be sure your transaction is confirmed, but see the snack machine thread for discussion of shorter wait times.
First step:  the devs should enable the db4 database feature that AES-encrypts the wallet.dat database on disk.  The wallet should never be stored unencrypted by default, IMO. A physical-world digital store of money has many uses.  Anonymous, reloadable VISA debit cards are quite popular, for example.  A card would be nothing more than an anonymous bitcoin wallet.Currently bitcoins are as portable as your computer...  but they could be more portable with a smartcard.Simply handing someone a card is a useful way to move money. Maybe you can provide links or a description of what you're selling?  Your forum post here is quite vague. A brand new protocol is quite the new and separate effort from simply documenting the existing protocol. db 4.8, 4.9 and 5.0 work here on Fedora. Let the free market decide!  I pledge 100 BTC for you to change your name to Megatron. +1, I think this feature should go upstreamNot sure what's going on with OpenSSL on Windows.  OpenSSL SSL_* C API works for me, when using Fedora 13/14 + their mingw installation, where openssl DLLs come pre-built.  cpuminer's Windows installer (which runs 100% on Linux) ships openssl as a CURL dependency. I know that data point is not very helpful, but well, there it is. If a solution is found, it is pointless to continue work on that block.  You cannot solve a block twice.cpuminer's behavior matches the vanilla bitcoin client's BitcoinMiner(). Yes.  You could give someone a wallet.dat file.  Or you could transfer person-to-person using websites such as https://mtgox.com/ or https://www.mybitcoin.com/ Very nice!  Glad to see this new service added to the bitcoin economy. I am that donor.  Feel free to mention me...  I am just trying to help out the bitcoin community.Bitcoin needs an open source currency exchange site, to make it easier for others to open, for example, a Bitcoin-to-Polish-zloty exchange. And RAM.  There's no limit, except disk space and memory required. IMO, special characters are always a pain, and should be avoided.'$' is used for several currencies around the world, not just USDa standard keyboard cannot always generate these symbols'USD' or 'EUR' is easily representable on most world keyboards, and terminalsLRUSD, LREUR, etc. are what the currency provider uses IMHO,We should list things on http://www.bitcoin.org/trade only if the website actually accepts bitcoins at the time of posting. Note that the only thing broadcast for transactions and blocks is their hash.Whenever a P2P node receives a new TX / block, they tell people "I have $HASH"And only nodes without that $HASH will then request "give me tx or block with $HASH"Thus, each node should ideally only receive the data once. maybe curl-config is broken or missing?  You could try passing --with-libcurl={directory} to configure. If you are rich and don't mind losing lots of gold, sure  Patience.  The store is closed for the holidays. Correct.The software is, overall, sufficient for a factor-100 or more increase in transaction volume at this time.  Building a functioning bitcoin economy is what gives / will give bitcoins their value.I would argue that building the bitcoin economy is more important than further bitcoin software modification.  The lone feature I think is sorely missing is the much-discussed "lightweight client." You have a PM.  I'm also in Raleigh NC.
Yes, but with Apache and Python, it was the people who were doing the engineering writing further proposals. mtgox has:    * http://mtgox.com/code/ticker.php    * http://mtgox.com/code/data/getTrades.phpbitcoinmarket has the previously mentioned real-time API, and also    * https://www.bitcoinmarket.com/bitcoin/fxchange.quote.json    * https://www.bitcoinmarket.com/bitcoin/fxchange.quote.json.alt    * https://www.bitcoinmarket.com/quotes/offers/bids/    * https://www.bitcoinmarket.com/quotes/offers/asks/    * https://www.bitcoinmarket.com/quotes/trades/The ideal ticker would have, for each currency pair* currency pair* last-traded price* last-traded datetime* volume, last 24h* highest bid* lowest ask* open price, set once every 24h at "beginning of the day" (== midnight UTC, probably, if you are open 24/7)* previous close price (might be same as open price, if you are 24h and have no dark pools etc.)* highest price since "beginning of the day"* lowest price of "beginning of the day"The first six are provided by all markets and are IMHO "required."Trade data is generally* currency pair* price* datetime* quantity tradedbut feel free to include anything else that does not compromise the privacy of your users.Returning data in JSON format seems to be de facto bitcoin community consensus (only BCM is an outlier here, and only for their trade data; BCM's tickers are JSON).Not sure how to parse that... is your exchange's source code published at github?If not, what's your price for open sourcing?  Thanks for opening another exchange!  bitcoin needs more competition in this area. These two statements contradict each other, because github is Yet Another Place, too.I do not see any point in moving the discussion of some bitcoin changes to a special place outside the forum.  Discuss changes on the forum just like we've always done, regardless of whether that change is a proposal, a patch, or a pull request.The forum is perfectly adequate for discussions. I urge the exact opposite -- start coding first.  If people start writing, then you wind up with a project where kiba, RHorning and other talkative types have a lot of input into something that few programmers are interested in coding.Absent a real bounty, that compensates real programmers at real market rates (100+ BTC/hour), you are looking at volunteer programmers working on their own inclination, on their own time, to produce something that interests them.  A wiki document might be "interesting" reference material, but don't expect volunteer programmers to write code for a spec created out of thin air by non-programmers.The world is littered with useless, pie-in-the-sky specifications better suited for garbage pails.  And those were written by engineers.  Specifications written by management types that don't code are even worse. Not as much as LRUSD, but there is a consistent level of demand.  It's useful because, just like bitcoin, PGAU is not a fiat currency tied to a nation-state.  And it's easy to implement in an automated fashion, once you support LR.GlobalDigitalPay is another easy one to support; GDP's API works like LR's API.  GDP supports USD, EUR and GBP.Additionally, with my bitcoinwatch hat on, please publishcurrent "ticker" in JSON, showing last-traded price, current bid, current ask, volume for past 24 hours, etc.full data for each trade, in JSON formatAnd something like bitcoinmarket's real-time data service would be nice.  I wrote some Perl to accomplish this, seehttp://yyz.us/bitcoin/bcast-README.txthttp://yyz.us/bitcoin/bcast-server.txthttp://yyz.us/bitcoin/bcast.txtor simply "telnet www.bitcoinmarket.com 27007" and add/remove a bid or ask on BCM to watch the real-time data stream.P.S.  If you wanted to see your site's popularity skyrocket, permit trading between non-bitcoin currencies, such as GDP-USD / LR-USD, or GDP-EUR / LR-USD, or LR-USD / Pecunix GAU. If you want to design an alternate bitcoin, hey, go for it.  But what you're talking about isn't really bitcoin at that point.The current system is designed to devolve into (a) Large Mining Conglomerates, and (b) lightweight clients that simply "sip" the necessary parts of the block chain.Do you have any hard data that even remotely backs up these "too busy" claims?  One block header every 10 minutes remains fixed at ~80 bytes, regardless of 10 or 10,000,000 transactions per block.  Lightweight clients only need block headers and transaction data directly relevant to their wallets, as the system is currently designed.  Lightweight clients do not need to listen to, nor relay, all-network transactions and all-network completed blocks as do full nodes.Define "DoS" proof, and then review how the current system works.  People can DoS the tiny free TX area, and then they must start paying transaction fees.  That's the system working as designed.  TX fees make the system more expensive, as transaction rates increase, making DoS and spam more expensive, the more data sent. Flood-fill scales in practice, because interested network parties keep upgrading to handle the load.  DHT is pointless, as you could lose information to network partitions or simply if an unlucky set of participants disconnects.Overall the current system is designed for Big Players With Capacity to survive on the P2P network long term.  It is simply not meant for small players.Unfortunately we continue to await the development of the much anticipated "lightweight client" that will not need to receive every tranasaction and echo it, etc.  satoshi added the "getheaders" network message recently in order to better support lightweight clients, which permits casual connectivity, pulling only the block headers needed since last connection.I would rather we just remove the "fee for < 0.01 transactions" rule.  If people want to spam, they can spam with 0.01 BTC transactions, and fill up the free-TX area in each block. After adding diagnostics to cpuminer, I have gotten several 'getwork' failures with HTTP status code '502' when connecting to your mining pool:Code:[jgarzik@bd cpuminer]$ ./minerd --userpass user:pass  --algo 4way --url http://mining.bitcoin.cz:8332 --quiet1 miner threads started, using SHA256 '4way' algorithm.PROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!)HTTP request failed: The requested URL returned error: 502json_rpc_call failed, retry after 30 secondsPROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!)PROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!)PROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!)PROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!)PROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!)PROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!)PROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!)PROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!)PROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!)PROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!)PROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!)PROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!)PROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!)PROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!)PROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!)PROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!)PROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!)HTTP request failed: The requested URL returned error: 502json_rpc_call failed, retry after 30 secondsPROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!)PROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!)PROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!)PROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!)PROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!)PROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!)PROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!)PROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!)PROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!)HTTP request failed: The requested URL returned error: 502json_rpc_call failed, retry after 30 secondsHTTP request failed: The requested URL returned error: 502json_rpc_call failed, retry after 30 secondsPROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!)PROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!)PROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!)PROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!)PROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!)PROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!)HTTP request failed: The requested URL returned error: 502json_rpc_call failed, retry after 30 secondsPROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!)PROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!)PROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!)PROOF OF WORK FOUND?  submitting...PROOF OF WORK RESULT: true (yay!!!) It is supposed to exit immediately upon Ctrl-C.Rai said "it exits immediately", which I interpreted to mean "exits as soon as it is run, without calculating any hashes."  That would be a huge problem, indicating that cpuminer no longer did any useful work! Rai clarified in a later post.Everything appears to be working correctly on Windows. +1 good stuffSuggestions:Connecting to non-SSL http://www.bitcoin-central.net/ gives an unfriendly "access refused" messageSupporting Pecunix GAU would be nice What arguments are you passing to minerd?  Have you verified that version 0.3.3 works with the same command line?The purpose of a miner is to continue running into infinity, so it should only exit if downloading work via JSON-RPC is repeatedly failing. What is the difference between lost coins, and coins that people have been saving for a long time? Version 0.5 is released.  See top post for URLs.  Changes:- Exit program, when all threads have exited- Improve JSON-RPC failure diagnostics and resilience- Add --quiet option, to disable hashmeter output.SHA1: 59a6b409c016468fb195619e46efe14db2f1aca8  cpuminer-installer-0.5.zipMD5: 9d3fca8067ed4a3de9fb1df9d066c7be  cpuminer-installer-0.5.zipThe new logic to wait for thread exit should work just fine under Windows.  Let me know if version 0.5 behaves strangely under Windows, doing things like exiting immediately. Option 1:  In an open market exchange, an exchange assumes a neutral role, connecting (a) people selling PLN for BTC with (b) people selling BTC for PLN.  The exchange rate is based on the most-recent currency trade between users.  If there is a difference between BTC/PLN and BTC/USD rate, then users may make a profit on that difference through arbitrage.Option 2:  In a for-profit currency exchange, you are seeking to (a) sell PLN, buy BTC or (b) buy PLN, sell BTC for customers.  You set the exchange rate, based on your informed knowledge of BTC, USD and PLN exchange rates, and customers will buy--or not--based on your store's exchange rates.Remember, value of USD and PLN varies in the real world too! The value of PLN is based on each BTC/PLN trade that occurs on the BTC/PLN exchange.The traders who create orders on the BTN/PLN exchange are the ones who determine the current value -- which is, by definition, the value of the most recent BTN/PLN completed trade.  This describes automated currency exchanges -- open markets -- such as mtgox.Other sites that perform manual currency exchanges simply calculate an exchange rate based ona commission (your profit)PLN/USD rate from http://finance.yahoo.com/q?s=USDPLN=XBTC/mtgox-USD rate from http://www.bitcoinwatch.com/ The English wiki seems to have some sort contributor reward system.  Presumably we can do the same for the Chinese wiki, though I have no idea how to prevent spam pages... Pledge 100 BTC. If the FAQ task is complete, there's no point in a bounty for that.But I would pledge 100 BTC to see a Chinese (simplified) version of the wiki. Note that some of these stability fixes are only in cpuminer.git at the moment, not in a released tarball / Windows installer. Yes, to be legal, this exchange would be limited to in-country, China-only RMB deposits and withdrawals.This is similar to https://btcex.com/ which only permits deposit/withdrawal of Rubles in Russia, too, if I understand correctly.Each exchange must comply with national money transfer laws.
Nice!Dumb question...  is this simplified or traditional Chinese?I'm just starting to learn Mandarin Chinese (Simplified), and according to what I've read, mainland China prefers simplified characters, while Hong Kong and Taiwan use traditional characters. This is intentionally a bare minimum requirements list, not a "wish list" of features.per-user account system (username, password, all the standard stuff)maintains internal, double-entry accounting ledger of per-user accounts, where each transaction stores $Amount and $Currencysupports calling a Web API via a plugin, to receive deposits in $Currencysupports calling a Web API via a plugin, to send withdrawals in $Currencysupports manual administrative entries (journal debits and credits)supports one or more order books of 'bid' and 'ask' prices, one per currency pairsupports entry of new orders, and cancellation of existing orders.  when a new order is entered, attempt to fill order from existing order book entries.Consider your regulatory environment.  For example, it seems like limiting withdrawals to $1000/day for US citizens aligns with FinCEN regulatory requirements. Just pushed the following to cpuminer.git...commit 9e5a173c3845fb7b5d316b0455352a08847b8c23Author: Jeff Garzik <jeff@garzik.org>Date:   Tue Dec 28 15:22:53 2010 -0500    Improve JSON-RPC result/error checking, and improve error diagnostic output. MyBitcoin.com is a de facto bitcoin bank.  And it is clearly useful to many people. I pledge 50 BTC towards this bounty. We definitely need a BTC/RMB exchange.  Makes me wish there was open source exchange software... What does 'getwork' return for you, if you issue it manually?It sounds like there is a problem with your bitcoin client's JSON-RPC server.  Maybe password is incorrect, or rpcallowip option is misused? You're begging for money on a bitcoin forum...  but you don't post a bitcoin address for donations?  Strange. Do you mean bootstrapping?  Kademlia network needs bootstrapping, just like other P2P networks. SVN is just a way to give crappy CVS a few more years of life.  SVN has been on life support from its beginning. Don't read it too literally.  The fee is per kilobyte, but that does not dictate or say anything about transaction size.The actual formula isCode:     nBytes = number of bytes in your transaction (e.g. 259 bytes or whatever)     CENT = 1000000     nMinFee = (1 + nBytes / 1000) * CENT("CENT" is a multiplier used to convert a fixed-point decimal number, such as 50.44 BTC, into a 64-bit number of "nanocoins", 5044000.)So, nMinFee==0.01 for small transactions. The entire system is not based on encryption, but public/private keypairs, and cryptographic signatures.Each time you spend bitcoins, you are creating a cryptographically-signed transaction that says "transfer 1234.56 bitcoins to public key ABCD."Only the person with the private key ABCD can then spend those 1234.56 BTC. NVIDIA is geared towards floating point, while bitcoin's SHA256 algorithm wants integer math.ATI GPUs are better at this. Start a business, or convince a business to accept bitcoins, or convince a charity to accept bitcoins as donation.  Grow the bitcoin economy. In general it is not possible.  P2P nodes won't accept a double-spend, making it very difficult.  See the snack machine thread for interesting reading. That doesn't address the privacy problem described at all.  People may observe an outgoing transaction for a specified amount. Bitcoins are fixed-point numbers stored as integers, so strictly speaking, you're out of luck. Shell script would be fine for a connect-work-disconnect method of working.But it is grossly ineffective for maintaining a long-running P2P network node, where long-lasting TCP connections are preferred. All transactions are public... but their origin network nodes are private to all except the initial P2P transaction receive points.Or in other words, there is no need for everyone on the local coffee shop wifi to know that I'm buying crazy sex toys from MadHatter's new shop.Anonymous SSL on some random free wifi is far preferable to Tor. Handing out wallet.dat files is just fine.  I think it's a great idea.Sure, there is the possibility of double-spending...  but only by the person handing out the wallets.  Presumably, you trust yourself 
Pecunix and GlobalDigitalPay have a feature that permits validation of the input form.  You hash the input fields, plus an API secret key.  Totally eliminates tampering.I've long wished Liberty Reserve had a similar feature. More likely, many people will use a website such as mybitcoin rather than the bitcoin client.Each user then only has to worry about their login password, just like other banking websites. The P2P network needs to support SSL, for enhanced privacy. Version 0.3.3 is out there, with a critical one-line fix for cryptopp_asm algo.SHA1: a7c0822c3ab0f9f2089fbc65cdbe2506789e4241  cpuminer-installer-0.3.3.zipMD5: 2df889eebf752b5f35293e4cbe53f7e8  cpuminer-installer-0.3.3.zip Transaction fees.Whether the block chain is currency-only or currency+data, the result is the same:  transaction fees rise as overall block size increases.More data == more expense (theoretically the block chain provides more value to more people, and is therefore more valuable) If someone wants to transmit arbitrary data, there is generally always a way.  For example, data may be encoded today in a standard transaction, probably around 32 bits per transaction, simply by specifying an amount such as "0.12345678".However, that does not mean that we should encourage the use of additional, non-standard transaction types created for the express purpose of storing arbitrary data in the block chain.  For example, it has always been possible to tunnel the IP protocol over DNS; but that does not mean it is wise to do so.  No mainstream DNS server supports such behavior, even if the protocol itself does.Some BitDNS proposals here describe operations such as storing DNS records themselves in the block chain, where each IP address or nameserver change would be propagated throughout the bitcoin P2P network, and be stored in the local storage of all bitcoin full-block-chain P2P clients. Only a very few fallback nodes are persistent over time, and compiled (hardcoded) into the bitcoin client itself.https://en.bitcoin.it/wiki/Fallback_Nodes is a viable method of bootstrapping.  We'll call that "forum bootstrapping" or "wiki bootstrapping", where one must manually search for a list of nodes, in order to bootstrap onto the network.I think DNS bootstrapping would be the most efficient:  a simple DNS lookup to bootstrap.bitcoin.org would work like this:Community members post their nameserver (NS) records for bootstrap.bitcoin.org on the forum.  Presumably this list does not change oftenEach member runs a DNS server, independently of anyone else, that retrieves addresses from bitcoin's addr.dat database, randomly selects "fresh" P2P nodes, and stores these in A records or SRV records.When bootstrapping, the bitcoin client performs a standard DNS lookup for bootstrap.bitcoin.orgThat would be very, very fast.  Much faster than IRC.  This is similar to how BitTorrent DHT bootstrapping occurs.The only issue is trust (rogue DNS servers), but this issue also exists with the IRC server, which is a Single Point of Failure (SPOF) for both trust and general reliability. It is always possible that there is no solution for the entire range of nonce (0 - 0xffffffff).However, the timestamp and extranonce are changed every few seconds, as is merkle tree root.  This helps avoid a situation where we get stuck with no solutions. bitcoin maintains a database of P2P addresses.  Obtaining addresses via netstat is rather sub-optimal, when you could use bitcointools to extract addresses directly from the bitcoin database.As to the larger point...HTTP and DNS bootstrapping should be pursued.  Much more efficient than IRC. CVS???  That's quite hideous. pastecoin got hacked, before I had a chance to review any of the code.The Apache web server has been shut down until this is fixed. Please fix your quoting  Mentioned on Russia Today's Keiser Report:  http://www.youtube.com/watch?v=VMngK0t5WkYA capsule summary of the PCWorld article begins at timestamp 11:20. Indeed.  cpuminer 0.3.2 is out there, with another sha256_via fix attempt.Via CPU owners, please report feedback. Yes, but it is Christmas holidays right now. Are you using cpuminer?  You need version 0.3.1 for sha256_via fixes. Yes, a TXT record would be much more appropriate than trying to cram data into network addresses. There still needs to be an easy, standard way to associate a DNS name with a bitcoin address.On a business card, you need something human readable like "donations.bitcoinwatch.com" that can be translated by software into a bitcoin address. Right, and that's happened for all of the 'getwork' miners up to this point.  This is a simple printf() patch that has actually proven useful in the field, not a speculative change with zero users. "bitcoin patch" == a patch to bitcoin, not cpuminer.
Now I remember why I added the option:  doesn't the internal miner call CheckWork() if 16 bits are zeroes?  ie. this message would be printed a lot for the internal miner, if added unconditionally, right? What does this bitcoin patch print out for you, when using cryptopp_asm32?http://yyz.us/bitcoin/patch.bitcoin-pow-fail Always printing is fine, too.  That is what my original patch did.Shall I update my pull request to do that? I put this under the category of "I own my data, and should be able to do with it what I want."Being able to import and export bitcoin keypairs to/from wallets seems an obvious need to me. The software is only days old.  It is far too early start throwing around the 's' word. That doesn't eliminate the utility of external verification -- being able to see what's going on, on bitcoind's side.  Any number of things could break on the miner's side, making external verification useful.  Maybe the hash check works, but the network code has a problem and garbles data.  Or, the hash check works but we forget to byte-reverse somewhere.This patch guarantees output regardless of a PoW solution's validity. Correct.  The scanner performs a fast-path check, and then a more exhaustive check if the fast-path check exits the scanner loop.See CheckWork().  It is a less-than compare, on an unsigned 256-bit little endian integer. DerrikeG, what is your CPU manufacturer and model name? Rationale:cpuminer uses a shortcut check for "hash < hashTarget", testing a number of zero bits, then relying on bitcoin iteself to do a proper check.  Several other remote miners behave similarly.  Current bitcoin silently discards work that fails PoW verification.cpuminer users have found this patch useful in observing the behavior of their remote miners.  When adding -printpowfail, a bitcoin user is guaranteed that each CheckWork() call is logged, either with (a) the familiar proof-of-work-found message, or (b) this new failure message.  I think others will find this minor feature useful as well. Can you try this?   http://yyz.us/bitcoin/cpuminer-installer-0.3.1-i486.zipThe default cpuminer is built "-march=i686", which means the compiler generates and optimizes for Intel chips i686 and later.  Some VIA chips lack a few key CPU instructions such as 'cmov' that the compiler generates, and as a result, minerd.exe binaries on these older VIA CPUs will probably crash. OK, here's a test of the new devel process See http://bitcointalk.org/index.php?topic=2371.0 See notes section, below, to understand this format.Edit:  This is maintained as a patch, at http://yyz.us/bitcoin/patch.bitcoin-pow-failPlease pull from branch 'pow-fail' ofgit://github.com/jgarzik/bitcoin.git pow-failto receive the following updates:Jeff Garzik (1):      Add -printpowfail to display hash data when proof-of-work verification fails main.cpp |    6 +++++- 1 file changed, 5 insertions(+), 1 deletion(-)Code:diff --git a/main.cpp b/main.cppindex 8db6c39..d0eac7c 100644--- a/main.cpp+++ b/main.cpp@@ -3397,8 +3397,12 @@ bool CheckWork(CBlock* pblock, CReserveKey& reservekey)     uint256 hash = pblock->GetHash();     uint256 hashTarget = CBigNum().SetCompact(pblock->nBits).getuint256(); -    if (hash > hashTarget)+    if (hash > hashTarget) {+       if (GetBoolArg("-printpowfail"))+            printf("proof-of-work check FAILED...\n  hash: %s\ntarget: %s\n",+                   hash.GetHex().c_str(), hashTarget.GetHex().c_str());         return false;+    }      //// debug print     printf("BitcoinMiner:\n");----------------------------------------------------------------------------------------------------------------------------------------NOTESNote1:  this is standard Linux kernel git pull request format; often the patches have gone through at least one round of review prior to the pull request, where the kernel subsystem maintainer has reviewed an individual submittor's changes; with this post, I'm collapsing two steps from a larger software project into one, for the sake of brevity and ease of commenting.Note2:  although the English text says "please pull", implying success, submittors never assume success.  instead, one assumes a basic loop:Step 1: post pull requestStep 2: if acceptable, maintainer will pull request.  yay, your change is accepted!Step 3: otherwise, revise based on feedback (or abandon entire approach!), and go to step #1Note3: yes, the branch name is listed twice in "Please pull" and following line.  The second line is designed to be cut-n-pasted, to make life easier for the person issuing "git pull".Note4: the section following "receive the following updates" is the output of "git shortlog"Note5: after that section, the statistics of the diff, as generated by diffstat(1)Note6: then, what follows is the full patch for public review, quoting and commenting.Note7: typically you want to pull from third parties onto a merge branch, and then pull merge branch into the main branch, after satisfying yourself that nothing broken or "evil" has been pulled. Version 0.3.1 released.  Changes:- Critical fix for sha256_via- Retry JSON-RPC failures (see --retry, under "minerd --help" output)SHA1: c8da4ed8d73d71a73795b153f4ea157041cc51ba  cpuminer-installer-0.3.1.zipMD5: 69c228d4846e9940e3129a395a947080  cpuminer-installer-0.3.1.zipStill don't know if sha256_via actually works -- testnet or pool testers requested. Good catch.  This seems to imply that sha256_via has never actually worked.  I pushed the following change out to git... can anyone test the latest git on testnet and verify that a proof-of-work is actually found?  This bitcoind patch may help debugging: http://yyz.us/bitcoin/patch.bitcoin-pow-failCode:diff --git a/cpu-miner.c b/cpu-miner.cindex ac151f6..138ec9c 100644--- a/cpu-miner.c+++ b/cpu-miner.c@@ -319,7 +319,7 @@ static void *miner_thread(void *thr_id_int)  #ifdef WANT_VIA_PADLOCK                case ALGO_VIA:-                       rc = scanhash_via(work.midstate, work.data + 64,+                       rc = scanhash_via(work.midstate, work.data,                                          work.hash1, work.hash,                                          &hashes_done);                        break;diff --git a/sha256_via.c b/sha256_via.cindex 45e6821..ef2c102 100644--- a/sha256_via.c+++ b/sha256_via.c@@ -35,7 +35,7 @@ bool scanhash_via(const unsigned char *midstate, const unsigne        unsigned char data[128] __attribute__((aligned(128)));        unsigned char tmp_hash1[32] __attribute__((aligned(128)));        uint32_t *hash32 = (uint32_t *) hash;-       uint32_t *nonce = (uint32_t *)(data + 12);+       uint32_t *nonce = (uint32_t *)(data + 64 + 12);        uint32_t n = 0;        unsigned long stat_ctr = 0;        int i; Any workflow that skips code review is bonkers.  I don't think anybody has ever suggested that.And git has plenty of tools for code review.  If you need help, just ask. I'm not sure what Mhash/W is.  But, GPUs are ASIC so they begin with a significant advantage over FPGAs. This might sound strange at first glance, but I would encourage the "Linux kernel" development process, something I call "throwing spaghetti at a wall, so see what sticks."Following the open source philosophy of "release early, release often" one sends patches (or git pull requests) as soon as a change is available and passes a developer's simple "it works" tests.  If you know the change is likely to be controversial, or you cannot guess whether or not it will be accepted, change is marked with 'RFC' in the subject line.Project maintainer (satoshi or gavin) and community comment on the change.  Often, maintainer can be lazy and wait to observe community reaction to a change, before commenting.  Public feedback is critically important.  Developers will post dumb or off-the-cuff patches.  Project maintainers and the community are expected to educate new developers via respectful feedback, posted in an open forum.If feedback is given, developer is expected to revise their change, and repost the patch/pull request.  Often this step is repeated many, many times until the change is "right."  Sometimes the developer is a jackhole who persists in reposting the same annoying change over and over.  We ignore these people.  Sometimes maintainer gives "time is just not right for that change; come back in 6 months" -- this is disappointing, but inevitable.If no feedback is given, and the change is not controversial, maintainer accepts patch / pulls request into git repo.Public feedback, especially from project maintainers, is important.  Existing developers must teach new developers why a change should look the way it does. At which depth of information?  The full changelog is always available via SVN (and the various source tree browsers on the web), and it seems like a waste to simply "svn log > ChangeLog" for each release. Yes, there should be a distinction between "mature reward" (may be sent out to pool) and reward from blocks not yet mature. Current git version will retry, if JSON-RPC call fails.
I'm definitely open to new ideas like this.bitcoin really needs a transaction processor that works to detect double-spends, sampling all over the network. Note that "bitcoins sent" includes change transactions.  I would love to exclude those, but there is no feasible way to do so. As long as the FPGA performs millions of hashes for each "call" (host sents work to FPGA), host<->FPGA communication cost is small. Note that older versions are moved, with each new release, to http://yyz.us/bitcoin/old/ New version 0.3 released (see top post for URLs).Changes:Add crypto++ 32bit assembly implementationshow version upon 'minerd --help'work around gcc 4.5.x bug that killed 4way performanceSHA1: e748faf3272a766f6de3e99ad1b6e434a0f3d023  cpuminer-installer-0.3.zipMD5: c1fc335c2548afa726ac49871ff73d08  cpuminer-installer-0.3.zip No, I say that as if nothing.It is a simple functional statement of fact.  It is a basic assumption of the bitcoin system.  If you contribute more CPU power, you are highly likely to receive greater rewards.  That is the way bitcoin is supposed to work.  That is the incentive for mining (and for scaling up your mining operation). acrylicist is being hyperbolic, but he's right.bitcoin is a software-fiat currency, where the "central bank" is a collective agreement on software rules.USD is a human-fiat currency, with a traditional central bank.And it has always been true that the more CPU power you have, the more BTC you will receive. I know plenty of Japanese, Chinese and Koreans who are able to write proper and colloquial English.  Particularly in the dev community, where English is often the de facto language of programmers for a variety of historical reasons.Let's not make biased assumptions here. 345 BTC. This patch is officially considered deprecated, as of mainline SVN r204. What I like about slush's approach is that it works with unmodified CPU/GPU miners.It seems reasonable that we could work on a patch for mainline bitcoin that supports pooled remote mining.  AFAICS, the modifications required of mainline bitcoin would beadd user database, and support multiple RPC user/password combinationscreate a variable fPoolTarget, specifying a reduced hash target for miners in the poolcreate a variable bool fMinerPool, indicating pooled miner modein getwork RPC, reduce hash target value to fPoolTarget, if fMinerPool is truein getwork RPC, if CheckWork() succeeds, credit user for solved hash, if fMinerPool is true and hash found is >= fPoolTargetEverything else can be implemented outside bitcoind, in a script. 200 BTC I expect several bitcoin clones to arise eventually.  Both with the bitcoin codebase or with a totally new codebase and protocol.  Proof-of-work timestamp server is now "out there" on the Internet.  Derivatives are inevitable.And probably 98% of these clones will either fail, or be worth nothing, compared to mainline bitcoin chain. Updated first post with a release tarball for Linux/BSD, so that people don't have to bother with autotools and the git repo.Recommend avoiding gcc 4.5.x at the moment. I'd pledge a 1000 BTC bounty for that.Automated front-end (ie. no manual human purchases behind the scenes) that supports >50% of current Amazon mp3 content. Hashing mostly-the-same data twice, over and over again, is not remotely a common activity  The miner is unable to connect to the URL you gave it, for some reason.Thanks! Or call the link "documentation wiki" to cover all bases. See http://yyz.us/bitcoin/patch.bitcoin-datanet-fork for an incomplete example fork.At a minimum you needyour own 4-byte message header (or "magic number"; ensures separation of network clients)your own genesis blockyour own default port numbers for RPC and P2P network interfacesyour own IRC seeding method / channel Well not "so simple" but basically correct.  There's even a LGPL'd core you can download already: http://opencores.org/project,sha_coreUp to a point, buying a bunch of mass-market GPU's with ALUs is quite comparable to the up-front costs of even a small run of ASICs.  FPGAs won't get you nearly the speed needed to keep up with modern GPUs.
Out of curiosity, what speed do you get from various algorithms in the CPU miner?  That also uses Crypto++ code. This patch updates part of Crypto++ in bitcoin to upstream:http://yyz.us/bitcoin/patch.bitcoin-asmfix1 Don't get hung up on a "strong scripting language" for checking application-specific data in the bitcoin chain.C++ is a strong scripting language.Get the other technical details right.  Picking a programming language is the lowest task on the priority list. See the snack machine thread. To a lawyer, I would describe bitcoin as a digital commodity.To a layman, I would describe bitcoin as digital cash. Unless you accidentally created thousands of addresses, thereby bloating your wallet.dat, don't worry about it.Addresses don't touch the network, and shouldn't slow down your client.  Just ignore them.You'll soon be creating an address per transaction (recommended), so you'll wind up with a bunch over time. +1 on mybitcoin SCI.The documentation is non-existent, but it works reliably, and works in the expected manner (like other SCI's such as Liberty Reserve or Pecunix). ?   According to http://en.wikipedia.org/wiki/Bitcoin it remains deleted. I am more interested in technical details.  How would bitcoin be integrated?  Has anyone even sketched out such a scenario with sufficient technical detail?Do the maintainers of Tahoe-LAFS plan bitcoin integration, or is this simply something bitcoiners think would be a good idea?If bitcoin integration was not planned from the beginning, maybe we can come up with a better system with better incentives. Of course it's possible.  There's nothing inherent about C++ that precludes unit tests or functional tests.A bitcoin test suite would be useful, but somewhat non-deterministic due to the way a proof-of-work would have to be used. Most agree that the current codebase suffers from "all in one file" syndrome.However, I think it is overkill to break up every class into its own header and implementation files. That generates a new address for new CGI script invocation (== each page view).An attacker, or just a popular web page, could fill your wallet with never-used addresses. You don't want to generate a new address for each web page hit.  That's a lot of useless addresses stored in your wallet. Nice addition!  Relieves some worries about exchange rate (though 10% with a maximum $100 is a bit tough). What is the remote protocol, so that other miners may participate? Is anybody still experimenting actively with a Tahoe-LAFS grid? +1 agreed, joe bitcoin is digital cash.Just like real cash, a con man might scam you, or a burglar might take it. Has this been discussed yet:  what are the security implications of checks?In my own experience as a victim of identity theft, circa 1993, Wachovia security folks told me that a "stop payment" on a US check might go away after 180 days, implying that a criminal could cash a stopped-payment check on day 181 and possibly get money.  Is this still the case, I wonder?It would be nice to accept US checks for bitcoins.  That is well within the reach of your average US citizen.  At major institutions there seems to be a 3-7 day holding period for deposited checks, after which it is considered cleared funds.  Could a Bitcoin service do the same, I wonder?  Presumably you would have to have humans perform check verification, over and above any automated systems in place. Donated.  The article looks a lot better than it used to; much less "bitcoin community self-promotion" which is good.
This patch creates a new, non-mainline network ruleset.  The "compliant" claim is somewhat specious. bitcoin's initial block download is far too dependent on the initial peer selection at the beginning of the download.  I've gotten unlucky several times, with a peer that was achingly slow, or a peer that simply stopped sending blocks (one peer out there seems stuck at 82000 blocks for months).  In the latter case, it took bitcoin over 30 minutes before download resumed.  Disk and CPU were completely idle during that time.bitcoin could stand to take a page from bittorrent:  compete among multiple peers, to see which one gives you the best download speed.  If there is a network delay longer than 5 seconds, try another peer.  Accidentally downloading the same block from multiple peers, during or after a network hiccup, does not harm bitcoin.  It just wastes a bit of bandwidth. The Lady Gaga sextape would impose additional costs on you and everyone else, at least if you were trying to send currency while another was pushing the sextape data into the block chain.Then there's the new user slowdown, while each new bitcoin user downloads their copy of Lady Gaga. bitcoin itself is artificial scarcity. It might be coins, but it doesn't have to be.  Your reward could be a portion of namespace, ie. the domains themselves.The possibilities are endless.Bitcoin rewards you, essentially, with a piece of [digital] property. Someone should update GetBoolArg() to accept 'false', 'true', 'yes' and 'no'. The Bitcoin Store was turned down, after a Google Checkout review. In some possible future where transaction fees are calculated differently from today, and block size limits are different from what they are today, and a bunch of other conditions are different from the network rules and source code we have today, we'll see how it all shakes out. Sure, the miners collect more fees.  Sure, the block limit will increase.  As the block chain gets stronger and provides more valuable service, it gets more expensive for each user to use that service.  End result, currency users pay more as more non-currency data transits the block chain. See the discussion of locktime for transaction replacement. I think there is general agreement that arbitrary data (a comment field) should be an optional component of transactions.The main point of contention now is whether or not to put that in the main block chain.I think 32-64 bytes is sufficient for most uses -- reference id's and hashes.  Custom block chains might want much larger limits: 512 bytes?  4k? Arguments of "block sizes will get bigger anyway" miss the point.If the total block size (and thus total fees) is higher for currency + data than currency alone (as is obvious), then the total network is that much more expensive for each transaction for currency+data than currency-only.  Adding users to the bitcoin chain adds value and CPU power -- but each user must pay more for that service.Thus, assuming the same currency transactions rate, a currency+data chain will always have higher fees than a currency-only chain.Adding a new application data stream (BitDNS) to the mainline block chain taxes everyone, not just the users of the new app.  The miners and the block chain benefit from this, but existing app users (bitcoin currency) suffer a bit.This creates a natural tension that incentivizes creation of new block chains, when popular ones simply become too expensive due to large number of application users.  It is interesting to ponder how an application may move from one block chain to another, while retaining value. Same incentive as the main chain -- you get paid. This sounds very very interesting, something to explore.Can you elaborate on how would it work in practice?  Separate networks and block chains implies hashing one block header for each network, with different resulting hashes, does it not?The only thing I can come up with is the completely naive and slightly cache-unfriendly implementation...while (nonce < 0xffffff)    nonce++    for each network        data_block[nonce_offset] = nonce        // ie. our nonce        scanhash(data_block)orfor each network    while (nonce < 0xffff)        data_block[nonce_offset]++        scanhash(data_block)I could easily update cpuminer to poll multiple RPC endpoints for 'getwork'... For currency transactions, if you notice your transactions taking a long time to confirm, you increase the TX fee.For non-currency transactions, it sounds like there will be some sort of fee schedule.  The software that generates these special, non-currency transactions would likely have a user-friendly interface to indicate the cost. Actually, the miner's incentive -- for currency or data transactions -- is in seeing free transaction space disappear so that transactions cost money.  In a system where non-currency data transactions are encouraged, which clearly raises traffic levels (over a currency-only chain), collectively costing everybody more money.Yes, it strengthens the chain -- but if the bitcoin chain is processing (say) the majority of .p2p DNS records, currency users have to fight for space, paying higher fees to do so.  Makes miners happy, and currency users unhappy. I directly emailed echelon, and he gives a different bitcoin address than "Max Stirner" at the top of the thread: Yes it is possible already.  But it is disappointing to encourage main bitcoin chain to be used for generic data storage.When a large amount of users are non-currency data users, currency users will face longer delays, higher costs, and decreased ability to send free transactions.  Currency users will be discouraged by these factors from using bitcoin.All these folks talking about the glory of the free market conveniently omit that there only one, monopolized market right now -- the mainline chain.  This implies decreased competition versus many markets (==many chains) and tragedy of the commons, as everybody shoves all their data onto the main chain.An alternate chain that encourages data storage would better serve data users, leaving the main chain to better serve currency users. Sure, and that's easy enough to track with transactions. ...unless the use of bitcoin for non-currency purposes discourages currency use.  Some uses of the network can act as an overall disincentive against mainstream use.  If people see that miners care little for currency transactions on the bitcoin network, or all the data spam increases TX fees to annoying levels, currency users will find a new network elsewhere.  If people find out law-enforcement-objectionable data such as "kiddie-pr0n.p2p DNS data" is being managed on this network, that increases the incentive for currency users to go elsewhere.Maybe that makes some miners happy in the short term, and you happy, but I'm here for the revolutionary new type of digital cash.And this generalized data timestamping/notary service seems like it has the distinct probability of degrading service for digital cash, if it is even remotely successful.
My preference is for #bitcoin also.According to freenode admins, there are multiple group registrations in the pile for bitcoin.I emailed them to try and sort that out, based on http://blog.freenode.net/2010/06/group-registration-form-verifications/ Another point is that BitDNS is essentially an autonomous entity that runs a paid service in a niche market (decentralized, timestamped, notarized data storage).  As such, it seems fundamentally unfair to integrate one service directly into the currency itself, while all other services ("the rest of the world") simply uses the currency itself.  BitDNS becomes a "blessed" provider, elevated above other websites, stores and services due to its direct integration into the currency transactions themselves.This is certainly uncharted territory when it comes to currencies, but I would not like to speculate on how this changes the economics of bitcoin's value.Succeed or fail, bitcoin-the-currency should stand on its own. These experiments are better suited for an alternate network and block chain.  Leave the currency as a currency, and preserve the investments that many have already made in bitcoin.It could be as simple as a patch that accepts "-datanet" and non-standard transactions, such ashttp://yyz.us/bitcoin/patch.bitcoin-datanet-fork(warning: demonstration patch, do not use; you would want a real genesis block for a production network) Each individual transaction is immediately relayed to the entire network, by the transaction creator.  As a node on the network, you are typically offered the same transaction multiple times, for redundancy.  Everyone sends transactions to everyone.So, simply by being a node on the bitcoin P2P network, miners are sent transactions by other nodes on the network.  Miners then try to hash the list of transactions not yet in a block.Yes, it stores keys, transactions, various program settings and other features such as the new account system.It needs to be backed up after each transaction due to "change" transactions.  If you receive 1000 BTC, then send me 1 BTC, bitcoin will create a transaction that looks like this:     input: { 1000 BTC }     output: { 1 BTC },               { 999 BTC }     <---- change transaction, from yourself, to yourselfIf you lose your latest backup, you might lose those 999 BTC, because you don't have the keypair associated with it. This is not an opinion; read the source.  Transaction fees vary on total block size, not just transaction size.Thus, larger blocks == higher fees.Thus, more data spam, or more overall network traffic (currency or not) == higher fees. Currency transactions would have to fight harder -- pay more fees -- to make sure they're processed in a timely fashion, due to all the non-currency data in the block chain.  Increasing the block size does not reduce transaction fees. Rather, it will increase everybody's fees, and incentivize creation of a currency-only chain without all the data spam. That will disadvantage people who use bitcoins for reasons unrelated to storing data in the block chain -- ie. as cash as intended -- because the "appropriate compensation" will prioritize their non-currency transactions over currency transactions. Responded, in this new thread. Jumping over from this excellent post by appamatto...+1, think this is a fantastic idea.However, I feel that economically, the mainline bitcoin block chain should be a currency-only block chain.I don't like how bitDNS ties a single "blessed" market -- distributed data publishing -- so closely with the underlying currency.  It seems like those who use bitcoins for reasons unrelated to the block chain data publishing would be more unduly impacted by the use of currency for distributed data publishing.Someone really needs to start a new block chain, BitX / GenCoins.  That would relieve the pressure off trying to stuff all these ideas into the world's digital software-fiat currency. I agree with you and satoshi about "txs after <txid>".  My listtransactions (now xlisttransactions) patch pointedly does not have that feature, and never has. I never said it would cause a block chain split.  It's more fundamental: a rules split.Forking the network implied a majority of miners not running mainline bitcoin transaction rules.  theymos appears to be drawing a line in the sand, where he wants to convince most miners to stop paying attention to mainline bitcoin transaction validation rules.  He's free to do that.  And miners are free to validate what they want to.But this sort of split will make it more difficult to work on the network in the future, and de facto, opens the door to larding down the block chain with all sorts of non-currency-related data as being discussed in other threads. Please start your own block chain, rather than forking the network like this.I hope it is clear the havoc that your push to include non-currency data is causing. "greater", no, it would have a different value. I think the important point is that these things are unavoidable unsafe after a certain point, even for listreceivedbyaddress.  So I think it's helpful to compare current website behavior under mainline bitcoin, with listtransactions.   Let us call this the confirmation point.  Addressing your queries...bitcoinmarket and mtgox and other sites seem to consider 6 confirmations their "confirmation point", the moment at which a transaction may be considered "safe." If a past transaction becomes invalid and disappears, the website cannot avoid potential loss, because the user has already received their PayPal-USD or LR-USD or Pecunix GAU and disappeared.Same for a web store or brick-and-mortar store.  There is a confirmation point at which the customer receives goods.  If a TX becomes invalid after that, the store takes an unavoidable loss, because the customer is already gone with the purchased goods.Let us assume that confirmation count for txid 0x1234 is bouncing wildly between 0 to 10 to 0 and back and forth, due to a large number of block reorgs.Whether it is listreceivedbyaddress or listtransactions, you still have a binary confirmation point, a moment in time, at which the transaction crosses the "approved by store" level of confidence.  At that confirmation point, the customer leaves with purchased goods, and store takes a loss regardless of further block chain or TX behavior.I do agree a programmer may make a mistake, and assume that number of confirmations will always increase.  But that human mistake, too, will cause danger when used with listreceivedbyaddress.On this point, I agree that listtransactions presents some additional danger here, due to changing txid, if and only if the new double-spend matches destination bitcoin address being sought by the JSON-RPC user.Nevertheless, in this case too, the user's security rests entirely on their level of confidence:  if the TX is replaced before 6 confirmations, software will likely not notice anything.  If the TX is replaced after 6 confirmations, the customer has already left with purchased goods, and the bitcoin user takes a loss.This is simply inherent to bitcoin itself.  A block chain reorg might happen after 50 blocks.  But websites do not want to make their users wait 50 blocks before receiving goods.  It is the well-known snack machine problem.  listtransactions does not add anything to this problem, beyond that which is already vulnerable through listreceivedbyaddress.Transactions can and will be replaced after the binary "confirmation point."  All users of bitcoin must figure this into their business plans, just like they account for credit card chargeback risk or shoplifting risk. See what nanotube said, earlier in this thread. The admins on #freenode seem to think the group registration process for #bitcoin can be resolved in a few weeks. Looks free and available, to me. The value arises from the need of others to acquire GenCoins, in order to perform a DNS operation / publish some other data into the block chain.Again, if the alternative coins have a low value, they're not much use to the person who generated them. And if they have a high value, they might replace bitcoin as the general currency. It doesn't work very well either way.[/quote]bitcoin's value proposition is simply in its fiat currency and decentralized nature.GenCoins value would be in the data to which they are associated.Two very different value propositions, reasons to hold them, and for that reason, two different market values. At some point, a website or person accepting a transaction must take this risk.  It is unavoidable, whether you use listreceivedbyaddress or listtransactions.  This is why listtransactions reluctance seems so unusual.Almost every exchange or website accepting bitcoins achieves a binary decisionpoint, where the transaction is accepted, and goods are shipped or money is exchanged.  After that binary decisionpoint, even if the block chain is reorg'd or transactions disappear, there is nothing the website can do but take a loss (or pursue a refund outside of bitcoin).From the website's point of view, there is zero effective difference between 'listtransactions 6' and 'listreceivedbyaddress 6', because the end result to the website operator is the same:  the goods have been shipped / order accepted / money exchanged.
The wallet is a key/value db4 database (and a key/value map in RAM).Neither data structure is ordered by time. The current IRC channel #bitcoin-dev on freenode is increasingly becoming a user support channel.I propose that we recommend (and list on http://www.bitcoin.org/contact ) using #bitcoin for everything not related to development and highly technical issues.#bitcoin on freenode is largely dead, and appears quite usable for new purposes.  a few (older? modified?) clients use #bitcoin for IRC seeding, but these clients get less frequent over time.The "gribble" bot recommends using #bitcoin-discussion, but using #bitcoin seems simpler and more direct (and less to type). +1 donated Their value is directly derived from the services offered on the "generalized proof-of-work (PoW)" chain.And it is obviously quite trivial to set up a site that exchanges GenCoins for bitcoins. It becomes a parallel currency.  Hence "DomainCredits" or "GenCoins" or whatever.Unrelated to this DNS project, you should expect many bitcoin clones to appear as time goes on, and people experiment.We already have one parallel currency:  testcoins. The website shows zero.  I guess this is the BTC sell-off problem you just mentioned? If we're adding code to watch for new transactions, then we should be including gavin's monitor patches:https://github.com/gavinandresen/bitcoin-git/tree/monitorreceived I was wondering same.  I went there and the buttons are greyed out, with zero available numbers.bitcoin2cc is an important service for the bitcoin community, IMO. +1 good stuffFurther suggestion:  return pairs of Objects, listing balance alongside each account. It's too slow to do a full 256-bit comparison for each hash generated.  Taking the lead from mainline bitcoin, miners tend to "cheat" and simply look for a certain number of zero bits in the area that, when byte-swapped, holds the high-order bits of a 256-bit number.  My cpuminer stops if the top 32 bits are all zero.  Mainline bitcoin stops scanning for hashes if 16 bits are zero:Code:        if (((unsigned short*)phash)[14] == 0)            return nNonce;Ideally, the miners would all do something likeCode:    if (test for certain number of zero bits)        if (perform full target comparison)            // found a solution            return nNonce;but we programmers can be a lazy bunch sometimes.    So OP_DROP transaction might require a fee....  which would elevate the priority of BitDNS transactions above normal currency transactions.  That's disappointing. Oh I agree that removing scripting is both a radical proposal, and probably not realistic due to backward compatibility.Although I would support such a change, it was mainly to illustrate how little we use the script engine.  There have been so many limitations placed upon it for security / anti-spam / anti-bloat reasons in recent months that, IMO, if bitcoin were redesigned from scratch today, it might not have a script engine.But don't let that distract from the main point:  we should avoid larding the block chain with non-currency data. This problem has now been fixed in upstream binutils, and trickled down to Fedora. It will raise costs because it will establish the precedent that the current bitcoin blockchain is simply a generic, pay-for-storage distributed database, where the payment (the currency) is tightly coupled with the storage.  That opens bitcoin up to a wide array of uses that seem likely to dwarf the bytes used for storing and using the bitcoin currency itself.My strong preference is to move in the opposite direction:  drop scripts completely.  Admit that scripts are a mistake.  Sign simple transactions of in's and out's.  Rigorously standardize on a greatly simplified, basic functionality -- which is what we are doing, de facto, with changes like IsStandard.bitcoin is not generalized distributed storage.bitcoin is more likely to be successful if we do not try to cram all proof-of-work systems into the main block chain.Satoshi has come up with something wonderful and useful: a distributed, cryptographically signed agreement protocol based on proof-of-work (PoW).  This excites the imagination with all the possibilities of non-currency projects that one could based on this PoW concept.Satoshi has also spent a serious amount of time hammering out a decent first implementation of this proof-of-work system.  As a side effect, this implies that it is much easier to add Jeff Garzik's Proof Of Work Idea to the bitcoin codebase, than to create my own PoW system.We must resist this temptation.  In order for this first, wonderful distributed currency experiment to be as successful as possible, it must not be larded down with exciting PoW ideas unrelated to digital cash.Testnet has provided a clear example of how to start your own block chain.  So I suggest people take Linus Torvalds' advice:  forking is good.  Fork the project.  Fork your own block chain.  Call them DomainCredits.  If it's a good idea, surely there are miner "investors" who would be willing to back your new network with a few ATI HD 5970's to provide the nascent network the ability to resist early attacks.What about a fork that permits OP_DROP style transactions of up to 64k?  You have a PoW-based distributed storage / distributed messaging network, that can pay for itself.  It sounds like a great idea to me... but it's not bitcoin, and that capability and others like it should not be shoehorned into the existing P2P network and "mainline" block chain. This will have the effect of raising the cost of bitcoin transactions for everyone. Scroll up to this post, in the current thread.  Your libcurl devel pkg is missing, or your libcurl devel pkg is missing autoconf macros. If you just need a cryptographically secure chain, store your data in git. wallet.dat is a db4 key/value database. c.f. theymos' first sentence, which you elided:  "The block chain is made for timestamping, not storage."It is good there are no hooks for processing and verifying arbitrary third party data, such as DNS data.  A digital currency does not need to be loaded down with such crapola. That you generate?  If I understand correctly, it's a public/private keypair, and you have to store the private key.
Thanks for testing.  Here's another test, integrating the 4way algorithm and removing the others:     http://yyz.us/bitcoin/cpuminer-installer-0.2.2test-4way-only.zipUnlikely to change anything, but it seems that we are narrowing this down to gcc 4.4 -> gcc 4.5 changes in Fedora 13 -> 14. This is faster than standard bitcoin client, yes?Anyway, how much patience do you have for testing?    Other readers.. your help in comparing 0.2 versus 0.2.2test* speed is welcomed.  Here is a matrix of options, to see if 4way can be improved:Compiler flagsURL-O2 -msse2http://yyz.us/bitcoin/cpuminer-installer-0.2.2test-o2.zip-O2 -march=pentium4 -msse2http://yyz.us/bitcoin/cpuminer-installer-0.2.2test-o2-pentium4.zip-O2 -march=k8http://yyz.us/bitcoin/cpuminer-installer-0.2.2test-o2-k8.zip-O3 -msse2http://yyz.us/bitcoin/cpuminer-installer-0.2.2test-o3.zip-O3 -march=pentium4 -msse2http://yyz.us/bitcoin/cpuminer-installer-0.2.2test-o3-pentium4.zip-O3 -march=k8http://yyz.us/bitcoin/cpuminer-installer-0.2.2test-o3-k8.zip After upgrading to Fedora 14 (GNU assembler 2.20.51.0.7-5.fc14 20100318), the bitcoin build fails as follows:Code:cryptopp/sha.cpp: Assembler messages:cryptopp/sha.cpp:436: Error: junk at end of line, first unrecognized character is `1'cryptopp/sha.cpp:436: Error: backward ref to unknown label "1:"The assembler code in bitcoin has not changed in recent commits, so the root cause pointed to the Fedora upgrade.  Apparently, current releases of GNU assembler do not like overly long lines created by the assembler macros in cryptopp/cpu.h + cryptopp/sha.cpp.  The fix is simple: add newlines to the assembler macros in cryptopp/cpu.h.  Arguably the semi-colon line terminator is redundant when a real newline is added, but I'm posting what worked for me.  This problem (and fix) impacts upstream Crypto++ also.Here are three possible fixes, pick the one you like best.alt1) Update bitcoin's cryptopp/cpu.h to upstream Crypto++ version.  This is 100% upstream changes, with nothing from me.     http://yyz.us/bitcoin/patch.bitcoin-asmfix1then apply newline build fix for new GNU assembler.     http://yyz.us/bitcoin/patch.bitcoin-asmfix2alt2) Alternately, here is the newline build fix without an update to latest upstream Crypto++, aka the minimal bitcoin build fix.     http://yyz.us/bitcoin/patch.bitcoin-asmfix-minimalalt3) Alternately, here is the newline build fix without an update to latest upstream Crypto++, with the semi-colons removed:     http://yyz.us/bitcoin/patch.bitcoin-asmfix-nl-onlyThere   Pick your favorite patch. Did you test 'cryptopp_asm32' algorithm?hmmm.  On my side, I upgraded Fedora 13 to Fedora 14, and changed -O2 to -O3 in compile flags.  Gotta wonder what changed I should also look into a better CPU architecture setting than the default. It's not easily highlighted, but from the big red 'Donate' button, you can go  Learn other ways to help -> Other ways to help EFFwhich finally lands you at http://www.eff.org/helpout where bitcoin is mentioned near the top. A test version of cpuminer, with crypto++ 32-bit assembly implementation, has been pushed out to git, and a test installer for Windows uploaded at http://yyz.us/bitcoin/cpuminer-installer-0.2.2test.zipSHA1: c105454954b63c4f846ced958b553c87182b88e5  cpuminer-installer-0.2.2test.zipMD5: ce5fd9d17167080892b8d9c06f582660  cpuminer-installer-0.2.2test.zipI'm interested if this works at all.  Should be faster for Windows users than the current Crypto++ implementation, I'm guessing. Fallacious logic.  I make no such assumption.The world is not black and white, and several in this thread seem to be making the mistaken assumption that "100% transparency is bad" implies "secrecy is always good."Reality is far more nuanced.Transparency and openness should be the default position, not an absolute and unbendable rule. Protocol versioning is very "coarse."Smarter protocols export lists of capabilities, as well as a "major" version number.  The major version number is left unchanged absent a major protocol rewrite.  The capabilities list is how clients notify each other of what features / bugs / etc. they support.bitcoin has a bit of this already.  grep for 'nServices' A few hiccups and inefficiencies, such as continued repression of North Korea?Transparency in general is good, but the complete inability to have a private conversation with another world government is bad.  A world without private conversations would be hell on earth.  Every leader would be a slave to the mainstream press headline of the day -- and we all the press in every country is fair, accurate, balanced and complete, right?As a friend of mine noted:  Every journalist that is a proponent of wikileaks, should publish every single source they ever had and the dealings with their sources. No more hiding behind protection of journalism sources. Then we can talk.The first and foremost casualty of complete, unconditional, immediate transparency would be the truth.  Think about it. Version 0.2.2 released:- VIA padlock works (lfm)- minor bug fixes (lfm)SHA1: b7ffda89f3b76302b948a715905105b4cf0c080f  cpuminer-installer-0.2.2.zipMD5: 716f883b92e93082e2dfa9a3130972cb  cpuminer-installer-0.2.2.zipSee top of thread for URLs. git updated with sha256_via, sha256_4way fixes. You count the wikileaks cables as "controlled media...owned by banksters"?  Strange.  I don't like the idea of uninformed, naive hackers undermining the good that diplomats around the world are doing.Simple example:  informed people think Wikileaks made reunification of North and South Korea more difficult, in the event of a North Korean collapse (predicted in 2-3 years after Mr. Kim's death).The Chinese have been quietly negotiating with the Koreans, Americans and Japanese on this issue.  Now that a Chinese minister is shown publicly to support reunification (and thus a democratic, unified Korea), a pro-US position, he has been embarrassed, losing face before his peers.This strengthens the nationalistic, hardline communists opposing reunification, who want to keep a Chinese-friendly, autocratic buffer state between China and democratic South Korea -- thus leading to the continued enslavement of the North Koreans."transparency is always good" is incredibly naive.  The real world is not that simple, and peoples' lives really are at stake. This depends largely on population density and geography.  A bus or subway train are incredibly wasteful and inefficient, if ridership is low. The draft spec on the wiki is incomplete crap.Your example is missing obvious data central to bitcoin -- transaction and block data.It also seems that your hashes shrank to 32 bits. Yep -- the diplomats and wanna-be's over at http://blog.foreignpolicy.com/ seem to think the current consensus is that the leaked cables make the US look good:  it is generally doing what people expect it is doing.  Nothing sekrit or earth-shattering. Or, to put in military terms, we know that wikileaks' entire financial infrastructure is being actively targeted, and The Powers That Be have successfully destroyed one target in the past 24 hours.Only cannon fodder would stand up and wave a red flag that says "shoot me" at such a point in time   bob182 is certainly not acting on my behalf, nor several others, as these threads seem to indicate.And for Pete's sake, bob182, please don't misrepresent yourself as some sort of official Bitcoin representative.Wikileaks is the enemy of major world powers right now, with many influential elites feeling that Assange committed an act of war against the United States, or, at a minimum, irrevocably disrupted world affairs.  This is not some mailing list discussion or theoretical exercise; there are very real, very powerful organizations actively targetting wikileaks' network infrastructure, organizational infrastructure, and most importantly, financial infrastructure.It is extraordinarily unwise to make bitcoin such a highly visible target, at such an early stage in this project.  There could be a lot of "collateral damage" in the bitcoin community while you make your principled stand. Nitpick:  One need not be a node, in order to use bitcoins.
URL to non-functional OpenCL prototype? Open source drivers won't get you an open source OpenCL compiler and implementation, unfortunately.The open source driver bits are mostly there.  The driver folks know how OpenCL will work, what ioctl(s) it will use....  once an open source OpenCL exists. Agreed.Welcome to the selfish, paradoxical, self-destructive idiocy of "crypto-anarchism." They are net stupid, according to Wired:  WikiLeaks Attacks Reveal Surprising, Avoidable Vulnerabilities Your stand could impact my money, and everyone else's.  Don't pretend your actions could impact only you. Full listtransactions has been rejected.  <shrug>  Plenty of people use it, so I'll continue publishing a working patch.It's tempting to publish a "useful patches" patchkit, to give these useful features to a wider audience. And thus doom bitcoin to be forever marginalized.I would rather see a large audience using bitcoin.  I want to free the world from the constraints of central banking and fractional reserve banking.But that's not gonna happen if the majority of visible bitcoin purchases are for illegal or grey market goods and services.Wider distribution and use of bitcoin means wider distribution and use of freedom. Thanks for being willing to helpfully impose risk upon others.  For people who are just starting to build businesses on bitcoin, this could be devastating to their new business.And it could permanently marginalize bitcoin, keeping it out of the mainstream for good.  Is that really the end result the bitcoin community most desires?Some of us are working hard to build tools and programs that encourage businesses to invest their time, money and energy into bitcoin.  It would be very sad to see all that go down the drain. MIME type is clearly superior to "bitcoin://" type URL.  Because after all, you might use http:// to download a .bitcoin file. +1, I agree completelyWe know that private and government forces are actively tracing, and trying to shut down, sources of wikileaks funding through all available means of pressure.Does it make sense to actively give multiple world governments incentive to shut down bitcoin?No matter how symathetic wikileaks' cause...  if you care about bitcoin's success, the answer is no. Not sure about C++, but in C, "static bool foo;" is guaranteed to initialize 'foo' to false. 4way is in the main client already -- albeit Linux-only, if I understand correctly.  That's an open project for someone to tackle, if they're interested. Cash is physical.  You gotta carry notes, get change, etc.  I can get torn, degraded, takes up space, etc.bitcoins can have all the convenience of a credit card or debit card:  just bump your phone against a reader, and you've purchased something with digital cash. Based on the thread subject spelling, I bet I know what inspired this post...  See the heroin store thread for a discussion along similar lines.My own opinion is that the US government loves to point to a technology, and make arguments in court along the lines of "the majority of uses are illegal / infringing / evil / etc., therefore, any use of that technology strongly implies illegality"  I'm not making a political statement about drugs or gambling; that's just the practical reality one finds with today's law enforcement. The best way to make bitcoins a success is to convince legitimate, tax-paying, paperwork-filing merchants to accept bitcoins, and customers to pay them in bitcoins.  Similar to how bitcoin's network remains intact: as long as >50% of the network is not evil, we need >50% of well known merchants to be upstanding citizens in their respective jurisdictions.One day, inevitably, law enforcement will have a bitcoin-related case, and having evidence of bitcoin's beneficial nature will be powerful and useful.  Concrete example:  presenting bitcoin as a way for donors to charities to remain anonymous is a powerful, positive argument for bitcoin.If the bitcoin "brand" is generally considered to be a den of thieves, scam artists, tax evaders, and criminals, it gains increased law enforcement attention, and will be marginalized away from the general public.  I want bitcoin to be as broadly successful as possible. I did.  Multiple times.  No response.But even ignoring that experience, simply going by the website, there is no send-payment interface.  Google turns up a post indicating that the send-payment interface was turned off.All signs point to "go away" though I'm happy you're apparently a member of the Sekrit API Club. According to the mtgox.com website, email appears to be the preferred method of contact.  I do not see any mention of IRC or bitcoin forums on there. Generally agreed (well, I think bitcoin is a better system, due to fewer SPOFs).Not true, unfortunately.  They have a payment receipt (shopping cart) API, but their send-payment API is either disabled or locked down to a select number of "blessed" users.  Lack of a generally available send-payment API is pecunix's main technical flaw at this juncture. setgenerate controls the in-client miner.  So, it may be set, or not, as you choose.These external miners use the 'getwork' JSON-RPC call, which works regardless of the setgenerate setting. Theft of mail obviously containing cash or other valuables is not unheard of... You may find this patch to bitcoin helpful:Code:diff --git a/main.cpp b/main.cppindex a1865a4..da85b0d 100644--- a/main.cpp+++ b/main.cpp@@ -3273,8 +3273,11 @@ bool CheckWork(CBlock* pblock, CReserveKey& reservekey)     uint256 hash = pblock->GetHash();     uint256 hashTarget = CBigNum().SetCompact(pblock->nBits).getuint256(); -    if (hash > hashTarget)+    if (hash > hashTarget) {+           printf("proof-of-work check FAILED...\n  hash: %s\ntarget: %s\n",+                  hash.GetHex().c_str(), hashTarget.GetHex().c_str());         return false;+    }      //// debug print     printf("BitcoinMiner:\n");This will show the proper, byte-reversed hash, and how close you came to the target.   That is very helpful in verifying whether or not the algorithm is truly working.
Actually, it looks like it is working, to me.  As explained in this thread, cpuminer searches for an approximate number of leading zeroes in the hash.It then submits that hash to bitcoin, for final verification.  Thus, it is normal for cpuminer to find several almost-solutions, before finding a real solution, depending on current difficulty.The official bitcoin client works this way too -- it stops hashing when a certain amount of zeroes appear.  However, it does so silently, whereas cpuminer print something. As a side note, those SHA1 hashes on bitcoin.org are almost useless.There is no PGP signature, no chain of trust, so a hacker could easily replace the binaries and hashes.Has anyone verified that the hashes remained unmodified after bitcoin.org downtime, for example?  There's no ongoing record of the binaries' hashes, in the forums or elsewhere, so who knows.  I'll continue to build my own client from source code, after reviewing the diffs, thankyouverymuch  URL: http://www.ft.com/cms/s/0/be8c7d48-fe5a-11df-abac-00144feab49a.html#axzz173S4Yd5J Did you use USPS delivery notification? Yeah, when going from mtgox -> paxum -> mastercard or mtgox -> paypal -> mastercard, it's pretty much the same.I suppose the only real difference is that mtgox will probably have a difficult time getting and using another paypal account effectively (even if it's withdrawal-only?) I think the exact opposite -- creating a Pecunix account is free, and all it requires is filling out several HTML form fields.  Couldn't be easier.Using the "Payment PIK" is slightly more annoying, but not much so. autogen.sh did not find the necessary libcurl autoconf magic to build your configure script.  Thus, instead of transforming the macro LIBCURL_CHECK_CONFIG into something useful, it left it as-is.So, your libcurl install is missing some pieces (or autogen.sh cannot find them). I highly recommend the site for LRUSD -> PPUSD transfers.Never tried going the other way, though. torservers are breathing a bit of new life into it. Most stores offer some sort of gift certificate, gift card or store credit.  You just need to convince the store to accept bitcoins for store credit.   Post blocks to alt.bitcoin  Google for IPsec. Patch updated for latest SVN. Patch updated for latest SVN. Patch updated for latest SVN.RPC has been renamed to 'xlisttransactions', because mainline is now including an incompatible version. QR-codes are well supported by open source tools, and are in more common use. NFC could easily transfer these strings too... Today's #bitcoin-dev featured an interesting discussion of mobile phone use, centered around the following use case:customer walks into real-world stores, selects several items, and walks to cashier to check outcashier displays QR-code on customer-facing screencustomer uses mobile phone to take picture of QR-codemobile phone displays "Big Box Store Corporation, Inc, requests a payment of 300 BTC.  Do you agree?  Yes / No"customer agrees (or cancels the sale), triggering BTC transfer from customer to merchantAs such, tcatm, nelisky and I started typing out notes for APIs at http://www.bitcoin.org/wiki/doku.php?id=phone_api   I'll let tcatm or nelisky talk about payment requests if they wish, but I wanted to focus on defining a QR-code specification that people could start using immediately.Each of these is a text string in the style of RFC822 headers (key: value), where value is further separated by semicolons. Strings containing semicolons or spaces may be quoted with double-quotes (").  Double-quotes themselves are escaped in the obvious way, with a back-slash.1) Bitcoin address.  Not directly related to the purchase-via-mobile-phone scenario just described, but obviously necessary.Code:bitcoin-address1: name="John Q. Public"; pubkey=1LGpwDU5djqsR1X14Tcass3y9fULTzxJq3Using this QR-code, you may share bitcoin addresses with others via mobile phone.  Use this QR-code on the forum or your website, to give out your bitcoin donation address!2) Merchant request for direct payment via bitcoin network.Code:btcpayment-request1: name=My Bitcoin Inc.; pubkey=1LGpwDU5djqsR1X14Tcass3y9fULTzxJq3; amount=300Using this QR-code, the mobile phone knows enough to ask the user if they wish to pay 300 BTC to My Bitcoin, Inc. at the given bitcoin address.  Presumably the mobile phone has the ability to make bitcoin payments, either directly (a lightweight bitcoin client) or indirectly via a payment API such as this.3) Merchant request for indirect payment via a custom payment processor.Code:payment-request1: merchant=1234; name=My Bitcoin Inc.; tx_id=1234bacd;     payment-processor=http://mtgox.com/apiv1; api=mtgox; amount=300; currency=BTCUsing this QR-code, assuming that the mobile phone app is aware of an API known as "mtgox", the mobile phone knows enough to ask the user if they wish to pay 300 BTC to My Bitcoin, Inc., using the specified custom Web API.The "1" suffix implies version 1 of that QR-code.  An incompatible change would imply "bitcoin-address1" becomes "bitcoin-address2", etc. Very nice...  bitcoin-to-ATM would be fantastic.Making bitcoin successful involves a lot of this "last mile" type of solution. Or DB_TXN_WRITE_NOSYNC.  Writes, but does not sync.  Should be fast since almost every OS (and hard drive!) has a writeback cache.
Is this interface just a modified 'getwork'?My CPU miner is quite fast using the '4way' algorithm, and should provide superior khash/sec for pooled miners. +1well done!  bitcoin needed better exchange with asian currencies. +1 agreed I timed two runs with clean data directories (no contents), -noirc, -addnode=10.10.10.1, Linux 64-bit.  Hardware: SATA SSDMainline, no patches:     32 minutes to download 94660 blocks.Mainline + TxnBegin/TxnCommit in AddToBlockIndex():     25 minutes to download 94660 blocks. This does not seem like the best time to be creating some sort of wikileaks-bitcoin connection. I instrumented my import using the -initblock=FILE patch posted last night, putting printf tracepoints in TxnBegin, TxnCommit, TxnAbort, Read and Write:Code:ProcessBlock: ACCEPTEDCDB::Write()DB4: txn_beginCDB::Write()CDB::Write()CDB::Write()DB4: txn_commitSetBestChain: new best=000000005b5c1859db19  height=1751  work=7524897523416ProcessBlock: ACCEPTEDCDB::Write()DB4: txn_beginCDB::Write()CDB::Write()CDB::Write()DB4: txn_commitSetBestChain: new best=00000000f396ab6b62ba  height=1752  work=7529192556249ProcessBlock: ACCEPTEDCDB::Write()DB4: txn_beginCDB::Write()CDB::Write()CDB::Write()DB4: txn_commitSetBestChain: new best=000000000c6bcf972117  height=1753  work=7533487589082So, it appears that we have a CDB::Write() that occurs outside of a transaction (vTxn is empty??).txnid==NULL is perfectly legal for db4, but it does mean that callpath may be operating outside of the DB_TXN_NOSYNC flag that is set in ::TxnBegin().  Thus, a CDB::Write() outside of a transaction may have synchronous behavior (DB_TXN_SYNC) as governed by DB_AUTO_COMMIT database flag.EDIT:  Wrapping WriteBlockIndex() inside a transaction does seem to speed up local disk import (-initblocks).Code:--- a/main.cpp+++ b/main.cpp@@ -1427,7 +1427,10 @@ bool CBlock::AddToBlockIndex(unsigned int nFile, unsigned     pindexNew->bnChainWork = (pindexNew->pprev ? pindexNew->pprev->bnChainWork       CTxDB txdb;+    txdb.TxnBegin();     txdb.WriteBlockIndex(CDiskBlockIndex(pindexNew));+    if (!txdb.TxnCommit())+       return false; Of course that implies begin+commit+begin+commit in quick succession (SetBestChain), so maybe a less naive approach might be preferred (nested transactions, or wrap both db4 writes in the same transaction). +1 Yeah, I missed the database-open caching buried in all the C++ constructors.  Major red herring, sorry about that.db4 cache control is http://download.oracle.com/docs/cd/E17076_01/html/api_reference/CXX/dbset_cachesize.html What are the lines in debug.log leading up to the end-of-file exception you pasted? nonce is a 32-bit (4-byte) value patched directly into 'data' at a particular offset.You return 'data', modified with a nonce that results in a hash containing a sufficient number of leading zero bits. The basic mining algorithm looks like this:  sha256(sha256(data)), where "data" is the "data" member returned by 'getwork' RPC.However, one complication with standard sha256 library implementations is that they will byte-swap input data, to change the input data into big endian format, which is normally required for endian-neutral sha256 to work on all platforms.To increase speed, bitcoin has already performed that byte-swapping for you.Which means that, to use a standard library (.net or whatever) implementation of sha256, you need to byte-swap your data again, to change it to little endian, then let your .net sha256 byte-swap back into big endian.'hash' is the output of sha256(sha256(data)), ie. the sha256 hash. The following code in AddToBlockIndex(main.cpp) is horribly inefficient, and dramatically slows initial block download:Code:    CTxDB txdb;    txdb.WriteBlockIndex(CDiskBlockIndex(pindexNew));    // New best    if (pindexNew->bnChainWork > bnBestChainWork)        if (!SetBestChain(txdb, pindexNew))            return false;    txdb.Close();This makes it impossible to use a standard technique for loading large amounts of records into a database (db4 or SQL or otherwise):  wrap multiple record insertions into a single database transaction.  Ideally, bitcoin would only issue a TxnCommit() for each 1000 blocks or so, during initial block download.  If a crash occurs, the database remains in a consistent state.Furthermore, database open + close for each new block is incredibly expensive.  For each database-open and database-close operation, db4diagnose health of database, to determine if recovery is needed.  this test may require data copying.re-init memory poolsread database file metadataacquire file locksread and initialize b-tree or hash-specific metadata.  build hash table / b-tree roots.forces a sync, even if transactions called with DB_TXN_NOSYNCfsync memory poolAnd, additionally, bitcoin forces a database checkpoint, pushing all transactions from log into main database.That's right, that long list of operations is executed per-database (DB), not per-environment (DB_ENV), for a database close+open cycle.  To bitcoin, that means we do this for every new block.  Incredibly inefficient, and not how db4 was designed to be used.Recommendations:1) bitcoin should be opening databases, not just environment, at program startup, and closing database at program shutdown.  db4 is designed to handle crashes, if proper transactional use is maintained -- and bitcoin already uses db4 transactions properly.2) For the initial block download, txn commit should occur once every N records, not every record.  I suggest N=1000.EDIT:  Updated a couple minor details, and corrected some typos. Just pushed out v0.2.1 to cpuminer.git, and updated the Windows installer:http://yyz.us/bitcoin/cpuminer-installer-0.2.1.zipSHA1: d85390e1bb4da94b84f0968d0c98590f4be22f39  cpuminer-installer-0.2.1.zipMD5: 02bcd0b22fa62499e96244ebd86efcd5  cpuminer-installer-0.2.1.zipWindows users should see a slight increase in khash/sec, due to improved optimization. Fixed in git commit 145e5fe141857c0757fdb5bb6909583aa67691b1, just pushed to cpuminer.git. Patch updated to fix minor bug. URL: http://yyz.us/bitcoin/patch.bitcoin-initblocksThis patch adds "-initblocks=FILE" parameter to bitcoin, where FILE is the path to a blk0001.dat file downloaded off the Internet somewhere.With -initblocks, bitcoin will import, verify, index and store each block in this file, thus making it acceptable to obtain from untrusted sources.The import stops upon any error, preventing re-loads of the same data.If nothing else, this patch permits the benchmarking and comparison between local disk import and P2P network download. See http://www.bitcoin.org/wiki/doku.php?id=bitcoin_history for a basic list. 'getwork' miners (such as mine) already do this.  The basic algorithm looks like this:1. Connect to bitcoin via TCP, obtain work2. Work on work (no TCP connection required, needed, or used)3. If solution found, connect to bitcoin via TCP and submit solution4. Go to step #1.If bitcoin is down when a solution is found, presumably the solution will be invalid by the time bitcoin comes back up, so the "retry" with solution seems less than useful.  A "retry" is really just going back to obtain more work (step #1). Just added the Crypto++ implementation of SHA256 to cpuminer.git.  C only, though I would eventually like to add asm for 32-bit.sha.cpp, converted to C, seems slower than cpuminer's current "c" algorithm. Strange.  I wouldn't have thought the mainline implementation would be that much faster on 64-bit.At some point you have to surrender to the fact that killing the miner means possibly missing a solution that would have been found, if you only gave it another microsecond to run...  
What platform?  And, is it 32-bit or 64-bit?I'm guessing my miner will be slower than mainline on 32-bit, because Crypto++ has a SHA256 32-bit assembly implementation, and I think mainline uses that on 32-bit platforms.Miners submit work immediately, via HTTP JSON-RPC, as soon as they find a possible solution.  You'll only lose bitcoins if you KILL in a tiny window of opportunity where you found a solution and it has not yet submitted. As noted in other threads, we need a reliable method of importing/exporting keys. I agree that those three URI schemes are very popular, but I do run into magnet links all the time on torrent sites.  And all major torrent software does support magnet links. Sorry, these users' disk and CPU were not at 100%.  It is clear the bottleneck is not the database or indexing, for many users.bzip2 gives you 33% compression ratio, saving many megabytes off a download:Code:[jgarzik@bd data]$ tar cvf /tmp/1.tar blk0001.dat blk0001.dat[jgarzik@bd data]$ tar cvf /tmp/2.tar blk*.datblk0001.datblkindex.dat[jgarzik@bd data]$ bzip2 -9v /tmp/[12].tar  /tmp/1.tar:  1.523:1,  5.253 bits/byte, 34.34% saved, 55439360 in, 36402074 out.  /tmp/2.tar:  1.512:1,  5.291 bits/byte, 33.86% saved, 103690240 in, 68577642 out.I wouldn't call 33% "uncompressible" Not quite true.  "-checkblocks" (CheckBlock()) performs quite a few checks on the contents of blk0001.dat / blkindex.dat.  AcceptBlock() does a bit more, adding context, but not much more.  But let's ignore that for the moment.I think a more important point you're missing is that nobody is proposing that verification be skipped.  The bitcoin code is quite capable of verifying and indexing untrusted blk0001.dat data.  It would just need a few modifications to behave sensibly if blkindex.dat is missing.The proposal is simply:  don't download massive amounts of uncompressed data using a protocol (bitcoin P2P) that wasn't designed for bulk data transfer.The client is clearly capable of verifying the cryptographic integrity of blk0001.dat from an untrusted source, because it does that for blocks coming in over the network, and blk0001.dat contains... serialized blocks originally received from untrusted sources over the network.It does not seem overly difficult to pass in blk0001.dat file position data to ProcessBlock(), and simply skip the WriteToDisk() storage call in downstream callee AcceptBlock(). Yes, correct.Presumably at some point there will be a lightweight client that only downloads block headers, but there will still be hundreds of thousands of those... From earlier today, around 94200 or so. Another new user on IRC, Linux this time, was downloading at a rate of 1 block every 4 seconds -- estimated total download time around 4 days.Other commenters in this thread are correct that upgrading users don't need a block database...  but something needs to be done to improve the initial block download experience for new users.  Improve the database all you want.. you'll still have peers giving you blocks slowly for any number of reasons.We have the hashes for genesis block through block 74000 hardcoded (compiled) into bitcoin, so there's no reason why we shouldn't be able to automatically download a compressed zipfile of the block database from anywhere, unpack it, verify it, and start running. Here is an archive of the bitcoin block database, for new users who do not wish to wait hours for their bitcoin to be usable:     http://yyz.us/bitcoin/blocks-linux-64bit.tar.bz2  (approx. 68 MB)My question...   will these files work on 32-bit linux?  windows?  Anybody interested in trying them out on those platforms, and reporting the results? Until you're caught and that forum post is used as evidence of intent, anyway...    Humans should be able to concentrate, focus on a subject or task for more than 10 minutes.    It is only reality if we permit the general loss of skills like attention to detail. Everybody hates the $600 reporting requirement, and it appears likely to be repealed:     Senate Democrats float health tax repeal     http://www.politico.com/news/stories/1110/45051.html Patch updated to latest SVN. Patch updated to latest SVN, with additional block/TX size output. It is strange that the default client-miner is so much faster for you.  Surely your bitcoin client is running multiple threads, to achieve 3800 khash/s, yes?Thanks for reporting results!  cpuminer v0.2's hashmeter should be accurate.  Note that cpuminer prints out speed for each thread, not a total for all threads:Code:[jgarzik@bd cpuminer]$ ./minerd -t2 -a4way2 miner threads started, using SHA256 '4way' algorithm.HashMeter(0): 16777216 hashes, 1828.44 khash/secHashMeter(1): 16777216 hashes, 1832.77 khash/sec"HashMeter(0)" is thread #0.  "HashMeter(1)" is thread #1.Therefore, I am getting 3660 khash/sec in total. Your answer is here in the thread where you originally posted this question. You don't need Linux... there's a Windows build:  http://yyz.us/bitcoin/cpuminer-installer-0.2.zip Curious users may find the following patch useful for observing bitcoin miner proof-of-work results.  Current miners seem to work like this:Increment nonce in block headerDouble-SHA256 hash the block headerIf some number of high bits are zero, stop hashing, and perform an exhaustive proof-of-work validation check:  Decompose the sha256 hash result into a 256-bit integer, and compare that integer with the target.Otherwise, loop back to step #1.The net result is that it is entirely normal to stop hashing, perform proof-of-work validation, and fail.The following simple patch will log such failures to the debug log. Again, it is normal to see these sorts of events pop up occasionally.Code:diff --git a/main.cpp b/main.cppindex acfcbc9..1c5ca69 100644--- a/main.cpp+++ b/main.cpp@@ -3273,8 +3273,11 @@ bool CheckWork(CBlock* pblock, CReserveKey& reservekey)     uint256 hash = pblock->GetHash();     uint256 hashTarget = CBigNum().SetCompact(pblock->nBits).getuint256(); -    if (hash > hashTarget)+    if (hash > hashTarget) {+           printf("proof-of-work check FAILED...\n  hash:   %s\n  target: %s\n"+                  hash.GetHex().c_str(), hashTarget.GetHex().c_str());         return false;+    }      //// debug print     printf("BitcoinMiner:\n"); Ok, I think I've fixed 4way.  The 4way scanhash was only patching the base nonce into the data block, rather than the nonce successfully found using the vector SSE2 code.  The code now seems to be successfully finding hashes with a large amount of zero bits.Version 0.2 has been pushed out to git repo, and Windows installer has been updated.  See top of thread for updated URLs. See NEWS file or git repo for full list of changes.SHA1: 61809a3f09363ab9d83e7b727909e70d2e1a3f8c  cpuminer-installer-0.2.zipMD5: bdcf1b956688f46cd8591656887cb3a6  cpuminer-installer-0.2.zipEdit:  just generated a testnet block w/ 4way.  Looks like it's working. I had not even gotten far enough to determine why your code lacked the midstate caching stuff   If you have the hardware (I don't), giving my miner a try would be really helpful.  I don't even have a simple "it works" confirmation on VIA yet.If you happen to figure out anything interesting, I'll be happy to integrate it and post a new Windows build.
Added VIA padlock support, in git.Completely untested -- I don't have the hardware. Thanks for the inspiration.  After reading this, I added VIA padlock support to my CPU miner. Updated the git repo (Linux) and http://yyz.us/bitcoin/cpuminer-installer.zip (Windows) to fix hash meter problems.Size: 1858209SHA1: c9c2695b7f6708956dfe9b06e02a28fdc0cf46c9MD5: 144e2c7d61d739a267bb623122e103e7I fixed the 0.00 khash/s problem, but it looks like the algorithm might be returning incorrect hashes.  I marked it "EXPERIMENTAL" in --help for now. Note that the khash/sec calculations are known to be buggy, so you cannot trust those numbers   Will try to fix that soonish, so people may accurately compare numbers with other installations. Updated the installer at http://yyz.us/bitcoin/cpuminer-installer.zipDoes the problem still exist?EDIT:  Here are the checksums for the latest Windows installer zipfile...     Size: 1978933 bytes     SHA1: fdea8a045db5e09b7441a4059fbdba186490e742       MD5: e60dbfb7c3b458c2a98e71cb295f9b7d   Clearly my installer-maker is having a problem     Will investigate (though probably tomorrow). Added.  Users may select this by enabling SSE2 instructions in their compiler during build, and thenCode:$ minerd --algo=4waywill select the 4way implementation, rather than the default 'c' implementation.  Run "minerd --help" to make sure 4way is listed as an available option first; if not, you did not build with SSE2 enabled (-msse2, or many values of -march=xxx). Try adding c:\CPU-miner\usr\i686-pc-mingw32\sys-root\mingw\bin\ to your PATH, then run minerd.exe? I'll take a look.  VIA Padlock support may also be similarly easy to integrate. It's been tested with jansson 1.2 and 1.3 release versions.EDIT:  If you lack jansson, current cpuminer.git will build an in-tree version.  Thus, you may opt to fix the problem by... removing jansson from your system. Attached is a Windows executable build with mingw32.  I'd be interested to know if it works.run "minerd.exe --help" or "minerd.exe -h" to show command line options.minerd.exe SHA-1 sum: 722fa3b956de3ed3438ed3294fe191f0d55c1514minerd.exe MD5 sum: 9f75f8da7a5d02da1d45d46d4a032489 FWIW, the default bitcoin miner also does this -- it just doesn't print out when it "finds some zeroes", only when a real proof of work is found.Thus, my CPU miner always shows when it stops working on a solution, and starts working on a new solution.  Just giving you a bit more information on the whole process. Not a bug.  The miner finds a hash with "several" zeroes in it, but then relies on bitcoin to do the full 256-bit hash < target value comparison.  It's normal that some hashes will be found by the CPU miner, then rejected by bitcoin.  We call those almost-solutions  To collect everything in one thread (and possibly help with the wikipedia effort), would the community be willing to post URLs to the thread, of notable sources or "press hits" (mentions in the press somewhere)?"notable" is a loose definition that just means exercise common sense:  a mention from a blogger with 1000 hits/month is not notable, nor is your average forum post, nor is anything that gives an obvious impression of bitcoin community self-promotion.Let's start off with...1) Bitcoin: A Peer-to-peer Electronic Cash SystemAuthor: Satoshi Nakamoto, bitcoin inventorhttp://www.bitcoin.org/bitcoin.pdf2) Bitcoin: Virtual money created by CPU cyclesAuthor: Nathan Willis, LWNhttps://lwn.net/Articles/414452/3) Imagine your computer as a wallet full of BitcoinsAuthor: Danny O'Brien, Irish Timeshttp://www.irishtimes.com/newspaper/finance/2010/1126/1224284180416.html4) Bitcoin Electronic Currency: The Future of MoneyAuthor: Elliott A. Prechter, www.elliottwave.com (Sept. 2010 issue)http://www.bitcoinblogger.com/2010/09/bitcoin-electronic-currency-future-of.html5) Bitcoin Releases Version 0.3Author: a random slashdot contributor; notable because this brought a large influx of new bitcoin usershttp://news.slashdot.org/story/10/07/11/1747245/Bitcoin-Releases-Version-036) LINKS: 12 JULY 2010Author: John Robb, influential author and thinker (see impressive bio)http://globalguerrillas.typepad.com/globalguerrillas/2010/07/links-12-july-2010.html[sirius-edit: Please contribute to the Bitcoin press hits wiki page.] Various google searches get you one step away, either linking to the bitcoin forum or http://en.wikipedia.org/wiki/Wikipedia:Requests_for_undeletion/Archive_20#Bitcoin URL: http://www.allvoices.com/contributed-news/7436607-paypal-demos-changefree-gumball-machine They give SSNs to new Americans at birth. The wikipedia page is pretty lame at the moment, and I agree with one commenter who says "smells like an advertisement" -- especially the Acceptance section."Monetary and financial benefits" section is quite off-the-cuff, with many of the items easily open to question, or are quite plainly an opinion, not fact.I think bitcoin is best served by first having a respectable wiki page -- even if stored in From_Xenu or incubator -- then going back a third (fourth? fifth?) time to ask that the article be undeleted.Having a popular From_Xenu web page "riddled with facts", looking good, will do more to get a Bitcoin page into wikipedia than a million people posting "add it!" to a Talk page somewhere.  Google searches will find the From_Xenu wiki page without a problem... Which of the ACID properties do you need, while downloading?Adding BDB records is simply appending to a log file, until you issue a checkpoint.  The checkpoint then updates the main database file.Under a normal BDB transaction, you are guaranteed that each log record will be sync'd to disk platter, before the transaction commit succeeds. This is very strict, but required for full ACID. Enabling DB_TXN_NOSYNC still gives you a lot:     "database integrity will be maintained, but if the application or system fails, it is possible      some number of the most recently committed transactions may be undone during recovery"bitcoin can obviously recover if recent transactions are undone, so, it seems useful for this flag to be set for 100% of the initial block download.That leaves checkpointing, which is a balance between amount of work performed at checkpoint time -- number of records that must be copied from log to database file -- and wall clock time.  Just gotta try some values and see what "feels" right -- maybe checkpoint every 10,000 blocks? This is not true of many novice users, who say things like "well it took several hours to catch all the 90 000 blocks but finally it arrived" (quoted from one new user, on IRC, today).Agreed.  Compressed in an archive, blk0001.dat is around 36MB.It remains the download, not the verification, that has the highest variability of experience, where first time users see a delay of 30 minutes to several hours before the software is actually usable.  Some P2P nodes may be extremely slow (I see high variability in latency and throughput for old blocks, and blocks larger than 512 bytes).  End user bandwidth may be low, spotty or expensive.  Firewalls are often a problem.I'm betting that the above complaint from a new user was due to a Microsoft firewall; but the point stands:  large variance of network configuration and capability implies the P2P download impact may be far, far greater than impact of on-disk verification of 90,000 blocks.Who said untrusted?  The proposal is that you distribute blk0001.dat (and only blk0001.dat) in the bitcoin.org official client downloads.  And of course the client will spend some time verifying blk0001.dat upon first use.  This is unavoidable, and nobody has proposed changing or eliminating verification.Just shipping blk0001.dat with official bitcoin would eliminate several headaches that new bitcoin users continue to experience.
It appears that blk0001.dat, where bitcoin stores block chain information, is compatible across Windows, Linux, 32-bit and 64-bit.Therefore, why not save new users some time by shipping blocks 1-74000 with each release?Presumably, indexing and verifying a local file would be faster, and use fewer network resources, than downloading all those blocks via P2P. Figured out the problem.  My sha256 algo was byteswapping the input into big endian, when it was already big endian.First version of this new CPU miner now described here:  http://bitcointalk.org/index.php?topic=1925.0 A new CPU miner is now available, making use of the new 'getwork' RPC command.In the beginning, this is intended largely to demonstrate a 'getwork' miner.  It is written in straight C, with minimal dependencies (libcurl, jansson).It has successfully generated blocks on testnet, mainnet and almost all pools.Linux/BSD release tarball: http://yyz.us/bitcoin/cpuminer-1.0.2.tar.gzWindows installer: http://yyz.us/bitcoin/cpuminer-installer-1.0.2.zipgit repository: git://github.com/jgarzik/cpuminer.gitContributions welcomed!  (GPL v2 license)UPDATE:  This has largely been superceded by Con Kolivas's cgminer fork.  See cgminer's official forum thread for updates and details. Just started working on a simple CPU miner in C, mainly as a demonstration, and to understand 'getwork'.Repository is at git://github.com/jgarzik/cpuminer.gitImplementation is complete... but it does not work, so don't get too excited.  I suspect something weird going on with ByteReverse (or lack thereof).  It's quite unclear whether or not 'data' and 'nonce' must be byte-reversed, and in what way. This patch is entirely superceded by SVN r189, satoshi's version of getwork. Fantastic stuff, this eliminates one of my patches completely.I am also tempted to work on an external CPU miner... That's not really a decision, so much as a common request or complaint.Everybody would like such a beast, but nobody's sitting down and doing it (at least, for free). Very nice.  This definitely fills a needed niche.Now people may keep their money stored as bitcoins, yet still access the "legacy currencies" through VISA.   "my practice of labelling an address""per-BC-address labels"So yes, I know they are labelling an address (key), not a single transaction.  That doesn't change the practice or the point.I'm sure that's what they said when they invented shell scripts, SQL, ...   Surely decades of security-related quoting bugs have disproven this logic?But irrespective of that, surely it is obvious that specifying empty strings such as e.g. on a shell command line is annoying and user-unfriendly, compared to something obvious and human-friendly like "default" or "master." just please no crappy actors, hammy or contrived situations, or poor video production values... Is there no longer a way to place labels on a per-transaction basis?It seems that my practice of labelling an address "mtgox-20101122-1", signalling an incoming transaction from mtgox, is no longer supported.Even with the existence of accounts, per-BC-address labels are useful.  I wouldn't want to create a new account for each mtgox transaction...  mtgox withdrawals should all go into the same account. Updated to SVN r188 (accounts). Updated to SVN r188 (accounts). Updated to SVN r188 (accounts). We don't need yet another poorly done video or machinima, we need a "Bitcoin for Dummies" PDF, or YouTube narrated slideshow (PowerPoint + audio -> youtube).Something that explains bitcoin using simple terms and simple comparisons to well-known concepts (cash, credit card, gold, banks).  Your average user doesn't need to grok details of P2P or cryptography to receive a basic understanding of bitcoin. Another comment...  please make the default account something other than the empty string.Make the default account name a wallet setting, with a default of 'default' or 'master' or similar.  ie. provide a sensible default, but don't force users to use that name if they really don't want to.  git follows a similar policy:  the "master" branch is named "master" by convention/default only, and may be changed to suit the user preferences.An empty string just invites crazy scripting/quoting attacks, and is in other ways error prone for users, even if the actual bitcoin implementation is 100% bug-free and perfect.  Empty strings and specially quoted strings are a pain. IMO the wallet keys (== the db4 keys in a key/value table, not ECDSA keys) should be easier to group.e.g. make the keys look like paths "/account/$name/ecdsa_keypair_1234abcde" or "/settings/generate"This enables easier hierarchical organization based on sane, readable prefixes.  Using "/ac/$name/" would permit trivial searching and grouping using DB_SET_RANGE, for example.  (yes, I do see DB_SET_RANGE already in use, via the 'ac' prefix).The current techniques of "flat namespace" or now "has 'ac' prefix" are straight out of the 1970s   Surely we can do better than that. Patch updated to fix silly parameter passing bug in one of the new functions.  Code now generates correct blocks on testnet, as expected. Update:  it's complaining about bitcoin.conf not existing... yet it does exist:Code:[jgarzik@bd bitcoin.hacks]$ nice -n19 /spare/repo/bitcoin.hacks/bitcoind -testnet -gen -datadir=/garz/bitcoin/test/data -serverbitcoin server startingWarning: To use the "-server" option, you must set rpcpassword=<password>in the configuration file: /garz/bitcoin/test/data/testnet/bitcoin.confIf the file does not exist, create it with owner-readable-only file permissions.and yet...Code:[jgarzik@bd bitcoin.hacks]$ ls -l /garz/bitcoin/test/data/testnet/bitcoin.conf-rw------- 1 jgarzik jgarzik 35 Nov 22 01:04 /garz/bitcoin/test/data/testnet/bitcoin.confUpdate2: Using the command line -rpcuser and -rpcpassword works around this bug, and starts the test network successfully. In current, vanilla upstream (SVN r187, no third party patches), the test network does not appear to work.I execute Code:nice -n19 /spare/repo/bitcoin.hacks/bitcoind -testnet -gen -datadir=/garz/bitcoin/test/data -serverand bitcoin immediately exits.  debug log shows the following:Code:Bitcoin version 0.3.15.5 betaDefault data directory /g/g/.bitcoinBound to port 18333Loading addresses...dbenv.open strLogDir=/garz/bitcoin/test/data/testnet/database strErrorFile=/garz/bitcoin/test/data/testnet/db.logLoaded 0 addresses addresses                19msLoading block index...LoadBlockIndex(): hashBestChain=0000000224b1593e3ff1  height=0 block index             377msLoading wallet...nFileVersion = 31504fGenerateBitcoins = 0nTransactionFee = 0addrIncoming = 255.255.255.255:8333fMinimizeToTray = 0fMinimizeOnClose = 0fUseProxy = 0addrProxy = 127.0.0.1:9050 wallet                    2msDone loadingmapBlockIndex.size() = 1nBestHeight = 0mapKeys.size() = 1mapPubKeys.size() = 1mapWallet.size() = 0mapAddressBook.size() = 1sending: version (85 bytes) ThreadRPCServer startedipv4 eth0: 10.10.20.30addrLocalHost = 10.10.20.30:18333ThreadRPCServer exitingDBFlush(false)addr.dat refcount=0addr.dat flushblkindex.dat refcount=0blkindex.dat flushwallet.dat refcount=0wallet.dat flushStopNode()DBFlush(true)Bitcoin exiting
The mybitcoin.com shopping cart interface (SCI) already has what you need. Ironically, the spamming has created an incentive to pay at least a 0.01 TX fee (the Bitcoin Faucet does this now). For merchant point-of-sale (POS) systems, the merchant should display a QR-code on a screen.  The customer uses their mobile phone to snap a picture of the QR-codeAutomated processing software reads the QR-code in the picture, determines that it is a payment request from merchant CoffeeYourDrugOfChoice, Inc. for 35 BTC, and prompts the customer to approve the payment.Presuming sufficient payment processor speed (see the snack machine thread), you could probably get away with zero-confirmation, instant bitcoin-denominated purchases. Subscriptions are quite difficult for bitcoin, because bitcoin lacks a sort of "demand payment" feature.  Demand payments occur when you give a merchant a "secret" (ie. your CC number / expire date), that enables direct withdrawal from your account.Community-wise, I'd bet most bitcoin users would shy away from a system that enables third parties to withdraw bitcoins from you at their convenience.The closest you can probably come is adding a "cron" feature to mtgox or bitcoin, which sends payments on a pre-defined schedule, to pre-defined bitcoin addresses.  Such a feature leaves the user in control of their wallet, as they can cancel a "cron job" at any time. Worked fine on the test web page I created; but since it required JavaScript, I did not want to implement it in production. Patch updated to move prepare-work and prepare-hash-buffer code into separate functions.Again, no code changes, just code movement.The patch now looks similar to m0mchil's getwork patch, and makes integrating remote mining much easier. I have actually bought gas and amazon.com stuff using the Wal-Mart VISA gift card. Wal-Mart gift cards are VISA, and may be used at any store that accepts VISA. URL: http://yyz.us/bitcoin/patch.bitcoin-modularize_minerThis patch is similar to patches sometimes seen in the Linux kernel.  Analogous to an algebraic reduction, or a step in a mathematic proof, this patch intentionally makes zero functional code changes.  It moves two chunks of code -- hash meter and check-solution -- from the BitcoinMiner() function into separate functions.This change makes it easier to integrate remote mining. Doesn't have to be a gas card; it could be any VISA debit card.Several Liberty Reserve exchangers permit transfer to debit card.  Certainly a market niche exists for BTC-to-debit services.  Anybody know reputable services that produce gift or debit cards? Another 100BTC donation headed your way.Working on shopping cart plug-ins for bitcoin is an important step in making bitcoin easy to use. Indeed.  That's all that needs to be in the core -- remote mining support. ...you download blocks from 1 .. 74000 before being able to verify or generate coins.  Your point? The $1000/day limit is quite normal and expected, if you do not wish to register as a Money Services Business (MSB) with FinCEN.I found this guidance while researching for The Bitcoin Store.For the sake of mtgox.com's longevity, I hope this withdrawal limit remains.  You do not want the US government to even mistakenly shut down mtgox, do you?And I for one would not trust random users' interpretation of US laws.  You will find crazy people who will explain that it is not required to pay US taxes to the IRS.  We all ignore these nutters, continue to pay our taxes, and continue to stay out of jail. It's not a tragedy of the commons because generators will have interest in seeing the network continue to function. I'm not "sold" on bitcoins, in that, I have no clue if they will succeed or fail.  I think failure potential is >50%, and that it's a high risk endeavor.It's also an intriguing concept, fun to play with, and a potential "disruptive change", a genuinely new idea in the area of currencies, which hasn't seen many truly unique ideas in the past 100 years. Well, you can do all sorts of stuff if you have >50% of network CPU power. That's a good point about fee competition, but I'm wondering about near-term implications of this spam flood, too, likeWhat happens to the transactions that don't make it into the current block?  (somewhat rhetorical question... the answer is "they keep piling up in memory" AFAICS, but that raises a bigger question -- how to deal with ever-larger TX cache?)Will this create a de facto situation where TX fee is required for "normal" bitcoin users?Would it make sense to introduce a consensus blacklist, of abusive bitcoin addresses? ie. miners could -- at their discretion -- simply drop TX's with the blacklisted addresses. I'm not so ready to blame this on MrBurns. Someone is apparently "testing" the main bitcoin network by flooding it with 0.01 BTC transactions from A->A and B->B, where A and B are two random public keys.  You can watch at http://theymos.ath.cx:64150/bbe We've hit the free transaction limit on each block, for many blocks now -- appears to be ~219 free transactions per block.  "real" transactions do not appear DoS'd at this time, presumably due to logic that prioritizes, in part, based on transaction value.<soapbox>Free TX's are just asking for permanent level of spam.  There should be a cost to each TX, even if it's only 0.001 BTC or so.</soapbox>
satoshi has already commented on that subject. As it stands now, a spammer can flood the network with millions of 0.01 BTC transactions to himself.Even when this uses up all free TX slots in a block -- thereby DoS'ing honest bitcoin users -- it will continue to use memory and network resources, because the TX's will hang around in RAM on each node, waiting to get added to a block. Tax revenue -- that is, money coming into government treasury -- is largely predicated on economic growth, rather than tax rates.Lowering tax rates does not necessarily reduce money coming into government.  Raising tax rates does not necessarily increase money coming into government.Life isn't that simple.  Don't listen to Democrats and Republicans that want to paint you such a simplistic picture. +1 agreed.  All TX's have a cost, a mandatory TX fee would reflect that. This article is now outside the paywall; the subscriber link I made is no longer needed.URL: https://lwn.net/Articles/414452/ The point of this thread is to flesh out / discover the specifics of this approach."transactions relevant to the phone's balance" is, in particular, not immediately obvious, at least not without knowing ahead of time the TX hash. For the purposes of discussion, let us assume 1 million mobile phones exist, each with a bitcoin wallet, and the ability to make payment via bitcoin.  If we naively follow the current bitcoin client design, each one of those 1 million mobile phones would connect to the bitcoin P2P network, and relay the entire world's transactions to its ~8 network peers.Quite unscalable; unrealistic to expect a mobile phone to do that, especially in many parts of the world where data traffic is expensive and/or incredibly slow.  So what are the alternatives?  Three come to mind:1) Connect to a bank or service that provides a web API.  Easy, non-standard. Requires trusting a third party SPOF.2) Set up your own bitcoin, and access that remotely via JSON-RPC from mobile phone.  Moderately difficult, and not scalable.3) Connect to the P2P network, and using a subset of the existing P2P network protocol, send and receive transactions for the wallet stored on the mobile phone.While options #1 and #2 are the most reasonable and realistic in the short term, it seems helpful if attention is directed to option #3, which is the most decentralized, pro-privacy option.Therefore, I propose that we seek to identify a subset of the current bitcoin P2P protocol, that may be used optimally by low power, low bandwidth devices such as mobile phones.Suggested bitcoin specification for mobile phones, version 0.1The following is a list of basic operations one needs to support decentralized mobile phone wallet/spend, with suggested implementations.Spending bitcoins -- creating and sending a new transaction -- appears easy.  Connect to one or more P2P nodes, and send a 'tx' message.  For bonus points, sample several random network locations, to make sure your TX is getting passed around the network.Waiting for confirmation of a recent spend -- Poll one or more P2P nodes for newly created blocks using 'getblocks' and 'getdata'.Receiving bitcoins -- Poll network nodes every few minutes, download all new blocks seen using 'getblocks' and 'getdata'Creating and distributing a TX seems straightforward, but receiving bitcoins is definitely an inefficient operation.  One wonders if there is any modification to the bitcoin protocol that could improve the situation?  Perhaps a new network message 'polltx', that scans recent transactions/blocks for activity on a list of public keys (wallet addresses).The main goal of all this is (a) avoid relaying all the world's bitcoin transactions, while (b) remaining a fully decentralized bitcoin payment solution that requires nothing more than the P2P network itself. NVIDIA GPUs aren't as good at integer operations. Without a GPU, particularly an ATI GPU, generating coins is pointless.  You'll waste electricity for 1-2 months before generating a single block, most likely. URL: http://www.wired.com/epicenter/2010/11/android-wallet Some risks decrease... others increase  Indeed.Furthermore, all known digital media -- magnetic tape, magneto-optical, CD, DVD, hard drive, flash drive -- deteriorates over time.  While many of us old codgers have 20-year-old hard drives that still work, your "average" media can start losing data in under 10 years.Machine-readable, printed material is far more durable than that. True, but if ultimately they want the donations in a national currency, fees are still involved.Receiving Liberty Reserved USD (after selling BTC, presumably) incurs a fee.  There may be further fees converting LR-USD into something that may be deposited into a bank account.Of course, in the ideal world, the charity would use their BTC to purchase goods and services directly.  One easy example right now of a useful, legitimate BTC-based business is web hosting, which many charitable organizations require. I keep hoping that mtgox will add LR-EUR, and BCM will add LR-EUR and PP-EUR.* jgarzik also wants to see more Asian currencies... I don't see how the price relates to Paypal directly at all.There were two large factors in bitcoin price increase:1) Fraud at all markets and buybitcoin.com, led to increase in bitcoin buying activity.2) The price went up due to inability to withdraw from mtgox, and BCM market price followed mtgox.  Because, logically, the only market activity one could realistically engage in was depositing money, for the purposes of buying bitcoins.  Which will obviously drive up the price.When people were once again able to withdraw from mtgox, the BTC/USD price dropped like a rock. Note that it uses NVIDIA GPUs.Those are decidedly suboptimal, compared to ATI GPUs, for the purposes of bitcoin mining. Can you elaborate? Whoops, missed the post on another forum... Quoting from the marketing email I received...URL: http://aws.amazon.com/ec2/hpc-applications/ Perfect for a TXT record 
DNS lookups... for what?You could store a bitcoin address in a TXT record, I suppose. I think the claim of legal protection goes a bit too far.It certainly gave me a false impression, upon reading the headline. Bitcoin is not built to continually increase the difficulty.Bitcoin is built to continually adjust the difficulty, to attempt to reach the target of 6 blocks per hour.If the number of miners decreases, then the difficulty will decrease. Patch updated to latest SVN.  See top of thread for URL. Patch updated to latest SVN + theymos's fix.  See top of thread for URL. You need the 'listtransactions' source code patch.  bitcoin cannot do this by default. satoshi seems to fall on both sides of protocol compatibility ;-)He makes a very strong effort to support ancient clients (and their ancient implementations of the bitcoin network protocol).But he also suggests future incompatible changes may be integrated via patterns such asCode:if (block > 200000)     Do Something New And Different () I just generated a free link, for non-subscribers:http://lwn.net/SubscriberLink/414452/b8bf16adf2d1564a/ hmmm, has this ever been possible?It seems like mybitcoin, bitcoinmarket, mtgox etc. all use a shared wallet to store deposits, and make withdrawals.  Accounts are kept straight through a separate accounting system.  Thus you cannot be guaranteed that your BTC deposit isn't immediately -- and legitimately -- withdrawn by someone else.  Amusing: http://www.youtube.com/watch?v=IGYAhiMwd5E Someone needs to figure out how to hook into the cash advance system.In theory, if one can withdraw cash or gold from an ATM, using credit card, one should be able to withdraw bitcoins. Doesn't FB force its new app developers to use FB points (their microcurrency)? All bitcoin transactions are public, and therefore, not anonymous.All bitcoin addresses are 100% anonymous...   but evildoers may be able to deduce information by observing transaction patterns or amounts. Correct.  Most mass-consumer payment methods support chargebacks.  But chargeback-able payment methods make it trivial to obtain "hard cash" (bitcoins), and then chargeback the transaction.Thus, the difficulty arises from the vast majority having payment methods that are vulnerable to an obvious method of fraud, when purchasing bitcoins.Some bitcoin'ers are attempting to solve this using a web-of-trust, where trusted individuals may transact with others using chargeback-able methods. The merchants will be the ones with QR-codes listed on products; customers snap a picture with their mobile to add to a shopping cart, or initiate payment. This has been mentioned in past forum threads, and I think there is general agreement that bitcoin payments via mobile phone should be possible. Yes, it is easy to come up with ways to spend money earned by others, then taken from them by force. 180 BTC I bid 150 BTC. The market is providing what choices people want; apparently, large volumes of people want cheap packaged junk food or drive-thru junk food.  Even with "free" food vouchers, via food stamps, the nutritional choices made by the purchaser trend towards unhealthy junk.
We currently do double-sha256, not just sha256. Have you added BTC payment methods yet?I owe biddingpond.com a couple BTC for listings w/ buy now, but the site said something like      "Use one of the following payment methods to pay your account:"     [blank list, end of page] I would prefer something like what is offered in stock trading:  fixed fee commissions, regardless of number of shares traded.For mtgox, an example of such pricing could be 1 BTC/trade or $0.25/trade. Does the "-4way" switch do anything? Yay!  Good stuff.  Exchanges need to be self-sustaining. Yeah, you're right.  My apologies, I thought the difficulty transition was being discussed, rather than the transition to 25 BTC blocks. The transition is based on a wall-clock time span.  It looks at the timestamp in each block.  See GetNextWorkRequired() in main.cpp. See the other biddingpond thread for their downtime announce. Yes, there seems to be agreement that eventually users will have a "lightweight" bitcoin client to use, which can send/receive transactions, manage a wallet, and nothing more.  This is analogous to the distinction between leaf nodes and ultrapeer nodes, on the Gnutella network. Users do shut down bitcoin generation...  after getting excited about mining, turning on generation, and then finding out they did nothing but generate a lot heat due to difficulty level.Mining is a small part, a beneficial side effect, of the overall bitcoin economy, with a very small, usually technically-skilled users excelling at mining and everyone else getting almost nothing.  The most important thing is for users to be able to send and receive bitcoins in a decentralized manner.   That's intentionally selling users a false premise, though, right? The difficulty is now so high that it might take a couple weeks for a beefy multi-core CPU to generate a single block.Therefore, I conclude that the existing CPU-based code in bitcoin is largely pointless, as GPU miners continue to win blocks.  And GPU miners obviously require running a fork of bitcoin, rather than 100% upstream bitcoin.  Therefore, it can be said that the overwhelming majority of today's generated blocks are generated by forked source code and not upstream bitcoin.Here's a radical proposal:Move the current CPU miner code to a separate program, bitcoin-minerd.Listen on TCP port 8334 for incoming connections (w/ applicable IP address whitelist).  When work arrives via P2P network, broadcast new work to all connected miners.  Miners submit potential solutions via this same TCP connection.This "remote mining" scheme with active TCP connections is superior to the polled 'getwork' method in use by some GPU miners.  Incorporating remote mining into upstream will also provide a very strong incentive for GPU miner authors to use upstream bitcoin without modification (a win for open source, IMO).Moving CPU mining out of bitcoin, to a separate process, ends the current practice of teasing users with a "Generate coins?" option that will waste electricity for months on end, without generating any blocks, given the current difficulty level.  That is not a friendly experience for first-time bitcoin.exe users. hmmmm.  That's quite strange, considering the code simply loops over all 'vin' and 'vout', duplicating the code pattern used elsewhere to dump a block to the debug log. I cannot disagree; however...   any "serious" investor is going to have many thousands of USD$ at their disposal, if not millions.  Bitcoin's entire market cap is only $1.2 million.  Thus, the arrival of even a single "serious investor" seems likely to spark a huge price rally. mtgox software appears to be getting an update, including documentation of mtgox's automated trading API: http://mtgox.com/support/tradeAPII wouldn't do a lot of trading at the moment, but that's just me. Of course this is true.However, that is the standard definition of market cap elsewhere:  share price times number of shares.  Obviously, if everybody sold MSFT, their market cap would not be $229 billion.  It's merely a snapshot of "right now" and nothing more. Bitcoin Watch creates an average USD/BTC price by looking at mtgox and bitcoinmarket, then multiplies the result by the number of bitcoins in existence. Selfishly, I'd prefer the non-obfuscated URL http://www.bitcoinwatch.com/ With the right self-directed IRA, you can hold gold (at least, in ETF form). I think that's the rub:  margin trading dramatically increases volatility.
Short selling would be nice. It is wrong to discard useful information about a potential attack.This sort of thing is typically solved by rate-limiting. ... unless you own current-generation AMD/ATI GPU, of course. Many people -- myself included -- think dollar volume should be included alongside share volume, when showing stock market charts.The same logic can easily be applied here. The Bitcoin Store has closed.  It was a fun experiment, but only had four or five customers in its lifetime.Bitcoin Market v2 and mtgox, once mtgox's withdrawal situation is sorted, should be suitable as instant exchange sites.  One only hopes they add market orders in addition to the current limit orders that both support.  (Yes, you can make a limit order effectively a market order, but that's the point of a market order: you shouldn't have to) I was emailing a couple of the sites to someone.  Which meant I had to click on the damn things just to find the URLs that should be been in the original post.  And with URL shrouds, you wind up defeating some of my malware checks (FireFox has a list of known malware sites using Google's API, and URL redirection obviously defeats that).URL redirection is evil, and should be used only when you are absolutely forced to do so (such as 140 char twitter limit). It's terribly inconvenient that you shroud the URLs this way.  Using a URL shortener on a short URL just adds pointless work to your browser, and makes it more annoying to cut-n-paste URLs out of your post. Almost any professional currency or equity trading house has per-trade charges.I think per-trade charges are the most fair, because it compensates the site owner if the site sees heavy activity.  It also discourages DoS'ing a bit. What's wrong with a per-trade charge?1 BTC/trade is nothing... That would be fun:  download money from a website, in the form of a file (bitcoin wallet).Or more likely, some text encoding format of a wallet, similar to exporting a PGP key to an ASCII file. If it's $10k or more, Liberty Reserve may work with you directly.See http://blog.libertyreserve.com/2009/03/liberty-reserve-premium.html Withdrawal... from what account?mtgox noted at the beginning of this thread that PayPal froze his account, possibly up to 180 days.  After reviewing mtgox's posts, I don't see anything that has changed that fundamental situation.And creating a second PP account, just for withdrawals, would not only endanger the first (frozen) PP account, but would inflict additional LR->PP transfer fees on the withdrawer. What would you define as negotiations? Bitcoin Watch is now making available per-trade historical data for mtgox, bitcoinmarket PPUSD, bitcoinmarket LRUSD and bitcoinmarket PGAU.  It's in CSV text format, zipped:     http://www.bitcoinwatch.com/trades.zipRobot authors, please do not poll this more than once a day.  Do not consider this a real-time feed.  You do not need to download the entire history of bitcoin every 5 minutes!  If you need a real-time feed, please connect directly to the marketplace tickers themselves. Comments:Very nice, though this makes using at least one account mandatory?  If yes, I suppose we can create a default 'master' account, just like git creates a 'master' branch by convention.I found it useful to label individual transactions, and will continue to find that useful even when using multiple accounts.  Labels remain useful as an ad hoc tx grouping mechanism (use case A) or an easy way to associate a user-generated (website-generated) unique transaction id with a bitcoin address (use case B) Updated bitcoin-otc order book for current price craziness:     0.145 PP-Euros per BTC Nice!  I stand corrected. Large blocks are a valid DoS attack against bitcoin, presently.  Transaction fees kick in at higher block sizes, but it still remains quite inexpensive to flood the network, even if you are paying full TX fees right up to the 1MB (?) block limit.  I dunno about lucrative, but... Agreed, though I think "average users" will choose easier routes such as mybitcoin.com. Scams are inevitable for the chargeback-capable forms of payment, yes.But your potential audience is far, far larger when you accept chargeback-able forms of payment.  It then becomes a matter of trying to prevent fraud at your store, while also budgeting a percentage for crime.  That's how the Big Boys do it.Just don't do something silly like buybitcoins.com and offer to accept chargeback-able payment in direct exchange for hard currency.
100% agreed, but that is not the only "multiple wallet" (multiple instance) use case.  This account system sounds useful, but it should not be used as a justification for avoiding the addition of "-bindport" feature, to change the default 8333 port. URL: http://www.bloomberg.com/news/2010-10-25/treasury-draws-negative-yield-for-first-time-during-10-billion-tips-sale.html Why try so hard to prevent running multiple instances of bitcoin?It is a valid use case to separate bitcoin processes for separate users using SElinux MAC protection, a protection far stronger than anything that can be coded into a shared user process. Maximum amount $1000.  Send me a PM. The divisibility of bitcoin is contained by 64-bit integer size.Which should be sufficient for a very long time. To help out mtgox, and hopefully move mtgox closer to permitting withdrawals, I am offering to buy some MTGOX-USD using PayPal funds.Terms:1:1 conversion ratetransaction must exceed $100 MTGOX-USD (I don't want to deal with 100 people asking me for $10 each)you pay paypal fees, if anyyou must have a good reputation on IRC or this forumContact me via forum PM or IRC PM, if interested.Update: This offer is now closed. No system is foolproof, but ShadowOfHarbringer's suggestions are good.  That should eliminate 80% of fraud, which is "hit-and-run" scammers with stolen accounts, who must liquidate in a hurry before account owner notices.The remaining frauds areperson with good reputation, who has their account hackedperson with good reputation, who, one day, without warning, "spends" that reputation on a massive fraudThe latter has occurred several times on eBay, where a titanium powerseller (the highest seller ranking) who has been completing sales for happy buyers suddenly switches to "evil mode", where they take customer money but never ship product.I call this the "sleeper cell" fraud.  An intentional, long-term plan is the most difficult to prevent. It's similar to other Shopping Cart Interfaces (SCI's) such as this one from Liberty Reserve or this one from Pecunix.  It requires a basic knowledge of HTML forms, which does not really require any toolkit, be it PHP or Rail or anything else.  I'm disappointed that mybitcoin chose to release software first without any documentation.But if you can understand how LR/Pecunix's SCI works, you can easily use the same techniques with mybitcoin, obtaining the HTML form variables by playing around with mybitcoin's merchant tools -- with the "encrypt" feature disabled.  Reading the PHP source helps, but I found the MBC 'merchant tools' link to be the most helpful resource.Hopefully they will read this thread, and post some documentation  I'm not sure how you managed that   When I attempt GDP payment, I get the error I'm supposed to get:  "GlobalDigitalPay payments are temporarily disabled, while we resolve some bugs in Bitcoin Store software."This happened today, or sometime earlier? Updated price on the bitcoin-otc order book:0.087 PayPal EUR per BTCI'm open to any trades from people well known on the forums or IRC. Agreed, would be nice. It's tough to get higher than a slashdotting... No, you only need one send -- with one change transaction -- to create a problem. Can you purchase facebook points with bitcoins?    Works for me. This gives a bit of info: http://bitcointalk.org/index.php?topic=1414.0Among other things, a key pool means that you are more likely to be able to recover your wallet from an older backup.Previously, this scenariosend some moneylost your walletrestore from older backupmight result in you losing all your bitcoins, even the ones you did not send. Patch updated to latest SVN (v0.3.14). Patch updated to latest SVN (v0.3.14).Yeah, I think this is doable.  Will look into it. Great books.  Check out this presentation by the author, too:http://fora.tv/2008/08/08/Daniel_Suarez_Daemon_Bot-Mediated_Reality I agree, this would be nice.
This has never happened before...  two hours ago, bitcoin shut down without warning.  In debug.log, the last few lines areMy version info... At the bottom of http://www.nanaimo-gold.com/rates.php one sees "Current BTC exchange rate is 0.081155 USD"And a link to "bitcoin data roundup", http://www.nanaimo-gold.com/get_bc_rate.php This issue should now be fixed.  I have turned LRUSD and LREUR payments back on.  Make sure to select LREUR rather than the default LRUSD from the drop-down box, to select Euro payment.Details:In Liberty Reserve's recent October 17th software update, they shrank the merchant memo field length below 52 characters (docs say limit is 100).  Anything above this newly-shortened length caused LR to reject the entire payment.Short version: a new LR bug in the Oct 17 update. I would rather do LR via the website, as that's actively tracked and not experimental.I've opened a ticket with LR. Thanks for pointing this out.Looks like Liberty Reserve's most recent software update introduced some API incompatibilties.  Grumble.    Let me go fix that... My PP account is Premier-Verified.  PM sent. Yes, at https://bitcoinstore.yyz.us/ It's pretty much a straight conversion from what I think a fair USD price is, based on today's USD/EUR exchange rate... As an experiment, I'm selling bitcoins for PPEUR (PayPal euros)...  if any only if you have a good reputation on IRC or the forums here.See the order book for #bitcoin-otc on freenode:     http://bitcoin-otc.com/vieworderbook.phpPayPal permits conversion between currencies, if you don't have PPEUR but you do have other PP currencies. Neat!  A bit disappointing, though,  that one must construct a POST by hand. Really?  where?  You are referring to the ability to withdraw bitcoins to any bitcoin address? I have a normal, non-pre-paid subscription from Sprint, for mobile service.Was unable to receive liqpay SMS's after multiple tries.Maybe it works better for European phones? Everybody wants to buy bitcoins cheaper than people are selling them The price on bitcoinmarket is not far behind mtgox... What sort of tweet volume are you targeting?You could tweet every trade, but I do not think that would be an interesting twitter feed. While doing research for Bitcoin Store, I came across the following adminstrative guidance:     http://www.fincen.gov/statutes_regs/guidance/html/fin-2009-r001.html I think money transfer services involve transmittal of money from Alice to Bob, where Alice knows Bob.When using an exchange like mtgox, you don't know with whom you're trading, so you are not knowingly sending money to Bob. No, they're not fake.You cannot withdraw USD, but that is a temporary situation that mtgox is working to remedy. Neat!  This is a "press hit" we definitely missed, at that time.  Thanks for posting the link. Bitcoin Store was mentioned in Digital Gold Currency Magazine's twitter feed, http://twitter.com/dgcmagazine Most software doesn't require a few hours, post-install, to be useable...Compressed, it's not very much data either.  bzip2 says 25MB:
We really need to improve bitcoin's startup time for the first-time user, notably the block chain download.  Has anyone given this any thought already?I would suggestguarantee that blkNNNN.dat is the same on all platforms (Linux, Windows, 32-bit, 64-bit)publish zip-compressed block chain up to block XXXXX on bitcoin.org, where XXXXX == the largest height of hashes built into bitcoin binarypublish zip-compressed block chain via trackerless torrentcall out to remote BT program to download block chain, falling back to HTTP if not workingAnother option is to add a more efficient network retrieval method, such as a "download-pkg" command, where a "pkg" is defined as a pre-packaged, pre-compressed range of blocks.  a list of block chain ranges packaged could be retrieved via "list-pkgs".  Or generalize this concept further by permitting the bitcoin network protocol to share and download unspecified binary objects based on SHA-1 hash. IMO, MyBitcoin's Shopping Cart Interface (SCI) is quite adequate for payment processing.  It is equal to the level offered by Pecunix, Liberty Reserve, GlobalDigitalPay and Perfect Money. +1 agreedI've been thinking about reselling shared web / VPS / dedicated.I have the corporation...  anybody have suggestions for good providers? I think it's a very good idea.  Huge potential audience. URL: http://www.project-syndicate.org/commentary/roubini30/English The current bitcoin community is quite small, and the bitcoin-related websites tend to be bare bones, produced by geeks for geeks.  The average consumer would have a difficult time obtaining bitcoins, and a difficult time finding useful items on which to spend bitcoins.  At the moment, bitcoins themselves would be considered high risk to novice and experience investors alike.And...   I think things are fine like that, for the moment.bitcoin currency will benefit from a slow maturity.  That gives the technologists time to work through minor flaws in the system (witness the recent security updates).  Gives hackers time to attack the system, to try and make it fail.  Gives cryptanalysts time to study the system.The average consumer, and consumer-friendly websites and bitcoin acquisition methods will come over time... without any need for "strong leadership" of bitcoin.  Let the free market do it's thing. From where do the ratings come? This seems like a valid and convenient use of Paypal.ACH would be a highly useful method of deposit, but that's only in the US, as mtgox noted. Incorrect.  See response at link. That is incorrect.The content in gavin's patch makes my getblock largely redundant -- but they are not incompatible. From an investment standpoint, bitcoins qualify at a high risk investment.They are brand new.  The regulatory regime is unknown or grey in many areas.  It is still quite easy for someone with deep pockets, or a botnet, to control >50% of the network.That said, so far, the experiment seems to be working! That's certainly true for the two VISA debit cards I lost money on...    Nah, this is offshore: http://seasteading.org/ Nevis seems popular these days (MyBitcoin uses it, I notice).But even offshore, for United States citizens, means reporting to the IRSownership interest in a foreign entitytransactions between the United States and a foreign countryand possibly all bookkeeping of the foreign entity to the IRS.This does seem to indicate that United States citizens could legally operate offshore, outside the jurisdiction of the Banking Secrecy Act, PATRIOT Act, etc. with regards to banking and currency exchange, as long as the transactions are reported to the IRS for taxing.However, I Am Not A Lawyer and This Is Not Legal Advice.  ;-) If you go by bitcoinmarket's PPUSD asking price, the buyer paid $36 for a $50 card. Paypal works just fine for normal businesses with on-going customer-business relationships.  An established business does deal with the occasional chargeback, but that's just part of the system.  The law (here in the US) strongly incentivizes sellers to work hard to please the buyer, because chargeback capability is required by law to protect the consumer.  For the most part, the system works as expected.When it comes to cash, however, the system clearly breaks down.  Presumably that's why ATM withdrawals from credit cards carry a higher interest rate, and often, more security protections (PIN requirement, etc.).We need to figure out how to access the "ATM withdrawal" portion of a credit card, at the exchanges.  Yep.  That's why exchanges should register as Money Service Businesses (MSB), if they are making money.  They also need to adopt anti-money laundering (AML) protections.  Unsurprisingly, AML protection means not permitting huge sums of untraceable money to pass through your exchange without some sort of identification of the user.Non-profit exchanges are on a little bit better ground, legally.  But they still need to adopt AML protections, if they want to avoid running afoul of the law.  (or move offshore) The United States' anti-money laundering (AML) efforts are not primarily aimed at uncollected taxes.  It's more about preventing criminals from using crime profits for legitimate purposes.  I would rather not have bitcoins purchased from the Bitcoin Store used to purchase the world's most dangerous WMD, and from there, used to kill people.  I would rather not have the Zetas, known for kidnapping and murdering policemen, politicians and journalists, using bitcoins to fund their organization.The best way for bitcoins to be successful is to ensure the majority of transactions are for purposes that the world's governments consider legitimate.And the quickest way to kill bitcoins in the long run will be to encourage bitcoin use by criminal elements. Hardly.  Never underestimate the motivation of a thief to do this sort of manual labor.  Their pay rate was, what, $600/hr? As an additional measure of security, Paypal offers a facility where the merchant authorizes (places a hold on) funds.  That authorization lasts for up to 3 days.  A merchant can, for example, authorize (hold) for 48 hours, then complete the payment.
Bump.  Five hours left to bid! According to https://buybitcoins.com/ What are the issues?FWIW, one can download mingw32-openssl from fedora, thereby obtaining portable (across Win32) binaries without all the work. Bump.  One day left, current bid 400 BTC. MyBitcoin (and mtgox/BCM/other sites with bitcoin balances) make it possible to use bitcoins without downloading anything. Use this URL precisely:     http://www.bitcoin.org/Using SSL brings up a browser warning, and it's slower anyway. Buying BTC is also the only way to get money out of mtgox.I wouldn't read too much into the rally if/until it's matched by other markets. From http://www.bitcoinwatch.com/ ...Total bitcoins sent in P2P network, past 24h: 210973Total bitcoins traded at mtgox, past 24h: 222710 Seems like a Catch-22, to ask for extra payment because the payment itself may be bogus. +1Many other exchanges outside the bitcoin world, such as ExchangeZone.com, have special procedures for PayPal -> e-currency transfers, due to high rates of PayPal-related fraud.Unfortunately, PayPal enjoys the largest audience.  I'd assume far more legitimate bitcoin purchases have occurred through PayPal, than any other method. dwdollar said "Other exchanges are reporting similar behavior."mtgox noted he was refunding fraudulent PayPal transactions, on IRC. According to the code,    difficulty = minimum_best_target / current_best_targetbitcoin miners' proof of work is searching for a hash whose numeric value is below the current target.These links have some more info:http://www.bitcoin.org/wiki/doku.php?id=difficultyhttp://www.bitcoin.org/wiki/doku.php?id=target mtgox on IRC is seeing problems as well.Let's not spread false, uninformed conclusions about the absence of scammers. As dwdollar noted, the problem is occurring on other exchanges as well. I respectfully disagree, and I think most LRUSD traders would, too. That just means it is a thinly traded, volatile market right now. URL: http://online.wsj.com/article/SB10001424052748704689804575536391713801732.html?mod=WSJ_hp_mostpop_read bitcoin, as a whole, took a great leap forward when MyBitcoin introduced its Shopping Cart Interface (SCI).This brings bitcoin in line with the other major e-currencies/e-commodities, each of which offers the same basic merchant interface:Pecunix: http://info.pecunix.com/pecunix_pri.htmLiberty Reserve: http://www.libertyreserve.com/en/help/merchants/sci/GlobalDigitalPay: https://www.globaldigitalpay.com/merchant_api.htmPerfect Money: http://perfectmoney.com/documents/perfectmoney-sci-2.0.docIf you can understand HTML forms and MD5/SHA signatures, you can implement a payment gateway for any of the above (including bitcoin).Obtaining an industry-standard merchant interface was a big milestone for bitcoin, and we have now reached and surpassed it!  Kudos to the MyBitcoin guys.The main problem for general consumers, in my opinion, is the difficulty of obtaining and storing bitcoins.  Most consumers will not be bitcoin miners, which means they will need easy, idiot-proof ways of obtaining bitcoins.  bitcoinmarket and mtgox are far too complex for the "average consumer" IMO, who just wants to have money, and use money.You shouldn't need a login, nor need to understand the concept of bid/ask prices, in order to obtain bitcoins.  Your average "Aunt Tillie" would be completely confused by mtgox.  If we want bitcoin to succeed, you need to make it as easy as possible for interested parties to obtain bitcoins.https://buybitcoins.com/ is one place that approaches the needed simplicity (though it seems broken at the moment), by only requiring a credit card number. https://freebitcoins.appspot.com/ is another great place for people to get a few bitcoins in an easy way.  And if you already have e-currency, my store is my attempt to ease the process of obtaining bitcoins. It sounds like he's looking for bitcoin futures, a topic in which several have expressed interest. puddinpop's original open sourced client was MIT.But he makes his changes GPL'd, which is disappointing, leading to confusing situations like this.
You should point out that no downloads are required with http://www.mybitcoin.com/ This article on base58 includes a list of valid characters:http://icoloma.blogspot.com/2010/03/create-your-own-bitly-using-base58.html Both BCM and MTGOX cost nothing to use.  MTGOX used to use a spread to make a small amount of money, but that went away, possibly to avoid being mistaken for a money services business. MtGox is easy:  it's all JavaScript, which means the code that handles login, buy, sell, add, withdraw is publicly visible, available for inspection and study.  It uses HTML form values, HTTP cookies and JSON data.  Any web programmer worth his salt knows how to use those. Does anybody know of open source software that performs automated trading?I found http://www.geniustrader.org/ but perhaps there are others. Are you sure you're not logged in, looking at your own auction?AFAICT from my own auction, the bidder names were only revealed when I was logged in, looking at my own auctions. IMO, there needs to be a method besides IRC and compiled-in seed nodes.  A middle ground.Maybe a few volunteers could independently host a DNS zone that returns a fresh list of nodes as 'A' records.  A simple cron job could fetch fresh addresses from the bitcoin client, to update the DNS zone every so often.  A DNS lookup would be far faster than an IRC connection, and if we have enough volunteers, the loss of a DNS server or two would not impact the service. lol, apparently the two CPAs I queried are useful idiots too Sometimes this board can get pretty silly and imaginative, when it comes to naive attempts to dodge the taxman. Auction: http://www.biddingpond.com/item.php?id=81Bidding starts at 1 BTC - no reserve!  (950 BTC buy-it-now price)Item:$50 VISA gift card (aka debit card), activated, unused.Details:This is a VISA card number that may be used for online or real-world purchases all over the world.This VISA gift card was purchased from Wal-Mart in October 2010.  Expires July 2018.  Activated via www.walmartgift.com.You are purchasing online access to this gift card (ie. number, security code, password to walmartgift.com to change registered address).  If you want the card itself, you must add 50 BTC for shipping and handling to a United States address.  For non-US addresses, you must add 160 BTC for shipping, handling and customs.You must register a US address at walmartgift.com in order to use this debit card for shopping online. URL: http://www.ft.com/cms/s/0/304e7430-d0c1-11df-8667-00144feabdc0.html No -- you are making the assumption that a cash-only existence is possible for large criminals.  If that was true, then money laundering would not exist, because it would not be necessary.But it does.  Drug kingpins have so much cash it is quite literally a problem of size.  After paying all their flunkies, and buying illegal guns and such, they are still stuck with bales of FRNs.  That's why the Feds target any place that might accept large amounts of cash for legitimate items -- cars, houses, boats, non-illegal businesses.It is surprisingly difficult to spend large amounts of cash without getting noticed, and that is by design. What evidence shows that Peter Thiel was involved in those decisions?  PT has not been Paypal management for a while. FWIW, I have no clue about how I will get paid for my auction.  The payment process, for buyers and sellers, appears to be completely undocumented.Do buyers directly pay sellers, or is biddingpond.com an intermediary?Using a payment processor at biddingpond.com, or simply using the bitcoin client?Inquiring minds want to know   The 'help' section is basically empty. I wonder if snipers lurk on biddingpond.com, as they do on ebay.8.5 hours to go!   Are wallet.dat files from Windows usable under Linux, and vice versa? I'm referring to both bank notes and electronic transfers.As an example, the US has a large, on-going effort to track banks that accept large amounts of Federal Reserve Notes, interdicting those banks who accept deposits from criminals.  Several banks in Macau were shut down, for example, because they accepted lots of FRNs from North Korea.  You hear similar stories out of Mexico, where drug cartels have stupidly large amounts of FRNs.  The Feds play whack-a-mole with banks who accept large volumes of FRNs from drug kingpins.You're incredibly naive if you think FRN flows are not actively tracked.  The Feds target digitization points -- ie. a location, usually a bank, that accepts paper USD in exchange for electronic USD credit in an account.  Additionally, many standard FRN counting/sorting machines, such as those found in casinos or banks, have the ability to scan the bill's serial number, thus providing another tracking point.  Ever heard of "marked bills?"  You don't need a special ink or marker -- law enforcement only needs to enter a bill's serial number into a Federal Reserve database somewhere.The whole system is set up to marginalize (and de facto criminalize) large cash operations of any sort, legal or illegal.  Death by 1,000 paper cuts.If that's a response to my post...  I was not casting any blame, nor making any judgements.  Just recounting the goal and reality of today's worldwide cash tracking operations. Like it or not, cutting off a criminal's money supply has been proven a highly effective method of targeting and neutralizing individual criminals.  Law enforcement will always want power over money, be it USD or EUR or Pecunix or bitcoin. Bump.  24 hours to go, and the current bid is 525 BTC:That's ~ $32 for a $100 VISA debit card that can be used anywhere VISA is accepted. You mean, like the numbers found on http://www.bitcoinwatch.com/ ? That would certainly be violating the law (the tax code): http://www.irs.gov/taxtopics/tc420.htmlI won't speculate on your chances of being caught...
Where can one exchange LRUSD for USD, with low fees?  I already got burned by http://www.alertexchanger.com/ so I am skeptical of exchangers.It seems to continue to manage some transaction volume, so there is a consistent level of interest over time.  Lower activity than mtgox, certainly. The market for people with BTC, who are looking for LR-USD or Pecunix GAU is very, very thin.Plenty of people wanting to buy bitcoins, but very few people selling BTC.If you want to convert your BTC into cash, now would be a good time to post an 'Ask' on bitcoinmarket!Full disclosure:  yes, I'm one of the people looking to purchase BTC for LRUSD or Pecunix  You just described a whole-network upgrade.  I'd call that an incompatible change The effort to raise the transaction rate limit is the same as the effort to change the fundamental nature of bitcoins:  convince the vast majority to upgrade. It is also an incompatible change, as you see..... You can visit Bitcoin Store or bitcoinmarket to buy bitcoins with LR. IMO it's a marketing thing.  It's tough to get people to buy into a system, if the network is technically incapable of supporting high transaction rates. We should be able to at least match Paypal's average transaction rate...Code:diff --git a/main.h b/main.hindex c5a0127..c92592a 100644--- a/main.h+++ b/main.h@@ -14,7 +14,10 @@ class CBlockIndex; class CWalletTx; class CKeyItem; -static const unsigned int MAX_BLOCK_SIZE = 1000000;+static const unsigned int TX_PER_MINUTE = 1400;+static const unsigned int TX_AVG_SIZE_GUESS = 256;+static const unsigned int MAX_BLOCK_SIZE =+ TX_PER_MINUTE * TX_AVG_SIZE_GUESS * 10 * 2; static const unsigned int MAX_BLOCK_SIZE_GEN = MAX_BLOCK_SIZE/2; static const int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50; static const int64 COIN = 100000000;URL: http://yyz.us/bitcoin/patch.bitcoin-block-sz-limit At the moment, the biggest threat to this project is being technically incapable of surpassing 33% of Paypal's average daily volume (much less VISA's transaction volume, or world total USD volume).How can we sell bitcoin to serious investors, with built-in limitations like the 463 transactions/minute limit? Auction: http://www.biddingpond.com/item.php?id=79Bidding starts at 1 BTC - no reserve!Item:$100 VISA gift card (aka debit card), activated, unused.Details:This is a VISA card number that may be used for online or real-world purchases all over the world.This VISA gift was purchased from Wal-Mart in July 2010.  Expires Nov 2012.  Activated via www.walmartgift.com.You are purchasing online access to this gift card (ie. number, security code, password to walmartgift.com to change registered address).  If you want the card itself, you must add 50 BTC for shipping and handling to a United States address.  For non-US addresses, you must add 160 BTC for shipping, handling and customs.You must register a US address at walmartgift.com in order to use this debit card for shopping online. More like bitcoinexchange is not an open exchange, where buyers are matched with sellers, and all bids, asks, and trades are published for all to see.  That is an open market.I am very happy that bitcoinexchange exists, but I also feel strongly that a much better market is needed for EUR (and Asian) currencies.  As another poster pointed out, bitcoin's largest current constituencies seem to be Americans and Russians, with a healthy dose of Europeans. I would love to...  but as you point out, an open exchange for EUR is needed first. BTW...  how do change transactions work?  what bitcoin address is chosen to receive the change? Well, at a minimum, bitcoin should be able to match Paypal's average volume over a 10-minute span.Otherwise, I don't see how we can convince others that bitcoin is a long term viable [micro]currency, if technical limitations keep bitcoin below 500 transactions/minute.Are there any low-tech ways to boost maximum number of transactions, such as zlib compression of blocks? define "lot"? No, just comparing relative to just about any other global market   The average bitcoin USD-equivalent daily transaction volume (150000 BTC * 0.07 USD, rounding up generously) is less than $10,000/day.  That's all bitcoin transactions, including maintenance transactions such as moving bitcoins from one wallet to another.  Even compared to the smallest pink sheet stock, BTC dollar volume is tiny.That's a drop in the bucket, for anyone who calls themselves an investor I consider the current BTC volume quite low.  Market prices would be easy to manipulate, as its current, tiny, size. It is interesting to see how you've split mining and wallet+P2P into separate pieces.  Nice and modular.I'll be interested to see feedback from people, if they actually generate coins from this. Volatility is only low because volume is low.  Volatility will go through the roof the instant we get any amount of volume. Maybe we can scale the block limit, like we scale the difficulty?Compute average block size over past two weeks, and don't accept blocks over AVG_SIZE*100 ? +1Scaling to high transaction rate has always been my main concern about viability of bitcoin.  I'm much more concerned about scalability than government shutdown, for example. +3 all great stuff.I strongly prefer this new 'getblock' arrangement of yours.  My only question was whether satoshi might not like it.
Does anybody have estimates of total, worldwide USD or EUR transactions in an average 10-minute timespan? Your changes appear to come darned close to superceding my getblock and listtransaction patches.  With a few minor changes, you can completely supercede my patches:add listtransactions or gettransactions, calling your txToJSON, for each wallet tx matching the given query parametersadd the following fields to txToJSON from my patch: bitcoin address, label, category (credit, debit, generated, etc.), amountany reason why you didn't use 'getblockbycount' as elsewhere discussed?  I named mine that based on your own logic  I thought about that before, too, but the rpc interface is internally typed.  Sure, we can specify a string for the parameter, and interpret the string as either a block hash or a block number, but satoshi might grumble at the overloading of parameters?  None of the existing RPC commands have multi-use parameters. My preferred arrangement would be a 'monitorall' command, which POSTs each incoming transaction to a URL, regardless of bitcoinaddress, as long as it's a wallet transaction. The same superconservative folks that dumped tons of money into subprime mortgages?   What is the permanent URL for that article?My search skillz do not turn up anything on this forum or google. As noted in this wiki page and in this satoshi post, the -paytxfee switch may be employed give your sent transactions "priority."Prioritized transactions appear to be defined as increasing the likelihood that a transaction will be included in a block, even if that block is very large (byte-wise or tx-wise).Considering that 99.9% of blocks are outside the range that will incur tx fees, it can be said that tx fees are largely useless today.  But it makes me curious...Are there any other areas of the bitcoin client or network that could somehow prioritize transactions based on tx fees?  Examples:if you have a list of transactions to send out to the network, send prioritized ones to more connected nodesrestart mining work immediately if priority tx arrives, but continue working on existing block for a while, if free tx arrivesAnd with my businessman's cap on, I would think it prudent practice for any bitcoin business to use -paytxfee=0.02 by default, just to be safe, guaranteeing priority on the existing network and existing clients, in cases of extreme network load.Other comments about how to use tx fees welcome...  I strongly believe that a healthy tx fee structure is important to the long term health of the bitcoin P2P network. Well, I would rather split "balance" in two:  confirmed and unconfirmed balances. IMO, this should make it into the upstream bitcoin client, as eithera command line switch, requiring confirmation for all sent coinsa two-pass search:  search first for confirmed coins.  if not enough confirmed coins are available, use unconfirmed coins. Patch updated to latest SVN, and for a change suggested by gavin:sort by time, after sorting by number of confirmations Patch updated for latest SVN. Patch updated to latest SVN, with a few of the suggested gavinchanges:'getblock' renamed to 'getblockbycount's/ver/version/vin_sz and vout_sz removed, redundant They can shut down the major exchanges, such as the ones formerly known as MAE-East and MAE-West, or the one in Tampa. Jabber also presents another interesting opportunity:  anonymous exchanges via Jabber.Someone sets up an exchange at MyExchange@example.com jabber address, and publishes an API.Users send and receive PGP-signed Jabber messages at MyExchange@example.com, instructing the software to buy and sell BTC for Pecunix / Paypal / etc. Today's Financial Times:  Brazil in currency war alert Where is an open market for EUR and JPY? This scheme is also stupid because it will make businesses and individuals more vulnerable to criminals and industrial espionage. Anyone with lots of coins may disrupt the bitcoin economy.However, maintaining high level of bitcoin monetary value is an obvious incentive against dumping a huge number of coins on the market all at once.  Selling 1 million bitcoins at once will fetch much less money than selling 1 million bitcoins slowly, over time.Bitcoin dumping is likely only to occur in (a) panic selling or (b) griefer scenarios. Is there an index that indexes all transaction ids for all blocks?Or should 'gettransaction' only work for wallet transactions? These already exist.  They are called coyotes...
Well I hope we can at least agree that an assassination market would be wrong and to be avoided... Looks like the opportunity is now gone (and for the record, I was neither bidder nor ask'er in any of these transactions; just an interested party) According to Bitcoin Watch, someone's on bitcoinmarket bidding for 5000+ bitcoin @ $0.0639, which is much higher than the bid price at mtgox ($0.0623).If you've got bitcoins to sell, sell on BCM, buy them back on mtgox, and you've made a nearly risk-free profit. Agreed...  payment systems for businesses need to mature as well.  MyBitcoin just got a payment processor / SCI, but it lacks docs, polish, and support for more than one programming language. Learn the lesson of Prosper.com:  in absence of collateral or army of lawyers, people will not pay back loans even if risk is priced at 100% interest. Sounds like they copied key elements of the Pecunix SCI API and the Liberty Reserve SCI API. UK'ers can buy bitcoins with GlobalDigitalPay GBP at The Bitcoin Store.  Get out while you still can!</blatant plug> +1 agreed.  It's a commodity, a digital store of value. For United States citizens, it is highly likely that bitcoin matches the IRS's barter rules, if nothing else:http://www.irs.gov/taxtopics/tc420.html URL: http://www.cnbc.com/id/39271495 At the Bitcoin Store, we consider bitcoins a digital store of value, closest to a commodity.  bitcoin's properties more resemble a commodity IMO, and legally speaking it is less questionable to call it a commodity.In fact, I propose the official description be changed to "a digital P2P cryptocommodity" rather than "cryptocurrency". Total of transactions sent to specified address (or label) areCode:getreceivedbyaddress <bitcoinaddress> [minconf=1]getreceivedbylabel <label> [minconf=1]Individual transactions can be dumped from 'listtransactions' patch, though that lists all addresses including desired bitcoin addresses. Help make sure well over 50% of the businesses using bitcoin are legitimate, tax-paying, regulation-complying business entities  There are no fees on your average transaction.  However, see https://www.bitcoin.org/wiki/doku.php?id=transaction_fee for specific details.Absolutely.  I think bitcoin is definitely a viable microcurrency for facebook and similar apps (such as mobile apps). 1) Transaction fee may be 0.01 BTC.  Also, cost accounting should include your bitcoin client setup, if you are going to hook directly into the bitcoin P2P network.2) Transaction amounts smaller than 0.01 BTC incur a 0.01 BTC transaction fee.Currently, 0.01 BTC is equivalent to 0.0006 US dollars. Enjoy, community!(donations accepted at address in my sig, it certainly wasn't free ) I certainly won't turn down donations...  (see sig) This patch was authored by Gavin A.  I broke it out into patch format, in case some people found that more useful than git.URL: http://yyz.us/bitcoin/patch.bitcoin-testnetworkFor the future, I hope to add a "-testnetwork" switch which will enable network switching without recompilation. Patch updated to latest SVN. Patch updated to latest SVN.
Patch updated for latest SVN.  Given recent upstream changes to support binding to any address (0.0.0.0 or '*'), this patch is reduced to adding an option to bind or connect to a non-standard, not 8332 port:URL: http://yyz.us/bitcoin/patch.bitcoin-bindaddr The same license as the rest of bitcoin.Introducing new licenses into the mix just brings additional headaches. I'll update my patch on top of -rpcallowip soonish...  The JSON-RPC port is still hardcoded as 8332 in vanilla svn  I've offered the whole 10k to puddinpop, in the name of The Bitcoin Store, to open source the client he's distributing here on the forums.He's interested, and we're working out the details now. If there is to be a history, I hope people fill in some of the "standard history stuff" as well as a droll listing of security events.  When did satoshi generate the first bitcoin?  What events (ie. slashdotting) triggered large influxes of new users?  When did the first bitcoin-denominated businesses appear?  etc. Those two patches attempt similar things, and so should be considered mutually incompatible. Presumably he's not going to get 10,000 BTC very rapidly, by shaving off 5 BTC from each gen. I sent a full offer to puddinpop, waiting for his response... tx to IP is not recommended.  Less secure than normal tx. * jgarzik calls puddinpop's bluff   There should be a UTF8 text field "memo" attached to each transaction.encrypt by default, with payee's public keylimit to 256 chars or sooptionally disable encryption (similar to Pecunix feature which makes a single transaction publicly visible) Yes, that is the central thesis behind this forum thread,http://bitcointalk.org/index.php?topic=739.0 A few people have earlier expressed interest in bitcoins futures trading.  Would help stabilize bitcoin exchange rates a bit. Bootstrapping problem:  gotta certify the teachers  I would also count solar, who released MacOS binaries and a partial open source implementation, the SHA256 implementation in OpenCL:http://heliacal.net/~solar/bitcoin/ A QR-code of a wallet isn't going to be very useful to a lot of people.More useful is to make a QR-code represent a database entry at PrintedBitcoins.com.  Then anyone may redeem the QR-code for bitcoins, even if they do not have a bitcoin client. The digital-cert-for-education idea is fantastic.Application of bitcoins is secondary to that primary idea, IMO. It depends on the source.It depends on the source.Question invalid due to previous answers.Anyone who says "why would you be against GPL? it makes no sense" is a zealot.  Each licensing option has its own time and place. Theoretically yes.  Practically?  No.Given all the variables -- compiler, compiler platform, compiler version, compiler options, linked library versions of all our dependent libraries -- this is quite difficult. Binaries may contain suspect code regardless of the license.  Yet 999 out of 1000 users prefer binaries, because they are not programmers and would have no clue what to do with source code in their hands.The source (ie. download origin, and PGP signer) of the software is always far more paramount, if you are worrying about bitcoin theft and other abuse.BSD OS's handle tons of financial transactions.  Wall Street loves Linux, but it's got plenty of BSD in there too.
Another thing that would help bitcoin adoption:python, perl, php libraries and common code for interfacing with bitcoin.For example, Perl or Python code that verifies that "17NdbrSGoUotzeGCcMMCqnFkEvLymoou9j" is a valid bitcoin address, and "098123409813lkjasdflkjasdflk" is not, would be useful to anyone wishing to implement a bitcoin web interface. That's one obvious consequence of MIT licensing, and has been going on for decades.  I doubt it is a surprise to satoshi, or anyone else.Either MIT or GPL, both licenses are fine.  MIT has been working great for *BSD and X11; there's no reason why MIT would be problematic for bitcoin.  GPLv3 adds some helpful patent language, that's about it.  Bitcoin's patent problems are in the area of linked libraries (openssl's EC-DSA), not with bitcoin itself, so that does not seem like a large concern here.Speaking only for myself, as a programmer who has created or worked on dozens of GPL'd projects, including some of the largest in the world (kernel, gcc). What is your intended goal?If it is to prevent two bitcoin clients from actively using the same database, you'll need to employ application-level protection.  Crude methods of this include a lockfile or "lock" database entry.If the intention is to prevent all other access, I'd suggest giving up on that goal   It is highly useful to permit db4 tools to access db4 databases:Code:db46_archive     db46_deadlock    db46_load        db46_statdb46_checkpoint  db46_dump        db46_printlog    db46_upgradedb46_codegen     db46_hotbackup   db46_recover     db46_verifyand just as useful to permit read-only accesses by tools such as gavin's bitcointools. Great, thanks!  Removing DB_PRIVATE should enable useful tools like gavin's bitcointools. Some things I think bitcoin needs for success:Payment processor, well supported, with sandbox, and a shopping cart interface similar to this or this or this.  mtgox and gazoakley (bitcoinpay.com) both have some merchant tools, but they need to be "fleshed out."More businesses accepting bitcoins.  (see payment processor, above)  If you cannot convince a business to accept bitcoins, start one of your own!  We need legitimate, trusted businesses that cater clients other than wholly-anonymous ones.Exchange with major currencies (USD mostly there; EUR barely there; needs more asian currencies)More generating nodes.  Too easy for someone with US$100,000 to own the entire network.  We should encourage generation for the sake of network health, not money.  It's not worth it to simply make money generating coins.Note that this list does not include casinos, prediction markets, HYIPs, etc.Most people use cash because it's widely accepted by businesses and individuals, not because cash is [mostly] anonymous. QR-code should decode to something like      bitcoin://17NdbrSGoUotzeGCcMMCqnFkEvLymoou9jbecause there are plenty of non-bitcoin QR-code users out there too. Really, dwdollar gets credit for writing the server.  I wrote a prototype in Perl, and dwdollar rewrote it in Python. +1 agreed.  It's not difficult or time-consuming for each user to do this at startup. Does this patch work for you guys?     http://yyz.us/bitcoin/patch.bitcoin-bindaddrThe patch adds four command line parameters,     -bindaddr=W.X.Y.Z      Bind to address W.X.Y.Z, instead of 127.0.0.1.  Supports bind-any modes via "*" and "0.0.0.0" addresses.     -bindport=X         Bind to port X, instead of 8332     -rpcaddr=W.X.Y.Z       Connect to address W.X.Y.Z, instead of 127.0.0.1     -rpcport=X           Connect to port X, instead of 8332Because of the way bitcoin works, all command line parameters may be specifed in the config file.  Therefore, the above would be added to the config file like this,Code:bindaddr=W.X.Y.Zbindport=Xrpcaddr=W.X.Y.Zrpcport=X Probability just means it is unlikely to generate a block.  But it remains possible that the machine will hit the jackpot and generate 100 blocks in a row. Won't older clients will reject non-standard transactions, even if newer [future] clients are updated to generate them? It entirely depends on your provider's Terms of Service and Acceptable Use Policy.  Some providers, especially "cloud" providers, are happy to let you use as much CPU as your VPS permits.  Other providers will terminate your account if it consistently uses 100% CPU. Patch updated for SVN r147, which introduces trivial breakage w/ listtransactions.  (see start of thread for URL) To accurately reflect that processing a transaction has certain resource costs across the network, I propose that tx fee be required for every transaction after X datetime (where X is a few months in the future). Bitcoin Store now supports GlobalDigitalPay's three currencies, GDP-USD, GDP-EUR, and GDP-GBP, as payment methods.GBP is a first for bitcoin, I think. Stealing your BTC isn't the only thing a closed-source client might do.  Make sure you don't have any personal information stored on the computer running the client, no bank account numbers etc.And monitor the network communication to make sure it only communicates with other bitcoin P2P clients, and not other botnets as well.  It would be too easy to hide a key-generation botnet client inside something appearing to be a bitcoin client. Thanks to all our customers, for making the launch a success.  We've sold over 20k BTC since opening! Ordered bitcoins received just now, inside the promised 24 hour deadline. I am (finally) out of Pecunix.Thanks to all who responded! Sounds good, though I think anonymous SSL + passwords + IP security will be sufficient for most.
I would rather it not be archived. Placed an order...  let's see how it goes.  Not a lot of confidence so far, as it does not return a transaction number for credit card purchase.  It went so fast -- which might be good -- it made me wonder if my credit card was really charged. Bump.  Still looking to purchase BTC, in any amounts >= 100 BTC, for Pecunix GAU.Email bitcoinstore@gmail.com if you have BTC to sell.  PGP public key https://bitcoinstore.yyz.us/public-key.txtThanks! Have Pecunix, want to buy at least 6000 BTC.  Willing to pay 0.0015 GAU per bitcoin.Send PM if interested.  Thanks. Purchases are now limited to 10,000 BTC per day per IP (ie. per person), in an attempt to pro-actively comply with US regulations.We want to help establish bitcoin as a viable digital commodity, a store of value, by making it easy for others to obtain bitcoins.We do not want to enable law-breakers or money launderers etc. Rates are now posted via RSS 2.0 at http://bitcoinstore.yyz.us/rates-rss.xml SSL is easy in C.  C++, satoshi-style, is another matter   boost has some stuff: http://live.boost.org/doc/libs/1_37_0/doc/html/boost_asio/overview/ssl.html For Some Value Of vulnerable.    The password cannot be obtained, at least.  MiTM can (a) tell the client to use another auth, and (b) impersonate a server.  (a) can be mitigated by requiring RFC 2617, (b) by SSL.But, use of HTTP-Basic is just a crime, because it is so trivial to obtain the shared secret.  If HTTP-Basic is to be kept, at least require SSL connections? Patch updated for current SVN, r146, aka the "break patches with a CR/LF policy change" revision.Same patch URL (see top of this thread), no change in implementation or operation. Patch updated for current SVN, r146, aka the "break patches with a CR/LF policy change" revision.Same patch URL (see top of this thread), no change in implementation or operation. I was thinking about adding support for Digest auth... BCS had contacted support on an unrelated issue -- Google Base was having trouble "claiming" our store's URL -- and while handling that support issue, Google says they noticed a policy violation, and disabled BCS's Google Checkout account. Would an admin kindly remove "Google Checkout" from the list of our accepted payment methods, on http://www.bitcoin.org/tradeThanks for the mention! Google Checkout support has been removed.  Apparently they don't like digital currency. Updated and simplified the Google Checkout experience a bit.I wonder if there is a payment processor that accepts only debit cards?  The chargeback issue is largely one of credit cards, if I understand correctly. The Bitcoin Store (http://bitcoinstore.yyz.us/) accepts multiple currencies in payment, and gives out bitcoins. Correct, it's a patch.See http://bitcointalk.org/index.php?topic=611.0 Handling chargebacks is required by law in the US, which indeed leads to an unavoidable situation.  Their terms regarding transaction disputes and resolutions certainly makes for interesting reading... True but it does charge transfer fees, which we currently absorb.At the moment?  There isn't a set number, it's largely a finger-in-the-air experiment for each currency.  Looking at non-bitcoin exchanges, for example, Liberty Reserve-USD seems to be slightly undervalued compared to PayPal-USD, so I try to compensate for that.  Each payment method has its own transfer fees, though I could look into giving people the option of paying that themselves, and reducing the price.
Just added LR Euros (LR-EUR), in case anybody prefers that. For your average person, who just wishes to buy something with bitcoins, dealing with the markets seems like an unnecessary burden.  Therefore, I put together a site for beta-testing which permits direct bitcoin purchases, at spot price + a markup:     The Bitcoin Store - https://bitcoinstore.yyz.us/It accepts Pecunix, Liberty Reserve-EUR and Liberty Reserve-USD payments, and sends bitcoins to a Bitcoin Address specified via email.  Transaction fees for payments are included in our markup.This is an experiment.  We'll see.  If fraud or chargebacks become a problem, the site will cease operation.Comments welcome. "Crazy trading strategy" was my guess.mtgox and BCM are both thinly traded markets, by any conventional definition;  we just don't have that much money moving through bitcoins at present.So any "real world" investor easily has enough cash to spike the market -- in either direction -- over a short time period. Please consider making the info available in manner easy for other computers to parse (JSON, XML, CSV, ...) I would like to see LR-EUR and LR-GAU in addition to LR-USD... Great, thanks!! Full block dump, in case anyone's curious: http://blk.bitcoinwatch.com/b?h=72785 No, neither support PayPal-EUR.I can ask them to add PayPal-EUR, if you don't mind? It's quite possible.  -mtune=XXXX may be preferred, because -march=XXXX means the compiler expects the binary will only be run on amdfam10. Good stuff.  For those who haven't been following other threads, I think it's important to note that the alerts are only accepted if signed by a specific key (held by satoshi).  Alerts cannot be generated by average nodes. It's basically an easy interface for buying multiple tickets for the same lotto number.  Maybe this already exists, under another name?If I want to buy for ticket "fff", I can do     1) buy 1 ticket for 1 BTC, number "fff"     2) buy 1 ticket for 1 BTC, number "fff"     3) buy 1 ticket for 1 BTC, number "fff"     4) buy 1 ticket for 1 BTC, number "fff"     5) buy 1 ticket for 1 BTC, number "fff"or we could simplify that to     1) buy 5 tickets for 5 BTC, number "fff"and if you permit that, why not also permit fractional tickets, e.g.     1) buy 5.5 tickets for 5.5 BTC, number "fff"Calculating winnings for each person is a simple algebra problem, at that point. +1+1+1I would prefer that a ticket for number NNNN cost at least one BTC, but any number above that will buy MMMM tickets for the given number.Example:  I pay 1.23 BTC for ticket number fff.  Or 12.99 BTC for ticket number aaa.This is equivalent to buying 1.23 fff tickets, or 12.99 aaa tickets.I say every block  This sub-page of Bitcoin Watch shows the last 7 days worth of blocks, each block linking to expanded data:http://blk.bitcoinwatch.com/ It's there, not sure why you're not seeing it...  Type 'help' to list all JSON RPC calls:Code:getaddressesbylabel <label>getbalancegetblock heightgetblockcountgetblocknumbergetconnectioncountgetdifficultygetgenerategethashespersecgetinfogetlabel <bitcoinaddress>getnewaddress [label]getreceivedbyaddress <bitcoinaddress> [minconf=1]getreceivedbylabel <label> [minconf=1]help [command]listreceivedbyaddress [minconf=1] [includeempty=false]listreceivedbylabel [minconf=1] [includeempty=false]listtransactions [count=10] [minconf=1] [includegenerated=true]sendtoaddress <bitcoinaddress> <amount> [comment] [comment-to]setgenerate <generate> [genproclimit]setlabel <bitcoinaddress> <label>stop Correct.  And a mobile phone's camera works great as a "scanner." This patch (not in official SVN repo or official bitcoin client) will list transactions in your wallet:http://bitcointalk.org/index.php?topic=611.0 The Windows version of mmap was mentioned in the message to which you replied:  CreateFileMappingIn my earlier message, I mentioned how to use this from boost:  Boost::Iostreams already has a mapped_file Source. I think you misunderstand what mmap does?  mmap / CreateFileMapping does not read a file into heap memory:  http://en.wikipedia.org/wiki/Mmap Another possible lotto variant is a pick-3 or pick-4 or whatever, where you require 100% match, but have a drawing for each bitcoin block.  Jackpot keeps growing, and all tickets remain valid, until a winner emerges.Somewhat like "sudden death overtime" in sport, where you keep playing until someone scores. I guess my explanation was a bit poor, sorry.  The reloadable cards trigger KYC because of the greater ease with which money laundering may occur.  Try to buy 100 US$50 gift cards and you will trigger the same thing.
It has absolutely nothing to do with taxes.  It is anti-money-laundering:  http://ethics.walmartstores.com/IntegrityInTheCommunity/AntiMoneyLaundering.aspxKYC rules are intended largely for law enforcement, especially as it relates to anti-money laundering, the drug war, the war on terror.  The IRS typically passes most CTRs on to other agencies. It has been functional since day one Not AFAIK. mmap(2) + memcpy(3) ?  Boost::Iostreams already has a mapped_file Source.Sounds quite useful! DB_PRIVATE enables a few optimizations by making the assumption that only one process will access the db4 database.  Notably, this flag enables db4 to use pthreads-style mutex locking rather than heavy, operating-system-provided flock and shared memory.  Ref: DB_ENV->open documentation.The general motivation is that db4 databases can be safely accessed in parallel with bitcoin client, assuming (a) DB_PRIVATE is removed and (b) bitcoin properly uses db4 transactions.  db4 transactions may even be employed to wrap around non-db4 data such as blk0001.dat, if the code is properly architected. As part of Bitcoin Watch, a new feature provides a developer-friendly dump of a bitcoin block at the specified height.GET parameters:"h" - height of block to download"json" - set to non-zero value, to enable application/json output rather than HTML outputExamples:Dump block 72000: http://blk.bitcoinwatch.com/b?h=72000Dump block 72000, with JSON: http://blk.bitcoinwatch.com/b?h=72000&json=1 PGP keyservers already exist, and you can associate any identity or alias or name with a PGP public key.  Most of the infrastructure to do this already exists, and has for decades.  People PGP-sign posts to the global peer-to-peer network known as Usenet news, for example, so that you may electronically verify a poster's identity. Does bitcoinexchange post bids / asks / trades like the other markets?bitcoinexchange seems sorely lacking, compared to mtgox or BCM.There needs to be a better place to buy/sell euros! Presumably, money laundering would be defined here as "transactions that nation-states don't like".  In practice this means transactions associated with individuals that a powerful nation-state has designated as criminals -- terrorists and drug lords being the current target that the US and other nations put effort into tracking and catching. Wal-Mart, here in the United States, sells VISA debit cards for cash without requiring any form of id.  So, that sort of thing is already occurring today. QR-codes were used in this source-code-provided example, bitcoin electronic check standard Wallet backups and other DB examination are easily possible in a safe, atomic, transactional fashion...   if and only if DB_PRIVATE flag is removed.Code:--- a/db.cpp+++ b/db.cpp@@ -77,7 +77,6 @@ CDB::CDB(const char* pszFile, const char* pszMode) : pdb(NULL)                              DB_INIT_MPOOL |                              DB_INIT_TXN   |                              DB_THREAD     |-                             DB_PRIVATE    |                              DB_RECOVER,                              S_IRUSR | S_IWUSR);What, if any, problems arise from doing this?  Obviously, this does not cover the non-db4 databases such as the block data file. +1It will hinge on being able to execute contracts.  If people make promises they don't keep... That's a huge leap and a poor analogy.  Being first mover in a market often means nothing more than providing seed ideas for a more powerful player. The risk of a vastly superior design would be unlikely to collapse bitcoin, because stakeholders still likely consider their bitcoins to have value -- and that's the fundamental underpinnings of any currency including bitcoin, shared idea of value.It is more likely that a sudden bitcoin collapse could be triggered by a software flaw that permits trivial minting / generating / copying of bitcoins. A remote warning message seems reasonable.But a remote kill switch for automated websites? libgthread-2.0 comes from glib2. At least to me, it's less anonymous because it encourages repeated use of the same login token.  In the real world, we can just walk to the nearest convenience store, hand cash to a clerk, and walk away with a lotto ticket.Lotto tickets can be given to others, etc. Visit the per-ticket, randomly generated link. IMO, login should not be required.At a bare minimum, ticker buyers should only need to provide a bitcoin return address.  You provide them with a unique bitcoin address for deposits.Assign each ticket a randomly generated URL for people who wish to track status of a ticket. Your link does not substantiate your argument that "IRS is not ok with Linden dollars and the rest".It should surprise no one that the IRS wants to tax income generated by US citizens.It should surprise no one that it is likely illegal to not report bitcoin income to the IRS.And none of this changes bitcoin's viability in any way.  The IRS just wants you to report income, regardless of currency, or even if there is no currency involved at all.[edited to add barter link]Again, your link does not substantiate your arguments.  That guy was a nutter trying to sue the US mint.OpenCoin has a nice legal report on the currency that's worth reading.
Why not?  The currency is public and traceable, and no one seems to have objections to Microsoft Points, FarmVille credits, Linden$, etc.How, exactly, do you ensure compliance with tax laws when people are spending US paper dollars (cash)?(rhetorical question...) This was the US govt's thinking on the subject, as recent as June 2008:     Money Laundering in Digital Currencies     US National Drug Intelligence Center (NDIC)For the record, I think bitcoin is less likely to be used for money laundering due to its small size (US$225k market value), its public transaction record, and the special nature of each coinbase. Visit http://mtgox.com/code/ticker.php for the ticker, or http://www.mtgox.com/code/data/getTrades.php for the last 24hrs worth of trades.Or you can pull exchange rate info from the data links at the bottom of the page on http://www.bitcoinwatch.com/ That's why crypto-signed updates have existed in software systems for over a decade.  You don't need to trust the server, if you have a public key stored locally.  Fedora, Ubuntu, Debian etc. sign all their binary software packages with GPG, as an example.Eventually bitcoin will catch up with the times   Even without auto-updates, this is a serious vulnerability with the packages on bitcoin.org.  Posting SHA1 sums is useless without a cryptographic signature of some sort. +1, updating from existing clients would be a useful feature. I think charging per-trade would be reasonable.  Most other markets have some sort of per-transaction charge. Technically, they are debit cards not credit cards.In any case -- thanks for offering this service to the bitcoin community!I think it would be great to see* $25, $50 and $100 gift card denominations* ability to have clients pay bitcoins, to reload an existing Wal-Mart MoneyCard (reloadable VISA debit card) I wonder if Mt. Gox will switch to debit cards only, with the presumably lower chance of reversal. Seems like an incorrect execution string. You get transaction fees. c.f. the copyright FAQ already posted.  The default is "cannot copy without permission" even if a copyright notice or other legalese is absent. The terms are specified by the law.  You cannot copy without permission.  A license is one way an author gives permission:  it lists rights and disclaimers the copyright owner feels is relevant.  The MIT/X11 license specifies your rights to bitcoin source, as set out by the author (satoshi).What you appear to call trolling is what the rest of the world considers standard practice.  You cannot just copy CNN's web page, either. It is the standard "license" afforded by the law and the Berne Convention, attached to all copyrighted works -- one must obtain permission from the author before copying.  And I have not given permission.Mainly, I have not given permission because it is woefully incomplete, I have some plans for that doc, and it was not only illegal but disrespectful to copy it without asking first.  Still waiting for a simple acknowledgement that it was wrong, which would make me a lot more amenable to a creative commons license.But as long as the community blatantly endorses illegal theft of copyrighted works, the motivation to cooperate is rather low.There is no need to alter the protocol, that's silly.  I have never claimed that my copyright covers the protocol itself (because I don't want to, and more importantly, I legally cannot).It is the specific English description of how things work that is copyrighted, not the protocol itself.  If someone comes up with a bitcoin protocol description, without starting from my doc, that is 100% legal in all countries as far as I'm aware.Anyone who writes their own protocol doc gets their own copyright, may assign their own open source license to the work, etc.  It is highly unlikely that a from-scratch effort would result in the same word-for-word data, the same arrangement and order of document sections, etc. source code patches != documentation Does bitcoin perform any self-tests at startup, to verify that hashing is working? Or gplhost's DTC, thus enabling bitcoin billing by shared hosting / VPS hosting / dedicated server hosting businesses. Update forCode:cpu family : 6model  : 26model name : Genuine Intel(R) CPU             000  @ 3.20GHzstepping : 4Machine has 4 cores, each with 2 hyperthreads.  /proc/cpuinfo shows 8 virtual processors.without -4way, setgen 4:    5.7 Mhash/secwithout -4way, setgen 8:    5.0 Mhash/secwith -4way, setgen 4:   7.0 Mhash/secwith -4way, setgen 8:   9.3 Mhash/secSo, the old wisdom of "hyperthreading slows things down" is now shattered, on this machine. My -4way results:  slower for two older boxes, faster for newer one.("model name" comes from Linux's /proc/cpuinfo, which reports directly from CPU)1) model name   : Intel(R) Pentium(R) D CPU 3.00GHztotal cores: 2without -4way:    0.999 Mhash/secwith -4way: 0.850 Mhash/sec2) model name   : Dual Core AMD Opteron(tm) Processor 280total cores: 4without -4way:   4.6 Mhash/secwith -4way:    4.0 Mhash/sec3) model name   : Genuine Intel(R) CPU             000  @ 3.20GHztotal cores: 4without -4way:   5.7 Mhash/secwith -4way:    7.0 Mhash/sec Anybody wanna volunteer to create blk*.dat for block chain <= 64637 ?Maybe the official binaries could simply ship a known-good block chain, to save time and bandwidth? It means replacing files in the bitcoin data directory.  It is not recommended, unless you know what you're doing.Easiest and safest way is to backup wallet.dat then redownload everything.
Or the same patch from your github, http://gist.github.com/525921 which gives us the raw patch that can be applied directly,http://gist.github.com/raw/525921/fe2ad7583f0dd2444caa0b3e24d750bf45cac11b/Quick%20fix%20block%2074652EDIT:  I was unable to patch directly using this, perhaps CRLF problems.I applied your changes manually, and uploaded the result here: http://yyz.us/bitcoin/patch.bitcoin-gavin-overflow-quick-fix The "value out" in this block #74638 is quite strange:Code:{    "hash" : "0000000000790ab3f22ec756ad43b6ab569abf0bddeb97c67a6f7b1470a7ec1c",    "ver" : 1,    "prev_block" : "0000000000606865e679308edf079991764d88e8122ca9250aef5386962b6e84",    "mrkl_root" : "618eba14419e13c8d08d38c346da7cd1c7c66fd8831421056ae56d8d80b6ec5e",    "time" : 1281891957,    "bits" : 469794830,    "nonce" : 28192719,    "n_tx" : 2,    "tx" : [        {            "hash" : "012cd8f8910355da9dd214627a31acfeb61ac66e13560255bfd87d3e9c50e1ca",            "ver" : 1,            "vin_sz" : 1,            "vout_sz" : 1,            "lock_time" : 0,            "in" : [                {                    "prev_out" : {                        "hash" : "0000000000000000000000000000000000000000000000000000000000000000",                        "n" : 4294967295                    },                    "coinbase" : "040e80001c028f00"                }            ],            "out" : [                {                    "value" : 50.51000000,                    "scriptPubKey" : "0x4F4BA55D1580F8C3A8A2C78E8B7963837C7EA2BD8654B9D96C51994E6FCF6E65E1CF9A844B044EEA125F26C26DBB1B207E4C3F2A098989DA9BA5BA455E830F7504 OP_CHECKSIG"                }            ]        },        {            "hash" : "1d5e512a9723cbef373b970eb52f1e9598ad67e7408077a82fdac194b65333c9",            "ver" : 1,            "vin_sz" : 1,            "vout_sz" : 2,            "lock_time" : 0,            "in" : [                {                    "prev_out" : {                        "hash" : "237fe8348fc77ace11049931058abb034c99698c7fe99b1cc022b1365a705d39",                        "n" : 0                    },                    "scriptSig" : "0xA87C02384E1F184B79C6ACF070BEA45D5B6A4739DBFF776A5D8CE11B23532DD05A20029387F6E4E77360692BB624EEC1664A21A42AA8FC16AEB9BD807A4698D0CA8CDB0021024530 0x965D33950A28B84C9C19AB64BAE9410875C537F0EB29D1D21A60DA7BAD2706FBADA7DF5E84F645063715B7D0472ABB9EBFDE5CE7D9A74C7F207929EDAE975D6B04"                }            ],            "out" : [                {                    "value" : 92233720368.54277039,                    "scriptPubKey" : "OP_DUP OP_HASH160 0xB7A73EB128D7EA3D388DB12418302A1CBAD5E890 OP_EQUALVERIFY OP_CHECKSIG"                },                {                    "value" : 92233720368.54277039,                    "scriptPubKey" : "OP_DUP OP_HASH160 0x151275508C66F89DEC2C5F43B6F9CBE0B5C4722C OP_EQUALVERIFY OP_CHECKSIG"                }            ]        }    ],    "mrkl_tree" : [        "012cd8f8910355da9dd214627a31acfeb61ac66e13560255bfd87d3e9c50e1ca",        "1d5e512a9723cbef373b970eb52f1e9598ad67e7408077a82fdac194b65333c9",        "618eba14419e13c8d08d38c346da7cd1c7c66fd8831421056ae56d8d80b6ec5e"    ]}92233720368.54277039 BTC?  Is that UINT64_MAX, I wonder? All of the code I've released is under the same license as bitcoin itself.  Copy away, it's open source I'm undecided about the documentation, but RHorning is way out there:  it's ridiculous to think anyone will "take over" the protocol by writing a document and keeping it on their own website.As long as Satoshi distributes the code, he "owns" the network protocol, and I hope it stays that way! Don't wanna take credit where it's not due the hashes/sec patch was from lachesis, and the extended-help might have been based on my idea, but the code was somewhat different. http://www.copyright.gov/help/faq/faq-general.html#myworkWhen is my work protected?Your work is under copyright protection the moment it is created and fixed in a tangible form that it is perceptible either directly or with the aid of a machine or device.This applies to all Berne Convention countries, not just the US.I guess it's my own damn fault for assuming that others would follow international legal norms as basic as "the author owns his work." How is taking credit for my work intended to be helpful?It is highly demotivating to bother with it when others repost my work under their own names. This is standard copyright stuff, as practiced in major open source projects.  Stop by Debian-legal or Fedora-legal for a while.But copyright is a sideshow.  I put my time and effort into this, and it certainly discourages further work when people have so little care for the work of others. Posted version 11 of listtransactoins at a new URL,http://yyz.us/bitcoin/patch.bitcoin-listtransactionsThis update renames output fields to 'txid' and 'txtime'. Specifications have separate copyrights from actual implementation, which is how many clones and compatible implementations of closed source systems have been created over the years, precisely because they are not derivative works.But, even ignoring my copyright, is this community really endorsing the word-for-word taking of someone else's hard work, without attribution or permission? I think it was implied to be     return "<" + wtx.GetHash().ToString() + ">";? Please do not copy my works without permission. I needed this for some work I was doing, so I figured I would make it public:http://yyz.us/bitcoin/network.htmlThis doc lists each type of network message, gives it a rough description, and lists typical inputs and outputs.  Very rough, but better than the other docs out there ('version' message is highly documented! ). Do you need 'gettransaction', given the existence of 'getblock'? Added, as the "tx_time" field in listtransactions version 10.Same patch URL, as always:  http://gtf.org/garzik/bitcoin/patch.bitcoin-listtransactionsSample output, with transactions from a local miner & test box:Code:[    {        "address" : "15SXfhMc82xC5pPx9qZhPA6bDrkbgBWBJy",        "label" : "",        "txn_id" : "716d636922c0fe4fa438914bfbccbdd3f440f68718438a5f14a62a954cd3ef49",        "tx_time" : 1281424940,        "category" : "credit",        "amount" : 0.05000000,        "confirmations" : 795    },    {        "address" : "1GudGhcqpDCwrJktYvktPHYCnDe6MHtBSr",        "label" : "",        "txn_id" : "2900f86ade72c8a312cac92f759c7d1efcd30253f32a76323b63d6278ce6da97",        "tx_time" : 1281139947,        "category" : "debit",        "amount" : 50.00000000,        "confirmations" : 1387    },    {        "address" : "1111111111111111111114oLvT2",        "label" : "",        "txn_id" : "d9aae437e71347dcfafd52a514a4b67db83044ae95384611fb127e805a51b9e7",        "tx_time" : 1281068407,        "category" : "generated",        "amount" : 50.00000000,        "confirmations" : 1507    }] What happens when we desire to return additional information, beyond tx-id?For the sake of future compatibility, it seems like the flag should present a choice between returning (a) just the current 'sent', or (b) a JSON map containing tx-id, and perhaps other things. This patch has been obsoleted by upstream SVN, and has now been removed from http://gtf.org/garzik/bitcoin/ This patch has been obsoleted by upstream SVN, and has been removed from http://gtf.org/garzik/bitcoin/ Patch updated for current SVN, r130.  No change in implementation or operation.Same patch URL:  http://gtf.org/garzik/bitcoin/patch.bitcoin-listtransactions Patch updated for current SVN, r130.  Same patch URL, no change in implementation or operation. 100% agreed with your suggestion, about the need for txn_id association.However, it seems better to avoid API breakage, because this API is so heavily used.  It is almost guaranteed that anyone automating bitcoins is using sendtoaddress.Either create a "send2" RPC call, or add an "[extended-JSON=0]" parameter to the existing sendtoaddress RPC call, or something similar that preserves existing application data flows.
They don't sell licenses for openssl, they just avoid it, based on multiple independent legal advisors.We should take the hint... In order to encourage businesses to build on top of bitcoin, I would hope the community think it fair if you ask mybitcoin.com folks their opinion, before publishing something with a highly similar name.IMO, Community Building 101.It is hard to sell entrepreneurs on working with a community that develops a tradition of trampling on brands.  So, -paytxfee sets nTransactionFee.Can someone explain how nTransactionFee causes a client to behave?And more specifically, what happens when node A sets 1000.0 and all other nodes use 0.01? We could convince satoshi to always post SHA1 signatures of uploads inside a PGP-signed blocks...  establish a chain of trust for both source code and official binaries. You may dislike autotools, but they are supported by every packaging system out there.  Fedora, Debian, Slackware, etc. all have macros and other tools to help with packaging autotool packages. One of the salient points of the paper is that you can provide a bounty swarm using a prediction market.  One of the key attributes of a prediction market is permitting insider trading, to add knowledge to the market. There is already a tty interface: the command line client. One method of funding is using prediction markets to further the scientific and useful arts:Prediction Markets For Promoting The Progress of Science and The Useful ArtsTom W. Bell, 2006http://www.tomwbell.com/writings/PredEx.pdf Building r127 here, we see some missing casts, apparently:Code:rpc.cpp: In function json_spirit::Value gethashespersec(const json_spirit::Array&, bool):rpc.cpp:340: error: conversion from int64 to json_spirit::Value is ambiguousjson/json_spirit_value.h:283: note: candidates are: json_spirit::Value_impl<Config>::Value_impl(double) [with Config = json_spirit::Config_vector<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]json/json_spirit_value.h:275: note:                 json_spirit::Value_impl<Config>::Value_impl(uint64_t) [with Config = json_spirit::Config_vector<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]json/json_spirit_value.h:267: note:                 json_spirit::Value_impl<Config>::Value_impl(int64_t) [with Config = json_spirit::Config_vector<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]json/json_spirit_value.h:259: note:                 json_spirit::Value_impl<Config>::Value_impl(int) [with Config = json_spirit::Config_vector<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]json/json_spirit_value.h:251: note:                 json_spirit::Value_impl<Config>::Value_impl(bool) [with Config = json_spirit::Config_vector<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]json/json_spirit_value.h:219: note:                 json_spirit::Value_impl<Config>::Value_impl(typename Config::String_type::const_pointer) [with Config = json_spirit::Config_vector<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]rpc.cpp:341: error: conversion from int64 to json_spirit::Value is ambiguousjson/json_spirit_value.h:283: note: candidates are: json_spirit::Value_impl<Config>::Value_impl(double) [with Config = json_spirit::Config_vector<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]json/json_spirit_value.h:275: note:                 json_spirit::Value_impl<Config>::Value_impl(uint64_t) [with Config = json_spirit::Config_vector<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]json/json_spirit_value.h:267: note:                 json_spirit::Value_impl<Config>::Value_impl(int64_t) [with Config = json_spirit::Config_vector<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]json/json_spirit_value.h:259: note:                 json_spirit::Value_impl<Config>::Value_impl(int) [with Config = json_spirit::Config_vector<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]json/json_spirit_value.h:251: note:                 json_spirit::Value_impl<Config>::Value_impl(bool) [with Config = json_spirit::Config_vector<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]json/json_spirit_value.h:219: note:                 json_spirit::Value_impl<Config>::Value_impl(typename Config::String_type::const_pointer) [with Config = json_spirit::Config_vector<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >] <near match>The following patch seems to solve the problem:Code:--- a/rpc.cpp+++ b/rpc.cpp@@ -337,8 +337,8 @@ Value gethashespersec(const Array& params, bool fHelp)             "Returns a recent hashes per second performance measurement while g      if (GetTimeMillis() - nHPSTimerStart > 8000)-        return (int64)0;-    return (int64)dHashesPerSec;+        return (int64_t)0;+    return (int64_t)dHashesPerSec; }  Yes.  The bitcoin paper describes how the network is compromised if over 50% of the nodes are not "honest."  That's inherent in the entire system.  Thus, incompatible or malicious forks are annoying and degrade the network, but shouldn't fundamentally compromise it until that 50% point is reached.  At which point, you have bigger problems.The forks that are of more immediate concern are ones that destabilize or attempt to corrupt the network somehow, IMO. Ask some real-world business owners if they want to tell their customers about the chance of the money being lost forever, unrecoverable by either party. Cute.  5 BTC sent. It does open with DB_PRIVATE.http://www.oracle.com/technology/documentation/berkeley-db/db/api_reference/C/envopen.html I loaned bitcoins to Sabbers, and he paid them back promptly.The first bitcoin loan?   Does the 'address' network message include TCP port number? I think eBay stores each auction's results for 90 days. IMO, SSE should be required for generation, not simply to run the client. It seems to be a crazy mix...CWalletKey(main.h): 64-bitRest of main.h, including in-memory block/txn objects: 32-bitInternal main.cpp calculations: 64-bitNetwork(version): 64-bitNetwork(addr): 32-bitNetwork(getblock): 32-bitNetwork(submitorder): 32-bitAt a minimum, there are plenty of 32-bit time variables that clearly need changing to 64-bit. Big business (Red Hat, IBM, maybe Novell too?) has spent Big Money hiring Real Lawyers, who determined that openssl's EC and EC-DSA support should not be distributed due to patent worries.Red Hat and IBM have done extensive work and spent millions of dollars clearing a lot of open source code of patent worries, using a combination of lawyer review and patent pooling.  If, after all that, they advise against using something -- I am going to listen. What you are seeing is normal.Generated blocks show up as mixed_debit until they "mature", which is around 120 confirmations.  After maturity, you are credited the 50 BTC.  This is standard policy for all generated blocks in bitcoin.If you were looking at the GUI, you would see a "matures in N blocks" messages for that block.
Thanks to those who expressed interest.  This job is now taken. Apparently there is a reward to collect http://bitcointalk.org/index.php?topic=718 I guess the answer delves into the semantics of what is "artificial" versus "natural"...   The engineer in me reacts to words like "impossible"As a human, I can easily disrupt bitcoins at present with a large enough wad of cash. A build script for a particular distro would probably be safer, patent-wise.  CentOS/RHEL/Fedora do not include the patent-encumbered EC-DSA codes from OpenSSL, and anyone using bitcoin requires that.  Therefore, anyone providing builds is providing patent-encumbered software.IANAL, but apparently, distributing source code or build scripts puts you in a far better position than distributing ready-to-use binary software. CentOS and RHEL are built from the same packages, which are older and more stable.Fedora is built from much newer, packages, often with different software. That's how online escrow operates today.  Buyer and seller agree to let a 3rd party physically hold the money.  Buyer and seller both agree to rules that the neutral 3rd party will follow, for transaction resolution / redemption.  The neutral third party is the one who disburses funds to one party or the other.This is a pretty decent overview: https://www.escrow.com/solutions/escrow/process.aspSome people might choose to use the bitcoin-specific signed escrow method...  but I think the "burn the money" recourse serves as a incentive to avoid bitcoin escrow entirely, rather than an incentive to use bitcoin escrow honestly. Existing mechanisms of online escrow (escrow.com, for example) provide more user-friendly methods of recourse.I just don't think "burn the money" is an attractive recourse, nor a natural reaction, for the average human.  Ask any salesman to add that to their sales pitch, and gauge their reaction  Job increased to 1200 BTC.The site is http://www.bitcoinwatch.com/, a market-watching site. Buyer not having recourse except burning the money will limit the utility, I think. Updated patch to v2, with a simple cast fix for 32-bit machines.Same URL: http://gtf.org/garzik/bitcoin/patch.bitcoin-getblock Updated script URL to gen-check.pl.example, to stop the Web server from attempting to run it  Sure, printing bitcoins could work I just posted a proposal for bitcoin checks, including source code and a printable PDF example, in the " [RFC] bitcoin electronic check standard" thread:http://bitcointalk.org/index.php?topic=739.0 I have developed a sample electronic check for bitcoin.  This should work for printed checks, as well as for mobile devices.  Maybe we could develop this as a standard for http://bcspec.org/.  Note that this scheme requires a payment processor as intermediary, to store the checks until they are paid.Sample check, suitable for emailing, scanning or mobile phone photograph: http://gtf.org/garzik/bitcoin/check.pdfSample output from barcode scanner program zbarimg:Code:$ zbarimg check.pdfQR-Code:BITCOIN_CHECKv1 u:my_user n:1231-abcd-1231-defa v:100.00Key:"BITCOIN_CHECKV1": specification identifier"u":  user identifier at payment processor.  Note: unreliable information (rely on 'n')."n":  unique check id number at payment processor."v":  value.  Note: unreliable information (rely on 'n').Perl source code (requires qrencode program): http://gtf.org/garzik/bitcoin/gen-check.pl.exampleQRcode is a nice, barcode-friendly, photo-friendly method of passing information.  It's very flexible.However, the concept of electronic checks themselves have a few notable details:* May work with merchants* May work with mobile phones* Like checks, a simple photograph can enable theft.  A normal US check includes bank account info, from which a thief may use to steal your money.  With bitcoin checks, the thief may only steal money for the amount of the check.* At the option of the payment processor, a password may be required in order to use the check.* Payment processor may provide option to stop payment on a check. Job pay:   1200 BTC, for entire task.Job requirements:- Knowledge of HTML, CSS, JavaScript.- Ability to make an ugly website look good, or at least, less ugly.  (read: graphic design experience)- Must have some example of your work available over the Web for inspection (read: a portfolio or references)Job description:I have a website that is full of tabular data.  A single page of tabular data, a tiny website.  Being a programmer, I can easily spit out numbers.  But, wanting to save time and stimulate the bitcoin economy, I'm looking for someone to "pretty up" the website.  Give it colors, turn the ugly HTML <table>s into pretty CSS/JS tables.Contact info:If interested, send me a PM on this forum, or email jgarzik@gmail.com with samples of your work. Well said.Participation in the network as an honest node helps everyone. 5 BTC sent.  Excellent idea for increasing bitcoin exposure.I agree that the focus should not be on minting new currency, although it is good to mention that participation in "the bitcoin network" includes a small incentive. The sha256 setup is very likely bitcoin-specific, and you don't need lib files or SDK to simply issue an instruction:Code:        asm volatile (".byte 0xf3,0x0f,0xa6,0xd0" /* rep xsha256 */                      : \                      : "c"((unsigned long)state.count + count), \                        "a"((unsigned long)state.count), \                        "S"(in), "D"(result)); Anyone implementing it in bitcoin will be unlikely to use the kernel support for anything but as a source for code copying...  One would almost surely link it into the bitcoin binary. Selling CDs on eBay is useless, as I found, because their auction-determined worth is basically shipping cost.So, a used CD store in bitcoin would be interesting, but I think not very productive.
Gavin's bitcointools are nice for dumping blocks, but they require you to shutdown bitcoind, because bitcoin sets DB_PRIVATE flag, preventing outside users from using the multi-user database See "getblockbycount" branch of git repository https://github.com/jgarzik/bitcoinHere is sample command usage and output for block at height 71995:Code:$ /spare/repo/bitcoin.hacks/bitcoind -datadir=/garz/bitcoin/data getblock 71995{    "hash" : "00000000002d1a4380793affbc610885aa2e0b224eeedd64ffe108044ec7d434",    "ver" : 1,    "prev_block" : "000000000103fcffbd8020ff7459f3635eb41102ee3b22fa466a7fdfc05bad58",    "mrkl_root" : "9d436c694968454ea0d17f4aece3b829930027c3cb918e5107a1605aa2eeae33",    "time" : 1280823515,    "bits" : 469830746,    "nonce" : 2918845955,    "n_tx" : 4,    "tx" : [        {            "hash" : "f85e77e4379694c8d2c1232d6fddfc7792073fb8484bdac37a9ba5ed1d245c57",            "ver" : 1,            "vin_sz" : 1,            "vout_sz" : 1,            "lock_time" : 0,            "in" : [                {                    "prev_out" : {                        "hash" : "0000000000000000000000000000000000000000000000000000000000000000",                        "n" : 4294967295                    },                    "coinbase" : "045a0c011c0143"                }            ],            "out" : [                {                    "value" : 50.00000000000000,                    "scriptPubKey" : "0xAD2D2527C630A3CF951703C4F44BB70F8C7524823F7095253D9412A1E9CAD1782B6B83228083A02485C20BC1870FB1A06C09DB768A5D27326A3E2FD859E7799204 OP_CHECKSIG"                }            ]        },        {            "hash" : "38431f2f029a37a74a5b5bf0327f41a67b83aef8ad60a2efe918a8f1f0e7df1b",            "ver" : 1,            "vin_sz" : 1,            "vout_sz" : 1,            "lock_time" : 0,            "in" : [                {                    "prev_out" : {                        "hash" : "d9b308ca3484b7be6599c5050fec2cd2d31e654a0d2560989ffd28590bef6e6a",                        "n" : 0                    },                    "scriptSig" : "0x01D82CD24A2C12E108087B9D9F81C49EF550F24D12668381D1D333D383B8EEB717200209F92E3246912CE4965E728963DF65FA63D9CCA10513CEF35C9BDCDC8018695F20024430"                }            ],            "out" : [                {                    "value" : 50.00000000000000,                    "scriptPubKey" : "OP_DUP OP_HASH160 0x403FC36C7A1B5A9390F29343F4317F148A3ACB18 OP_EQUALVERIFY OP_CHECKSIG"                }            ]        },        {            "hash" : "c61a96af68cce7329a450c18e3ac359d3052bda9187515a42fa7d262405213bd",            "ver" : 1,            "vin_sz" : 1,            "vout_sz" : 2,            "lock_time" : 0,            "in" : [                {                    "prev_out" : {                        "hash" : "1ff50ec1208497b333972da7dfdb2ba92c18da901df997d630b32981a013b783",                        "n" : 0                    },                    "scriptSig" : "0x0132831D85F7395034FD537CADFB5BC3DF134347E73BD76352D31314686785B17320024351730466BEC02AD0A9D1F2BFBF4F246AFA8EE4B1BEE3FA8B83801B8301AF5820024430 0x51342C8A6D8C38C33413C63BE8CA93AD060BEA212D961EA63F4C76013E81978A06934604515C7941A729450A508CF556AD6B5061ADABF74C8F881C44B2405CDA04"                }            ],            "out" : [                {                    "value" : 0.05000000000000000,                    "scriptPubKey" : "OP_DUP OP_HASH160 0xE183BC5BB9CEF757C51BCD8B864A8F2210114373 OP_EQUALVERIFY OP_CHECKSIG"                },                {                    "value" : 0.4300000000000000,                    "scriptPubKey" : "OP_DUP OP_HASH160 0x209F7B58DC860A2B0D2547FE659D78DFFC68FA77 OP_EQUALVERIFY OP_CHECKSIG"                }            ]        },        {            "hash" : "d561a3594fcf97dd1a1abe7a1eda15c8e335aaaecf97f959de0595298d87c6d5",            "ver" : 1,            "vin_sz" : 1,            "vout_sz" : 2,            "lock_time" : 0,            "in" : [                {                    "prev_out" : {                        "hash" : "c61a96af68cce7329a450c18e3ac359d3052bda9187515a42fa7d262405213bd",                        "n" : 1                    },                    "scriptSig" : "0x01DCDA3BAD3620FE246F2D973D6128123FC5F054121624852D98CEA4A3333128D00021025FFA265DA89861FC609792AD193204FCF0B2C1823B2D23052BCBD468274367BA0021024630 0x53B6705A0E13FD31A87C4F5F43ABDA77995B7CDA87B521043488254B16A122AFE99EA0BAE780CA19C6DCB733ECA9F42404B1F77951703B4057362704C126BD2304"                }            ],            "out" : [                {                    "value" : 0.05000000000000000,                    "scriptPubKey" : "OP_DUP OP_HASH160 0x388E046D522A5EFDBFD272EAE11E9718F8C10FA0 OP_EQUALVERIFY OP_CHECKSIG"                },                {                    "value" : 0.3800000000000000,                    "scriptPubKey" : "OP_DUP OP_HASH160 0x1FC4B63556EB262B048F4A908875A62E338F7364 OP_EQUALVERIFY OP_CHECKSIG"                }            ]        }    ],    "mrkl_tree" : [        "f85e77e4379694c8d2c1232d6fddfc7792073fb8484bdac37a9ba5ed1d245c57",        "38431f2f029a37a74a5b5bf0327f41a67b83aef8ad60a2efe918a8f1f0e7df1b",        "c61a96af68cce7329a450c18e3ac359d3052bda9187515a42fa7d262405213bd",        "d561a3594fcf97dd1a1abe7a1eda15c8e335aaaecf97f959de0595298d87c6d5",        "b626f3cd7c1fd229bffbec34fab2700bc31659dbf2a74f7916701a18490125b4",        "dd74eea07e9bf2744655a9bab3a8cdbc5fe9a0c86ad18f42a2c259d40a83decb",        "9d436c694968454ea0d17f4aece3b829930027c3cb918e5107a1605aa2eeae33"    ]} For anyone tackling this, the Linux kernel's drivers/crypto/padlock-sha.c should be all you need...http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git;a=blob_plain;f=drivers/crypto/padlock-sha.c;hb=fc1caf6eafb30ea185720e29f7f5eccca61ecd60 Or it means someone is actively taking over ;-)IMO that's good news.  It shifts the emphasis over to adding value to the currency, rather than minting. Buggy, how?  Maybe they are just confusing, like they were to me, initially?getreceivedby* are by-address or by-label totals, not individual transactions.listtransactions was created while trying to implement web services for bitcoin.  The only alternative I can see for tracking transactions, outside of listtransactions, was watching individual bitcoin address totals.  getreceivedby* is not reliable, in that regard. It should present a list very similar to the GUI-presented display. Due to that recourse, it is unlikely to be used as an escrow mechanism  That is an over-generalization.For inexperienced "Aunt Tillie" users, www.my-bitcoin-site.com is far more likely to have given thought to encrypting and backing up the wallet.  A website is more likely to have a more intelligent bitcoin P2P firewall scheme in place. Which VPS provider? Content-Length is definitely not sent on Fedora 12 and Fedora 13, will investigate further.  Will check RHEL/CentOS too. Frankly, I think the official bitcoin client should be for more sophisticated users, and "average users" should be directed to user-friendly services like http://www.mybitcoin.com/ that do not require additional software to be installed.IMO websites and existing browsers should be all one needs to fully participate in the bitcoin economy. The value of bitcoins are determined by the market.  See https://mtgox.com/ and http://www.bitcoinmarket.com/ for current exchange rates, which should give you a concrete idea of value. It doesn't have to be someone trying to cheat.  You can be honest, and yet unlucky and get caught on the other side of a network split.  If you generate and spend coins on the unlucky side of the network split, the consequences are the same as for dishonest users. The two JSON RPC libs available at CPAN (Perl), and a compliant C lib that I wrote locally to verify the behavior. A good way to prevent long-chain takeover is to store the signature of the last-known "good" block in each bitcoin release binary. Yes, ecdsa.h is considered patent-encumbered, so Red Hat and other distros turn off ec-dsa.Yes, Virginia, this means that bitcoin potentially has patent problems. This is a verified bug in bitcoin.bitcoin requires the Content-Length header, but several JSON-RPC libraries do not provide it.  When the Content-Length header is absent, bitcoin returns 500 Internal Server Error. I'm not sure about that list; this is what I see:Code:[jgarzik@bd bitcoin.hacks]$ grep '(strCommand ==' main.cpp    if (strCommand == "version")    else if (strCommand == "verack")    else if (strCommand == "addr")    else if (strCommand == "inv")    else if (strCommand == "getdata")    else if (strCommand == "getblocks")    else if (strCommand == "tx")    else if (strCommand == "block")    else if (strCommand == "getaddr")    else if (strCommand == "checkorder")    else if (strCommand == "submitorder")    else if (strCommand == "reply")    else if (strCommand == "ping") FWIW, there exists -mstackrealign and -mpreferred-stack-boundary=NUM This is very true.  It is a major weakness that Satoshi does not PGP-sign the hash signatures posted on the front page of http://www.bitcoin.org/. A contract denominated in bitcoins is as enforceable as any other contracts.  It's a written agreement between multiple parties, nothing special about that.  If I want to write a contract that purchases cows in exchange for bananas, that's perfectly legal and as enforceable as any other contract.
I have a feeling that GPU (OpenCL) users will rapidly crowd out CPU users, due to the apparent large advantage of OpenCL bitcoin generation on modern GPUs. It seems like a lot of people out there are using git to follow the bitcoin SVN repo, and some are having trouble with line endings.Here is the method of creating a local git repository, containing nothing but satoshi's upstream SVN commits:Code:$ git svn clone --stdlayout https://bitcoin.svn.sourceforge.net/svnroot/bitcoinWhen satoshi updates his SVN, here is the method for updating your local repository:Code:$ git svn fetch && git pull . refs/remotes/trunkIt is advisable to maintain a vanilla repository or branch, and do your work in a separate repo, such as Code:$ git clone bitcoin bitcoin.jg-hacksor create a side branch,Code:$ cd bitcoin$ git checkout -b jg-hacks master Another thing to consider is patent issues inherent in the bitcoin implementation.bitcoin requires EC-DSA, which has been disabled in Fedora after legal review:https://bugzilla.redhat.com/show_bug.cgi?id=319901http://en.wikipedia.org/wiki/ECC_patentsI wanted to package bitcoind for Fedora, but gave up, because we cannot distribute binaries due to these patent issues. It definitely does not apply to the SVN trunk.  Maybe tcatm could post the main.cpp itself? Updated to version 8 of listtransactions:http://gtf.org/garzik/bitcoin/patch.bitcoin-listtransactionsIncludes gavin's suggestion, renaming 'class' to 'category'. That is irrelevant to building.  bitcoin requires ECDSA, which Fedora will not include due to patent issues.  A custom openssl build is a requirement on Fedora, in order to build bitcoin. Can you be more specific about "no reliable way"?The existing facility getreceivedby* is provably unreliable.  It combines transactions into summarized totals.  When you go to the bank ATM and perform two deposits, the second immediately following the first, you do not see "ATM deposit $80" on your bank statement, you see two transactions with different transaction IDs for "ATM deposit $40".I am missing something here?  listtransaction seems more reliable than getreceivedby* summaries. Here is 'listtransaction' version 7:http://gtf.org/garzik/bitcoin/patch.bitcoin-listtransactionsThis adds the suggested txn_id field -- very nice suggestion, gavin!  I wanted a unique transaction id, and now I have one  Strongly agreed.git is decentralized, unlike SVN.  You don't have to hit the server each time you want a file or revision history.git is quite like bitcoin in fact:  sha1-hashed commits reference past sha1-hashed commits, creating a chain of trust that is trivial to validate, and difficult to hack. Can you be more specific?  All mainstream programming language seem sensibly insensitive to abitrary string contents, JS included.  String content can certainly include language-reserved keywords and parsing tokens.Added, thanks for the suggestion. Really, it should bind to *, and then filter out requests from addresses other than those on a filter-list. Has anyone yet created a 100% vanilla mirror of bitcoin SVN, using git?Looking for one that does not have any mods from vanilla bitcoin, and will never have any mods deviating from vanilla bitcoin.Thanks. FYI, it is pointless to make a packet smaller than 60 bytes -- the minimum size of an Ethernet packet.  Packets are padded up to 60 bytes, if they are smaller. A bit tough to elaborate on, since I don't see your Linux OS version.For some OS's, like Fedora here, you need to link with the multi-threaded boost libs instead.  This implies adding a "-mt" suffix, eg. -lboost_system-mt rather than -lboost_system, for example.Here is the complete, makefile-free, working solution I use to build bitcoind on Fedora:Code:g++ -O3 -ffast-math -march=native -Wno-invalid-offsetof -Wformat -pthread \ -I"/usr/local/openssl-0.9.8/include" \ -o bitcoind \ rpc.cpp main.cpp util.cpp script.cpp db.cpp net.cpp irc.cpp \ init.cpp cryptopp/sha.cpp cryptopp/cpu.cpp \ -L"/usr/local/openssl-0.9.8/lib" \ -l boost_system-mt -l boost_filesystem-mt -l boost_program_options-mt \ -l boost_thread-mt -l db_cxx -l crypto -l gthread-2.0(openssl 0.9.8 is installed in /usr/local/openssl-0.9.8, everything else is a system lib) Sounds like a maintenance and management headache.  Nobody will want to remember 1000 different passwords, or manage 1000 different keys all over the place, so that just moves the problem from one location (wallet) to another (key management and automation). It would be nice to be able to add a memo to each transaction, something both sender and receiver could view. Sure.  That's reinventing the client terminal, a dumb hardware device that communicates with a backend payment system. Several RPC commands have multi-line help descriptions, but they do not appear to be shown anywhere.  The following patch implements aCode:help [command]parameter that provides access to these extended descriptions.Patch: http://pastebin.ca/1911586Raw: http://pastebin.ca/raw/1911586Here is example output for the new "help listreceivedbyaddress" sub-command:Code:[jgarzik@bd ~]$ /garz/repo/bitcoin/bitcoind -datadir=/garz/bitcoin/data help listreceivedbyaddresslistreceivedbyaddress [minconf=1] [includeempty=false][minconf] is the minimum number of confirmations before payments are included.[includeempty] whether to include addresses that haven't received any payments.Returns an array of objects containing:  "address" : receiving address  "label" : the label of the receiving address  "amount" : total amount received by the address  "confirmations" : number of confirmations of the most recent transaction included Version 6 of listtransactions: http://pastebin.ca/1911570Raw patch: http://pastebin.ca/raw/1911570listtransactions implementation should be complete at this point.  The following command syntax is used:Code:listtransactions [count=10] [minconf=1] [includegenerated=true]As lachesis suggested, count=0 will dump all transactions.FAQ:Q1) How does 'listtransactions' behave if tail of the block chain changes, eg. 0 confirmations -> 1 confirmation -> 0 confirmations?A1) 'listtransactions' behaves the same way 'listreceivedbyaddress' behaves...  the output changes accordingly. Most of what you say is true, but, bitcoin tends to be built against very specific versions of its dependent libs.  Due to that, one tends to build bitcoin against custom compiled libs, regardless of underlying OS version.  That practice makes glibc the primary compatibility worry.
Why?  There isn't any reason why the project will suddenly collapse if Satoshi becomes absent.Eventually patches to the source would accumulate, someone will become a patch collector, and if enough people download the source&binaries from The Patch Collector, that person winds up (often reluctantly) the new de facto maintainer.People worry an awful lot about rules and rule-making.  But there is no driving need for any Continuity of Government plan, here   As long as the source code remains open, that is sufficient.  If there is a need, and enough interest, the community will provide.  Trust in the community  Yeah, some sort of virtual machine like qemu/KVM is really the best way to go, for older distro support.Constantly reformatting your main dev machine is for the birds I have to support OpenSolaris and FreeBSD in my cloud computing project, in addition to the primary target, Linux.  Virtual machines are a life-saver (and cost-saver). The same procedure that is followed when someone borrows hard currency, and does not return it...  Up to the lender to set the level of security. It's called open source    The community is already guaranteed to continue. Returning all transactions is pretty easy, sure.I wonder if a better interface might be to follow 'listreceivedbyaddress' and print everything by default, only applying limits if limits were specified.  ie.  make your "count=0" the default. He is welcome to pick it up now.But I didn't want to push the patch to him until the two FIXME's are resolved.  Those FIXMEs are for 0.01% cases, but still... +1 agreed The transaction database isn't really lightweight in terms of disk space, especially if bitcoins become popular.So, if a transaction computer needs disk space, why not install a normal distro with better support?Any micro-distribution is going to be under-audited, and suffer a lag time on security patches to the base OS -- not exactly the ideal target for a "locked up tight" transaction computer. If you (and others) are willing, please post your OS + OS version, when posting success/failure reports.I will echo a recommendation to satoshi from another forum member:  build linux binaries on an older Linux OS, to ensure wider compatibility.  Maybe something as old as CentOS 5 (caveat: requires custom openssl, boost, db4 and wx builds). Added a couple small cleanups, and verified it still works under 0.3.6 / SVN r119.Version 5 of listtransactions: http://pastebin.ca/1911295Raw patch: http://pastebin.ca/raw/1911295FAQ:Q1) How does 'listtransactions' behave if tail of the block chain changes, eg. 0 confirmations -> 1 confirmation -> 0 confirmations?A1) 'listtransactions' behaves the same way 'listreceivedbyaddress' behaves...  the output changes accordingly. SVN r119 seems to work fine here.  No BDB explosion. BTW, an important feature of these mailing lists is that anyone can post...  but only the "vendor security" group can read the posts.Thus, it is easy for an outsider with a real security issue to provide detailed information to vendor-sec@myopensourceproject.org, while preventing unscrupulous people from reading the sensitive information.I suppose a PM to <somebody>, plus discussion on a closed forum, is the best this forum software can handle. I am interested in the meta-discussion, about security policy.In other open source projects, representatives of "key parties" tend to gather on a "vendor security" mailing list that is closed to the public.  Vulnerabilities that might have real world consequences are discussed there, and then a coordinated release occurs, where all key players publish the security fixes at the same time. Double-ACK older version (SVN 117 + listtransactions + getinfo KHPS) works fine, all bitcoins there.  And yes, I should back up before following "please upgrade" instructions...    Same result on another machine.  BDB errors, and death.  0.3.5 on 64bit Linux is questionable.  You didn't mix up the builds with 32-bit Linux, did you?debug.log says:Code:Bitcoin version 0.3.5 betaDefault data directory /g/g/.bitcoinBound to port 8333Loading addresses...dbenv.open strLogDir=/garz/bitcoin/data/database strErrorFile=/garz/bitcoin/data/db.log************************EXCEPTION: 22DbRunRecoveryException       DbEnv::open: DB_RUNRECOVERY: Fatal error, run database recovery       bitcoin in AppInit()        With the official Linux-64bit build, run on Fedora 13, I see it failing badly:Code:************************EXCEPTION: 22DbRunRecoveryException       DbEnv::open: DB_RUNRECOVERY: Fatal error, run database recovery       bitcoin in AppInit()       ************************EXCEPTION: 22DbRunRecoveryException       DbEnv::open: DB_RUNRECOVERY: Fatal error, run database recovery       bitcoin in CMyApp::OnUnhandledException()       terminate called after throwing an instance of 'DbRunRecoveryException'  what():  DbEnv::open: DB_RUNRECOVERY: Fatal error, run database recoveryPraying my bitcoins aren't eaten... Like Olipro, got a lot of people doing custom builds out there -- in fact, I must use a custom build on several machines.May we assume SVN has all necessary updates? OK, here's version 4.  Output now matches what you see in the UI, and gives you information on debits/credit/generated/etc.  The 'count' and 'includegenerated' parameters are now honored.Patch: http://pastebin.ca/1910623Raw patch: http://pastebin.ca/raw/1910623Here's sample output from my dev box:Code:$ /usr/local/src/bitcoin/bitcoind -datadir=/usr/local/bitcoin/data listtransactions [    {        "address" : "15uyjNbNzizz5r8UgWpF1ZayV82Pq3FHQ5",        "label" : "",        "class" : "credit",        "amount" : 0.02000000000000000,        "confirmations" : 160    },    {        "address" : "15uyjNbNzizz5r8UgWpF1ZayV82Pq3FHQ5",        "label" : "",        "class" : "credit",        "amount" : 0.01000000000000000,        "confirmations" : 162    },    {        "address" : "1GKgKYtV79jYHR2mr1SSDp9EjXQuLTmUTw",        "label" : "",        "class" : "debit",        "amount" : 0.02000000000000000,        "confirmations" : 1525    },    {        "address" : "191ALqREPdXCGE6mhfS7HqRZCeQB2AHT6y",        "label" : "",        "class" : "credit",        "amount" : 0.02000000000000000,        "confirmations" : 1531    },    {        "address" : "1HVYQQ5K489fMx5Aqt48M5oTJPsmUhrpkx",        "label" : "",        "class" : "debit",        "amount" : 0.01000000000000000,        "confirmations" : 1572    },    {        "address" : "1KTpPjGWyhTBC5NNYFwNzkyjW6UDL9jKPG",        "label" : "Your Address",        "class" : "credit",        "amount" : 0.01000000000000000,        "confirmations" : 1587    }] Here's an updated version, that sorts by number of confirmations:  http://pastebin.ca/1910564Raw patch:  http://pastebin.ca/raw/1910564 Here is a patch against SVN 117, implementing 'xlisttransactions' RPC: http://pastebin.ca/1910553   At present, the options are ignored, and it dumps all transactions it finds.Raw patch: http://pastebin.ca/raw/1910553Edit: Patch's current home is http://yyz.us/bitcoin/patch.bitcoin-listtransactionsEdit2: RPC command has been renamed to 'xlisttransactions'
Yeah, your patch is nicer than mine.I extracted just the speed-information bit added to RPC "getinfo": http://pastebin.ca/1910510Raw: http://pastebin.ca/raw/1910510 Has anyone yet written 'listtransactions'? Here is a simple patch that updates "getinfo" to display khash/s speed information: http://pastebin.ca/1910464Raw patch download here:  http://pastebin.ca/raw/1910464 I bet a 32-core Niagara would work nicely...  not all Sparcs suck  Here is my attempt to implement basic listtransactions support:         http://pastebin.ca/1909858  (patch to rpc.cpp against SVN)As I have not yet gotten a native build going yet, could I trouble someone to take a look at this?  I am -not- a C++ expert by any means, so there might be some obvious bugs.listtransactions is IMO an important addition, because there is AFAICT no other way to list each individual transaction.  All the other list* and get* functions have a tally of some sort.  Automated use really implies a need for fine-grained transaction lists. Fantastic, thanks!Now if only Fedora would ship elliptic curve crypto, it would build on Fedora.  (Fedora excises that due to patent encumbrace) bitcoins are experimental, and the system may fail for any number of reasons.However, there is Real Money and value attached to bitcoins.  You're not being a good network citizen if you're messing with that. There are plenty of reasons to swap wallets.  I can think of disaster recovery and de-centralization (non-SPOF) scenarios where you absolutely would want to move around wallets.Here's hoping they will turn on db4's AES encryption for wallets, by default, too! +1I was happy with the model as well... Any chance to get the test network into bitcoin/trunk, #ifdef'd out? Does CMake enable, as easily, cross-compilation using mingw? swarm metrics (network metrics) would be quite useful.  Anything is better than watching an IRC forum full of bots. The bitcoin currency market is so small, any number of things can produce wild swings.Just wait until someone wants to buy $10,000 USD worth of bitcoins (and then convert back to dollars later on). Don't have a site yet.  I was hoping to test, and determine if you software was usable enough to create one  Does SVN have the faster block download?I don't see it on the trunk, at least, but I might be missing something... IMO it should be time-based ("1 day"), not an arbitrary number. How does one obtain a merchant id? If the wallet is stored via Berkeley DB, it should be easy to turn on DB's automatic AES encryption feature.I agree the wallet should always be stored encrypted. There is always value in running a bitcoin node, if you want to help support the integrity of the currency.  The more "honest" nodes on the network, the more likely the currency will succeed.Once the difficulty comes down, it seems likely you will start earning a few bitcoins here and there.  It's definitely random, though, with no guarantee you'll make a block. I think a more realistic proposal is to get charities to accept bitcoins as donations.Helps popularize and legitimize the currency.
