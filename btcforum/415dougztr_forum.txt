#if defined(__arm__)#include <byteswap.h>        #ifndef CRYPTOPP_BYTESWAP_AVAILABLE        #define CRYPTOPP_BYTESWAP_AVAILABLE        #endif#endifThen later on, I deleted out all the other byteswap stuff. Particularly, there was a line like:#ifdef (__GNUC__)        #define __asm__ (bswap ... )That stuff is wrong, bswap is an x86 instruction and not found on ARMI got a report earlier that my static linking scheme wasn't working. Boo. I'm not sure how to work around it now though.I'll see if I can get some diffs against the source and just put those up. I have Windows Vista 64 and an ATI Radeon HD 4830Also, I have a working 0.3.2 Gentoo Linux version which I compiled from source. I have ATI Stream SDK installed so I have a fully working OpenCL developer kit, the only thing I'm lacking is some sources to add in OpenCL support.I'd be happy to work on the Linux version. My IGEPv2 at 720MHz gets 120 khash/s. Yes my goal is to utilize the DSP to calculate hashes, but getting a running client was a good first step. I'm going to make diffs against the 0.3.2 sources and include them in the tarballs at some point here. I've made some significant changes to the makefiles in the process of learning how to compile these sources.I'm not a whiz programmer though, so slogging through DSP programming is all new to me. I have a reasonable grasp of ASM, but its rusty with disuse, so I'm mostly doing this for my personal interests in learning new stuff. I've managed to make some binaries for beagleboards and closely related devices which should work with pretty much any linux that can run on these things, excluding android. There's also a generic i586 binary which you might want to try if you can't get the official ones to work. These are built from the 0.3.2 linux package source, all I did was tinkered around with the makefile and had to make a minor edit to sha.h to make it build on ARM.The problem with the official binaries is that glibc is static linked in, so that means you have to have an exact match with it for it to work. Mine have everything except glibc and closely related libs static linked, so it will pick up your own system's glibc and hopefully work flawlessly.I have both of these binaries in production right now on my servers. You can even use the one server, which is the download server, to bootstrap your clients with if you can't use port 8333 like so:bitcoind -addnode=mechalogic.netAnyways, here's a link to my wiki page that houses my current work.http://mechalogic.net/dokuwiki/doku.php?id=go_to_the_bitcoin_client_download_pageCheers! No dice on my Gentoo system. I get the following.$ bitcoinbitcoin: /usr/lib/gcc/x86_64-pc-linux-gnu/4.3.4/libstdc++.so.6: version `GLIBCXX_3.4.11' not found (required by bitcoin)and then$ ldd bitcoind./bitcoind: /usr/lib/gcc/x86_64-pc-linux-gnu/4.3.4/libstdc++.so.6: version `GLIBCXX_3.4.11' not found (required by ./bitcoind)   linux-vdso.so.1 =>  (0x00007fffc9bff000)   libdl.so.2 => /lib/libdl.so.2 (0x00007ffeefbe1000)   libstdc++.so.6 => /usr/lib/gcc/x86_64-pc-linux-gnu/4.3.4/libstdc++.so.6 (0x00007ffeef8d3000)   libm.so.6 => /lib/libm.so.6 (0x00007ffeef64e000)   libgcc_s.so.1 => /lib/libgcc_s.so.1 (0x00007ffeef437000)   libpthread.so.0 => /lib/libpthread.so.0 (0x00007ffeef21a000)   libc.so.6 => /lib/libc.so.6 (0x00007ffeeeea4000)   /lib64/ld-linux-x86-64.so.2 (0x00007ffeefde5000)This file isn't statically linked. I'm only trying to use it because my gentoo system is in a bad state and will take some time to get upgraded to build the source code.Anyways, thought I'd send a bug report
