The large number of bitcoin days destroyed on 2013-12-21 can be seen mostly in block 276158, and on 2014-02-05 can be seen mostly in block 284349.  In both cases, the coins were last moved around 2011-03-01, and the coins seem to be controlled by the same entity.For example, if you start with the 45592.95 BTC in address 1Kq6sr5A9bM82u1vRTByjCvvixm5dxwQuV, you can see that they are split into outputs of less than 5000 BTC on 2011-03-01.  Some of those outputs are redeemed on 2013-12-21 and others are redeemed on 2014-02-05.  The same is true of the 150000 BTC in address 1LYJHSep7gAtvePMPVdsXvnKeNM7ifHkEK.As far as I can tell, the coins were just moved to a different storage location, and there is no connection to recent market activity or the issues with Mt. Gox. I haven't seen any published withdrawal limits, but it seems their site limits individual withdrawal requests to 999999.99 USD. sturle, thank you for your efforts to provide factual and level-headed information.  Regarding this:I haven't seen any evidence that the international wire transfer situation is improving.  What do you base your optimism on?  Do you have information that isn't publicly known? The image URL is on ebayimg.com.  I found the listing here:http://www.ebay.com/itm/IN-HAND-Butterfly-Labs-Bitforce-Single-60-GH-s-ASIC-Bitcoin-Miner-Ready-to-ship-/251318328943?pt=LH_DefaultDomain_0&hash=item3a83bd5e6f SummaryI have developed algorithmic optimizations for Bitcoin mining which reduce the number of calculations needed per hash, resulting in a performance improvement of 15% or more compared with the best publicly known techniques.  I am offering to sell information about these optimizations to ASIC vendors interested in incorporating them into a future chip design.DetailsThese techniques are not theoretical.  I have successfully implemented them in my private GPU miner and used them for several years.  For reference, here are some performance numbers from my GPU miner:5970 @ 725 MHz: 828.4 Mh/s6990 @ 880 MHz: 965.8 Mh/s7970 @ 925 MHz: 676.5 Mh/sIf you compare those numbers with other published hash rates, making sure to adjust for clock speed, you'll find that they are 15-20% faster than the best hash rates achieved by other miners.  I estimate that at least a 15% improvement comes from algorithmic optimizations which are not publicly known, and which should be applicable to other technologies like custom ASICs.  The precise performance improvement achievable may be slightly different on a custom ASIC compared with an AMD GPU due to differences in the relative costs of various operations on the two technologies, but I expect it to be in the same ballpark.I should say up front that these techniques are not without drawbacks.  They are somewhat more complex than the typical well-known mining optimizations, making them more difficult to put into practice.  In particular, changes may be needed to infrastructure like mining software, pools, and protocols.  It is not a drop-in replacement.  Still, it may be worth doing if it results in a 15+% higher hash rate for given hardware and electricity costs.Also, please don't expect this information to come cheaply.  The ability to increase the performance of a generation of ASIC-based products by 15+% is quite valuable, and I will expect to be well compensated for disclosing these techniques.If you would like to discuss using these optimizations in your ASIC design, email miningalgorithm at gmail.com. By the way, the .atsuo file does not belong in the repository.  It stores per-user settings like the set of open windows.(See suo file source control.) Excellent.  Thanks! Apparently BFL is now shipping devices with firmware version 1.2.6.Luke, do you think you could check with BFL about releasing the latest source code?  I suspect you have better contacts than the typical customer. I see this hang.  It occurs in bytes_cpy.  A size of 0 results in an infinite loop. Here is the description I was in the process of writing up while awaiting your reply:I'm not sure why you say it is "inherently single threaded and thus not faster on a GPU".  I see no problem running as many computations in parallel as an AMD GPU has "stream processing units" -- e.g. 3200 on a 5970.  The conditionals don't create much of a problem -- GPUs can implement conditionals by suppressing execution of instructions per stream processing unit, so the slowdown will be no worse than if you enter the conditional 100% of the time.  It should still be way faster than a CPU.Here is an address you can send to: [removed] Will you give me the bounty if I explain why your algorithm doesn't require anywhere near the 128MB that you think it does? I just completed a sale to CanaryInTheMine.  Everything went smoothly.When transferring the credits, BFL's web site asked me to "Confirm transfer of NaN credits".  I took a risk and clicked OK anyway, and the transfer went through just fine. Theoretical bug in libblkmaker:parse_txn populates txn->hash but is missing a call to "my_flip(txn->hash, 32);". The tag for 3.1.0 is missing on github.  Thanks! Oh... the code was quite different back then.  I think the way to proceed in general is to extract the parts of ConnectBlock that are needed to add the transaction to the index.  I think it will look something like this (without error checking):Code:{    CTxDB txdb;    txdb.TxnBegin();    CBlockIndex* pindex = mapBlockIndex.find(hashGenesisBlock)->second;    unsigned int nTxPos = pindex->nBlockPos + ::GetSerializeSize(CBlock(), SER_DISK, CLIENT_VERSION) - 1 + GetSizeOfCompactSize(block.vtx.size());    CDiskTxPos posThisTx(pindex->nFile, pindex->nBlockPos, nTxPos);    txdb.UpdateTxIndex(txNew.GetHash(), CTxIndex(posThisTx, txNew.vout.size()));    txdb.TxnCommit();}You could try putting that in LoadBlockIndex inside "if (mapBlockIndex.empty())" right at the end.  Again, I'm just copying bits of code from here and there, so no guarantees it will work.  Thanks for the coins, though! Yes, I don't think adding to the memory pool is going to help with what you are trying to do.The memory pool is for transactions that are not yet in blocks.  When a new transaction is created, it gets relayed to nodes across the network and stored in their memory pools.  Mining nodes use the memory pool to find transactions to include in mined blocks.  The genesis block transaction doesn't really belong there since it is already part of a block (and also since it is a coinbase transaction).You need to add the transaction to the set of unspent transaction outputs.  I don't know exactly how to do it properly, but the critical piece of code seems to be the call to SetCoins in CTransaction::UpdateCoins().  You might be able to do it like this:Code:    CCoinsViewCache view(*pcoinsTip, true);    view.SetCoins(txNew.GetHash(), CCoins(txNew, 0));    view.Flush();I'd recommend putting that code right where the genesis block is created: in main.cpp, in InitBlockIndex(), inside "if (!fReindex)", right at the end.  I can't guarantee that it will work, but it might.  Make sure you start with a fresh data directory.To make reindexing work, I think you'll also need to do the same thing in CBlock::ConnectBlock inside this special case for the genesis block:Code:    // Special case for the genesis block, skipping connection of its transactions    // (its coinbase is unspendable)    if (GetHash() == hashGenesisBlock) {        CCoinsViewCache viewTmp(view, true);        viewTmp.SetCoins(vtx[0].GetHash(), CCoins(vtx[0], 0));        viewTmp.Flush();        view.SetBestBlock(pindex);        pindexGenesisBlock = pindex;        return true;    }Or maybe you can simply remove the special case and let the rest of the function run, but I don't know if any of the rest of the code in that function will create problems. I would not recommend skipping the lock.  Locks prevent conflicts between multiple threads.  That kind of thing would not be detected by the compiler, but can create very hard to debug problems.If you don't want to add a member function to CTxMemPool, you can do something like this directly in AppInit2:Code:    {        LOCK(mempool.cs);        mempool.addUnchecked(hash, txNew);    }Or if you have a non-static member function in CTxMemPool, you can call it like this:Code:    mempool.addGenesis(hash, txNew);As for whether adding the genesis block coinbase transaction to the memory pool is the right way to solve your problem, I am skeptical, but I'm not familiar enough with the "proper" way to do it to give better advice.Here is an address you can send coins to: [removed] You have to put that code inside a function.  Executable statements can't be at file scope.I'm not sure when you want the code to run, but for example if you are trying to run it on startup, you could place it at the end of AppInit2 in init.cpp (before the return statement). rBXKmRXRkVsDte1FLBJEKBPStCW9jAnvWn Should there be a git tag for the 3.0.0 release?  I don't see one.
Memory usage is pretty stable for me when not downloading blocks, though it could be lower.  During initial block download, memory usage can grow without limit due to mapOrphanBlocks.  More details are in issue 2353. Transactions with zero-value outputs are already considered non-standard.  For practical purposes, 0.00000001 BTC is the same as zero (it is less than one ten-thousandth of a US cent).  The fact that bitcoin supports 8 decimal places is somewhat arbitrary -- if it supported 100 decimal places, would we permit outputs of 10^-100 BTC?  Perhaps sufficiently small outputs should be treated the same as zero-value outputs.Another solution is a fee policy where spending an output is paid for by a fee in the transaction that created it rather than the transaction that redeems it.  See https://bitcointalk.org/index.php?topic=150749.0. That is one benefit, though my understanding is that there is some benefit to reducing the UTXO set even for nodes that keep the full history, because the UTXO set must be kept quickly accessible for transaction verification.The other benefit is more understandable fees for users.  How many times have we seen users confused about why their transaction requires a high fee?  Usability is important for adoption. I should clarify that the point is not that inputs are free, but rather that inputs are paid for by the outputs they redeem.  My description was focused on the general principle, but I believe it can be implemented in a way that addresses many of the concerns raised.Here is a strawman concrete implementation proposal:Currently the reference client makes fee decisions based on the size of a transaction, which is simply the number of bytes in the transaction.  All of that logic remains the same, except that the size of a transaction is redefined as follows:the number of bytes in all outputs (serialized CTxOut objects), plus200 bytes per output (intended to pay for the input that will eventually redeem each output), plusthe number of excess bytes beyond the first 200 bytes in all inputs (serialized CTxIn objects).The value of 200 bytes is somewhat arbitrary.  It is more than enough to redeem a payment to address with an uncompressed key (180 bytes if I calculated correctly).  It could be set lower, e.g. just enough to redeem a payment to address with a compressed key (148 bytes), or higher, e.g. enough to cover some interesting P2SH use cases like 2-of-3 multisig.These rules could be rolled out now, but there is the problem that if the block size limit is reached, it will be more profitable for miners to use the original definition of transaction size instead of the adjusted definition.  That problem could be fixed by redefining the block size limit so that instead of being based on the number of bytes in the block, it is based on the total size of transactions in the block, where transaction size is defined as above.  Of course that is a hard fork.Some responses:As described above, all inputs are fully paid for.  All that changes is who pays.No change is proposed to the behavior of using rounded transaction sizes for fee computations.  The alternate definition of transaction size would still be rounded.As described above, all inputs are fully paid for.  Typical inputs are paid for by the output they redeem, but oversized inputs require an extra charge.Inputs cannot simply be invented -- they must redeem an existing output.  Yes, you can create a huge transaction that redeems every output you have available to you, but then you have used up all your unspent outputs, and to do it again you would have to create more outputs.  Creating those outputs requires a fee which covers those outputs plus the redeeming inputs.  Every byte is fully paid for. Summary:Fees are typically per KB of transaction size.  The size of a transaction is mostly determined by its inputs and outputs.  I propose that fees should be based only on the outputs.The intuition is that every output is eventually intended to be redeemed by an input.  It serves no purpose to penalize those inputs.  Rather, the transaction that created the output should include a fee sufficient to pay for both the output and the input that we know will eventually be needed to redeem it.Advantages:Currently, users are sometimes prompted to include a large fee because their transaction combines many inputs, resulting in confusion.  Charging only for outputs would eliminate that confusion.  Large fees will still be required for transactions with many outputs, but in that case the reason for the fee is clear.Currently, outputs below a certain value can be uneconomical to redeem, resulting in a permanently inflated set of unspent outputs.  Charging only for outputs would allow small outputs to be redeemed.Difficulties:Fee policies are supposedly in the hands of miners, but that is not quite true in the presence of a block size limit.  Assuming there are enough fee-paying transactions to fill the block, a profit maximizing miner must charge fees based on the size of the entire transaction.  If the block size limit is changed in the future, it is worth considering making the limit apply only to outputs.  (For safety, a separate limit could apply to inputs, set high enough that it is unlikely to be reached in practice.)Ideally fees should be based on the total size of outputs and their redeeming inputs, but in general it is not possible to know the size of those inputs ahead of time.  P2SH outputs can require arbitrary scripts to redeem.  Even an ordinary output that pays an address may require a compressed or uncompressed public key to redeem.  One approach is to charge all outputs for a fixed additional number of bytes, and charge inputs if they exceed that size.  Another is to ignore inputs entirely, which may make sense if they are typically pruned anyway.  In practice, the policy may be determined by the block size limit.  If the limit applies only to outputs, the profit maximizing behavior will be to charge per KB of outputs and ignore inputs.This is just a sketch of an idea.  It could be turned into a concrete proposal if people think it has merit.  Perhaps it should be considered at the time that the block size limit is addressed, though it could also be attempted as a default fee policy before that. The code in findnonce.c leaks the contents of work structures.  It seems that postcalc_hash() should call "clean_work(&pcd->work);" before "free(pcd);".  Also, postcalc_hash_async should use calloc instead of malloc, otherwise when it calls __copy_work which calls clean_work, there is a risk that clean_work will try to free uninitialized pointers.This problem likely exists elsewhere in the code.  Several other source files use __copy_work but not clean_work, which is suspicious.  Perhaps it would be safer for all work structures to be allocated on the heap with make_work rather than embedded in other structures. The diagram presents a simplified picture where transactions include the public key of the recipient.  In reality, transactions include a script which specifies the conditions required for the funds to be claimed.  Various types of scripts are possible.For payments sent to a public key, the script includes the public key and specifies that funds may be claimed by presenting a signature created with the corresponding private key.More commonly, payments are sent to an address, which is essentially a hash of a public key.  In that case, the script includes the hash and specifies that funds may be claimed by presenting a public key that has the correct hash and a signature created with the corresponding private key.  Thus the sender does not need to know the public key, but the recipient does. I see similar issues with memory usage.  I built bitcoin-qt v0.8.0rc1 on Windows and tested it by downloading blocks from scratch, clearing the data directory each time.On the first attempt, I ran with "dbcache=1000" and "txindex=1" in bitcoin.conf (though I'm not sure the txindex setting had any effect, because I saw "LoadBlockIndex(): transaction index disabled" in debug.log).  It eventually crashed, and there were many bad_alloc exceptions in debug.log.On the second attempt, I did not use any special options.  Memory usage gradually increased to 2200MB while downloading blocks, and then decreased to 1650MB once downloading was finished.  Perhaps the decrease was a result of freeing the blocks stored in mapOrphanBlocks, which I believe contained several thousand blocks that had been downloaded in reverse.It seems there is a memory leak during initial block download.  If this will affect all new users, it seems rather important to fix. In miner.c, is template_nonce supposed to be incremented at some point?  It seems to always be zero. To prepare for the arrival of BFL ASICs, I built bfgminer 2.10.3 and tested it for solo mining with bitcoin-qt 0.7.2.  This is a report of various issues I encountered.1. Build dependenciesThe README file mentions package names for dependencies, but in some cases I had to use different package names on Ubuntu 12.04:Instead of libncurses5-dev, I needed libncursesw5-dev.Instead of libusb-dev, I needed libusb-1.0-0-dev.I don't know if those are errors or just a consequence of differences between distributions.2. SSLI configured bitcoin-qt for SSL using a self-signed certificate as explained at https://en.bitcoin.it/wiki/Enabling_SSL_on_original_client_daemon, but bfgminer refused to connect due to the self-signed certificate.  At first, I fixed it by disabling certificate verification:Code:curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 0);Later, I copied the certificate from bitcoin-qt and told bfgminer to verify using that certificate.  I also had to disable host name verification since I am connecting by IP address:Code:curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, 0);curl_easy_setopt(curl, CURLOPT_CAINFO, "bitcoin.cert");Is there some standard way this is supposed to work that I'm missing?  Maybe bfgminer needs settings to control these SSL behaviors.3. getblocktemplate falling back to getworkIf I stop and restart bitcoin-qt while bfgminer is running, bfgminer detects that getblocktemplate failed and falls back to getwork from that point on.  I fixed it by patching pool_protocol_fallback.  There probably needs to be a way to force the use of getblocktemplate only.4. Long pollingbitcoin-qt does not support long polling, and by default bfgminer only calls getblocktemplate every 120 seconds, resulting in an average of 60 seconds of wasted work per block, or 10% of the total work.  Without long polling, I'd prefer to call getblocktemplate more like every 5 seconds.  I tried "--expiry 5" but found that it decreases the reported hash rate substantially.  The GPU load is also significantly reduced, so the effect is real.  I haven't tracked down exactly what effect the expiry setting is having, but it should be possible to make a new call to getblocktemplate while continuing to do work based on the result of the previous call.  Or am I just not using the correct options?I tried applying pull request 1355 to add long polling support to my bitcoin-qt.  It mostly works: hashing proceeds at full speed and new blocks are detected right away.  The long polling implementation in the pull request is not ideal though.  It only returns when a new block is found, not to update the set of transactions, so that means fewer transaction fees for the miner and slower transaction processing for everyone.  It may be better for getblocktemplate to use the same logic for long polling that it uses to decide when to call CreateNewBlock: if a new block was received or if new transactions were received and at least 5 seconds have passed since the last update.  I tried to simulate that by making getblocktemplate sleep for 5 seconds instead of waiting for a new block.  It seemed to work, and didn't have a major impact on the hash rate.  Trying to handle it on the client side with "--expiry-lp 5" had the same performance problems as "--expiry 5".Another issue with the pull request: it prevents bitcoin-qt from shutting down promptly because the RPC thread is busy waiting for a new block.5. --coinbase-addrThe --coinbase-addr option uses a single address for all mined blocks.  For privacy, it would be better for every block to use a distinct address.  That would require the user to supply a pool of addresses to bfgminer, and bfgminer would need to mark them as "used" in a way that is persistent across sessions.  I think it would be a nice enhancement.My personal preference is for coinbase transactions to pay public keys rather than addresses, mostly because that is how it was historically done from the days of mining directly within the bitcoin client, but I admit it is of little practical importance.  It looks like most coinbase transactions pay addresses these days. "Why would anyone develop and release a GPU miner for free?  Anyone capable of writing GPU mining code could make a ton of money by mining themselves while everyone else is stuck using CPUs.  A little common sense says that these GPU miners can't be real.  Anyone downloading one is just asking to end up with a wallet stealing trojan."The world is full of people with all kinds of motivations. Nice work.A couple of minor wording issues:Small print under the address section: "Receive donations using Bitcoin you too."  Doesn't make sense.Under "But I want 'real' money!": "there are number of ways" -> "there are a number of ways". Here is an earlier thread on this topic, which includes links to the original source code:https://bitcointalk.org/index.php?topic=68121.0 Transaction 5b74b9b294769be261a9caa1310bb648dd6dd530ac75cee9b7c6bfb6d160d07d sends 3 BTC to address 1A1SnqhiTVJ1YqtQZJ7SCr2iRxjsvJaQwf which are then sent to SatoshiDice.  The owner of that address is registered with CoinWorker (see http://coinworker.com/activity/1A1SnqhiTVJ1YqtQZJ7SCr2iRxjsvJaQwf).  Registration on CoinWorker requires an email address.  So by contacting the operator of CoinWorker, user WargeGeoshington on bitcointalk, it may be possible to get in touch with the owner of that address and ask where the 3 BTC came from.Transaction 82f37114f752865b1520eae888913b02f68aea740d830d1afe9487efd6bfa6d0 was sent by the owner of address 17jruemRwRU2NKZhN7UgPkNDbiDE7rZ9q7.  That address receives payouts from the Deepbit mining pool.  Deepbit registration requires an email address.  So by contacting the operator of Deepbit it may be possible to get in touch with the owner of that address and ask what software or wallet service they are using.Similarly, transaction 83abc9588b7a5c6084398f92c88c485e025773c567745b125c977aa1a502bc88 was send by the owner of address 1M2bLtPGNCxufR1eX38z23q1NZYoXkvgw2 which is a Deepbit payout address.Transaction 8a1fae8c8dbb96d1f6b879830f4df948b11ea10806564a60e0197c28f7718d52 spends what appears to be the change from transaction 469e9d456da07abbeffbc7c94e68fcf33dfe850ef50dae1e58647a9c1223bd52, which paid 2 BTC to address 1EQfkKVZndiesJcwThRe5AAq15dZ56mZku.  That address belongs to user theboss on bitcointalk.  By contacting theboss it may be possible to find out where those 2 BTC came from. Why would a new address type be needed?  I thought the point of P2SH was that it's the last time a new address type is ever needed.  Anyone who can send to P2SH addresses should automatically be able to send to addresses using new verification rules. Why are wire transfers affected? It's a change address in a wallet belonging to DeepBit used for payouts to miners.  So you're right, transactions aren't very anonymous at all.  (Or was that not the point you were trying to make?) Block generation is supposed to average 144 per day.  Playing with a poisson distribution calculator, it seems there is about a 10% chance of a day with <= 128 blocks and a 10% chance of a day with >= 160 blocks.  That's already a 25% difference.If you are looking at peaks and valleys in the graph lasting significantly less than a day, say 6 hours, then the average is 36 blocks with about a 10% chance of <= 28 and a 10% chance of >= 44, which is a 57% percent difference.So yes, I think you are mostly seeing random variance.  (Hopefully I got the math right.) Yes. My cards are in a data center.  A few of the earliest ones were run at home, and a few were purchased used with who knows what history, but many of the failures were new cards run exclusively in the data center.My cards are in cases and densely packed with something jammed between them to create small gaps (similar to your blog post but probably even smaller gaps due to the case).  Perhaps heat is the issue, or perhaps the restricted air flow makes the fans work harder.  They are also 5970s which may be worse than 6990s.
Look at your USD transactions under Account History.  Does the transaction that returns the funds to your account say "Usage of Dwolla requires a verified account"? My experience is different.  I too have been mining on dozens of 5970s, continuously, with the fan speed manually forced at 100%, with my oldest cards mining for 18+ months.  I would estimate my fan failure rate is at least 25%.  I don't know the reason for the difference, but if I were starting over now (say with 7990s) I would definitely try to take it easier on the fans. Got it.  Thanks! I'm glad to hear everything worked out!I think Maged made a good assessment of the contributions.  Your proposed distribution seems reasonable.  Of course you are free to distribute the coins however you choose.You can send my portion to 1FtT9htpgKGsEoEdJVu88vMbbsaKzMTcrd.  Thanks! No.  The question is what service Xenland was sending from when he made the payments to people in this thread.  According to evidence in the block chain, the service that received Goat's original 1.96 BTC (and the 400 BTC) is the same as the service that sent payments to the addresses in that thread.I think it is GLBSE.  Goat, did you contact Nefario yet?  I'm trying to resist PMing more people on your behalf. If you don't see the funds in your GLBSE account, contact Nefario.  He may be able to find the funds in an old wallet. How about GLBSE?I found a reference to a 0.005 BTC withdrawal fee in this post.Also Xenland uses GLBSE.Goat, perhaps you sent the 400 BTC to your GLBSE deposit address? Yes, exactly.  That's one of the addresses mentioned in my post.  Here is my explanation for the other:Transaction a5384746ab9ece2733d3b3f13c9e3f6815f428ce0954a735a7742a80c7548965, which spent your 1.96 BTC, also spent 0.01053468 BTC, which came from transaction 13b3f304e35a08d7942db489c1d02ce54a65ec0ffbfbb35263c4dbefd3432669.In that transaction, the 0.01053468 BTC seem to be the change.  The other output was 0.995 BTC to address 1AvZBfz7txnLHsLVna9Liw7tFCKZTgqTyM.  That address was posted by user Cory in the same thread.So it seems very clear that you sent your 1.96 BTC to the same wallet that Xenland sent his payments from in that thread.  It is not necessarily his wallet -- it could be an online service.I sent a PM to Xenland and he said:I then asked if he remembered sending those payments from an online service.  His reply: As casascius pointed out, the person (or wallet) you sent the money to tends to make payments that are 0.005 BTC less than a round number.  Looking at the addresses that those payments went to, some of them appear to be addresses that were posted in this thread: Break My Website | Cheaper in Bitcoins.For example:1AvZBfz7txnLHsLVna9Liw7tFCKZTgqTyM14GRFHDKQgpwkBDfANAum3MBpJsFKBvz9gTherefore, I would suggest that your 1.96 BTC and 400 BTC were sent to Xenland, or at least to a wallet service that he was using at the time.  I would suggest contacting him to see if he has them, or if he can tell you which service does. I don't think that's true.  In recent blocks I see some bets and payouts occurring within the same block.  Also, see this statement from the site operator:I outlined some potential attacks on SatoshiDice in another thread.  Perhaps one of them would meet your needs: They cross-compile under Linux using Gitian to create reproducible builds.To do it under Windows, I think you'll have to build a statically linked version of Qt from sources.  I have not tried it though. Is the crash bug that was fixed likely to be the cause of std::bad_alloc exceptions that I've been receiving on Windows occasionally?  (I'm running a custom build with some code modifications so I wasn't sure if the exceptions were my fault or something wrong in the system.) Here is an easier double spend attack:5. Bet transaction that won't confirm: Intentionally construct a bet transaction that miners won't include in blocks due to fee rules.  Then after you see whether you won or lost, you have plenty of time to mine your own block that includes either the bet and payout transactions or a double spend of the bet transaction.  Of course not all miners follow identical rules so you may not have an arbitrarily long amount of time to mine the block, but it makes the attack much more feasible and profitable than if you had to mine the very next block. One more possible attack:4. Duplicate transactions:  It is possible for the same transaction hash to occur more than once (see BIP 30 for details).  Since the result of a bet depends only on the day's secret and the bet transaction hash, it is possible to place a bet and if it wins, repeat the same bet again within the same day.  For example, prepare some transactions as follows: Mine a block with address A, then send the coins to B, then to C.  Mine another block with address A and send the coins to B.  Mine another block with address A and leave the coins there.  Now you can send coins from C to SatoshiDice and if the bet is a win, place two more bets B->C->SatoshiDice and A->B->C->SatoshiDice.  The site could prevent this attack easily though (perhaps even unintentionally, if it uses transaction hashes as keys in a database to determine whether a payout has been sent). So, has anyone executed a double spend attack on SatoshiDice yet?  The site claims it is not possible because the payout transaction depends on the bet transaction, so reversing the bet will also reverse the payout.  But that doesn't prevent attacks: all you have to do is wait to see if you win or lose, then reverse the bet (and hence the payout) only if you lose.  It could be done in a few ways:1. Simple race: Try to connect to SatoshiDice as directly as possible, and as soon as you receive a losing payout, send a double spend of the bet transaction to any parts of the network that have not yet seen the original bet.  The site could prevent this attack fairly effectively by introducing a small delay and sending the original bet transaction to as many nodes as possible (especially mining nodes).2. Finney attack: Generate a block that contains a payment to yourself but don't distribute the block.  Send the same coins to SatoshiDice.  If you lose, distribute the block and reverse the losing bet.  If you win, don't distribute the block.  This attack requires you to give up the block reward in the case of a wining bet, so it is only effective if bets can be high enough.  With current bet limits, it could be marginally profitable.  If bets of say 1000 BTC were permitted, attackers would be all over that.3. Mining attack: Place a bet as usual.  If you lose, try to put a double spend of your bet transaction in the next block you generate.  With a few percent of the network hash power, you could overcome the house edge and make a profit.  Any decent sized mining pool could profit from this attack now, regardless of betting limits. I think this is a good fit for Bitcoin.  It seems like a risky business that could really benefit from Bitcoin's irreversibility.  You could do it without collecting any identity information.I would give your service a try as long as it is reasonably competitive with other discount sellers.  Discounts of around 5% off of face value seem fairly common.  By avoiding CC/PayPal fees you should have a better margin (though much lower volume for now unfortunately). I don't think anyone has a definitive answer on why it was done.The only real benefit I see is that the current behavior is easy to explain and understand.  It is clear what the block reward will be at any given time, and it is easy to see how the sequence of block rewards results in a total of 21 million coins: 50 + 25 + 12.5 + ... = 100.  100 * 210,000 = 21,000,000.  (In reality the total is slightly less than 21 million because the reward is truncated to 8 decimal places.) In theory, there may be a new best chain where the block height stays the same or decreases.  The best chain is defined as the chain with the greatest total work, not the most blocks, so it is possible for a chain to contain fewer blocks yet represent more work (the blocks had a higher difficulty).In practice it is unlikely to occur on the main bitcoin network.  Perhaps if two miners simultaneously generate the final block in a difficulty period with different block timestamps and thus different difficulties for the next difficulty period, and then two miners who chose to build on different blocks simultaneously generate blocks once again, you could see a new best chain that is the same height as the previous best chain.  That would be quite rare though. 7dae7272a356d1340d02a81690951e7323823b9f534da1c8b120acb08b106f4c is in block 177208.I don't see the other one in my debug.log. It seems to be fixed.  Now the salt is 12 characters, or 71 bits of entropy.
You have an off-by-one error somewhere.  See block 174718 on Block Explorer.Listed immediately after transaction 3793b35c4714250cbba396bbdfb481bc3ba5c621aa4bc7784839c374479d4c40 which you claim is strange, you will find transaction 7eaa56d72ef929deaf1323b18c1781b87ba203c2653a5278840b43aaa3f8586d which is the actual strange one, with the P2SH output "OP_HASH160 433ec2ac1ffa1b7b7d027f564529c57197f9ae88 OP_EQUAL". OP_HASH160 [20-byte-hash-value] OP_EQUAL is BIP 16, but the transactions you linked don't seem to be in that form. One approach is to perform computations on encrypted data without knowing how to decrypt the data, which is called homomorphic encryption.This is apparently a practical implementation: An MIT Magic Trick: Computing On Encrypted Databases Without Ever Decrypting Them You asked for reasons against the idea, but what is needed is reasons for the idea.  It doesn't solve any problems with the bitcoin system, so there is no reason to implement it.  Orphaned blocks are not a problem.  If 1% of blocks are orphans, it just means that the difficulty will be 1% lower, and miners will on average get just as many bitcoins despite the occasional orphaned block. Miners have a financial incentive to make sure their blocks are accepted so they get paid.  This proposal tries to use that incentive to force miners to include transactions, but it ignores the impact of that incentive on miners who must decide whether or not to reject blocks that contain too few transactions.As a miner, if I choose to ignore the longest chain because it contains too few transactions and I instead build a block parallel to that chain, I face the risk that someone else may build on the other chain instead of mine, invalidating my block.  If I instead build a good, transaction-containing block on top of the longest chain, I can avoid that risk.  Therefore, I am unlikely to choose to participate in the proposed scheme, and if code that implements the scheme is added to the standard client, I am likely to disable it for my mining operation.I also think this is not really true:Because of the risk of generating an orphaned block, the only time it is safe to reject a block is if you can be sure that almost everyone else will also reject it.  It's not enough to have a majority (as with a change like P2SH).  Even if 90% of miners will reject a particular block, choosing to reject that block yourself will result in wasted work 10% of the time.  The system can only work if everyone follows the same rules.  It seems nearly impossible to get such a system off the ground.  Any proposal must address these incentive issues. kjj's explanation is good.  Here are a few more details.camem seems concerned that this attack will become easier as the difficulty increases, but that is not the case.  Let's assume you are trying to precompute a block that will occur at a specific future block number.  Suppose that at the future difficulty the first n bits of the 256-bit hash must be zero.  Then there are 2^(256-n) possible previous block hashes you must try to build on, and for each of them you must try 2^n hashes to find a block that meets the difficulty.  Therefore the total number of hashes required is 2^256, enough to thoroughly break SHA256.If you don't care which specific future block number you are precomputing, you can try fewer previous block hashes and wait until you see one of those hashes, but because the timestamp only has a few hours of flexibility, the difficulty of the attack only improves to about 2^252.Guessing the subsidy is not a big problem.  Guessing the nBits is harder (assuming you are precomputing a block after the next difficulty adjustment), but not as hard as you might think.  Because of inefficiencies in the compact representation used for the nBits, it only has about 16 bits of precision when the high byte of the hash target has a high bit of 1.  Assuming you can guess the difficulty within a factor of 256, the total difficulty of the attack becomes about 2^268. I just tried 0.6.0rc4 on Windows.  I was playing around with the QR code dialog, typing/pasting more and more text into the BTC Message field and watching the QR code change.  Eventually the application crashed. Earlier thread on this topic:how can I get a copy of the original source (0.1.0)? I don't think you are talking about the same thing.  I have experienced cases where the power switch is more reliable than the reset switch at fully restoring a machine to working condition, especially when GPUs get into funny states.  I have also experienced cases where the motherboard power switch is not enough to bring the machine back up, and cutting power to the power supply is needed.  I think that happens when a safety feature in the power supply triggers as a result of some power issue.  It is rare enough that I don't worry about it--the motherboard power switch technique works well enough for me. It sounds pretty much like what I already use.  See Kit 108 on kitsrus.com.  It is a serial port controlled relay board with 8 relays.  Available assembled from sources including:http://www.electronickits.com/kit/complete/elec/ck1610.htmhttp://www.electronics123.com/s.nl/it.A/id.291/.fI just had to wire it into the power switch of each machine.  I used some phone wire spliced with these power switch extension cables:http://www.frozencpu.com/products/1835/ele-187/FrozenCPU_Standard_Motherboard_Power_Switch_Extension_Cable.htmlSo yes, it's a good approach, and I would have been interested in a ready made solution with all the necessary wiring if it were available when I was looking, but I already have what I need now. Here's a link to the comic online:http://www.gocomics.com/reallifeadventures/2012/02/04 Yes.  That value would become the cost basis, and any price change from then until you sell would be a capital gain or loss.  Bitcoins held for over a year would be eligible for the more favorable long term capital gains tax rates (in the US).It is risky to generate bitcoins and incur a tax liability without selling, because if the price later collapses you may owe more tax than the value of the bitcoins.  You can sell and take a capital loss, but capital losses can only offset $3000 of ordinary income per year (in the US), so a large mining operation may take many years to recover the funds.  It would be safer to sell at least enough to cover expenses and taxes. You are right -- these issues are far from clear.For my personal tax situation I have come to the conclusion that the 50 BTC awards for solo mining are not in fact created by the miner.  (Consider that you may create a perfectly valid block but another miner wins the race and your block becomes orphaned.  You have created the block, but the reward only exists if the network accepts the block.)  Granted it is a counterintuitive and controversial position.I don't view my business as creating and selling bitcoins, but rather performing computations in exchange for bitcoins.  The bitcoins are taxable as business income and expenses are deductible as business expenses.  Anything I do with the bitcoins after that, say holding them for 20 years and then selling them, is a personal investment activity, not a business activity.  It's one perspective to consider anyway. Suppose I offer the service of password cracking using a cluster of GPUs in exchange for bitcoins (and I am in the business of doing so).  Would you now consider that to be a taxable barter transaction?If so, how is it different if I offer the service of block generation and transaction processing in exchange for bitcoins?  Does it not come down to the question of whether I am creating the mined bitcoins or receiving them in exchange for a service?I still think there is a significant chance that mining bitcoins amounts to barter -- certainly in the case of solo mined transaction fees, likely in the case of payments received from pool operators, and quite possibly even in the case of solo mined 50 BTC block rewards granted by the other network participants in exchange for helping to secure the network. Interesting.  So you are saying that in Canada if a store sells someone a T-shirt and accepts payment in the form a gold coins (or a barrel of oil or whatever), no income tax would be due?  And similarly if a plumber repairs someone's leaky sink and accepts gold coins, no income tax would be due?  I'm not aware of anything that would cause such treatment in the US, hence the questions about whether the bitcoins are created vs. received as payment.  It may not matter in Canada.In a mining pool, you are not necessarily receiving (a portion of) the 50 BTC reward either.  In a PPS pool for example, you are receiving a fixed payment for submitting a fixed number of shares, regardless of how many blocks the pool finds, so it's more like you are being paid in bitcoins for hashing work.  Even if the pool operator is seen as "manufacturing" new coins that are not taxed at the time of manufacture, it's not clear that such treatment would extend to workers in the pool.  (Again, this is based on my understanding that bitcoin income is taxable in the US.  Maybe it is off topic for this thread.) There is still a question of whether bitcoins obtained via mining are created by the miner, and thus similar to manufactured goods, or are received as payment for performing a service, and thus similar to barter income.The portion of mined coins coming from transaction fees in particular seems like payment for a service, but even the new 50 BTC may be seen as a payment.  A miner can't simply do a million times as many hashes and create 50 million bitcoins.  Miners only get what the other network participants are willing to grant.  In the US, payment for a service would be taxable regardless of whether the payment is in gold, Beanie Babies, or bitcoins. I managed to extract the following from the 11.12 driver:Cypress: VLIW5Juniper: VLIW5Redwood: VLIW5Cedar: VLIW5Cayman: VLIW4Barts: VLIW5Turks: VLIW5Caicos: VLIW5WinterPark: VLIW5BeaverCreek: VLIW5Loveland: VLIW5Tahiti: GCNPitcairn: GCNCapeverde: GCNDevastator: VLIW4Scrapper: VLIW4So I'm inclined to believe recent reports that all of the higher end cards are using GCN. Yes, thank you for the response (both on the help desk and here).It is an understandable policy, but it can also result in confusion when using a withdrawal to pay someone that you don't know is using Mt. Gox.  You might consider providing some indication that a withdrawal was processed internally, e.g. on the withdrawal confirmation page and the transaction history.Even that may not be enough for some use cases, like if a third party is supposed to confirm that a transaction took place by looking at the block chain.  But I understand the desire to avoid unnecessary transactions, so the tradeoff may be acceptable. I've been waiting on a withdrawal for 17 hours now.  After 3 hours I sent a support request and immediately received a response:I'll be generous and assume that "If it is resolved" means "When it is resolved" -- probably an English-as-a-second-language thing.  But clearly they are having problems.  It makes Mt. Gox pretty useless as an online wallet right now.  If the withdrawal does not go through soon, I will have to contact the store I was sending the payment to and arrange to send a separate payment and have them refund the extra payment from Mt. Gox whenever it arrives, otherwise I risk not getting the item I ordered in time for Christmas. This question may be a result of some feedback I provided.  I bought a Christmas gift from Cheaper in Bitcoins because I wanted to support the Bitcoin economy, and also to have a real example I can tell people about that demonstrates the practical usefulness of Bitcoin.  But the fact is I could have bought the same item for less from Amazon, plus gotten free shipping, plus probably received the item sooner.  A few Bitcoin enthusiasts may buy under those conditions, but most people will shop around for the best price.The real question is how a small Bitcoin business can offer products without being undercut by mega-stores.  One way is to offer less mainstream products that aren't sold by the big stores.Here is an example:  My wife and I saw a tissue box cover that we liked in a store, but it was the wrong shape (long rather than square).  I looked online and found that the size we wanted exists, but I could not find anywhere to buy it.  I found the manufacturer in Thailand, but they sell to stores and hotels, not individuals.  If you stocked products like that directly from small manufacturers, no direct price comparison would be possible (though people could still compare with similar products).Another example: A store that sells funny T-shirts could pretty easily be the only place offering specific T-shirt designs.  Maybe it would be possible to team up with a local store that doesn't have an online presence.Of course it's great to be able to buy mainstream products for bitcoins as well, as long as prices are competitive.
I see a lot of interest in using bitcoin as an intermediate currency just to transfer other currencies from place to place.  Even without the volatility issue, I'm not sure how cost effective it is.  Exchanging between bitcoin and other currencies has costs: both the fees charged by exchanges as well as the spread (e.g. the price at which you can buy 100 BTC is not the same as the price at which you can sell 100 BTC, even ignoring fees).  You could easily lose a few percent to currency exchange costs.  It's still a lot better than paying a $50 wire transfer fee on a $1 transfer for example, but in many situations you may not come out ahead. I have a couple gifts that I'm planning to buy with bitcoins.  I wish I could get into bitcoindeals.com to look for more.  (Anybody have an invite code to share?) That is the link you get by navigating from the AMD home page, but it doesn't work.  You have to change "amd" to "ati".http://www2.ati.com/drivers/linux/ati-driver-installer-11-11-x86.x86_64.run "sendtoaddress" expects the address first, then the amount.  "0.0001" is indeed an invalid bitcoin address. I thought the biggest problem was with stolen credit cards, not people performing chargebacks with their own cards.It doesn't matter what communication happened between buyer and seller or what proof of delivery is provided if it wasn't the legitimate cardholder making the purchase. I use kit 108 from kitsrus.com, purchased assembled from electronics123.com (http://www.electronics123.com/s.nl/it.A/id.291/.f?sc=8&category=35).It has 8 relays controllable by serial port.  I wire them into the motherboard power switch connector.  One box can reboot 8 machines.  Of course you need two boxes connected to two separate computers if you want to reboot the machine controlling the relay box. He's doing it intentionally.  From #bitcoin-dev on IRC a few days ago: For anyone booking at The Roosevelt Hotel, try discount code SWEET or FACEB2 for 10% off and free wifi. What is the final 01000000 at the end of the transaction?  I would expect it to end with the nLockTime = 00000000.Edit: I guess it is SIGHASH_ALL which you used while signing.  That isn't part of the actual transaction. Code:bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex){    ...    if (vtx[0].GetValueOut() > GetBlockValue(pindex->nHeight, nFees))        return false;    ...} It's not an image.  It's an IMG tag pointing to the TradeHill home page, which is HTML.  So there is no valid avatar image, but viewing a page containing that IMG tag results in a cookie for TradeHill referral code TH-R195.  That pretty clearly meets the description of "cookie stuffing" on wikipedia. You mean like setting your avatar URL to a TradeHill referral link?http://forum.bitcoin.org/index.php?action=profile;u=16339 I received such an email.  I determined it was most likely from Mt. Gox because I had recently changed my email address on Mt. Gox to a new, unique one and the email came to that address.  The strange From field is disconcerting, but I think it is a misconfiguration rather than an attack in this case. Thanks for sharing this.  I'm no lawyer, but I've thought a lot about tax treatment of bitcoin mining and come to some different conclusions.  I'd love to hear your thoughts.Assume we're talking about someone mining bitcoins directly (no pools, mining contracts, etc.).  Mined bitcoins come from two different sources: the block reward (currently 50 BTC) and transaction fees.Transaction fees are not new bitcoins at all.  They were paid by someone performing a transaction and can be claimed by the miner who generates the block that includes that transaction.  I think you'd be hard pressed to say they were manufactured.  It seems more accurate to consider them as payment for the service of processing the transaction.  As such, I believe they would be taxable based on fair market value in the same way that a payment in USD for the same service would be taxed, and the FMV would become the cost basis.The 50 BTC block reward is a different story.  They are newly issued coins, and it seems logical to consider them as having been manufactured, but even that does not seem 100% clear cut.  For example, I can easily change one line of code from 50 to 100 and let my computer look for blocks of 100 coins.  When it succeeds, I still won't end up with 100 coins because the rest of the network will reject it.  Or I could do all the correct work to generate 50 coins, but someone else finds a block at about the same time and the network chooses to accept that block and reject mine.  I think you could make the case that bitcoins are not being created by the efforts of the miners at all, but are being granted to the miners by the rest of the network as payment for doing computations that the network deems acceptable.  You might even say that all 21 million coins already exist, and they are just being distributed.  It's not physically possible to repeat the block solving work 1 million times and end up with 50 million coins, which would be the case with any normal manufacturing process.The latter argument is much less clear than the transaction fees, but I've become somewhat convinced.  I'd love to hear your thoughts on both. Stolen credit cards, for one thing.http://forum.bitcoin.org/index.php?topic=1442.0 One of my withdrawals went through just now (and appears in my Dwolla balance).  Still waiting on the others. I don't know the rules in Spain, but looking up tax treatment of barter would be a good place to start. What jurisdiction are we talking about?In the US, barter is taxable.  You haven't specified what the payment in #1 is for, but if it would be taxable as cash it will also be taxable as bitcoins.Suppose you mow someone's lawn and they pay you with cash.  The cash is taxable income.  Now suppose instead they pay you with carrots.  You still have taxable income equal to the fair market value of the carrots.  It's the same thing with bitcoins: the fair market value of the bitcoins is taxable income.On the other hand if you receive cash as a gift or repayment of a loan or something like that, it isn't taxable, so it also would not be taxable if paid in bitcoins.When you get rid of the bitcoins, either by selling for cash or trading for something else (carrots, gold, etc.), capital gains tax will be due on any gain in value. For accurate tax advice, you need to specify what country you are asking about.  (You also need to ask a tax professional, not the internet, but that's another matter.)In the US, this is how I would look at it:  Bitcoin mining is a business with income and expenses declared on Schedule C.  Renting a mining box is a business expense which reduces your taxable income.  Bitcoins produced are business income, taxed based on the fair market value of the bitcoins on the day you received them -- even if you haven't yet sold or traded any of them.  (Others may disagree with this interpretation.)When you later sell some of the bitcoins, you have a capital gain or loss equal to the amount you sell them for (or the fair market value of the goods you trade them for) minus the cost basis.  The cost basis in this case is the fair market value on the day you received them, so the capital gain or loss represents any change in value after that time. I haven't found this forum to be a good source of legitimate tax advice.  You're probably better off finding a forum dedicated to that.I can't speak for the UK, but in the US if you sell something at a gain and then buy it back later, you still owe taxes on the gain.  On the other hand, if you sell something at a loss and buy it back within 30 days before or after the sale, it's called a "wash sale" and you are not allowed to use the loss to reduce your taxes.  The asymmetrical rules seem unfair, but it's an attempt to prevent people who have losses on paper from selling and rebuying for no purpose other than tax reduction.  The wash sale rules speak of "stock or securities" though, so there may be a question of whether bitcoins fall under those rules.In the US there are also some special rules that apply if you meet the definition of a "trader in securities" but I haven't looked into the details.  The UK will be different anyway.
It's linked from Mt. Gox under Add Funds -> Other: I received email 1.5 days ago saying that mine was "marked for retry" but it hasn't gone through yet, nor have a couple of more recent withdrawals.I wouldn't be surprised if there is a backlog while more funds are being added to Mt. Gox's Dwolla account or US bank account or something like that. I also made a withdrawal on Friday 5/27 that went missing, despite having successful withdrawals before and after that one.  Perhaps a whole batch of withdrawals failed to be processed that day.  I emailed Mt. Gox a few hours ago. The point is simply that a web site has unlimited space, so they can publish as many articles as they want.  A print publication is space-limited, so making it into print has greater significance due to selectivity. From the bottom of the article:Can anyone verify whether Bitcoin actually made the print edition? See this thread for previous discussion on the topic:http://forum.bitcoin.org/index.php?topic=1814.0 You could get Bitcoin to sign something with a private key that you don't control by requesting a withdrawal from an online wallet service or other site that holds bitcoins for users.With repeated deposits and withdrawals, it is at least plausible that such a site could be vulnerable. I am selling a variety of used PCIe risers.  I've listed what I paid for them (in USD).  As a general rule, I'm looking to get about half what I paid (BTC accepted of course), but feel free to make an offer.  Larger orders preferred; for small orders I'll need to charge a little extra to cover shipping.  I'm in the USA.  Buyers from other countries may need to pay a bit more for shipping.1. PCIe x1 to x16 adapterPaid $16, 1 available2. Cheap, low quality 6" PCIe x1 flexible risersUnmodified: paid $4.50, 5 availableWith the end sawed off so it can take an x16 card: paid $4.50, 6 available3. Expensive, high quality PCIe Gen 2.0 x1 flexible risers6" unmodified: paid $58.50, 1 available12" unmodified: paid $73.50, 5 available12" with the end sawed off so it can take an x16 card: paid $73.50, 2 available4. 12" PCIe x1 flexible risers with separate powerThese risers take their power from a separate connection rather than the slot on the motherboard, which is useful if you have too many cards drawing power from the motherboard.I have two varieties:Power from standard ATX power supply: These draw power from a standard floppy connector.Power from external 12V power supply: These also use a floppy connector, but only the 12V and ground pins are used, allowing a 12V-only power source to be used.  This can be useful if you need to draw power from a power supply rail that only supplies 12V.  I have some adapters that can be used to convert from 6-pin PCIe to floppy (via molex) for this purpose -- see below.Power from standard ATX power supply: paid $46, 3 availablePower from external 12V power supply: paid $56, 6 available5. 6-pin PCIe to Molex power adapterConverts a 6-pin PCIe power source to a Molex connector.  Only 12V is provided, not 5V.  Useful for things that only need 12V, like fans or the powered riser above.Paid $12.95, 6 available6. Molex to floppy power adapterConverts a Molex power source to a floppy power connector.Paid $2.95, 4 available I can't for the life of me figure out why the tools are written this way.  It is quite easy to avoid the problem.The core task is to estimate the hash rate by looking at recent blocks (either the last n blocks or all blocks in a fixed window of time).  The number of hashes that it took to calculate each block can be estimated based on the difficulty in effect for that block.  Add those hash counts and divide by the total time, and you get an estimated hash rate.  It works regardless of changes in the difficulty.  Then use the hash rate to calculate other things like when the difficulty will change and what the new difficulty will be. Agreed.  I looked at the rules for inventories when trying to figure out bitcoin taxation.  I didn't see an indication that inventories are taxable prior to sale.  Rather, it seems that tax is due on income when goods are sold.  The income is reduced by the "cost of goods sold".  For a retailer, that would primarily be the amount paid for the goods, and for a manufacturer, the cost of manufacturing and raw materials.That said, the first question is whether bitcoins are inventory or a capital asset.  That affects whether they are eligible for the more favorable capital gains tax rate and whether there is a limit on deducting losses.  I found an interesting discussion of the distinction in the context of real estate: http://www.nysscpa.org/cpajournal/2007/707/essentials/p42.htmProperty is a capital asset unless it meets one of the specific definitions of a noncapital asset, one of which is "Stock in trade, inventory, and other property you hold mainly for sale to customers in your trade or business."If you mine bitcoins and sell them all on Mt. Gox, it may be true that they are held "mainly for sale" but I would question whether they are for sale "to customers".  If you sell via an exchange or market without even knowing who bought them, and without any advertising, salespeople, etc., it hardly seems that you are in the business of selling to customers.  I found some discussion of what constitutes a "customer" in this article (search for "customer"): http://www.chapman.com/media/news/media.858.pdfIf you are running a business like Bitcoin4Cash (in the U.S.), it's a different story and the bitcoins are likely inventory.  If you advertise bitcoins for sale on #bitcoin-otc, it's more of a gray area.  If you mine coins and hold them as an investment, they do not seem to be held "mainly for sale".  If you sell some and hold some, it's another gray area.Information is for entertainment purposes only, this is not tax advice, etc. This is a complicated question.  Assuming we're talking about someone who mines bitcoins directly (no pools, mining contracts, etc.), mined bitcoins come from two sources: the block reward (currently 50 BTC) and transaction fees.Transaction fees seem very much like payment for the service of including the transaction in a block.  As such, they would be taxable.The block reward is trickier.  Are they like a manufactured product, in which case they would not be taxable until sold?  It's not so clear.  There are a finite number of them, and they are granted to you for following a set of rules enforced by everyone else in the network.  I think the case could be made that the block reward is also a form of payment for the service of generating a block, though it is not clear exactly who the payment is from.Pooled mining seems like offering computing services to the pool operator in exchange for payment in bitcoins, and thus may be taxable as well.I'd be careful about assuming that no taxes are due when mining bitcoins that have not yet been sold. It sounds like the GPU is throttling due to heat -- not the core GPU temperature, but the VRM temperature.  Are you overvolting?  If so, that is almost certainly the problem.  The first GPU on a 5970 has poor VRM cooling and can't take much overvolting. If a scammer uses a stolen PayPal account to make a payment, I'm pretty sure the account owner can report the payment as unauthorized and get it reversed regardless of the payment method.Or perhaps a scammer links a PayPal account they create to someone else's bank account or credit card and the account owner reverses the transaction.Or perhaps they just call PayPal with a story like "My kid made this transaction when I was away from the computer" and get away with it.The Bitcoin community has seen a lot of PayPal-based scamming in the past. cypherdoc, it sounds like you are unable to see the table of open orders on the Trade page.  From there you can cancel open orders.  If you have an open order without enough funds and funds later become available, the order becomes active and can execute unexpectedly if you weren't aware of it.There used to be a bug in the site layout where the table was placed below a very large empty space if the browser window was too narrow.  I didn't see the table and thus had similar problems to the ones you describe.  The layout bug has been fixed for me for a long time, but perhaps your browser is still affected. Thanks for this.Mt. Gox data seems to start on August 17, but Mt. Gox opened on July 17.  Is the early data missing? Comparing with the numbers that appear when you hover over the graphical chart, I believe the four numbers are [open, high, low, close].Also, the data ends with this: "start":1279424586,"period":8640086400 seconds is 1 day.  1279424586 is Sun, 18 Jul 2010 03:43:06 GMT (http://www.onlineconversion.com/unix_time.htm).  I take that to mean the end of the July 17 trading day in Mt. Gox's time zone.  July 17 is also the date Mt. Gox was announced (http://bitcointalk.org/index.php?topic=444.0), so I'm guessing that is where the data starts.We still should have a more official (and complete) source rather than reverse engineering the site. I emailed Mt. Gox about this yesterday.  No response yet.  The closest I've found so far is https://mtgox.com/data/allHistory.json, which is the data behind the "All time" chart.  It seems to have open/high/low/close per day but is missing recent data. You sure do like giving away money!Account #768608 We already assume no attacker has 50% of the computing power.  If we choose an adjustment rule based on median block size, it should be immune from that type of attack. I wouldn't even try to introduce mining on weusecoins.com.  I see it as a site to introduce bitcoin to average users (and merchants).  Average users are not going to be mining.  Mining is enough of a distraction from real uses of bitcoin as it is - we don't need to make it more so.
I just finished developing an SL3 hasher, so I could use a case to test it on.To compensate for not being able to use my GPUs for bitcoin generation, I will need to charge 20 BTC per SL3 code.  That is about 16 USD or 11-12 EUR, which is more than the 8 EUR you mentioned.How many codes do you need to calculate?  If you agree to pay for several at 20 BTC, I will calculate the first one for free as a test of my services.  I would expect payment in advance for the others. Difficulty is proportional to the value of the expected reward for solving a block.  As long as the reward is dominated by the newly minted 50, 25, 12.5, etc. BTC, difficulty will be proportional to price.Eventually the reward will be dominated by transaction fees.  It is reasonable to expect BTC-denominated transaction fees to be adjusted as the value of a bitcoin changes.  For example, maybe a typical transaction will cost the BTC equivalent of 0.01 USD.  If bitcoins increase in value by a factor of 10, BTC-denominated transaction fees will likely decrease by a factor of 10.Therefore in the long term, computational power and hence security will be proportional to the volume of transactions, or more precisely, the total value of transaction fees per block. Hello iulik2k1,I'd like to test the speed of the SL3 hashing.Do you have an already solved example that could be used for testing?  For example, what is the input to ighashgpu and what is the expected output?  Or if you don't have a solved example, at least the input (how to run ighashgpu for a specific case of SL3 unlocking)? The original post is spam.  Google the post contents -- the identical wording is on many sites. The current client has default fees, but they are not enforced, so miners can change them if they like.  My proposal is the same.  Is that price fixing?The current client has a hard limit on block size to prevent spamming by miners.  My proposal is the same.  If we ever bump into the hard limit, it becomes an artificial restriction on the rate of transactions, driving up prices.  Is that essentially equivalent to price fixing?I guess I do worry that miners might allow block sizes up to the hard limit while charging no fees or too low fees (too low to compensate the rest of the network for storing that block for all eternity).  I'm not sure what to do about that.  The only solution seems to be for other miners to reject blocks that charge too little fees, which definitely seems like price fixing. In the future when bitcoin is heavily used, I don't see any value in a "free transaction lottery".  It adds complexity for no apparent reason.If bitcoin is underused, sure, free transactions are nice.  I just don't see any good solution to the spam problem, and it already seems that micropayments from pools are bumping into the limits.  I'm not sure it makes sense to invest in a system of free transactions that works in the short term if it will be obsolete in the long term anyway. Why do we think there should be any free transactions?  Of course free is nice, but is it workable?First, even assuming there is no transaction spam, we must somehow choose an appropriate amount of free space per block.  If we make it large enough that all free transactions get into blocks, adjusting periodically as transaction volume increases, there will never be any fees, which doesn't seem sustainable.  If we limit it, we have usability issues.  How do people know when to include a fee?  An ever-increasing queue of free transactions seems likely.Second, whatever free space we do allow will be consumed by spam.  It doesn't seem possible in general to distinguish spam from legitimate micropayment use cases.  And do we actually care?  If legitimate micropayments generate huge transaction volume, we probably don't want to allow them for free anyway.Including transactions in a block has a real, non-zero cost.  If we charge a fair price, a lot of problems go away:1. No more spam.  Or at least, spam is paid for.  If the price is fair, who cares?2. No need to increase fees with block size.  If all transactions are required to pay a fair price, we can just include all transactions in a block immediately.3. Everybody knows what fee to include to have their transaction processed promptly.Granted, we still need some upper limit on block size to prevent block generators from spamming 1 TB blocks.We just need to come up with a fair fee.  Filling 1 MB with 5000 200-byte transactions at 0.01 BTC each would cost 50 BTC, or about $50.  Perhaps that's reasonable.  At 0.0001 BTC, it would cost about $0.50.  That seems too low.  I was hoping we could tell people "transactions cost a hundredth of a cent" -- but maybe "transactions cost a penny" is good enough. Perhaps this will help:printf "%s%s%s%s%s%s" 01000000 0000000000000000000000000000000000000000000000000000000000000000 3ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4a 29ab5f49 ffff001d 1dac2b7c | xxd -r -p | openssl dgst -sha256 -binary | openssl dgst -sha256 -hex6fe28c0ab6f1b372c1a6a246ae63f74f931e8365e15a089c68d6190000000000A key thing you were missing is byte swapping.  I manually byte-swapped all the inputs.  You'll have to figure out how to script that. Or it could be a case of a scammer who hacked into a Mt. Gox account.  (Remember the dictionary attacks recently?)  Mt. Gox may have a good reason to know the BTC are stolen in that case. I looked at the inputs to the transactions supposedly "from scammer":2011-01-07 02:49:29 - 3134.8 BTC (in) ---> From scammer2011-01-08 10:27:16 - 3174.6 BTC (in) ---> From scammer2011-01-09 10:47:30 - 3096.9 BTC (in) ---> From scammerOne of them was a transaction from me, depositing BTC into Mt. Gox.  So one if not all of these transactions came directly from Mt. Gox.  Of course there could still be a "man on IRC" using Mt. Gox as an online wallet. I'm somewhat concerned about this.My (rather uninformed) impression is that if an innocent party receives property that turns out to be stolen, they have to return it, regardless of how many hands it has passed through.The situation with money seems different, because money is fungible.  If someone receives money from many sources over time, one of which is from theft, and pays money to many others over time, who is to say who ended up with the stolen money?Does it matter if the serial numbers of the stolen bills are known?  Suppose a thief steals some $100 bills, goes to a bank and exchanges them for $20 bills, and then vanishes.  Does the bank have to return those $100 bills because they are the stolen ones?  If the bank gives them to me as a withdrawal, do I have to return them?It will be dangerous to accept bitcoins as payment if they become subject to "stolen property" treatment.  A large number of bitcoins may eventually have something shady in their past.  It's not a question for the bitcoin community to decide -- it's a legal question. Is this a market service where customers trade with each other, or an exchange where customers trade with you at buy/sell prices you specify?I tend to prefer a market based approach, but there is room for both.  If you're going to offer larger spreads/worse prices than those available on Mt. Gox, it won't be so appealing.  I definitely like the idea of transferring funds via standard methods like a normal business rather than making people deal with things like Liberty Reserve. Proposal:I will pay 8 BTC for a $10 T-Mobile To Go refill code as offered in the other thread, under the following terms:1. You must send the code first.  Once I receive it and successfully apply it to my account, I will send the bitcoins.2. I will send the bitcoins directly to someone that you owe bitcoins to.This requires agreement by both stevenbucks and someone who is owed bitcoins.  Any volunteers?  The bitcoin receiving address should be posted to the thread so anyone can verify that the payment was made. Current payout rate: 0.00173091 BTCCurrent difficulty: 25997.879928810.00173091 * 25997.87992881 = 44.9999903475765171So it looks like the site pays out 45 of every 50 BTC, keeping 5 BTC or 10% for the site operator.I think it is a great service to provide a fixed payout, and I can understand the need to keep a percentage given that you are effectively insuring against variability of block finding success.  But it is important to be upfront about what you are charging for the service. Slush is right.  The logic behind the proposed countermeasure does not seem correct.Suppose the pool is reset at the beginning of a block, you join the pool, and everybody in the pool works at a consistent rate.  Then for each hash you compute, the expected payout is the same as if you were working alone, just with lower variance.Then at some point you leave the pool and start working alone.  The expected payout for each hash you compute is the same as it was before, but additionally you have the chance to get a payout if someone in the pool finds a block.The fact that a payout cannot come from both the pool and working alone in the same block doesn't mean you can't increase the total expected payout for your work. I've made US ACH withdrawals a number of times with no problems.  Mt. Gox currently restricts ACH withdrawals to $1000 per day, so if you request a larger amount it will be spread over several days. Not always -- from what I can tell, the notion of length as "total work" was introduced in r109 / v0.3.3.  Before that, length was the number of blocks.  But somehow I missed that we are computing work based on difficulties rather than actual hashes -- thanks. Is that really true?  I thought the "longest chain" was now defined in terms of the difficulties of the specific hash values in the chain, so I would expect that once a client has seen both blocks, it will build on whichever has the smaller hash value.  Is it not working that way?  Of course until you see the second block, you build on the first one, and it may take some time to switch. mtgox: So what have you given up on?  Are you still trying to support ACH? Can you clarify?  Withdrawals by LiqPAY still don't seem to be enabled on the site, and I'm not aware of a US bank account withdrawal option either.  Are you saying that LiqPAY and ACH withdrawals will be available in the near future, so people who can use those methods should be patient, and people who can't should make other arrangements?
