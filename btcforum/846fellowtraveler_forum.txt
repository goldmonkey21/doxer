Quoted for posterity. Absolutely.The appropriate thread is the bounty thread: https://bitcointalk.org/index.php?topic=225954.240Go ahead and post there to refresh my memory on the job you did, and I will verify it and pay out the bounty. (I believe it was internationalization? But let's take this to the appropriate thread.) Sure you do. You need to trust MtGox and Bitstamp when you want to do market trading. And as this thread shows, you will soon need to do off-chain just for normal transactions (as a result of the 1mb limit.) I just wanted to point out that Monetas / Open-Transactions is working on a solution that eliminates the need to trust third parties.So the bulk of transactions could move off-chain to Monetas notary servers, and a notary would be unable to steal the coins, and would be unable to falsify receipts or change balances without a user's permission.With the vast majority of transactions occurring safely off-chain on Monetas notaries, any user would still be able to perform on-chain transactions when necessary -- it would just be a lot more rare, and would usually consist of a transfer from one voting pool to another.So keep your 1mb limit if you want, it will definitely benefit Monetas. Just making sure this doesn't get lost in the mix:I don't think anyone can disagree with this.Clearly it could only be for the benefit of Bitcoin.And it would assuage any/all concerns.So... ? Seems like a good time for me to chime in here. Maybe a year ago I used to hear this sort of thing about Ripple, that somehow Ripple and Monetas were competitors. But we are not, since our software does different things. This will become much more evident as our software rolls out.The same is true of Blockstream. If you generalize enough, you can find some sort of overlap and then assume we must be competitors. But the reality is that no one else is building what Monetas is building, and no one else will be able to do the things that our software does.That's nothing negative on Blockstream, it's just different -- that's all. Anyone who thinks there is competition between us lacks an understanding of what we're building and how we plan to monetize it.I welcome Blockstream's entry into this space and I think alt-coins are the ones most concerned about what they represent.------------------------------------------re: Justus, Adam BackThe reason Monetas contracted Justus to help us build the voting pools is because he is a Bitcoin purist. Justus keeps us honest. And I think that is the same role he is playing here in this thread. Bitcoin is his highest value.And I think what Justus is saying is, that a framework needs to be developed for any changes to Bitcoin. I think he's right that it's not good enough for changes merely to be "open source, open IP." There is a potential conflict of interest, and there is an easy way to put any concerns to rest.Justus said it best:I really don't think that's much to ask. Do you, Adam?I think Adam is a good guy with good intentions. Certainly he deserves respect -- he has earned it. All around. He's a brilliant guy and he's been working for good for a long time. We all owe him our thanks at the very least for his invention of hashcash, his work at Zero Knowledge, etc. And I know Justus can be blunt; Adam has been very graceful in this thread.Yet it is true that Monetas is not asking for any forks in the Bitcoin protocol. Blockstream is. That's why these questions are being raised. There is an easy way to put them to rest. Just noticed there is some activity in this thread, so I wanted to answer these questions...Open-Transactions itself is fully-functional.What's still missing is the voting pools (using multi-sig to prevent the OT server from stealing any Bitcoins transacted there.)However, Monetas is hard at work building the voting pools... You can read updates on the Monetas blog: http://monetas.net/blog/Design info for voting pools has started popping up on the OT wiki: http://opentransactions.org/wiki/index.php/Voting_Pool_Deposit_ProcessOnce voting pools are ready, it should "take off," as you say. It will take a few more months.Here's the latest video update: https://www.youtube.com/watch?v=uJKWDC4q5rAAs you can see from the video, we are agnostic to the exact transport method, with Bitmessage being only the first integration.However, Bitmessage is now fully-integrated and working in the Moneychanger desktop client! (As of the past couple months, as shown in the video.)Now that we have Bitmessage integrated, we can start adding the features described in this thread, such as cross-server discovery for trading, legacy bank integration, etc. (And of course, the Bazaar feature.)To be clear: Bitmessage is not integrated into OT itself. Rather, it's integrated in the Moneychanger desktop client.Similarly, the Bazaar will not be built into OT itself. Rather, it's now being built into the Moneychanger desktop client. Here is some of the design info: http://opentransactions.org/forum/index.php?topic=3821.0The basic concept is to have decentralized markets for goods and services, sort of like e-Bay, except without the server. Like a P2P version of e-Bay.To whatever degree we have inspired any other projects, that's great! Let's change the world. I should mention that the above video has resulted in an article in the Wall Street Journal:http://blogs.wsj.com/moneybeat/2014/08/04/bitbeat-crypto-innovators-find-fertile-ground-in-soft-touch-switzerland/ NEWS ITEMS:-- I've moved to Switzerland!-- See our new update video, including Bitmessage and Bitcoin integrations:    https://www.youtube.com/watch?v=uJKWDC4q5rA&feature=youtu.be-- It's time to pay out some bounties, which I'll be doing over the next couple days. (Huzzah!)-- The new video also shows screenshots for Monetas' new Android app. Check 'em out!-- Don't miss this music video: https://www.youtube.com/watch?v=WMQg546agpU Actually this project has been worked on continually, even up until today, as you can see in the commit history:https://github.com/Open-Transactions/Moneychanger/commits/developWe have a lot of new features added, and an announcement is overdue. For example, Namecoin and Bitmessage have been integrated. I've been in the middle of a move to Switzerland, and busy with the Bitmessage integration, so I want to get that tested up and make a new video before I post a big update here to this thread.As for the funds, they are still all there, I just moved them to a separate address out of concern for security. The amount was sitting on my desktop and was making me nervous, so I moved it to a paper wallet.Pls just leave the project on CIYAM for now, and soon I will get in there and update the CIYAM page. Lots of the sub-bounties can be closed and paid out, and I will slip in new addresses for the bounties that remain, so the funds can be visible again. Lots of progress going on lately! Escrow contract (with 3rd party arbitration.)https://github.com/Open-Transactions/Open-Transactions/blob/master/scripts/smartcontracts/escrow/escrow.otcTwo-way trade contract (similar, much simpler -- only 2 parties.)https://github.com/Open-Transactions/Open-Transactions/blob/master/scripts/smartcontracts/two_way_trade/trade.otc FYI, mining pools have nothing to do with voting pools. Totally separate concepts.You can ignore the concept of mining pools for the purposes of this discussion.This is correct. The issuer is the guy you trust to hold your gold, and issue tradeable units in return. You are trusting him to return the gold to you, when you return the tradeable units to him.(This is why I prefer #2 over #1 -- because I want to eliminate the need to use a trusted issuer.)The whole point of putting the coins into the voting pool, is so they can be safely stored, so that when the server gives you tradeable units, you are able to use the tradeable units, without having to trust the server with your actual coins.So yes, there are tradeable units, the same as in (1) -- the only difference is, you don't have to trust the server not to steal your coins.See this video: http://www.youtube.com/watch?v=teNzIFu5L70&feature=youtu.beAlso, this article:  http://bitcoinism.blogspot.com/2013/12/voting-pools-how-to-stop-plague-of.htmlTechnically speaking, this will work with any blockchain that supports multi-sig.OT is federated, meaning:  many servers, many clients, and each client talks to many servers. A server is not an authority over a client, but a cloud commodity.OT (the library) is not P2P itself, but OT clients will be integrated with P2P networks for various purposes. For example, the upcoming Bitmessage integration into the OT desktop GUI will allow clients to discover other clients for various purposes such as price discovery, wiring, legacy bank integration, etc. In that case, Bitmessage acts as the P2P layer -- but notice it's just incorporated into the same application that OT is, versus being directly integrated into OT itself. (Which would be unnecessary.) There are only two ways to use a blockchain-based currency in OT:1. Trust an issuer to hold the coins, and then he issues the corresponding units inside OT. Markm's OT server is doing this now. This is the same as if he was holding gold, or dollars, etc.2. Eliminate the issuer by putting the coins into a multi-sig voting pool. We are working on this now and should have the code ready soon. Note that this will only work with blockchains that support multi-sig. This was my point. They would never believe that the fiat empire will be destroyed. It's just completely outside of the realm of reality to them.But they do feel a little funny about AML/KYC, so why not offer that to them? And they have recently voiced fears about losing the unit of account, so why not offer them a way to fix it? "Dollarcoin"! "Eurocoin"! This will be perfect in their eyes. They know that banks suck, and that new technology is coming out, but they want to preserve the dollar / euro. Colored coins give them a way to do these things.What I say about colored coins isn't said in the spirit of deception. It's more in the spirit of "they would never believe us anyway, so why not offer them what they currently think they want?"The reality is, cryptocurrencies are here to stay. The fiat empire is doomed. It is too late to change anything about that now. But they will never believe that, will they? In the meantime, let's give them what they want so we can get what we want. It will be easier for everyone.And how do you propose they will do that, the same way they killed Bittorrent?"Government" is not some giant monolithic person. It's a sea of competing interests and agencies, all composed of individuals with their own priorities."NSA" is not the same as "the banks." Likely the NSA doesn't really give a shit (at all) about the priorities of the banks. Most of them are probably good people who just want to protect the country. Many of them are probably like Edward Snowden -- remember where he was working?The priority of the NSA is data collection, data mining, and systems penetration. (Not controlling the unit-of-account of our money system.) Currently anything Bitcoin-related has trouble getting a bank account.Authorities fear losing control over the unit-of-account, and losing KYC/AML control.Colored coins give authorities a way to support blockchain technology while preserving their unit of account. (Since colored coins are denominated in dollars, euros, etc) Also they will feel they can control the in/out process since the colored coin issuers will be KYC/AML compliant when sending/receiving bank wires.This gives authorities incentive to allow colored-coin issuers to maintain bank accounts.===> Once this is in place, we have many capabilities as a result:-- Exchanges can operate anonymously and beyond any state control. To have an exchange, you must be able to trade one asset for another, such as dollars for Bitcoins. Therefore we become able to do this without having to send bank wires to the exchange. Instead, we just move Bitcoins and colored coins in/out of the exchange. (Exchange needs no bank account.) That way we can trade Bitcoins for dollars, say, yet without ever having to wire dollars in/out of the exchange. Therefore the exchange itself is now free of AML/KYC and free of the banking system in general. Exchanges can operate anonymously.-- There is still AML/KYC when dealing with the issuer -- but most users will never have to deal with the issuer, since they can just buy/sell the colored coins from each other. The only users who will ever have to deal with banking regulations will be the ones who wire funds directly to the colored coin issuer -- but most users will never have to do that.-- Thus: Exchanges free of the banking system.-- And: Most users free of the banking system. This may be the most disturbing thing I've read all year. Especially these:"It has developed working groups that aim to combat a range of illicit activities, to safeguard human rights and to encourage inter-agency coordination and law enforcement.""The approach will be a balanced view of both the advantages and disadvantages surrounding the digital economy -- a place where people can enjoy the convenience of digital currencies, but where there are controls in place to regulate them like any other form of money."Where can I read more about this on the Bitcoin Foundation website, are there any further details on the plans for this? Please post URLs anyone, if there's anything relevant. (If not, that's even scarier.)Gavin, in case you are listening, here's my two cents for your CFR meeting: The rulers in high places are aware of Bitcoin by this point at its potential, and they recognize that the awful service provided by banks is leading inevitably to a shake-up that's going to involve technological improvements based on digital currencies. They accept this. Therefore their next step is going to be a slow noose-tightening. They will act incrementally.Their number-one concern will be to protect their control over the unit-of-account. Their secondary concern will be protecting KYC/AML. I suggest you take advantage of this and get them on board with colored coins. You can point out to them that dollar-coin, euro-coin, rupee-coin, etc will enable them to protect their control over the unit of account, while simultaneously giving users the other benefits of cryptocurrency technology. Also point out to them that they will continue to have KYC/AML control if they do this, since colored coin issuers will have to by KYC/AML compliant when dealing with bank wires in/out.I think offering them a way to control the unit-of-account and preserve KYC/AML will be tempting enough that they will see this as an acceptable scenario, which will hopefully make it possible to drop bank opposition to Bitcoin businesses and especially bank opposition to colored coin issuers.I have reasons for saying this. In fact it will only help us if this happens, by eliminating problems with Bitcoin businesses and colored coin issuers being able to maintain bank accounts. We can obtain this by offering the illusion of control, but for them it will only be a pyrrhic victory. (They will not be able to believe that though, and will be seduced.) The truth is, the cryptocurrency epoch has come. With the above pieces in place, Lex Cryptographia will be a foregone conclusion. (It is anyway, but this will only make it easier.) I will probably never say that OT is "ready for prime time" since, working in crypto-systems, I am extremely conservative and paranoid.We've done a lot of testing over the past four years, but I want to do more. We've done some static/dynamic analysis, but I want to do more. We've had the code open-source for years, but I still want to pay experts to audit the code. Monetas is starting on some QA but that will be an ongoing process.We are just now getting to the point where the Desktop app is usable, and even then we need install programs before normal users can access it. (I've been testing an install of the Mac version, but don't have an install ready yet for Windows/Linux.)If you want to start playing with it, there's a bit of a learning curve on the server side. The first thing I would do is get a Mac or Linux system and then build OT on it:http://github.com/Open-Transactions/Open-TransactionsOnce you have it built, I would copy the sample data over:mkdir ~/.otcp -R Open-Transactions/sample-data/ot-sample-data/* ~/.otThen you can start the server: otserverThen you can use the command-line client. You can also use the desktop client if you want to build it:http://github.com/Open-Transactions/MoneychangerI have a Mac install of that desktop client, and some testers have access to it, though we will make it more accessible to others soon. We still need to make install programs for Windows/Linux but it shouldn't be too hard.Once you are comfortable using OT with the sample data, the next step would be to create your own server contract. To get started doing that, just erase the sample data and run otserver with no data. It should walk you through the process of setting up your own server (it's no picnic.) I need to update the bounty on the Ciyam site. (Soon.)The basic GUI is already done, as is the markets screen. (See the above recent videos to see it in action.)The namecoin integration is done but hasn't yet been merged back into the main branch.The Bitcoin integration is partially done.I believe lclc is working on the HTTP interface already and has the API working through the HTTP interface.dansmith is still working on the legacy bank integration.===> The Bitmessage integration hasn't been done yet, perhaps we can discuss you doing that one if you wish.The application was coded in Qt/C++ and runs on Linux, Mac, and Windows. Let's say my balance is 40 clams.Then I make a transaction request:----BEGIN SIGNED TRANSACTION---===> My current balance is 40 clams.===> Please send 10 clams to Bob.===> My new balance will be 30 clams.---END SIGNED TRANSACTION-----The server merely verifies and counter-signs. It cannot forge transactions because it doesn't have your private key. It cannot change your balance because your "balance" is just whatever appears on the most recent receipt.So the server CAN show balance changes -- it just can't initiate them (the user has to initiate them.)That's all SEPARATE from how dollars get into the system. There are multiple ways that can be done:1. Have a dollar issuer who is trusted to hold the dollars. Give him dollars, and he gives you dollar units (and vice-versa.) This would work with or without colored coins.2. Assuming you have that, you can also buy/sell those units from any other user (not just from the issuer.)3. OR: Create a dollar-based currency where agents provide in/out and post BTC-based bonds to secure that service. That way you don't have some trusted central issuer holding the dollars -- instead you have the dollars stored at the edge nodes, with the reserves stored as Bitcoin in a multi-sig voting pool. This is the Lex Cryptographia idea (google it.)4. OR: Just store the reserves as Bitcoin directly, in a voting pool, and then buy/sell them using real-world dollars. That way you have dollar in/out functionality, without trusting anyone to hold any dollars (as in 3.) The currency is Bitcoin-based, instead of dollar-based, however. But you can still "move dollars in/out" so it's worth mentioning. The only reason to do (3) instead of (4) is so you can trade dollars against Bitcoins on markets. "The missing system tray icons in Fedora 19 Gnome3"https://bugzilla.redhat.com/show_bug.cgi?id=974937"System Tray: You know that nice thing in the bottom right of your screen that you think even the dumbest fool couldn't break? They broke it."http://linux.slashdot.org/story/13/01/23/230255/alan-cox-fedora-18-the-worst-red-hat-distro-switches-to-ubuntu"Once installing Fedora 19 Desktop Edition, I run the systray of Qt Example. But I could not look for the system tray icon. There is no Notification area in the Activities overview."http://stackoverflow.com/questions/17460705/the-missing-system-tray-icons-on-fedora-19-desktop-edition"I know that Gnome and Canonical have a thing for dismissing the importance of the system tray, but hiding it in such an arcane manner is just plain stupid."http://spiralinear.org/forum/discussion/1048/gnome-3-6-review-fedora-18-approaching-maturity-but-still-has-major-issues-ahead/p1"Hi everyone. I'm having some difficulties when i minimize a program to tray (system tray). Everytime i did it the icon that should be at the tray simply does not appear."https://ask.fedoraproject.org/question/9302/minimize-to-tray/"Gnome3 system tray not working."https://bbs.archlinux.org/viewtopic.php?id=166346"Gnome 3 system tray area not working"https://bbs.archlinux.org/viewtopic.php?pid=1044335"I just installed Ubuntu 12.04 and after sorting out some other problems, I now have this problem; No system tray for HPLIP. running Gnome, rebooted quite a few times, so this problem is new."http://linuxforums.org.uk/index.php?topic=10323.0"Most of the extensions should just work, but they dont, because GNOME Shell extensions are broken by design. Let me count the ways:"http://sc3d.tumblr.com/post/34163672571/gnome-3-extensions-the-madness-must-end"I have a weird problem. Icons in tray area are just disappeared"https://bbs.archlinux.org/viewtopic.php?pid=1044322"i think gnome15 is installed because my keyboard lights are red [they are always blue if its not working] but unfortunatly i can't see system tray"http://www.russo79.com/forum/gnome-15/support-and-answers/184"Tried all possible ways to give visibility to tray icons"http://askubuntu.com/questions/136733/some-system-tray-icons-invisible-in-gnome-classic-12-04--------------------------------------------------------MarkM: I think the problem is that Gnome may have put the systray into an extension.We discussed this on IRC previously -- have you installed the systray extension?I recommend you get a windowing system that works but otherwise you might try the extensions, such as:https://extensions.gnome.org/review/1591--------------------------------------------------------P.S. most Linux users do not have this problem. lclc, randy, da2ce7, and others have not reported any problems, so it's not specific to Linux. And of course the problem doesn't occur on Mac or Windows either.
1. We have many users on Linux who are able to use it just fine -- it's not a problem with Linux.2. Google this:  "system tray" broken on Fedora. Notice all the complaints and bug reports related to this issue on Fedora. (For other apps, like Dropbox, Skype, etc.)3. Google these:    A. solved "system tray" fedora   B how to fix "system tray" fedora(You can see there are many various solutions for this as well.) I suppose I could do a breakout session. I'll be walking around for a few days answering questions anyway I'm sure.I suggest also checking out the wiki, the videos, etc. Not meaning to necro, but just wanted to make sure everyone got the latest update on this project.I've just recorded some new videos showing the desktop client in action.----------------------------------------------------------INTRO:  http://goo.gl/Ea6rzqSend/receive payment, invoicing, untraceable cash, namecoin integration, end-to-end encrypted messaging, etc.----------------------------------------------------------ADVANCED:   http://goo.gl/i0J3AFMarket trading, decentralized bazaar, virtual corporations, smart contracts, legacy banking integration, etc.----------------------------------------------------------Also, the videos reference a couple of articles. Here are the links to those articles:Voting Pools: How to Stop the Plague of Bitcoin Heists, Thefts, Hacks, Scams, and Losseshttp://bitcoinism.blogspot.com/2013/12/voting-pools-how-to-stop-plague-of.htmlLex Cryptographiahttp://bitcoinism.blogspot.com/2013/12/lex-cryptographia.html OT markets are very powerful:-- Market orders (buy/sell full order at any price.)-- Limit orders (where a price is set per scale.)-- Scaled markets (price per 1 BTC, price per 100 BTC, price per 10000 BTC, etc -- these can be different markets based on scale.)-- Fill-or-kill orders (fill the entire order, or no trades at all.)-- Minimum increments (multiplied against scale. For example, if the scale is 1, and the minimum increment is 4, then the order will trade on the 1 BTC market, but only increments of 4 BTC at a time.)-- Stop orders. (The offer only activates when the price reaches a certain amount, and then once it activates, it becomes a market order.)-- Stop limits. (The offer only activates when the price reaches a certain amount, and then once it activates, it becomes a limit order.) Because OT uses a passphrase to create or unlock a private key.Once it does, that private key is securely cached until it times out (say, 30 seconds, or 5 minutes -- it's configurable.)(Otherwise you might have to type a password 5 times during a single action.)So it never asked again for that PW because it already had the key unlocked, and it hadn't timed out yet. Merry Christmas!Here are some brand new videos of this app:Intro: http://goo.gl/Ea6rzqAdvanced: http://goo.gl/i0J3AF===> P.S. in the videos, I mention a couple of articles. Here are the links to those articles:http://bitcoinism.blogspot.com/2013/12/voting-pools-how-to-stop-plague-of.htmlhttp://bitcoinism.blogspot.com/2013/12/lex-cryptographia.html Gold itself is a truly anonymous untraceable coin.What is better for the economy, gold? Or a version of gold that the government can track and control and freeze and confiscate at will, from any place on the earth?When gold was the primary money, did it fill the earth with terrorists, drug dealers, and child pornographers?Bow before your false god if you wish, but it has murdered hundreds of millions in the last century alone. FYI I wouldn't start the translations until, as lclc said, the first version of the app is ready.Otherwise if some of the english strings end up having to change, the translations will require re-work as well. watching Hi all,I've been busy the past week or two implementing the Markets UI.I had to make changes in OT itself so that it would support market orders. (OT now supports market orders, limit orders, day orders, fill-or-kill orders, stop orders, and stop limits.)I've got the Markets UI about half done and should have it finished up in the next day or so. (I will not be collecting the money, but will instead re-allocate it to other tasks of this project.)Re: Internationalization. Lclc already coded the internationalization, though he hasn't collected the bounty yet, I will be paying it out to him soon. I will also be paying Xenland his share of the basic UI bounty (Xenland, be sure to send me your BTC address.)Note that this bounty wasn't for the translations into various languages, but rather for the internationalization coding itself.Once I finish the Markets UI I'll record a demo video so everyone can see it in action. Also I should note that Yamamushi recently got an install.dmg working for the Mac platform! Let me ask you, why should anyone use Bitcoin, when they can just use Paypal?-- Paypal is in many countries.-- Paypal has a worldwide ledger tracking everyone's account balance.-- Paypal allows you to convert into other currencies.  https://www.paypal.com/cgi-bin/webscr?cmd=p/sell/mc/mc_convert-outside-- Paypal allows you to receive money in many different currencies.  https://www.paypal.com/cgi-bin/webscr?cmd=p/sell/mc/mc_receive-outside-- Paypal processes over $315 million in payments every day. (Pretty good volume.)-- Users often trade $1K chunks of USD for Paypal USD.-- Paypal is in China.  https://cms.paypal.com/c2/cgi-bin/marketingweb?cmd=_render-content&content_ID=marketing_c2/CNPayPalComparison&locale.x=zh_XC---------------------------------------------------------------What you do not understand is that Open-Transactions is a software library, like OpenSSL.Calling OT a competitor to Ripple is like calling OpenSSL a competitor to Ripple.We are talking about a software library... libraries are used by many different entities, for many different purposes.Libraries are not in competition with any companies.Companies are not in competition with any libraries.Libraries are used to build things.---------------------------------------------------------------It is not my intention to sit here talking about Ripple, nor to badmouth them in any way. They are adding value to the digital finance space.In fact I like the Ripple guys, and I love Fugger's concept.I like it so much, that I wrote extensively about it in early 2012, in this document I shared with them back then: http://ft.vm.to/files/FT-thoughts.pdfI hope they succeed! The same goes for Invictus Innovations, colored coins, Mastercoin, and a million other ventures. My goal here is to spread concepts and code, and to promote all entities who innovate in the digital finance space. May they succeed.I do not have a poverty mentality, but an abundance mentality. I do not have an either/or mentality, but an integration mentality.---------------------------------------------------------------Open-Transactions is a fundamentally different thing. -- If you have an "account balance" in OT, it is impossible for anyone except the user himself to change that balance. Is Ripple competing with OT on that concept?-- If you have a balance on any OT server, the server will never need to send/receive any bank wires in any currency, nor maintain any bank accounts. Is Ripple competing with OT on that concept?-- In Ripple, you trust your gateway to store any dollar reserves. But in OT, your client would access many servers, yet none of them store any reserves at all.-- If you want to build software enabling various financial instruments (cheques, cash, dividends, stocks, basket currencies, smart contracts, recurring payments) then you could use OT to build it. For example, for making printed vouchers, or parking garage tickets, then you could use OT to build it. You could use OT for escrow with arbitration. You could send an OT payment to someone who has never installed OT. Is Ripple competing with OT on those concepts?-- Ripple has a distributed order book. But in OT, the "order book" exists on the client-side. It's the client in OT that combines various order sources into a single book. OT is client-centric.-- In Ripple, the ledger chain stores all transactions. But OT processes transactions without storing any history.-- You are correct that OT also does Chaumian blinding, but to characterize it as a "blinding API" would be woefully inadequate.===> These are not value-judgments. I am simply pointing out that you are comparing Apples and Oranges. Ripple is cool stuff, but it is not an alternative to OT. It has different goals, a different design philosophy, different functionality, and different uses based on different solutions. These things are not "either/or."===> BTW, you seem to believe the "holy grail" is vaporware. But if you check the bounty thread, you can see fast progress is being made. Expect to see more updates in the coming days and weeks. If you think of Open-Transactions as a competitor to Ripple, then you are misinformed. That's like calling openssl a competitor to Excel.Also, OT has been publicly available for a long time: https://github.com/FellowTraveler/Open-Transactions  No, you can prove something (without showing it) using a hash algorithm, without having to use any asymmetric algorithms. First, I wanted to commend you guys for this work, which is important, and to congratulate you on your progress.Second, I wanted to point out my latest progress report on the "Holy Grail" project, which mentions your own project: https://bitcointalk.org/index.php?topic=225954.msg3440808#msg3440808Third, I wanted to point out that there is a 12 BTC bounty on integrating your project into the Holy Grail, which is currently worth about $3,000. It's too bad your stuff was written in Python instead of C++, but integration may still be possible through some sort of inter-process communication.Fourth, I wanted to say that while I don't have time to play around with your code personally (right now at least) that I view it as very very important nonetheless, and I am keeping a close eye on your work here.Well done! Certainly I would never condone such operations, nor would I ever personally mis-use the software in such a way.Clearly E-Bay is a big example of "legitimate uses", so that point IMO is without question demonstrably true.Unfortunately I believe they are also ripe for disruption. (See, for example, their abuse of power vis-a-vis their prohibition on Bitcoin-related products.) Correct.As long as the basic functions are in place allowing us to send to multi-sig, verify multi-sig, and vote to release multi-sig, then all other communication should be handled inside OT as part of the bailment protocol. There are many contributors who I'm sure want a quick UPDATE on status, and we're making LOTS of EXCITING PROGRESS!------------------------------------------------------------------------First, here are the main project tasks as posted on the "Ciyam Open" project management site:Systray GUI with OT integration   General UI   BTC:   10.000Namecoin integration (credentials)   Integration   BTC:   7.500HTTP Interface                     General UI   BTC:   8.000Colored coins integration         Integration   BTC:   10.000Bitmessage integration            Integration   BTC:   11.000Bitcoin Integration (Multisig)         Integration   BTC:   10.000Internationalization                  General UI   BTC:   5.000Integration with legacy banking      Integration   BTC:   12.000Markets UI                           General UI   BTC:   7.000------------------------------------------------------------------------LATEST STATUS ON TASKS:-------------------------------------------------Systray GUI with OT integration   General UI   BTC:   10.000Since Xenland stopped working on this, I have taken over personally, courtesy of Monetas.I'm nearly done! It's working great, and I will be posting a video really soon!For those who have seen the iPhone video already, the functionality is basically the same, except more powerful. The UI is very similar and looks great... finally a real UI people can use for OT! Hopefully we can start making an official install program soon.Here's my commit history:https://github.com/Open-Transactions/Moneychanger/commits/master===> Once this task is completed (video coming soon) I will split the bounty between myself and Xenland, based on the difference in code.===> I will not keep my share of the bounty, but will re-distribute it among the existing tasks of the project.-------------------------------------------------Namecoin integration (credentials)   Integration   BTC:   7.500The purpose of this integration is to allow us to eliminate Certificate Authorities, by making revokable OT credentials through Namecoin. (And to support other credential systems as well, with Namecoin just being the first one integrated.)There's a developer working on this Namecoin integration, and I've been in regular contact with him -- he's progressing rapidly.We are near the point now of adding it to the UI with full-functionality!On Sept 17th, the developer wrote:On October 5th, he wrote:On October 16th, he wrote:On October 18th, he wrote:===> The best part of this is that Namecoin is just an example of the kinds of credentials OT will now be able to support!===> OT also supports self-signed credentials, as well as CA-based certs (through OpenSSL.)===> Since this is implemented through an abstract interface, it will be trivial to support other identification systems, such as GPG web-of-trust, BitShares' BitIDs, Retroshare, etc.-------------------------------------------------HTTP Interface            General UI   BTC:   8.000No one is working on this one yet, but now that basic functionality is nearly done, it shouldn't be hard to add an HTTP interface on a local loopback address.This will enable many other applications to integrate, including web apps.-------------------------------------------------Bitcoin Integration (Multisig)      Integration   BTC:   10.000JaSK has been kicking ass on the Bitcoin integration! He's got multi-sig coded!On October 8th, he wrote:His commit history on October 21st says:See his commit history:https://github.com/tuttleorbuttle/Moneychanger/commits/masterTL;DR: This means we are finally going to have multi-sig voting pools on OT! (These will enable an OT server to process Bitcoin transactions, without having to trust that OT server with your Bitcoins.)(I mean frankly, isn't everyone in the Bitcoin community tired of having to trust all the various servers out there with their coins?)JaSK recently asked:The answer is: When a user wishes to move Bitcoins into OT, he will be sending the coins multi-sig, using your code as described above. As long as I am able to send and verify those coins, and as long as I am able to perform multi-sig votes to remove those coins back out, then I will be able to do the rest on the OT side. Bitmessage will not be needed for this, but if you want to get started on the Bitmessage integration, it's definitely needed for other pieces.-------------------------------------------------Integration with legacy banking   Integration   BTC:   12.000As you guys know, we have a 12 BTC bounty on implementing this protocol for p2p transfer of funds in/out of legacy banking systems:http://pastebin.com/SsLrxVP6The protocol requires the use of smart contracts for dispute resolution inside OT (which OT is able to do) but it also involves integration with legacy systems.Fortunately, people have been working on the integration, and there is now alpha software ready for testing!See this thread:https://bitcointalk.org/index.php?topic=173220.msg3429555#msg3429555The next step is to integrate this (through an abstract interface) into the new GUI, and use OT smart contracts for escrow and dispute resolution.The abstract interface will allow us to swap in alternate solutions as well, so we are not reliant on any one. But I have to say, it looks like these guys have done some great work so far.-------------------------------------------------Colored coins integration      Integration   BTC:   10.000Not yet started.We'll use an abstract interface here so we can handle disparate systems such as colored coins, master coins, bitshares, etc.(OT strives to be agnostic on this sort of thing.)BTW, we are also integrating with Project Praesto by ninjabanker, which is another system for providing fiat in/out, which uses Bitcoin reserves in order to eliminate the need for an "issuer" entity (normally trusted to hold the reserves in dollars / euros / etc)I'm really excited about this solution, since it will take advantage of OT-based virtual corporations and of course, since it enables us to eliminate the issuer.-------------------------------------------------Bitmessage integration         Integration   BTC:   11.000The original purposes of this integration:1. Server-to-server wiring of funds.2. Distributed exchange.3. Integration with legacy banking.Well, a great new benefit is being added to the pile:4. Distributed bazaar. (Like E-Bay, except without the server.)I realized a few weeks ago how easy this would be to add, using the same Bitmessage integration we already had planned.So I worked out the UI with Yamamushi's help, and have started adding it to the GUI app.This bazaar will not be functional until the Bitmessage integration is ready, but I do expect to have it all working soon.-------------------------------------------------Internationalization         General UI   BTC:   0.000The Subtask in Ciyam Open appears to show a zero balance, but rest assured, a contributor put 5 BTC towards Internationalization, but the money is in the top-level wallet so it's showing incorrectly as a zero on the subtask. But the 5 BTC is really there, so if anyone wants to consider Internationalization of this project, there's a good reward waiting for you.Update: Internationalization work has begun! See this commit history from one of our contributors:https://github.com/Open-Transactions/Moneychanger/commit/023b0a0a649e7023d2c7dc10c9c8a3c692c97227-------------------------------------------------Markets UI               General UI   Open   7.000Yamamushi is working on this page but I'm not sure of his current status. I will probably sync up with him sometime this week.-------------------------------------------------I will update the Ciyam Open project soon, once I have the video ready showing off the new GUI. (I hope to record one this week.) FYI Ninjabanker has asked that we add a couple things to OT and the systray app:1. Corporations.2. The ability for one smart contract to be insured by another smart contract.We are definitely adding both of those things so that he can use OT to implement Project Praesto.It's about time for me to post an update to the Holy Grail Bounty thread, so I'll be doing that soon. FYI, the basic functionality of OT (seen in the iPhone demo videos) is now available in the systray app, so pretty soon we'll be focusing on the more advanced functionality such as decentralized exchange, decentralized bazaar, and Namecoin-based credentials. Quite a bit of progress has been made, as coders are working in at least four different branches. fgrep -nR "main_show_basket" scripts/*scripts/ot/ot_commands.ot:52:def main_show_basket()Looks like main_show_basket() is on line 52 of the file "ot_commands.ot"Perhaps you have an old version of this file?You might see if there are multiple copies on your system, and also pull it up and make sure that function exists on line 52.
You need to start with the test data. Only when that is working, do we then take the next step.The password will be 'test' As I'm sure I said before, you need to show me that you have it working with the test data, before you try other contracts such as digitalis.Find your data folder, and wipe it clean. Then copy the test data into that folder. Then try the OT commands I mentioned.ONLY if those commands are working with the test data, THEN you can start using other data such as the digitalis contract. What happens when you do these commands:run_opentxs.bat listrun_opentxs.bat showaccountsrun_opentxs.bat balanceetc.I'm also assuming you are using the test data... What happens when you do this:run_opentxs.bat showmarkets --server wmY1B8o94PFENzqPVK6wLOLvkog9TvA3GDxZuAMGCpW Just wanted to drop a note of support for ninjabanker's proposal.My "holy grail" project is integrating with ninjabanker's project, since it adds fiat currencies without the need for any issuer holding reserves. (Since the reserves are held in cryptocurrency escrow instead.)In my original "holy grail" post, our solution was to use issuers in combination with colored coins (and we will still probably support that) but ninjabanker's idea goes a step beyond that by eliminating issuers altogether. (So any previous concerns about the legality of "bearer bonds" should be alleviated.) Hi all!Time for an update on this project (the tasks are viewable here: http://ciyam.org/open/?cmd=view&data=20130606055250338000&ident=M100V137&chksum=a2a9d6d5 )----------------------------------------First off, Xenland has done an excellent job creating a QT systray project that integrates with the OT API. (Xenland has already posted screenshots.) It is able to successfully make OT API calls, and it's got menus and some dialogs, but it's nowhere near complete.You can see the project here:  https://github.com/Open-Transactions/MoneychangerUnfortunately Xenland said recently that he wouldn't be able to work on it for at least the next month, as he has real life things he has to prioritize.As the last review date was a month or two ago, we're re-opened the task for bidding so we can get it moving again. Any QT experts interested? As always, I will be available to support you and provide whatever you need on the OT side.----------------------------------------Secondly, the code in Xenland's app that actually "drives OT" has been completed by myself, since at Monetas we had to use it in our iPhone app. (And we'll be using it in our Android app as well.)So you can see that code working now in our iPhone demo videos:introduction: http://goo.gl/8Dxak1advanced: http://goo.gl/u6xqHc ----------------------------------------Third, you may notice each individual task has a bounty associated with it. So if you want to donate to the effort, please donate only to the address associated with the INDIVIDUAL TASK you are supporting, and not to any other BTC address (such as the addresses appearing for the overall "Moneychanger" project or the "General UI" or "Integration" categories.) This way the amount will update for your individual task, and that will help incentivize coders to take on those tasks.----------------------------------------Fourth, the "Internationalization" task has a 5 BTC donation, but it appears as a "0.0" -- This is because it was donated to the main address instead of to the individual "Internationalization" task (which was my fault.) So at some point soon I'll be re-arranging the funds to get the 5 BTC to appear on that task.----------------------------------------Fifth, OT contributor randy-waterhouse has figured out the proper protocol for using Namecoin for OT credentials, which is viewable here: http://opentransactions.org/forum/index.php?topic=10.msg40#msg40I've been contacted by a potential Namecoin integrator and so hopefully we'll be able to get that task assigned to him ASAP.----------------------------------------That's it for now! Did you try "quit" ?(In any case, you shouldn't have to quit OT anyway since you should be running opentxs separately each time you do a command.)I suggest you take this conversation to the opentransactions.org/forum or the OT IRC channel, which are both more appropriate venues for OT-related tech support than the Bitcoin project dev board.Okay then, did you try "run_opentxs addserver" instead of "opentxs addserver" ?I suggest you do this:1. Make sure the server isn't running.2. Make sure the client isn't running.3. Copy the TEST DATA into the actual data location, so you can run the server and client using the TEST DATA.4. On linux this is done like this:  rm -rf ~/.ot/* && cp -R Open-Transactions/sample-data/ot-sample-data/* ~/.otI don't remember where Windows keeps the data but basically you will want to wipe the files at that location, and then copy the sample data into it.Then you can start the server and client, and play around using the sample data. So you will not have to "addserver" the localhost contract, because in the sample data, it's ALREADY set up. I notice a lot of people have this misconception that because the government can't control Bitcoin, it can't tax us and therefore we will no longer have roads, water, food, medicine, safety, or whatever other social goods they believe can somehow only possibly be provided through coercion.Let's assume for a moment that every single person has converted to Bitcoins. And let's assume that it's completely impossible to tax people's Bitcoin transactions or confiscate people's Bitcoin wealth.Okay, so the government will instead tax:  oil, gas, land, imports, exports, copper mining, silver mining, retail purchases at big retailers like WalMart and Amazon, etc etc etc. Amazon still has warehouses full of products, which men with guns can confiscate or lock down in the event that Amazon doesn't pay their tax. FedEx and UPS still have a fleet of vehicles that can be frozen with guns if "shipping tax" isn't paid. Electricity can still be taxed. Etc.So we may very well be approaching the day that people's individual savings cannot be confiscated (directly or through inflation), nor can their individual revenues be taxed. And that's a very good thing. But that doesn't mean taxes are impossible -- it only means taxes will have to become (slightly) more moral. There are still many physical bottlenecks where taxes can and will be collected.So for those of you who honestly believe a government monopoly on violence is a "necessary evil" -- who believe coercion must be employed against innocent people for us to have "the roads" -- who believe that having the IRS pick on helpless old widows is the only thing preventing modern society from slipping back into the stone ages: Don't worry, slave, taxation in general will not cease just because individuals have obtained a bit more power over their own personal finances. Your State will continue providing roads and shitty schools.It's amazing to me how people get deceived in such a statist mindset. If you were to topple the North Korean government, perhaps the people there would ask, "But who will provide tree bark for us to eat, and pots and pans with which to cook our own children?"---------------------------------------------------------------------P.S.:  http://en.wikipedia.org/wiki/American_Letter_Mail_CompanyThe American Letter Mail Company was started by Lysander Spooner in 1844, competing with the legal monopoly of the United States Post Office (USPO, now the USPS) in violation of the Private Express Statutes. It succeeded in delivering mail for lower prices, but the U.S. Government challenged Spooner with legal measures, eventually forcing him to cease operations in 1851.The American Letter Mail Company was able to reduce the price of its stamps significantly and even offered free local delivery, significantly undercutting the 12-cent stamp being sold by the Post Office Department. The federal government treated this as a criminal act.Although the business was forced by the U.S. Government to close shop after only a few years, it succeeded in temporarily driving down the cost of government-delivered mail. This is why I said to make sure it is working first with the test data.If it's working fine with the test data, then the problem becomes markm's contract.But if it's not even working with the test data, then the problem becomes OT.If markm's contract turns out to be the only one that doesn't work, then you might be right about him running an old version of OT.But if all test contracts fail, then the problem would have more to do with the way OT parses EOF on Windows.The existing clients (iPhone client, command-line client, java test GUI) all delete the client pid file automatically during a proper shutdown.So you will only see that problem if you are killing the client without allowing it to shutdown gracefully.Normally that PID file exists in order to prevent you from running two wallets simultaneously against the same data. (Which could corrupt the data.)Try NOT using the opentxs prompt, but instead ONLY use it from the UNIX command line.For example, don't do "opentxs" and then "addserver" -- instead do "opentxs addserver" directly from the UNIX command line.Then you will no longer see the PID problem. you should be pasting the entire otc file when doing addserver command. Sounds like you should be using the otc file instead of the xml file.If I were you, I wouldn't start with a real server. I would start with the localhost test server and copy over the test data. Play with it that way first before you start trying to talk to real servers. FYI -- da2ce7 hasn't updated his build to the latest version of OT, and there have been some API changes.In fact the java test GUI itself also needs to be updated, which I will probably get to Sunday night.I may also boot up Windows and make sure that the main branch of OT still builds for Windows, since I haven't tested it on that platform for several builds.BY THE WAY: Your problem may be unrelated to the above. Da2ce7 has remarked in the past that this specific problem (where nothing starts when you click on it) is the result of specific dependencies not being installed properly. See the docs/ install instructions for WINDOWS -- certain dependencies (OpenSSL, boost, etc) need both 32 bit and 64 bit versions installed.)Of course this won't be a problem once there is an official install program. Currently there are only Usage Fees -- meaning (if they are turned on) the server charges one "usage credit" per API call. The server operator has the ability to "re-up" your usage credits.There is, of course, great demand for transaction fees from server operators, which charge some small percentage of the transaction itself. We haven't added this yet, but it's coming.When that is implemented, it will have to be based on rules in the server contract, so that the client software can properly form the transaction request to include that fee. (The server can only verify/countersign your transaction requests, which prevents it from forging receipts, since it cannot forge your signature.) Did you DOWNLOAD the videos?If not, then the problem is probably not the videos themselves, but the Dropbox video player. (Had lots of similar comments.) *EDIT: Moved from Dropbox to Google Drive since many were complaining the videos were cut short at the end.Here are the new videos of the Monetas iPhone app:Intro video: http://goo.gl/8Dxak1Advanced video: http://goo.gl/u6xqHcFYI, this actually constitutes work towards "Holy Grail", since much of the code in the iPhone app is also being used in the Holy Grail desktop app.Of course I'm not claiming any of the bounty, that's for you guys to do. Just letting you know that progress is occurring on all fronts.-------------------------------------------------------------------------------------I will be updating the CIYAM project shortly, and I will get back to everyone who has PM'd me.For those who wish to email with PGP, you can get my PGP key from the Open-Transactions project (it's in the main folder) and email me at: fellowtraveler at rayservers.net *EDIT: Moved to Google Drive (from Dropbox) since many were complaining the videos were cut off at the end.Here's the second video, showing off more advanced features:http://goo.gl/u6xqHc There's also an ATM based on Open-Transactions, you can check it out here:http://openwallet.org/It has an "App Store" and will support multiple different software products.Some comments from the developer:Skaag:  my ATM has no regulation obstacles hereSkaag:  you see, unlike a website, I know exactly where my kiosks areSkaag:  so I can make sure it is not sold physically in states where it is not yet licensed to operateSkaag:  My thoughts right now, is to just setup shop and start selling themSkaag:  even before I have all the software products I want to sellSkaag:  I can already mass produce them and ship them outSkaag:  there's nothing really stopping me from doing that, if customers orderSkaag:  but my real dream is putting them in AfricaSkaag:  and that, by the way, is the reason I chose a fanless design, without disk drives, fans, or any other parts that are sensitive to heat.Skaag:  I have this mechanism where I store nothing of importance on the kiosksSkaag:  when the kiosk boots, it downloads a verification binarySkaag:  that binary verifies the hardware was not tampered withSkaag:  it collects data and sends back a hashSkaag:  but the actual environment gets brought from a GIT repo over an SSL connection, on top of a VPN, on every bootSkaag:  it has a GSM modem built-inSkaag:  so you just stick a SIM card in it, and you're ready to goSkaag:  it also has a wifi adapter, so if the location already has wifi, they can skip the GSM No one ever claimed this Grandma bounty (other than myself.)I originally put in 80 BTC towards this grandma bounty (back when they were like $2 per coin) but I've since paid those to the Indian developer who worked on the original Java test GUI.As for the other 105 BTC on the grandma bounty, you will have to ask those original contributors to put that towards the Holy Grail, if they so choose. (If they pay it to me for this grandma bounty, I pledge also to put it towards the Holy Grail.)The Holy Grail bounty is up to 81+ BTC, including some of my own, and I definitely recommend that any new contributions should also go there. Hmm I just tried it from a different browser and it still appears to work...If you want (or if anyone else having problems) send me a PM with your email and I'll make a copy just for you. *EDIT: Moved to Google Drive (from Dropbox) since many were complaining the videos were cut off at the end.----Intro video -- Monetas iPhone app: http://goo.gl/8Dxak1This app does a lot more than you see in the video, which is meant to show basic functionality.I'm recording an "advanced" video tonight and will post a link soon.----P.S. most of the code in this app is being re-used in the Android app as well as the "Holy Grail" project.
What if everybody decides to imprison old ladies who don't turn over their money ?As long as everybody voted to do it first, does that make it okay?What about if 10 guys walking down the street decide to beat up a nerd and steal his backpack?Is that okay, as long as those ten guys took a vote first? It's just worth pointing out that they are two separate things. If you had to choose between democracy and freedom, so that only one of those was primary, and the other was secondary, which should override the other? I don't think it was governments who "made" gold into money.Rather, gold was selected as money by the invisible hand of the market.Since then government force has attempted to control it, to "standardize" it, to dilute it, to confiscate it, to replace it, to suppress it, etc to varying degrees of success. But absent such forces, gold would resolve back to its historical role purely based on market forces.In fact Bitcoin and gold are very similar in this respect. Bitcoin also has become a form of money purely due to natural market forces, and governments / central banks would love to suppress it just as they have suppressed gold, though BTC has properties that make this difficult for them to do. Hey if you guys want to find out for sure, why don't you just ask the Bank of Thailand directly to confirm or deny this nasty rumor about them?http://www.bot.or.th/English/Feedback/_layouts/Application/Feedback/Feedback.aspx Colored coins allow you to use the blockchain for issuing real-world assets. Like issuing "gold ounce" units that are tracked on the blockchain.In OT, this is useful for divorcing the issuer from the transaction server. (It works in combination with multi-sig.) FYI, Open-Transactions supports smart contracts, and there is a sample "Escrow" smart contract that comes with OT.(So you can use OT for escrow.) Is this project going to support colored coins and multi-sig ?Both are important to my own project. This isn't a complete answer, but FYI I believe 20 is the max (not 50.) Maybe add that to the instructions?Seems the instructions do not work "out of the box" without that missing step? FYI I'm using a clean install of Ubuntu. (In fact, it even boots up clean every time, from a CD.)So I will get it booted up and paste the sources, but FYI they will be the same as whatever you would normally find in a clean install. Well I was using clean installs of Knoppix and Ubuntu 13.04What am I missing?If you want to provide step-by-step instructions, I'd be happy to install from scratch (again) and then give you the output wherever it diverges from your instructions.Anyway, if it's happening to me, it will happen to others. Perhaps the instructions should be updated to just download Electrum.tgz and use the existing binary, which is what I ended up having to do. That way no one else will run into this problem. I tried it with Knoppix and Ubuntu 13.04apt-get install python-pip     <=== not found.Then I searched for easy_install per the instructions using Ubuntu package manager. Result?  No results found.I did apt-get update etc. Is the bank black list site down? Can't connect... It's been a while, but Google turns this up:  http://www.goldsilverbullion.com/SilverBullMarket.htm A lot of silver is subject to inelastic demand.For example, let's say that each iPhone ($700) contains 20 cents worth of silver.Next, let's say that the price of silver goes up by 10 times. (After which, each iPhone contains 2 dollars worth of silver.)Will Apple stop purchasing silver? No. They will keep purchasing the same amount of silver even if the price goes up 10 times. After all, what is $2 to them, when the iPhone sells for $700?Much of the industry that consumes silver is subject to this sort of inelastic demand.And once the silver is consumed into devices like this, it's not economical to ever recycle it.It might as well just be gone forever.Another example is certain medical cloth, which contain tiny amounts of silver due to its antibacterial properties.Mirrors, etc.90% of the silver that has ever been mined, that has been sitting in vaults for the past 5000 years, has been consumed in the last 100 years.There is more gold bullion above ground right now, than silver bullion. I guess I would need to know more to be sure, but so far it seems intriguing. If it works (if this allows you to issue USD digitally without needing any USD issuer) then it would be great. I'm sure OT could take advantage of it.I assume it's blockchain-based. I think as long as the blockchain you are using supports multi-sig, then we could put "BitUSD" into a voting pool just as easily as putting BTC or colored coins. I'd definitely be interested in doing so, if you've managed to eliminate the issuer.Let's say I actually have $100 cash USD -- how do I get it into the system?Let's say I have $100 in BitUSD -- how do I get it back out into cash again?As I said, intriguing idea so far. Some more replies / comments...In the case of Bitcoin and other cryptocurrencies, it will be based on trust in voting pools, with the risk distributed across pools on the client side.In the case of gold, dollars, euros, etc you are correct that you have to trust the issuer who is holding your gold. But how else could you trade gold digitally, if there were not an issuer holding the gold? The same goes with dollars. I'm curious how you would have dollar trades without issuers.OT has a user-centric philosophy. We cannot entirely eliminate the risk of issuers, but the idea is to distribute the risk across multiple issuers, for example, using basket currencies. I don't know how you would eliminate issuers entirely, and still be able to trade fiat and asset-based currencies digitally, but I'm curious how you plan to do so.I suppose this depends on the jurisdiction. But I should point out that the issuer would be fully KYC/AML compliant.MtGox, for example, allows users to trade "dollar units" and "BTC units" that are issued by MtGox -- and MtGox allows users to withdraw those units, through a KYC/AML compliant process.(And MtGox is still operating...)The big difference being that OT servers are unable to forge receipts -- and with voting pools, an OT server will also be unable to steal your coins.I'm not sure if I'm interpreting this correctly, but FYI, OT does allow you to issue stocks, and to pay dividends on those to shareholders.Currently OT allows you to create bids even when there isn't enough money in your account to cover them. (But the bid will be removed from the market automatically if it ever fails to complete a trade.)It would be possible, though, to alter OT so that it "stashes" the funds inside the bid itself, similarly to escrow, if that is preferable.In either case, a trade could not complete unless there were funds to back it  up.I think the actual discovery process would be very rare. Most of the time your client will already have the list of servers it's using. And if its configured to perform arbitrage between any given two servers, presumably it's already created accounts on both sides.We haven't added server-to-server wiring of funds yet, but it could be done (with or without Bitmessage) relatively easily.Thank you. As you know, we are in our second round of funding and so we are extremely busy on this end, but if I get time to check it out I'd be happy to let you know my thoughts.Good luck again. This is not entirely accurate...See this post on the subject: https://bitcointalk.org/index.php?topic=220603.msg2758330#msg2758330Basically a client's "order book" is an amalgamation of the order books on the various OT servers he's using.Most trades will happen instantly on those servers, since no Bitmessage "discovery" process is necessary in such cases.Arbitrage should normalize prices across them all.Using Bitmessage for discovery is only necessary for finding a new server, after which point any trades there will also happen instantly.Also, any delays introduced by Bitmessage are a result of BM's p2p nature, but other (faster) discovery layers are also possible.Just wanted to clarify that.P.S. good luck on the project, looks cool. It will be similar but not the same.In Ripple, IMO the critical concept is the P2P issuance of credit lines. Based on this, it becomes possible to route payments across those credit lines, converting from one currency to the next at each "hop."Whereas in Open-Transactions, each server has its own market. If a user is connected to 12 different servers, for example, then his "order book" exists on the client side, and is an amalgamation of the orders on those 12 servers. Software clients will be able to provide arbitrage between those servers, which should normalize prices. Trades should happen instantly.But what if there are other offers, on other servers, which might offer a better price? This is where we intend to use Bitmessage as a discovery layer, to allow users to discover other users and other servers for trading on. There is a bigger delay here (introduced by Bitmessage) but it's only at the point of discovery, and not for all trades. (And of course faster discovery layers are possible, though Bitmessage will be the first implementation.)From there, it's actually preferable not to convert into 4 or 5 currencies along the way, since that is more expensive than converting directly from one currency to the other. (I expect that arbitrage and market makers will make this easy and accessible to people.) Even Ripple, presumably, is designed to save money by "finding the shortest path."In the odd case where it's actually necessary to convert into several currencies along the way, this can be handled by the client, versus building it into the network itself. This does not guarantee atomicity, but I don't think that's a very big concern. The OT client will only operate within price limits defined by the user, and such rare trades will be performed only when all "hops" are available for trade.In the end, the functionality will be the same, but it will not involve credit lines and rarely will require more currencies other than the basic 1 or 2 preferred by the 2 parties.(In one case, a party simply sends funds to another party, who then converts those funds on any market if he wishes to do so. In the other case, a party will place a market offer in one currency, which will be purchased by the other party with the second currency.)
Now that a Bitcoin prediction market is popping up, perhaps some will place bets on whether or not the proprietors of MyBitcoin.com are able to survive the year.People can even bet on the exact day. I believe I was using ubuntu 13, not 12.It's fine by me if python-pip doesn't come installed, but apt-get install python-pip should at least work.I also tried searching for easy_install and nothing was found.I have the technical ability to eventually download it and install it one way or the other, but my concern is for other users, not myself.Also let's keep in mind that certain users have to install EVERY TIME they usb-boot... sudo apt-get install python-pip  <=== doesn't work on knoppix or Ubuntu.I tried apt-get upgrade etc but was completely unable to install pip.Finally I just downloaded the source code.Please remove pip from the instructions, it's just going to confuse people. There's nothing stopping you from transferring your money to someone and trusting him to do your trading for you. (And trusting him to return your assets when he's done.)I don't see how you can eliminate this need to trust a trader, if he is not the owner of the funds. Once he has the power to trade those funds, he could trade them away to another account he secretly owns, in return for some worthless currency that he secretly issued. okay 2 BTC sent to acorn as well :-)Please send all original art files to fellowtraveler at rayservers.net See this thread:  https://bitcointalk.org/index.php?topic=212490.0 We'll get the rest to acorn shortly, next day or so. Sorry about delay. There are various sub-tasks (and bounties) in this project:-- Namecoin integration 7.5 BTC-- Systray GUI with OT integration 10 BTC-- Markets UI 7 BTC-- HTTP Interface 8 BTC-- Integration with legacy banking 12 BTC-- Bitcoin integration (multi-sig) 10 BTC-- Bitmessage integration 11 BTC-- Colored coins integration 10 BTC-- Internationalization. 5 BTCIf you wish, you can contribute to the individual sub-tasks, whichever ones are your biggest priority.----------------------------------------------------Status:-- Namecoin integration===> This integration is what enables OT credentials to entirely ditch the legacy Certificate Authorities, and still be revokable.===> As of last night, our contributor randy-waterhouse has come up with the scheme we are going to use, which will allow for expiration, revocation, multiple credentials, etc.===> Here is the scheme, if anyone has feedback: http://opentransactions.org/forum/index.php?topic=10.msg40#msg40===> We are tracking this sub-task here: http://ciyam.org/open/?cmd=view&data=20130607042737932000&ident=M100V131&chksum=6dd7acda-- Systray GUI with OT integration-- Markets UI-- HTTP Interface===> Xenland is coding this as we speak; he's been working on it for several weeks now.===> He has a working QT systray app, and he has OT building inside it.===> He is not done adding the OT functionality, but some of the menu items are working already.===> Track his progress here: https://github.com/Xenland/Moneychanger-- Integration with legacy banking===> This sub-task is posted here: http://ciyam.org/open/?cmd=view&data=20130608221956480000&ident=M100V131&chksum=e257f8e6===> We will probably not start this until the Bitmessage integration is well-underway.===> We are hoping to take advantage of the work accomplished in this thread: https://bitcointalk.org/index.php?topic=173220.0;all-- Bitcoin integration (multi-sig)===> Work on this will probably not commence until the basic UI is finished.===> However, there's no reason why this couldn't be coded now, if someone wants to bid on it: http://ciyam.org/open/?cmd=view&data=20130607042534492000&ident=M100V131&chksum=45d04220-- Bitmessage integration===> Work on this will probably not commence until the basic UI is finished.===> Bitmessage project have already added the necessary changes on their side.===> If someone wants to bid on this now, work can start immediately:  http://ciyam.org/open/?cmd=view&data=20130607042614187000&ident=M100V131&chksum=f0373e43-- Colored coins integration===> I don't think the colored coins guys are ready for this. (Correct me if I'm wrong.) We're waiting to hear from them on the best API for us to use.===> Whenever they are ready, there's a bounty waiting to be collected: http://ciyam.org/open/?cmd=view&data=20130607042635688000&ident=M100V131&chksum=649becfd-- Internationalization.===> becoin has contributed 5 BTC towards internationalization, so we added this subtask: http://ciyam.org/open/?cmd=view&data=20130627012452184000&ident=M100V131&chksum=7a036860===> No one has bid on this so far. Great idea, I will get one set up ASAP and post the link to our wiki opentransactions.org Nope, not a scam.Notice our wiki:  http://opentransactions.org -- we haven't started using any logos yet because we're waiting until the artists are paid.da2ce7 is responsible for 2 BTC, I am pitching in .6, and marcus is coming up with the other 1.4Since the price of BTC has dropped, I will also pay some extra to the artists. (Anyone want to sell me some BTC for paypal?)Sorry about delay, I've been traveling for the past 2 weeks. Great work, and thanks very much.jgarzik == great help/support for OT project :-) Recently becoin donated 5 BTC for internationalization of this app.You can see his project sub-task here:  http://ciyam.org/open/?cmd=view&data=20130627012452184000&ident=M100V131&chksum=7a036860 The winner I choose is acorn. I suggest that da2ce7's reward fund be awarded to acorn.However, I am very impressed with moltenmich's work, and we want to use his symbol as well (the one you see rotating now in gifs.) So we want to also make him a winner. I will pitch in .6 BTC and also, there is another contributor or two so that we can get his reward up to the 2 BTC as well. His symbol is superb and I would like to stick it up in the upper-left corner of opentransactions.orgI should also mention that bastardizing the work of these two artists into a single logo was my own idea, and I regret it now. Clearly the work of both artists was superior in its original form, and that is why I think it's best to just choose both of them.We will also add a line for artist credit to our wiki. To those artists chosen, please let us know what name / contact info / donation address you'd like us to credit in the wiki. Okay I have created this address: 1CHmSeTMYzJMshQhgYiUkMbUY1rATPovzYIf you want to send the 5 BTC there, then I will set up a task on the Holy Grail bounty for that address, for the purposes of Internationalization of the project.Thanks for your interest and thanks in advance for your donation! The 't' is fine, it's just the angle + camera focus. See the earlier ones on page 2. Great work! If you'd like to hold the 5 BTC at a specific address (and name the address) then I will create a task within the project for internationalization, and your 5 BTC will show up as allotted for that task. I actually like the one from acorn, but I don't like his color versionI would mix them I thinkI would use the globe from moltenmich, but with the font from acorn, and the tx from acorn, but the colors from moltenmichI think that'd be ideal.Sometimes I could see wanting it to say "transactions" at the bottom, maybe for half of the images.But much of the time the "tx" up in the corner is going to be better.I agree with marcus, about what he said about acorn rotating the 'O'BTW I'm not good with artistic stuff, so even if I am saying something, it might actually look like shit once you draw it. Don't forget these. For the "holy grail" bounty we have a piece for legacy banking integration.Basically build what you are discussing into our QT C++ application for 12 BTC bounty:http://ciyam.org/open/?cmd=view&data=20130608221956480000&ident=M100V131&chksum=e257f8e6You will have full access to the OT API and the Bitmessage API, and I will make any necessary changes inside OT itself in support of you.
I'm actually going to claim this "for Grandmas" bounty myself, on behalf of Monetas.We have produced a "Grandma Easy" client, we just haven't released it yet (coming soon.)Screenshots:  http://ft.vm.to/files/screenshots/--------------------------------------------------------------I suggest anyone who is interested on working on an OT-related client, look instead at the "Holy Grail" bounty:https://bitcointalk.org/index.php?topic=225954.0 This looks really great.I don't really like the colored ones, but the cardstock / spot uv looks amazing.Perhaps make a logo that looks more like the cardstock version?Also, can you make versions with TXS instead of TX in the upper corner? (Our command line tool is 'opentxs') I'd like to have the option of using it either way.I think I still have like .9 BTC laying around, so even though we're probably going with the other logo, I might still buy this one from you, if you are amenable to the price. It's just really cool. Can you also make a version WITH the door, and WITHOUT the globe? (And without the 'O' and 'T' in the door.)(That way it won't be so busy... The door is cool.) Also can you make a version that is ONLY the globe? We will use that logo by itself as well, in certain places. Can you take this one, remove the "O" and "T" from the doorway, and then replace the 'O' in "Open" with the globe logo? The issuer (or voting pool members) must audit the transaction server:https://github.com/FellowTraveler/Open-Transactions/wiki/AuditingThis is what prevents inflation. OT builds with fPIC turned on.Is your QT app also building with fPIC turned on?If not, then I would expect problems to arise at link time. (Which, for dynamic libraries, is at run time.)Are you noticing, at run time, that a problem occurs in your main app, when you call something from a different shared object?If so, then it sounds like they aren't compiled with the same options. (Whether 32/64 bit, or fPIC / no-fPIC, etc) It must be important. Headers are not included in the project file -- they are included in the CPP files.(But while building, your compiler will fail to FIND those headers, unless they are on the include path.)The shared objects (.so files) are the Linux version of DLLs. Since you are installing to $HOME/.local, then you probably just need to make sure that $HOME/.local/lib is on your library path. (It will only find libraries that are on the library path.) I'm willing to bet that this part is already handled by the PKG_CONFIG_PATH which you have already set.You will also need to make sure that your makefile is linking the appropriate libraries. For example, if you were linking with g++, you would be adding -lotapi to the link step. That's the instruction that tells it to link the otapi library (which it will search for on the library path.) I'm not sure how you instruct a QT project file to link a specific library, but it will be something similar. I just wanted to point out this false statement by bluemeanie1 aka Joshua Zeidner.The truth is that "the copyright owner" is all contributors to the project (not just the lead developer.)And as you can see by browsing the commit history for Open-Transactions, the project has many contributors. (None of whom work for my commercial effort, Monetas.)Therefore I have no secret powers over OT, as he implies.I suggest you take Joshua Zeidner's claims with a grain of salt, due to his true motivations. I suggest people take "bluemeanie1" aka Joshua Zeidner with a grain of salt. First, I just wanted to post a statement in support of Ripple.Some may be surprised by this, since Ripple is often seen as being "in competition" with OT. But I don't see it that way. First, Ripple and OT really are apples and oranges. There is some overlap in functionality (not much), but the underlying technologies really are quite different.I believe that ideally, every technology will end up being used where it best solves specific problems. To whatever degree OT solves problems better, then OT will naturally rise. And the same is true for Ripple and any other technology.===> If it turns out that Ripple solves problems for p2p exchange of Bitcoin, then that is important -- especially in this day and age of Liberty Reserve.I encourage everyone to read this document I wrote a year back:http://bit.ly/15cFIon  (In google docs)http://ft.vm.to/files/FT-thoughts.pdf  (direct download)I have always been in favor of Ripple, as you can see in my writings, and I think some of the criticism against the current Ripple effort is a bit unfair.First, the "closed source" thing. This has been a source of suspicion, but as a software developer I think they are still just working the bugs out and I have no reason to believe they won't release their code when they feel comfortable doing so. (If you don't feel comfortable with that -- fair enough, don't use it yet.)Second, the "pre-mined XRP" thing. The bottom line is, you don't have to use XRP for your savings if you don't want to. You only need a very small amount of XRP to actually perform transactions -- so just don't accumulate any more than that, if you don't want to. (The technology can still be used whether you believe in the currency or not.)The bottom line is, the technology will either solve problems, or not. Ripple provides p2p credit lines, which OT does not, and that alone makes it interesting to me. And the currency will either succeed, or not. If Bitcoin is the best currency on earth, then nothing will change that. Nothing can threaten that.I don't think the Ripple people are bad guys -- I think they are working to improve money just as we all are, and I believe in supporting anyone who is pouring their heart and soul into bringing us closer to monetary freedom. Even Satoshi made his hundred million dollars. Personally I hope the Ripple guys get as rich as Mark Zuckerberg.---------------------------------------------------------------------------------Open-Transactions / Bitmessage p2p exchangeHOLY GRAIL BOUNTY / Original "Holy Grail" thread===> The bounty for the "Holy Grail" is now over 63 BTC! <===There are still tasks open for those who wish to sign up and help us build this thing.See the "Holy Grail Bounty" thread for instructions on how to sign up to code a portion.You can also see a screenshot in that thread of some of the work that has been accomplished so far.Let's pool our efforts and get this thing done!Thanks for all of your support so far. If you guys check the balance on the Moneychanger project site (CIYAM Open) you will see there are now 63+ BTC available there.There are still some tasks that people haven't signed up for -- please do so! I just put the "end of the month" for the date. I'm not going to hold people to that date. (But at some point -- e.g. 6 months later if it's still not done, then that's "not cool.") FYI, Open-Transactions does recurring payments, I think the easiest way for us to divide up all the tasks is to use a system designed for that purpose."CIYAM Open" has offered to allow us to use their system for free, for the purpose of dividing up the tasks, so I suggest we take them up on that offer.I have posted the project there. Please click here and sign up.I ran into a few bugs, but they were very responsive about fixing them. If you have any issues, the lead developer Ian can be contacted via Skype (ian.who.net) or via email (ian@ciyam.org) or via PM (CIYAM Open).I tried to add project tasks for each of the pieces discussed -- if I missed any, let me know and I will add them.So far the donations for the bounty are up to 45.32, + 18 from Monetas == total of 63.32 BTC. Absolutely not. OT's inboxes (and other boxes) are integral to the internal workings of OT. (And everything in them is signed.)Bitmessage is an additional layer to be used for discovery, specifically for server-to-server wiring and cross-server exchange. It will be used with OT, inside this GUI (this thread), which will integrate with both of them.Absolutely not. Bitmessage will not change anything inside OT itself. Rather, this "holy grail" application will use both OT and Bitmessage.Also, FYI, the Bitmessage communications will not be between OT servers, but P2P between OT users. Alice. --- In the protocol, I am assuming it's the same asset type on both servers (same issuer.) You would need the same asset type ID in order for the discovery to work over Bitmessage the way I've described.--- But I guess you could do it either way. A slightly modified version of the protocol would be used in the case where they are different issuers.--- I'd think if we're talking about two different asset types, then Alice would simply convert the asset type first (on the market) and then perform the wire. (Of course a smart wallet could automate this for her.)--- This is correct.--- The servers could also maintain accounts with each other.--- You could also convert the asset to BTC on the market, and then move it to any server, and then convert it back. So far my favorite is the last one in this image. (The blue.)
Tasks.  (Since several people have volunteered, I'd like you to specify tasks you are going to own.)--- Who wants to do the HTTP interface?--- Who wants to do the Bitcoin (multisig) integration?--- Who wants to do the colored coin stuff?--- Who wants to do the Bitmessage integration?--- Who wants to do the systray GUI (I will provide the necessary OT calls.) There have been several people popping up to do this project, and I think we can divide the tasks between them.I have created a new github repository for the project.The bounty is now up to 63.19 BTC. See the protocols described in the pastebins linked from this first post:https://bitcointalk.org/index.php?topic=212490.0OT servers will not have their own "settlement currency." Using the protocols it's already possible to wire funds between servers and also, BTW itself can serve as a "universal glue." (I don't think having our own "OT currency" is the right solution.) I'm going to post my final answers to this thread, and lock it.I've already put up a bounty to get the necessary UI coded.(If there are more questions, feel free to start another thread.)------------------------------------------------------------------Yes, see this reply.Also, this reply.As well as this reply.And this reply as well.Also this reply.This reply as well.More on colored coin issuers.Are colored coins impacted by the minimum transfer requirement?Also a discussion on credentials and the distribution of risk.Also: The Holy Grail in 7 Easy Steps.------------------------------------------------------------------I suggest people take "bluemeanie1" (aka Joshua Zeidner) with a grain of salt.------------------------------------------------------------------HAND HOLDINGPeople asked for some hand-holding on compiling OT:  Hand-holding.------------------------------------------------------------------People asked about donations to the OT project. (Currently I am using those to pay the Holy Grail Bounty.)The address is: 1NtTPVVjDsUfDWybS4BwvHpG2pdS9RnYyQ------------------------------------------------------------------Answering questions about getting funds in/out of the legacy banking system...Answer 1.Answer 2.------------------------------------------------------------------VOTING POOLSAnswer about the voting pools.Another answer.This one also.More on this.Even more.Distribution of risk across multiple pools.------------------------------------------------------------------Alright that's it, thank you all for your excellent questions! Now let's build this thing! How does Open-Transactions benefit Bitcoin? I don't mind dividing it up if people want to do it that way. For example, one guy does the Bitmessage integration, another guy does the Bitcoin integration, etc. We can even parcel out things like the Chrome plugin, Skype plugin, Firefox plugin, etc.I've got to hit the sack, I'll check back tomorrow. Announcement:===> I have just posted a BOUNTY for this. EDIT: the bounty is now up to 81+ BTCEDIT: "CIYAM Open" has offered to allow us to use their system for free, for the purpose of dividing up the tasks, so I suggest we take them up on that offer. I have posted the project there. Please click here and sign up.-------------------------------------------------------------------------Rassah has donated 18 BTC towards this bounty, and Monetas can pledge an additional 18 BTC as well.So that's a total of 36 BTC so far, not counting any other contributions.Anyone else wishing to contribute to this bounty, please send the funds to the OT donation address: 1NtTPVVjDsUfDWybS4BwvHpG2pdS9RnYyQThis application will actually be rather easy to write, as I can provide the code for all the OT functions, and I will be available to support you and answer all your questions. If any changes are necessary inside OT itself, I will code them for you.If you are interested in collecting this bounty, please contact me at: chris@monetas.netREQUIREMENTS:1. Open Source license.2. The application itself will be a Systray Menu written in QT / C++.3. When you click on the Systray Icon, it should display this menu:MENU:------------------Overview...   (Pops up a list of incoming/outgoing transactions and receipts.)    NOTE: I will provide you the code that generates this data -- you just display it in the GUI.------------------Default Nym:    Trader Bob   ( Click: goes to a list of Nyms where you can add / edit / delete )Default Server:  Digitalis      ( Click: goes to a list of Servers where you can add / edit / delete )------------------------------------------------gold account:      $66,422   (Default account, on server.)gold cash purse:   $40,000   (Cash in local wallet.)    Note: Clicking on the account should pop up a modal dialog for the account.    Note: Clicking on the purse should pop up a modal dialog for the purse.------------------Withdraw -->   (as Cash or Voucher.)Deposit  ->   Paste Cash or Cheque. (Deposit into account or local purse.)------------------Send Funds-->   Cash, cheque, voucher, or transfer.Request Payment -->   Send an invoice or a payment plan proposal.------------------Advanced --->   Agreements   (smart contracts)   Markets        (offers, trades)   Settings        (Settings tab)------------------------------------------------Note: In all cases above, I will provide you the code you'll need for the OT portion of any functionality needed above. I will make this super easy for you.4. The application will also need to provide an HTTP interface so that external applications can send messages to it.    For example, I might have a Firefox plugin that sends a "Withdraw Cash" message to OT through the HTTP interface.    All you have to do when that happens is trigger the same "Withdraw Cash" function from the menu, as if the user had clicked on it.    (FYI, we're going to model the OpenTransact HTTP interface as closely as possible, although we'll adapt it to OT as necessary.)5. The application will also need to be able to talk to Bitcoin through Bitcoin's HTTP interface.    Not much is required here... basically we just want to be able to verify that bitcoins were received,    and we also want to be able to send a multi-sig transaction. Here's an example of this.    We also want to be able to do this with colored coins, but I won't hold you to it unless the colored coin guys can provide sample code.6. The application will also need to be able to talk to Bitmessage through Bitmessage's HTTP interface.    Basically we just want to be able to send/receive broadcasts, so that we can wire funds between OT servers,    and have cross-server discovery for trading. The protocol is described here.    Also, here is sample code for using Bitmessage. Easy, right?    We will want to use an abstraction layer here.As I said, I will be available to support you on your development, and will provide pre-written code that does the OT heavy lifting for you. We're lucky to have a luminary such as Adam Back on this forum. His hashcash innovation is a big part of BTC, and his 'credlib' project will be integrated into OT sometime in the near future. I also had the opportunity to meet with Adam while I was at the Bitcoin Conference 2013, and he mentioned that he's got a solution worked out for homomorphic amounts (ability for a third party to process balances and amounts -- yet without knowing what those amounts actually are, since they are encrypted.) Brilliant! Gold does not have "intrinsic value" per se. Rather, men value it subjectively due to its unique properties (which are objective.) is there any sample code demonstrating this? (Just to save me some time.)I can promise I will put it to good use. If you think 7 cents is too much to pay, to move 1000 Euros (see my example above) then you are really going to hate PayPal. (Also note that it could be 10,000 Euros, or any amount, really.) Also of course, the issuer will have a fee for doing so, and that fee will include the cost of the bank wire.However, your ideas are sound. It doesn't really matter to me which way it goes, as long as I have access to use those colored coins. genjix, glad to see you are still working on this library.Can it be used for sending multi-sig transactions?  Then verifying it was sent? Then for performing votes to get the funds back out?Can you post a code example? Let's assume that the smallest possible transfer is 0.00005430 BTC -- and let's assume a fee of 0.0005.Therefore, a total transfer of: 0.00055430 BTCAs I write this, the last trade on MtGox was at the price: $121.50000 per BTC.Therefore, 0.00055430 is (measured in dollars) worth a little less than 7 cents, aka $0.07.Let's say that the above transfer is used to issue a colored coin with the value of 1000 Euros...This colored coin could remain on the blockchain, but if you moved it to an OT server, you could break it up into 1000 units and trade them as individual Euros....From this point, you can trade in units of 1, or 5, or 20 Euros (etc) and you could trade these units with your friends for physical Euros. (Or, if you put 1000 of them together, you could go directly to the issuer and obey KYC / AML and get a bank wire.) I'll support anyone who works on this, on the OT IRC channel (freenode, #opentransactions) In a way, it's the opposite. Tax evasion is about moving legitimate money out of of the system such that people can't find it, so you don't have to pay taxes on it.Whereas "money laundering" is about moving illegitimate money into the system, such as through a car wash, and making it appear to be legitimate ("clean") money, so you can pay taxes on it, so that people don't suspect it of being drug proceeds. Regarding Bitcoins and gold, it's important to keep in mind that neither has "intrinsic" value.Rather, both are valued by men for their unique properties.Gold is:* Divisible.* Fungible.* Value dense.* Recognizable.* Durable.* Zero counter-party risk.* Stable in supply, yet minable.* Liquid.* International.* Non-manipulatable. (Non-centralized.)By comparison:* Diamonds, while valuable, are NOT divisible, nor are they fungible.* Water, while valuable and divisible, is not value-dense enough to compete with gold as a form of money, on the free market.* Food, while valuable, is not durable.* Dollars, while liquid, do not represent zero-counter-party-risk (rather, they are debt-based.)* Dollars, while recognizable, are not stable in supply (inflation is a worry).* Dollars are also not minable. (Production is available only to a monopoly cartel, versus gold, which anyone can produce.)* Food, which anyone can produce, is not liquid, especially in comparison to dollars or gold.* Dollars, while you can hold them in your pocket, a board of bankers still has the power to reach into your pocket and manipulate its value. (This is not the case with gold.)Soon it becomes very clear that gold was never "declared" to be a form of money by any "authorities" but rather, became money due to natural market forces.If gold became money strictly due to natural market forces (as a result of its unique properties) then clearly the only reason it has been supplanted by dollars is due to artificial restraints imposed on the market by government force. (Such as legal tender "laws", tax "laws", money laundering "laws", etc.)Such forces must be constantly active, otherwise, natural market forces would immediately resolve back to gold again as they have for thousands of years.Now let's consider Bitcoin's unique properties:* Divisible.* Fungible.* Value dense.* Recognizable.* Durable.* Zero counter-party risk.* Stable in supply, yet minable.* Liquid.* International.* Non-manipulatable. (Non-centralized.)AS WELL AS:* Non-confiscatable.* Accounts cannot be frozen.* Anonymity is possible.* Electronically transferrable.As you can see, Bitcoin's unique properties are similar to those of gold, although it adds new properties due to its ethereal nature.Those new properties (non-confiscatable, non-freezable, pseudonymous, transferrable electronically) all serve to route-around the artificial forces that are currently being used to supplant gold with the dollar. After all, the various immoral, legal-tender legislation in place today uses the force of a gun to impose fiat money onto an economy that would otherwise resolve to gold by natural forces. That artificial force depends on the government's collusion with banks and their collective monopoly on the ability to issue, store, freeze, confiscate, track, and transfer dollars. Comparing OT to Ripple is like comparing OpenSSL to Google+. Ripple and OT really are apples and oranges. I think the reason people keep comparing them is because there is some overlap, specifically similarities in the currency trading (or at least the trading if OT is combined with Bitmessage.) But even that is accomplished in very different ways. The above is a very succinct, accurate description of the reality. There are no coins in reality -- only a public ledger of balances. These balances can only be transacted using private keys, and most exchanges keep the majority of their coins stored on an address which has a corresponding private key that is kept offline.So there is an offline private key which controls (say) 90% of the coins, and an online private key which controls 10% of the coins. This way if the server is hacked, only 10% of the coins can be stolen.However, let's keep in mind that the server operator himself could still steal 100% of the coins. (You have to trust him.) Remember what happened with MyBitcoin.com ?This is why I think that a higher solution is to store the coins in a multi-sig voting pool on the blockchain, so that you don't have to trust individual servers.
"Help! Server Sam has disappeared! I need to get my coins out of the pool! Acct ID. Nym ID. Signature."They have access to the audit data. See the auditing link posted above. Well for example, let's say the server disappears entirely...The user sends a recovery request to the other pool members, who verify the situation and then vote to recover your coins.This contingency is actually the whole reason for having voting pools in the first place. The server would be unwise to do such things however, as he cannot steal the coins anyway (they are in the pool.) Plus, he'd instantly lose access to any future transaction fees, as well as losing access to all the rest of his legitimate share of the coins in the pool.Your next question might be: what happens if the entire pool disappears? Answer: you're screwed.This is why the ultimate distribution of risk must occur inside the wallet itself (for example, allocating your funds across multiple pools.)We cannot eliminate the existence of risk, we can only devise better and better mechanisms for distributing it in a user-centric way. In fact, this philosophy underpins Bitcoin itself.This concept of a provider-independent distribution of risk is borrowed from Tahoe-LAFS. Kudos to Zooko! Let's say that you and I form a pool. (Some of the money in the pool comes from me, and some comes from you.)As you can see, if I perform a false bail-out from the pool, I have actually stolen from you!...Therefore you have an incentive to only allow valid bail-outs.Therefore, as a pool voter, your incentive is to verify that both parties have signed the bail-out request, and that the transaction server in question doesn't fail its own audit.Thus, the pool itself acts as the "issuer" would have acted, if the currency had been directly issued onto the transaction server. (In terms of verifying the audit data.) That is, they audit each other, and they have an incentive to do so.The process:1. (The user might have bailed-in 100 BTC, and then traded 90 of them away, leaving 10 BTC in his account.)2. When the user bails out, he submits a signed bail-out request for 10 BTC to the server, who counter-signs it.3. They send a copy of this receipt to the other pool members, who verify it and then vote on the blockchain to release the funds. I don't think so -- because the voters must verify OT-specific information before voting.(Like verifying the user and server have both signed the bail-out request.)This is probably why no one else is using voting pools yet, even though multi-sign is functional: because you need the OT side as well, to make it work.However, if what you suggest is possible, then it will improve my system even more, so I hope such a thing is found! I assume you are asking about the voting pools... My plan is to use the multi-sig bitcoin script, on the blockchain itself.Can you please be more specific about the logic you have in mind?Here's my own:1. The user who wishes to transact on OT, bails his coins into a voting-pool (by sending them to a recipient on the blockchain composed of multiple BTC addresses.)2. The server verifies that the coins are in the pool, and issues corresponding units inside OT to that user.3. From here, all transactions occur off-chain. (So far, no voting is necessary...) Perhaps a thousand transactions occur at this step.4. It's only when the user wishes to bail back out of the system, that a vote of the pool members (the other servers) becomes necessary.5. The user himself plays no part in the actual vote, since his balance might be quite different on the way out, than it was on the way in.  Good question. Consider it in three layers...Layer 1: the issuer directly operates the transaction server. (The guy who holds the gold, also processes transactions between the internal accounts.)This applies to E-Gold and (I believe) Liberty Reserve. The problem is, if you process the transactions, then you are liable to monitor them and report them. This liability results in the seizing of the gold.Layer 2: the issuer issues his currency onto a separate transaction server.This applies to Loom, Truledger, Voucher-Safe, and even OT, if you use it that way. This represents an improvement, since the issuer is no longer directly processing any transactions. The problem is, violence can be used to force the issuer not to use specific servers.Layer 3: The issuer issues his currency onto the blockchain as colored coins.This is what I've proposed in this thread. This way:-- The issuer cannot control which servers the users choose to transact on.-- Thus: The issuer cannot be forced by any threats to choose which servers the users may transact on.-- The issuer may not even be aware of which servers the users may be using to transact on.Of course, the issuer still must be fully AML/KYC compliant, since he is sending/receiving bank wires as he buys/sells his own colored coins. This guy is referring to the fact that I am the author of The Mystery Method.I have not often mentioned this in the digital currency community, as I am rather well-known, and I have preferred to allow Open-Transactions to stand on its own merits.However, I never spam-marketed the book, as it was published by St. Martins Press, and is sold in book stores and on Amazon. I'm certainly not ashamed of my success.Why would Joshua Zeidner lie publicly, calling me a "spammer" and create unnecessary liability for himself? His true motives. This thread is not self-moderated, so I can't delete posts here.Also, I don't want to stoop so low as to conduct censorship. (Even against trolls.) I prefer to allow the forum moderators to do so.I will not be engaging him tit-for-tat, however -- I will just refer people back to my official statement on the matter. Re: bluemeanie1As long as you are posting in my threads, I think it's important that people know your true motives.I am also saving a record of all of your false public statements.For the record: I do not, nor have I ever, engaged in spam marketing. -- If it's a colored coin, then by definition there is an issuer.-- The reason for doing the transactions on an OT transaction server is to gain the benefits of OT, such as untraceable cash, instant transactions, markets, cheques, stocks with dividends, basket currencies, micro-transactions, destruction of receipt history, off-chain transactions, etc.Therefore it seems that even with colored coins, there will be issuers and servers. Sorry, I meant to say "gateway"...The post is now fixed:  https://bitcointalk.org/index.php?topic=212490.msg2324287#msg2324287 -- Then again, remember that this issuer can remain fully AML/KYC compliant.-- Meaning they can demand the same information for all bailments in/out, that MtGox demands.Well this is a good point, and only a lawyer and/or test case will tell for sure. It might depend on the jurisdiction.This also might apply to miners. After all, they are also releasing a currency into circulation which is traded as "bearer". In fact, FinCen has already stated that people who create virtual currency and sell it for money -- must register as money transmitters.This also applies to BTC exchanges. After all, exchanges are also expected to follow "know your customer" regulations for all bailments in/out of the system. Yet they also do not track ownership changes for bitcoins that circulate outside of their system, even though they follow KYC/AML for bailments in/out. ...Until they go to the issuer for redemption, at which point they must identify themselves according to KYC/AML regulations.The colored coin issuer doesn't issue onto the transaction server, he issues onto the blockchain. So by your logic, he must know the identities of all the miners who process that system. In fact, by that logic, all miners must know the identities of all other miners, in order to stay compliant.In my own scenario, it's the users who issue the colored coins onto OT transaction servers. I say that the currency issuer is "entirely divorced" because he hasn't issued the coins onto any transaction servers at all -- although he has no way of preventing others from doing so.I think you have raised some good points, although I think if they are true, they will also apply to Bitcoin miners, Bitcoin exchanges in general, and even the Federal Reserve itself. It will be interesting to see how the courts, and the various jurisdictions, deal with all of this. I suggest people take "bluemeanie1" with a grain of salt. The Holy Grail in 7 easy steps:1. Imagine an issuer, who issues a Euro-based currency in the form of colored-coins on the blockchain. (Hereafter, let's refer to these as "Eurocoins.")2. This issuer buys and sells his own Eurocoins, in return for Euro bank wires. These wires can be fully AML/KYC compliant -- and most users will never have to deal with the issuer directly anyway. Why not?-- Because as long as the issuer serves as the "redeemer of last resort" then users will rarely have to sell Eurocoins back to the issuer, because instead, they can sell and buy them directly from each other.3. Users then upload Eurocoins (and Bitcoins) to Open-Transactions servers. Except the coins don't go directly to the server -- instead, they go into a multi-sig voting pool on the blockchain itself.-- This way, the OT server can issue units based on those Bitcoins and Eurocoins, but cannot steal those coins from the pool. (Also, internally, the OT server is unable to change balances or forge receipts.)4. Notice that the Eurocoin issuer is now entirely divorced from the transaction server where those coins are traded. That is, the issuer may not even be aware of all the servers that are trading around his Eurocoins. (Just as the Federal Reserve has no liability for what happens to individual dollars once they have been released into the wild.)5. Once Bitcoins and Eurocoins are issued as units inside Open-Transactions, users can safely trade them on markets, as well as use financial instruments--cheques, cash, basket currencies, smart contracts (including escrow), etc. Instant clearing can happen here. All the normal OT capabilities.6. Since OT can perform escrow, for example, Alice can send Eurocoin units (inside Open-Transactions) to Jorg, in return for a SEPA transfer from Jorg to Alice's legacy Euro bank account.-- Notice that Jorg is not an issuer, and he does not operate any servers. He is merely another user, who buys and sells colored coins (via OT escrow.) He does not hold any money on behalf of anyone else. This is in contrast to Ripple, where the gateway also operates a server, *and* also issues credit (or holds money on behalf of those who do.)7. The integration of Bitmessage as a discovery layer, makes possible the wiring of units from one OT server to another, in addition to cross-server discovery for the purposes of market exchange or fiat transfer. (See the original post in this thread.)Now what capabilities do we gain, as a result of all this?--- We have currency issuers who do not process any transactions, and in fact are entirely divorced from any transaction processing. These entities can be entirely KYC / AML compliant.--- We have users who can convert any currency into any other currency, on OT markets.--- Our users can then convert in/out of legacy banks without dealing with the issuers directly, since they can just buy/sell colored coins directly from other users.--- We have transaction servers who can operate anonymously, yet who cannot disappear with the funds, and who cannot forge the receipts.--- We have cross-server trading, and wiring of funds.May a million currencies bloom! Suggestion: Just as Bitcoin has honored Satoshi Nakamotoby naming the smallest indivisible unit a "Satoshi", I suggestthat the smallest indivisible unit of Ripples should be called"Fuggers" in honor of Ryan Fugger, the inventor of Ripple.The Ripple protocol is designed to destroy those units withevery transaction, to prevent spamming.Destroy those little Fuggers! Indeed. This is true for all currencies except for purely virtual, blockchain-based currencies like BTC and LTC. (No real-world redemption is necessary for such tokens because the token itself is all there is.)Whereas if a digital currency is "backed" with anything (gold-based, dollar-based, etc) then it becomes inescapable that there must be some form of "issuer" who is holding the gold....Which implies counter-party risk.Open-Transactions was originally meant for such gold-based currencies. The idea was never to eliminate the risk of the issuer, which is impossible, but rather, to devise mechanisms for the distribution of that risk in order to create a user-centric system. This is the same concept, BTW, as the provider-independent Tahoe-LAFS project."Tahoe-LAFS is the first Free Software/Open Source storage technology to offer provider-independent security. Provider-independent security means that the integrity and confidentiality of your files is guaranteed by mathematics computed on the client side, and is independent of the servers, which may be owned and operated by someone else."The original idea with Open-Transactions was to implement this same concept for money.If someone is holding your physical gold, and then he refuses to give you the gold back, then you have lost your gold. This, as I said, is absolutely inescapable except for purely blockchain-based currencies like BTC....So what can you do? There's always the "Jim Bell" solution, or the "crappy court system" solution. Or the "insurance" solution. Or the "reputations tracking" solution.What I settled on with OT was basket currencies. That is, to distribute the risk of a single currency across multiple issuers, such that the loss of a single issuer does not result in the total destruction of value, of that currency.Another piece to this is jurisdictional arbitrage. Which is to say, these multiple issuers should all be located in different jurisdictions. To their credit, the Ripple team is exploiting this mechanism also, in their own way.I would think that the issuers are more likely to be publicly-known (by their choice), while the users would be the ones more likely to hide their identities.If you give your gold to an anonymous entity, you are taking a much larger risk than if that entity is publicly-known. Of course, it is your choice to do so, and the free market will have to take its course.So I ask: why would you choose an issuer who is anonymous, over one who has an agent available to receive service of process?There is no such mechanism within OT itself, however, this is outside of the scope of OT.A certain Nym ID is the same across all OT servers. Thus, there's nothing preventing tracking mechanisms from popping up -- reputation-tracking websites for example, or some form of web-of-trust. But I think it would be better to use software especially suited for this purpose -- perhaps Monkeysphere?One point though: The OT crypto is currently implemented using OpenSSL, which is able to verify identities through their certificate authority / PKI.However, all the OT crypto is used through an abstract interface, the OTCrypto class, which is then implemented to use OpenSSL calls in a subclass called OTCrypto_OpenSSL.It would not be difficult to make another subclass called, say, OTCrypto_GPG, and you could thus entirely swap out OT's crypto (currently based on OpenSSL) to use GPG instead.I believe web-of-trust is available through GPG?  So that might be one solution that could be built directly into OT itself, with little trouble. Then it could potentially verify the Nym's credentials via web-of-trust instead of CA / PKI.But otherwise, as I said, it's probably better to track this outside of OT, using some other software which is especially designed to implement such functionality.The risk of issuer-default is inescapable for any "backed" currency. We cannot entirely eliminate risk; we can only devise better and better systems for the distribution of that risk in a wallet-centric way.You are entirely correct about this, of course. The market will have to make certain decisions and they will take things such as jurisdiction into account. (As well as posted bonds, insurance, auditing protocols, reputation, etc.)===> See this article.I have recently added "credentials" to Nyms, meaning that Nyms can have master credentials, which are able to sign sub-credentials, which are then used for actual transaction signing. I have not yet added API calls for revoking sub-credentials, however they are coming.If your master credential is based purely on a key pair, and then you lose the private key, well -- you are screwed. (Some would say this is a feature.)However the idea is that your master credential could instead be based on a cert, issued by a traditional certificate authority. This way you could just get the cert revoked and have a new one issued in such a situation. (The risk, of course, then becomes the certificate authority itself, whom you must trust not to take over your Nym and steal all your money.)A third concept (my favorite one) is to use the blockchain itself to replace the certificate authority. A certain Bitcoin address could send a transfer (say a satoshi, to anyone) and store a hash in that transfer. (The hash of a master credential...) This way, if you ever wish to revoke that master credential, you just send a new transfer with a new credential hash in it. (The verification process would just look at the hash contained in the most recent transfer for that BTC address.)This might seem like "turtles all the way down," since the power over that identity just gets transferred to a new private key (your Bitcoin wallet) which again, must be protected against loss. But it does provide a universally-verifiable medium for credentials and revoking.You might ask, why not use Namecoin instead of Bitcoin, for storing these credential hashes? The answer is because Namecoin names expire, since they must be human-readable. In my case, I don't need human-readable -- just unique. Therefore, I prefer to use a system which does not expire. (Namecoin is still very useful as a DNS replacement, however.)So my ultimate answer is, I plan to use Bitcoin itself to replace the Certificate Authority.Currently nothing like this is built-in, but it would be easy to add. You could also secret-share your BTC private key (used for issuing new credentials, in the above example) and then give the shares to various trusted family members. After all, as you noted, you wouldn't want to die and leave your wife destitute and starving on the street. Speaking of which..."Each one must give as he has decided in his heart,not reluctantly or under compulsion,for God loves a cheerful giver."2 Corinthians 9:7"Do not pervert justice;do not show partiality to the pooror favoritism to the strong,but judge your neighbor fairly."Leviticus 19:15"You shall not go after the majority to do evil.Neither shall you testify in a matter in courtto incline after the majority to pervert justice."Exodus 23:2 ...and what are those regulatory requirements?So hey, as long as all the miners register as money transmitters, they have nothing to fear! BTW, I like your proposal and I think you should code it.However, in the case of OT, the servers are not failure points. If the users broadcast a discovery for a certain server and it doesn't work, then they can just use a different one instead. Federated. Please read how I am using bitmessage, in the OP (see pastebins), and tell me exactly how to do those same things in i2p and freenet. I would like to know.Also FYI the whole idea is that bitmessage could easily be swapped out for other discovery layers.
Is the only solution a set of drivers for screen-scraping various bank websites ? FYI the digitalis server has started using usage tokens -- so you will not be able to transact on that server without first contacting knotwork and asking him to give some usage tokens to your Nym.I suggest for testing purposes, you run the localhost server (or contact knotwork and get some usage tokens.) BlueMeanie is Joshua Zeidner, a java developer who contacted me a year or two ago regarding Open-Transactions and tried to start a company with me.At the time he was very pro-Open-Transactions, and he was pushing very hard to come out to L.A. and work on a Java version of OT with me. He wanted to go right down to the courthouse and register a company so we could work on it together.However, Johann and I ended up having to part ways with Josh due to his aggressive and toxic torpedoing of business relationships. (Several people can attest to this.) I regret that I ever had any dealings with Joshua Zeidner.We are focused on building products, and won't engage further with Josh.Anyone who has further questions can reach me at chris@monetas.net. I think this is an important idea and you should continue working on it. I just wanted to point out that government crackdowns will only drive adoption.The crackdown on Napster resulted in?  Bittorrent.The crackdown on e-gold resulted in? Bitcoin, Voucher-Safe, Open-Transactions..."The more you tighten your grip, the more star systems will slip through your fingers." Looks great! I will definitely bookmark it. This is a good point, and ultimately the answer will lie in what kind of information can be queried from SEPA and other banking APIs. Actually it was just an example. Since smart contracts in OT contain scripted clauses, this sort of logic is customizable. Therefore the market will be able to determine which contracts work best for which purposes. (And create the contracts they need.)If it's completely impossible for Alice / Bob to verify whether a SEPA transfer has been successful, then reputation systems (I believe) will fill the gap. (Though I would think that Bob would have access to an API to verify whether he received the funds.)For example, instead of routing your transfers through "any ole person" you might prefer to route them through a more trusted party, such as a "gateway" (to use the Ripple nomenclature) -- although in OT that would not be someone issuing credit, but rather, someone buying/selling coins or colored coins. Perhaps 'Jorg' is just one of such services. Also on OT, that Jorg will not be operating a server but rather, using one, just like any other user.Perhaps someday soon, 'Jorg' will just be a bank himself. What about tools for multi-sig ? Thanks! (Corrected in original post.) Actually I meant what I said.Have you tried libertyreserve.com lately? You are correct that a colored coin issuer is the "weakest link." You do have to trust that the colored coin issuer will ultimately redeem those colored coins back for GBP again.However--- The system described works without colored coins. You can use normal BTC. (There's no reason why you couldn't give a normal BTC to someone in return for legacy funds, instead of a colored coin.)--- The main advantage of using colored coins is that it eliminates capital gains tax liability. (I'm not a lawyer and that's not legal advice. My point is that if you buy something for $100 and then sell it for $100, there is obviously no gain or loss.)--- Also keep in mind that certain currencies require an issuer. For example, any gold-backed currency will need an issuer who stores that gold. Any Euro-backed currency will need an issuer who stores those Euros, etc.--- And in the case of currencies that require an issuer, it's better to issue them first as colored coins, versus having the issuer create them directly on the OT server as IOUs. This is because it breaks the link between the issuer and the transaction server.--- You see, if the gateway directly runs the server (Ripple) or if the issuer directly issues the currency as IOUs onto the server (OT can do this) then either way, pressure from authorities or criminals can be brought down onto the issuer, regarding that server. (Such as, "Shut that server down, or we'll shoot you!" or "Remove your IOUs from that server, or we'll shoot you!")--- Whereas, if the issuer issues the currency first as colored coins, then the issuer cannot be held liable for those coins later being traded on various servers by various users. The issuer becomes totally divorced from the transaction servers. Just the same as the Federal Reserve being completely innocent of whatever their dollars are used for, once those dollars enter circulation beyond their reach.--- Of course, the issuer still needs to provide bank wires in/out as a redemption of last resort, and he will need to follow KYC / AML for those wires, but as long as he does, most people will be able to get in/out of the system by buying/selling the colored coins from each other instead of having to go directly through the issuer. This is very powerful! Therefore I believe that colored coins are very important. Kudos to J.R. Willett!--- This allows the issuer to operate legally, without any involvement in the operations of the servers themselves.--- After that, I suggest using OT's basket currencies to distribute the risk of a single currency across multiple issuers, using jurisdictional arbitrage. For example, if there are 20 issuers in various jurisdictions who issue a GBP-based currency, we can combine those on OT into a single basket, such that no one is risking all their money with a single issuer.--- I'm sure the recent victims of the Liberty Reserve heist, who just had all their money stolen, wish they had considered such possibilities, as I have been for the past few years.This may sound surprising to you, but I was actually talking to at least one Rippler before they started that company. When I was originally approached, it was regarding business development for Open-Transactions, but later they started the Ripple company instead. I even sent them a document of all my intimate thoughts.In fact, since they already got to read it, I might as well make that document available to the rest of you as well:http://ft.vm.to/files/britto/FT-thoughts.pdfEnjoy!That is one of the reasons I am Ripple-positive: because my whole goal with OT was to inspire related development based on these concepts. Thus, I view them as one of my "children."We are all working towards the same goals. May a million currencies bloom!The OT server will not issue colored coins -- currency issuers will. These issuers will be entirely divorced from the transaction server, as described above.Once a user uploads colored coins (or regular BTC) to an OT server, the coins will not actually be received by that server, but will be stored in a multi-sig voting pool, which prevents that server from having direct control over those coins. Even if the server disappears, the coins are still recoverable.The transaction server is also incapable of forging receipts internally. As I have said previously, inflation is the only possible crime, but that is prevented through an auditing protocol.This sounds like a question better posed to the author of Bitmessage (Atheros.) My own project is for transaction processing, not messaging. Great thoughts! Technically a user can audit as easily as anyone else -- I was just referring specifically to parties who have a strong incentive to do so.I will probably want to talk to you more about this as we start implementing the auditing protocol. tycoonUA I contacted Atheros about the virus scanner, and he said:FYI when I run Bitmessage here on my Mac, there is no exe. I just run the python script directly from the command line. It's just a safe place to store coins, ON THE BLOCKCHAIN, so that an OT server can issue units based on those coins, yet without having the ultimate power to disappear with those coins.And if the OT server can't steal the actual coins externally on the blockchain, and if it can't forge receipts internally in its own system, then the coins are much more safe than if the transaction server was directly holding them (as we see in the Bitcoin community today.) For example, if your coins are stored at MtGox today, then MtGox ultimately has the power to steal them. They probably won't, but the power is there. But with OT servers, I don't want the server to have such powers. I want to demote the server so that it's merely a cloud commodity, and not an authority. I think if you read the above posts I wrote, you will see that no, you don't lose the censorship-resistance features of the cryptocurrencies, because they are not sent directly to the OT server, but rather, are stored in a voting pool on the blockchain, where those coins are recoverable even in the event that the server itself disappears.Also -- what is your "account" ?On OT, your "account" is just your last signed receipt, and you and the OT server both have a copy of it. In fact that's all you really need to keep a copy of -- all the older receipts can be discarded and the system can still prove everything.If the issuer creates IOUs, and the OT server disappears or "freezes," then the issuer can just re-issue the same units onto a different OT server and it can earn the transaction fees instead. (The problem with this is, what if jurisdictional authorities, or criminals, use violence to force the issuer to abandon a specific transaction server? This is why I recommend adding the cryptocurrency layer...)If you add the cryptocurrency layer, the issuer will create colored coins and release them (Or the miners create BTC and release them.) Either way, when a user uploads those coins into the multi-sig voting pool, they are safe in the pool (the transaction server can't steal them, and the issuer has no power to pick-and-choose which transaction servers are being used -- the users choose.) If your transaction server disappears or "freezes," then your wallet can just submit a recovery request to the other pool members and get their vote on the blockchain, and get the coins back.What if the entire POOL gets hacked? Then you are in a bad position. Ultimately the only solution is to have a well-designed wallet which distributes risk across multiple currencies and multiple pools. This is where I think everything is going, and that's what I am building. Right. More specific reasons already detailed above.I think it's open for debate, and the market will decide, but personally I disagree.Why?Because in my concept, you are only very rarely moving the colored coins in-and-out of the pool. Rather, you are trading them INSIDE OT. So your Nym, INSIDE OT, gives some colored coins to another Nym, INSIDE OT, perhaps by way of market trade or escrow agreement, in return for some other BTC or colored coin INSIDE OT, or in return for some legacy funds in real-world cash or in a real-world bank account.As I've said, I would not want to move coins in/out of the pool for every transaction. Instead, I would keep them in the pool (in OT) for thousands of transactions, only moving them in/out when absolutely necessary....And the reason I would store BTC and colored coins on the main chain, instead of some alternate chain, is because I believe the security is best there. Since they will be "just sitting there" for some time, I prefer they sit somewhere safe. Consider the various forms...----------------------------------------------------------------GOLD ISSUER1. The gold issuer issues gold units onto the OT server.2. Any user who has the currency contract is able to open accounts denominated in those units, and from there, withdraw cash, write cheques, trade on markets, etc.===> In this example, the OT server cannot forge any receipts. The only possible crime is inflation, but the gold issuer has an incentive to audit the OT server, which prevents inflation.----------------------------------------------------------------EURO COLORED COIN ISSUER1. The Euro issuer issues colored coins.2. Users have the option to upload these colored coins to OT servers (preferably via voting pools).2. Any user who has done this is able to open accounts denominated in those units, and from there, withdraw cash, write cheques, trade on markets, etc.===> In this example, the OT server cannot forge any receipts. The only possible crime is inflation, but the other voting pool members have an incentive to audit the OT server, which prevents inflation.----------------------------------------------------------------BITCOIN WITHOUT MULTI-SIG  (not recommended!)1. The user uploads the BTC or colored coins to the OT server.2. The OT server then issues the appropriate units to the user.3. Whenever the user wants to get his BTC or colored coins back out, he sends a signed request to the OT server along with the units, and the server sends his BTC back to him on the blockchain.===> In this example, the server would have to be trusted not to disappear and steal all the BTC he's holding.===> The server would also not have any incentivized entity performing audits to prevent inflation.===> The one benefit is that the OT server cannot forge any of your receipts (so at least the amount he owes you is provable.)===> This configuration sucks (I do not recommend it) but this is basically what the entire Bitcoin world has been doing, up until this point.===> This is why people keep getting screwed in the Bitcoin world. The server just disappears with your money, or gets "hacked."----------------------------------------------------------------BITCOIN **WITH** MULTI-SIG1. The user uploads the BTC or colored coins to a list of BTC addresses, instead of to a single address. Each one of the addresses on this list belongs to a member of the voting pool.2. Each voting pool member is an OT server. Once BTC or colored coins are in the pool, then only an M-out-of-N vote from the servers -- on the blockchain itself -- can retrieve those coins.3. If the user wants to get his BTC or colored coins back off of the OT server, he sends a bail-out request, which the server countersigns, and then they forward this to the pool members, who verify the signatures and vote ON THE BLOCKCHAIN to release the coins back to the user.4. Even if the OT server disappears entirely, the user can still submit a recovery request to the other pool members and get their vote, and get the coins recovered.5. In answer to your question, the coins just sit in the voting pool the whole time while they are being transacted on the OT server. Ideally they will change hands a hundred times, a thousand times, a million times, before being pulled back out of the pool. The whole point is to enable off-chain transactions on transaction servers, with escrow and markets, etc, and to avoid expensive and traceable blockchain transactions except where necessary.===> The only crime left to the OT server (who cannot forge receipts) is the crime of inflation. However, the other pool members have an incentive to audit each other, which prevents this crime. Therefore the pool itself replaces the "gold issuer" in the original example. See the Open-Transactions auditing doc.===> You do not have the trust the individual servers, but you DO have to trust the POOL ITSELF. If a hacker were to gain malicious control over a majority, or 8 out of 10, or whatever, of those servers, then he could steal the funds in the pool.===> This is why I would go even further, and use a wallet GUI that distributes my funds across multiple pools, and/or uses basket currencies to distribute a single currency across multiple issuers / multiple pools.Ultimately, you cannot eliminate risk entirely, but you can reduce it, and distribute it, and take advantage of separation of powers. The concept with OT is to create a wallet-centric experience for automating this, to achieve provider-independence. (Like Tahoe-LAFS.)Yes, an issuer can directly issue his IOU units onto an OT server, without having to go through colored coins.But colored coins are important IMO because they allow you to sever this direct link between issuer and transaction server.That is, you can still have issuers, and you can still have transaction servers, but they are no longer directly connected.This is important for liability reasons, and it eliminates the issuer's ability to pick and choose transaction servers (meaning that authorities also cannot pressure the issuer to do so) and it also allows the users to buy and sell the colored coins as commodities, similar to BTC itself. Trust me, if you work through the exact differences between those scenarios, you will see why it's better to issue them as colored coins. (But OT will work either way, yes.)Colored coins are specifically for Dollar or Euro based currencies, or even gold-based currencies. For BTC, on the other hand, you just use BTC instead of colored coins. Then you have no issuer and the BTC itself is the primary currency being exchanged. OT will work either way. The OT servers are definitely not all controlled by a central anything. Each has its own server operator, presumably.Also, an OT server is not an authority over anything, but would be more accurately termed a "cloud commodity."The authority should be the user wallet itself, not any provider/server. Similar to Tahoe-LAFS: provider-independent.I have repeatedly said in this thread that most of the new capability here is latent in Open-Transactions itself, and that Bitmessage only solves discovery.I have also explicitly said that IRC could most likely be swapped in to replace Bitmessage -- and it would probably still work. (I don't see why not.)In fact the OT servers themselves could even allow users to post and share certain announcements in order to solve this problem.A Tor hidden service, as you suggest, would probably also work -- though it seems to be the most centralized form of all the suggestions.I will definitely be coding it to use an abstraction layer so that different options are possible.The purpose of the broadcast as discussed in this thread is purely for discovery purposes, not for auditing. Each OT server does need to make certain audit information available for query (it doesn't have to be stored in any censorship-proof medium.) But that's not the same thing as the discovery process that makes possible these cross-server wires, cross-server trades, and server/legacy bank transfers. I should also mention:1. Cross-server transfers of funds will involve smart contracts verified by the servers on both sides. (Not by the users.) This is only for OT-server to OT-server, but still worth mentioning. The server itself would have to be "in on" the scheme with Jorg -- and an OT server can't forge receipts.2. Conversion of one currency into another (on markets) is also performed by the server, and thus you don't have to trust the user you're dealing with. The same goes for escrow, for all internal transactions. Bitmessage allows you to find these other users, but the actual transactions are then performed on OT.
No problem. Excellent questions!and get money back out again. I assume by this you mean "legacy cash money in hand" and/or "legacy money in the legacy bank."--- Keep in mind that most transfers will happen inside the OT system, or on the blockchain--- That is, while bailing legacy cash in/out of the system is possible, that should not happen for each and every transaction. --- Also keep in mind that once you bailout BTC or colored coins from an OT server, then it has passed outside the sphere of OT, and you can cash it out in whatever conventional way that you normally would, based on the existing market for Bitcoin services. (This would be an option as well.)--- Therefore I restricted my Bitmessage examples to only cases where the two parties both are transacting within OT. (The reason being that we can then assume that OT's powers apply -- such as markets and escrow.)That having been said, here are various options I can imagine for bailing legacy funds into/out of the system => Bitcoin ATMs. These were at the Bitcoin 2013 Conference in various configurations, and so the option is rapidly approaching to use them.=> Through your social network: This was always what enamored me of the Ripple idea originally -- that instead of using a centralized exchange, you can just "go through your friends." And if your friend will hand you some cash in return for a Ripple transfer, then similarly he should be willing to hand you some cash in return for an OT or blockchain transfer. (And vice-versa.)=> Geolocation: Apple has recently publicized the concept of people providing ATM service for each other. Your iPhone just finds someone nearby who hands you $60. (At the same time, $62.50 is charged to your iTunes account.)The same could clearly work for colored coins in a P2P app. (Even the open-source community could easily build such an app using OT -- though Monetas itself possibly could not, depending on the status of Apple's patent.)=> SEPA transfer: In Europe, bank users can quickly and easily send transfers to each other's accounts through the SEPA API, and verify whether such transfers have been made.=> Meetups: There are already local Bitcoin meet-ups; thus it seems like a viable method of exchange for cash.=> Gateways: (Ripple seems to have popularized this nomenclature, so I'm going to use it here.) This is any business that users are willing to trust for the purposes of sending/receiving bank wires, SEPA transfers, ACH transfers, etc.===> The main difference here is that in the case of Open-Transactions, your funds would not be stored as an IOU from the gateway. Many have said that on this forum, but that is not actually the case. On OT, you are buying/selling BTC and colored coins, instead of issuing IOUs.(Issuers do have the ability on OT to issue IOUs, but that is not the solution I've suggested in this thread. Rather, I've suggested to store the actual coins in voting pools so that an OT server can transact them without having to be trusted not to steal them.)===> In the case of OT, the "gateway" becomes a "trader". Instead of holding IOUs from a gateway, you are purchasing or selling BTC or colored coins from a trader. And that Trader is NOT an OT server -- but another OT user, like you!And since this transaction is occurring inside an OT server:- it will be instant, instead of requiring blockchain confirmations. - It can be performed on a market, where orders are automatically matched according to their criteria. - It can be performed through the use of escrow -- and the terms of that escrow can be customized by the parties (since the escrow itself is implemented as a smart contract -- and users can customize their own smart contracts.)- Via Bitmessage, wallets can coordinate cross-server wiring of funds, as well as cross-server order matching, and cross-server discovery of other wallets willing to make transfers in/out of the legacy banking system, by way of OT escrow.===> In any case, whether you are obtaining IOUs from a gateway (Ripple), or whether you are buying/selling BTC and colored coins from a trader (OT), either way, I assume that such businesses will be willing to take/pay cash at their physical locations, and bank wires otherwise. (Otherwise, why are they even in this business?) Therefore, you can move legacy funds in/out through such businesses.Personally, I prefer cash-in-hand over IOUs, which is why OT places such a high value on the ability to customize your escrow terms.=> Bank Wires: One example of why I prefer cash-in-hand: If you purchase precious metals for physical delivery, you will discover that orders can be shipped based on a bank wire, yet the same business is not willing to ship based on a credit card purchase (due to chargeback risk.)Therefore bank wires are a valid method for getting money in/out of the bank account, albeit slow and expensive.=> Bitcoin Exchanges: exchanges are one way to trade Bitcoins for national currency and get a bank wire, so it deserves to be on this list. Any BTC traded on an OT server could presumably be bailed-off of OT and cashed-in through a Bitcoin exchange (with the laws in that jurisdiction applying.)=> The original issuer: In the case of colored coins, there is some issuer in some jurisdiction who originally created--and has agreed to redeem--those colored coins. Presumably he could be paid (and pay others) through BTC or through bank wires or cheques.NOTE: Most actual users shouldn't have to deal with this guy directly. Another note: Once users have uploaded these coins into multi-sig voting pools, they can then devise basket currencies to hold and transact with. This enables users to distribute the risk of a single currency across many issuers.=> Prepaid card / bank card: It seems that a prepaid card could be given to the user, with funds placed onto the card easily enough based on whether the user had paid the card issuer on OT.- Escrow probably not necessary in this case, and card issuers can demand to be pre-paid.She cannot, although the above examples are all different. This is why I place such a high premium on escrow, reputation, risk limits, and cash streaming protocols.If the money is stashed inside a smart contract on OT, then the OT server is incapable of forging any receipts internally, nor is it capable of stealing BTC or colored coins from the multi-sig voting pool those coins should be stored in. Therefore the holder (OT server) cannot disappear with those coins.You might ask, but which party to that smart contract is ultimately going to get the funds, in the event of a dispute?This is totally determined by the smart contract itself. And since these can be customized (through scripted clauses), then ultimately the open source community will have to decide for themselves, for the various cases, what is an acceptable distribution of risk.For example, let's say that Jorg is receiving colored coins all day, in return for SEPA transfers. He might deal with scammers all the time, which is why he demands a smart contract where the funds go into escrow and he can verify their existence (safely stashed there) before initiating the SEPA transfer.Also, let's say that his terms specify that once he notifies the smart contract of the initiation of the SEPA transfer, he is guaranteed that he will receive the escrowed colored coins after X hours, unless Alice files a dispute.And in THAT case, say the smart contract terms require the decision to then be rendered by Judge Judy (as the sample escrow contract in OT actually does.) And then things will either be proved to her, or they won't. (And if you don't trust Judge Judy's adjudication skills, then don't use a trader who insists on using Judy's contract.)Jorg might have to operate based on a whitelist or even a blacklist -- but at $X per transfer, he'll be operating. And remember, he's not issuing IOUs -- he's just buying and selling BTC and colored coins. He's also not operating an OT server, since he is actually just another user, like you.Here is an article on Open-Transactions smart contracts.--- To whatever degree that SEPA API calls are possible to automate verification of transfers, then I'm sure those will end up being used.--- To whatever degree transfer protocols are possible based on parties providing manual notifications to the smart contract of certain payment events, those will be happening as well.--- To whatever degree that "Judge Judy" has to get involved and make a human decision, in the case of disputes, then smart contracts will have to support that mechanism. (The escrow sample contract that comes with OT, already does this.)---- To whatever degree that whitelists, blacklists, and other reputations systems become necessary, (monkeysphere ?)--- as well as to whatever degree risk limits and cash streaming protocols will be used, they will be, -- wherever they enable new transactions that people could not previously perform.  More step-by-step...1. Wallet uploads BTC to voting pool, in order to trade them around on an OT server.    -- AND/OR --1. Wallet uploads colored coins to voting pool, in order to trade them around on an OT server.Also notice that the colored coin issuer does not directly issue anything onto an OT server. Issuers can issue directly onto OT servers, but I suggest using colored coins and voting pools in order to break that link.2. From this point, it's easy to use Open-Transactions for escrow, and for market trading, on that OT server.   (Server is unable to forge receipts internally, nor steal from multi-sig pools externally.)3. Using a discovery layer (Bitmessage, IRC, etc) users who are not already on the same OT server can discover each other, and select a server to meet on, to complete the trade / escrow. (This can all be automated inside the client software.)4. The same discovery layer makes it easy to wire funds from one server to another, through other users.5. The same discovery layer makes it easy for users to discover each other for SEPA transfers, facilitated by OT's escrow capabilities.6. These SEPA transfers could also be performed by services, who are themselves just "other users." (This is the basic concept of Ripple "gateways" as far as I can tell.) OT escrow is used here to remove trust.7. Even credit lines could be issued cross-server, now that the discovery layer is solved.The specifics of the discovery/OT protocol are in the paste bins at the top of this thread.All conversions for a particular user are performed by his own wallet, in a user-centric fashion.We need to move away from a provider-centric mindset, and instead become provider-independent -- demoting servers from "authorities" to mere "cloud commodities." (For examples of this concept, see Diaspoa and Tahoe.) Nobel prize is a joke these days. Yes. Well think about it -- anytime I proposed something related to Open-Transactions, I eventually ended up having to code it myself, too.Therefore I believe the same is true of Satoshi: he proposed some great idea, and no one did anything with it, so eventually he just coded it himself. Who else would be more likely to have done so, other than "himself" ?  In my own experience, that's the way it goes. Miner_Willy, this is an excellent point. However, there's no reason why the users can't just cash out colored coins with each other WITHOUT using SEPA. Which they can do, as long as they trust the colored coin issuer to perform redemption "of last resort."And then the actual "last resort" redemptions (through the issuer himself) can all be legitimate (non-reversible) and can occur through bank wires and AML/KYC.Therefore I believe this solution still stands, even without SEPA.P.S. I agree with you about the usefulness of a reputations system. How about Monkeysphere? (I will have to defer to the experts on this...) > Why did no one think of Satoshi's system before Satoshi?Have you seen Wei-Dai's bmoney proposal?Hmm...--- Wei Dai lives in the UK. Satoshi writes with UK English.--- Wei Dai invented the cryptopp library. Satoshi wrote Bitcoin using the cryptopp library.--- Wei Dai is Asian. Satoshi is probably Asian.--- Wei Dai proposed the original idea for "B Money"...--- Wei Dai is a professional Windows developer. Satoshi was obviously a Windows developer (see his code...)--- IMO, Wei Dai IS Satoshi. A colored coin issuer can demand KYC info from anyone converting in/out directly through that issuer.Therefore the issuer is compliant. (Consult an attorney -- that's my opinion, and it's not legal advice.)This is no different than MtGox is today: users are giving each other BTC all the time outside of MtGox -- but only the ones who cash out through a MtGox bank wire actually have to cough up their identification info.Similarly, people could be giving each other colored coins all the time -- but only the ones who actually cash out through the colored coin issuer will actually have to cough up their identification info. (The coins that circulate outside their reach are comparable to dollars which circulate outside the reach of the Fed.)... So for example, users could utilize local meetups......Or as I have proposed, users could use OT escrow in combination with SEPA to directly redeem...Open-Transactions is always going to be about a wallet-centric solution, not a provider-centric solution. We want provider independence.As long as the issuer performs redemptions "of last resort" then technically, you could move fiat in/out through any other user.This is similar to what I have proposed. Stick the BTC in a multi-sig voting pool for safety, and then use Open-Transactions escrow and Open-Transactions markets for the actual exchanges.(Except in my proposal, everything is automated.)From there, Bitmessage provides discovery layer. But there's no reason why OT itself couldn't have its own broadcast net, nor why we couldn't use something like IRC to serve that same purpose.Well in my proposal, I wrote: The above protocols can be implemented inside OT wallet GUIs, such that they are automated and transparent to users.Why does that not sound very user-friendly?People have often complained that OT was "too complicated" -- but I guarantee you they are wrong. (These complaints predate the high-level API.)For example, see the high-level API -- most financial actions can be done in a single line of code. Developers couldn't ask for easier.And see the screenshots for the upcoming iPhone app -- Users couldn't ask for easier.I was trying to be nice by giving everyone a few years head start on creating their own OT clients... That doesn't mean easy clients aren't possible, because I personally haven't released one yet. It just means I wanted to allow others the chance to release them first. (So I could focus on the core library...)I should point out that most of the solution was latent inside Open-Transactions itself. I'm actually surprised no one else thought of it before -- I mentioned the idea on my FAQ years ago.Bitmessage is very useful as the discovery layer -- but there's no reason why you couldn't swap in a different discovery layer.For example, the same solution is basically just as easy to do by using IRC as the discovery layer.I can't speak for Ripple (I haven't seen their code) but OT doesn't contain central points of failure.Open-Transactions is user-centric, not provider-centric. For those asking for hand-holding....Code:git clone git://github.com/FellowTraveler/Open-Transactionscd Open-TransactionsSee the docs folder for instructions on installing the pre-requisites.Once you have those installed, this is usually what I do to build:Code:autoreconf -vif -Wall./configure --with-java(The reason I configure with java is so I can run the test-GUI.)Then build the project:Code:makemake installYou can also do "make -j2" or -j8 etc to make it build faster, depending on how many CPUs you have (and how much RAM.)There is also now a tarball installable through apt-get though I don't know if it's the most recent version (better to build it yourself, because then you can always "git pull && make install" to update to the latest version.)Once you have it installed, I suggest you start by copying over the test data:Code:mkdir ~/.otcp -R Open-Transactions/sample-data/ot-sample-data/* ~/.otThen start up the server: Code:otserverThen you should be able to use the command line tool (in a separate window):Code:opentxs helpopentxs listopentxs statopentxs shownymsopentxs newnymEtc. You can also make scripts by putting "!/usr/bin/env ot" at the top of the script. (See the scripts/samples folder.)If you want to try to OT test GUI (Moneychanger):Code:java -jar Moneychanger(You will probably have to tell it the /usr/local/lib folder, and then select an image from your harddrive.)People ask why they have to select an image. The reason is so that hackers cannot do phishing attacks by tricking you with a fake passphrase dialog. They will have no way of anticipating which image you have selected to appear on that dialog, so it will look different for every user.I should add that the test GUI is not representative of an actual OT GUI. It's just a visual representation of the API, for testing/developing purposes. To see what an actual GUI would look like, check out the screenshots of the upcoming Monetas iPhone app.You can get support on the OT IRC channel, #opentransactions at irc.freenode.netSome people have contacted me asking about investing. I suggest you contact our CEO Johann Gevers: johann@monetas.net If you would like to try your hand at an Open-Transactions logo, that would be great.I'm a fan of the Ripple idea (credit lines) and have always said that I would eventually build it into OT.(Perhaps sooner rather than later, now that cross-server discovery is solved.)As for the current Ripple incarnation, I hope their technology proves out and that they are successful.There is no need to bash people who are trying to contribute to monetary freedom.--- The transaction notification is used in server-to-server wiring of funds, to unlock the escrow on both sides.--- The servers can negotiate this between each other directly (since Alice and Bob have notified each server of the other's existence.)--- In essence, this piece is negotiated directly by the two smart contracts.--- This doesn't have to go through Bitmessage; that's only used for discovery process.--- The parties can also directly notice the servers, but this is not necessary for it to work.> Txs therefore can be instantaneous, but might also incur a variable delay?I'd say this is accurate, though I would expect it to basically seem instantaneous.On the commercial side, we have just closed our seed round, and started our second round.Screenshots of upcoming Monetas iPhone appI can say the p2p exchange technology is definitely coming, probably first in some future incarnation of our systray app,  but the timing will depend.On the open-source side, any donations will be re-donated to various OT contributors for their work.1NtTPVVjDsUfDWybS4BwvHpG2pdS9RnYyQFor specific step-by-step walkthrus of the Bitmessage-related protocols, see the paste bins I posted at the top of this thread.Here are more details to help clarify...CURRENCIES--- Blockchain-based commodities. (BTC, LTC, etc)Keep in mind: Blockchain-based currencies such as BTC will not have a proper "issuer" on OT; instead they will be uploaded directly by users into voting pools, where an OT server can issue units based on the BTC yet simultaneously are incapable of stealing those BTC. (They cannot steal them from the voting pool because they are protected by multi-sig, and they cannot steal them internally because the OT servers are incapable of forging receipts.)--- Colored coins. (These are real-world assets such as gold, dollars, pork bellies, etc which are accounted-for using satoshis on the blockchain, and are redeemed by their issuer upon demand.)Important things to remember about colored coins:1. The issuer of colored coins can never be held liable to freeze specific satoshis, because they have no control over the ledger (it's on the blockchain.) Which is to say, the colored coins actually do circulate entirely beyond their control. Just as the Federal Reserve issues dollars which then circulate entirely outside of their control, and thus they cannot be held liable for what happens while they are in circulation.2. This breaks the link on OT between the issuer and the transaction server, since the issuer no longer needs to directly issue their gold onto the OT server. Instead, the issuer uses colored coins, and then those get issued by wallets into voting pools, to make them available for trading on OT servers. This means that pressure against the issuer can never result in withdrawing their currency from an OT server, because they don't have to issue it directly onto an OT server, for people to still trade it there.3. Most people will not ever need to redeem their colored coins directly with the issuer of those colored coins. As long as the issuer is good for them, they will be able to redeem their colored coins directly through other wallets. So the issuer only provides redemption "of last resort."4. Anyone who does redeem colored coins at a colored coin issuer, will be subject to the laws in that jurisdiction, AML/KYC, etc. (So there is no need to violate those laws.)5. Anyone who buys/sells colored coins will not incur capital gains tax risk, since colored coins, unlike BTC, do not go up in value. (Meaning, a $100 colored coin does not change in value between when it was bought and sold, and thus does not incur capital gains. Consult your attorney on that one BTW.)LEGACY BANKS--- Transfers to-and-from the legacy banking system are performed via ACH in the USA, and SEPA in Europe.--- SEPA transfers are instant. ACH transfers can take 3-5 days. Either way, the OT side of such transactions will use OT's ability to perform escrow.--- Although people will have the ability to go in-and-out of the banking system, I don't expect this to happen with every transaction. I do expect it to happen sometimes.--- I expect that some of these transfers will happen P2P (SEPA is particularly suited for this) as well as through professional services (probably similar to Ripple gateways.) Any OT Nym could perform such functions.--- We can automate such things in the wallets, making the actions user-centric, instead of provider-centric.OPEN-TRANSACTIONS FEDERATED SERVERS--- Any Nym will be able to upload BTC or Colored Coins into a voting pool (where the OT server cannot steal them) and the OT server then issues the appropriate units to that Nym via OT's unforgeable receipts.--- The Nyms are already able to perform escrow with each other, on any OT server.--- The Nyms are already able to trade one currency against another, on any OT server.--- Already you can have the same currencies issued onto multiple OT servers.BITMESSAGE--- Bitmessage makes it possible for Nyms to discover each other and OT servers. Thus:--- Bitmessage makes it possible for Nyms to perform currency wires from one OT server to another, through other Nyms.--- Bitmessage makes it possible for Nyms to perform cross-server trades (by enabling discovery.)--- Once discovery has taken place, Nyms can perform escrow, as well as market trading, since OT already supports those things.For specific step-by-step walkthrus of the Bitmessage-related protocols, see the paste bins I posted at the top of this thread.I suppose so, yes. Yes, although at some point we are going to have it in the Monetas systray app. (For starters.)The delay in/out of a legacy bank account will depend on the legacy banking API you are dealing with.As far as I know, SEPA is near-instantaneous. ACH, not so much.I can't really say, I haven't seen their code.It's not the same as credit lines, no.Not that credit lines are a bad idea -- I will eventually be adding them to OT as well. (Especially now that cross-server discovery is solved)I believe that Bitmessage uses proof-of-work to prevent spamming.Also consider that most messages can go directly through OT itself -- Bitmessage is only for discovery.Also -- even if we swap out the discovery layer for something else, OT should continue to work just fine. (But so far I think Bitmessage is perfect.)This is basically correct.Bitmessage, however, would only be the network for discovery purposes. All other communications can go directly between OT servers, and P2P between OT wallets.OT's cash instrument uses Chaumian blinding.However, there are other instruments on OT which do not use Chaumian blinding: cheques, invoices, recurring payments, market trades, smart contracts, etc.These other instruments, while not blinded, are still pseudonymous, and the receipts are destructible. (It can still prove everything without the receipt history, as long as you have the last signed receipt.)It clicked for me.Yes.OT is a system for federated issuing and transacting of various currencies. It can work with and without blockchain-based currencies.Bitmessage is a p2p system for messages as well as subscriptions/broadcasts.In our proposed protocol, OT federated servers will utilize Bitmessage as a discovery layer to enable cross-server escrow, for the purposes of market trading and wiring of funds between OT servers (and in/out of the legacy banking system.)You can read more details above.Please see details above, especially the protocol details in the paste bins I posted.OT is fully-functional and usable. At least, the server and command line, as well as the API and client-side scripts.There is also a test-GUI, and Monetas will be coming out with real GUIs very soon.But the real beauty is the things you can build with OT, by integrating it into your own projects.We are working on the voting pools, and the p2p exchange stuff will take a bit longer since it was just designed last night.(Although who knows, if the second round of funding goes well, we might have it out a lot sooner.)I should mention, BTW, that OT is completely open-source, and any products released by Monetas will be open-source as well.This isn't entirely correct. OT cash is untraceable. But if you want to prove you paid someone, then use an OT cheque instead. (And you'll have a cheque receipt)The exchange protocol wouldn't be over Bitmessage, it would be internal to OT.Bitmessage would be used for the discovery process. See my paste bins.I don't think banks will have to run OT servers.Any colored-coin issuer can fully-obey KYC / AML.The issuer would be entirely divorced from the OT transaction servers, which could operate on Tor.------------------------------------------------------I can also reveal that Adam Back believes he has solved the problem of homomorphic amounts (so the OT server can't see any of the amounts, on any of the transactions it processes.)I will be integrating credlib into OT soon and also working with Adam on adding his homomorphic code to OT as well. The name is "Open-Transactions."The above protocols use Bitmessage for the discovery layer, but any other discovery layer could also be swapped in. Yes. Most of the capabilities were already latent in OT. Bitmessage is just what solves discovery.(In fact you could swap it out for any similar solution which solves discovery.) Last night, randy-waterhouse and I were experimenting with Bitmessage. (*smooch*!!)Bitmessage is a p2p messaging (and broadcast / subscription) protocol, based on the Bitcoin protocol.It uses its own blockchain, but the chain only stores the last 2 or 3 days worth of messages. (It's assumed they were delivered within that time, where they are then safely stored on the recipient's inbox.)Combining the above Bitmessage capabilities--which we already proved out experimentally--with Open-Transactions, makes possible fully-decentralized p2p markets, as well as p2p escrow across OT federated servers, easy p2p and server-to-server wiring of funds and conversion of currencies, both within OT and also between OT and the conventional banking system.Furthermore, this is possible with little-to-no changes inside OT itself, and will not require the issuing of credit, nor will it require any pre-mined currency.How does it work?-----------------------------------------------------------A few concepts...--- First, keep in mind the concept that Bitcoins and Colored Coins (either/both) could be issued onto an OT server, without having to trust the server itself, through the use the multi-sig "voting pools" on the blockchain itself. I've already extensively discussed this on this board, and here's an article on how it's done:  http://bitcoin.stackexchange.com/a/834/309--- Second, keep in mind that using Colored Coins instead of Bitcoins is advantageous in certain circumstances, as it allows users to buy/sell those colored coins (for the purposes of transmitting other currencies) without incurring any capital gains tax liability. (I'm not a lawyer and that's not legal advice. The basic gist is, if you buy a colored coin for $100, and sell it for $100, there is obviously no gain or loss.)-----------------------------------------------------------T H E   H O L Y   G R A I LEnter Bitmessage! (Which solves discovery across federated OT servers.)As I said, randy-waterhouse and I already TESTED Bitmessage last night to prove experimentally that this is possible (and it worked.)-----------------------------------------------------------Using Bitmessage with OT to effect server-to-server wiring of funds: http://pastebin.com/NjQgDarx--- The wiring protocol is all about Alice trying to discover Bob so she can move her money from one server to another (and Bob trying to discover Alice so he can make a profit by moving money from one server to another.)-----------------------------------------------------------Using Bitmessage with OT to effect escrow-based conversion of currencies across OT federated servers:  http://pastebin.com/S1W5guAQ--- The currency conversion protocol is about Alice and Bob being able to choose a server they can agree to meet on so they can trade one currency for another inside OT. (For cases where they aren't already trading on the same OT server.)-----------------------------------------------------------Using Bitmessage with OT and SEPA so that Alice can p2p send any currency which Bob receives as Euros in his Euro account: http://pastebin.com/SsLrxVP6--- The SEPA transfer protocol is about Alice being able to send Silver Grams, which Bob receives as Euros in his Euro bank account. It's also about Jorg earning a profit in silver grams, by sending a SEPA transfer to Bob on Alice's behalf.-----------------------------------------------------------We already knew that OT offered quite a few benefits to Bitcoin: http://bitcoin.stackexchange.com/a/2710/309But now, combined with Bitmessage, Open-Transactions becomes a juggernaut!The above protocols can be implemented inside OT wallet GUIs, such that they are automated and transparent to users.May a million currencies bloom! Yet another Ripple thread centered on Open-Transactions...How to get free support for OT:  irc.freenode.net  #opentransactionsHow to build OT from scratch:  https://github.com/FellowTraveler/Open-Transactions/blob/master/docs/INSTALL-Debian_Ubuntu.txtHow to install OT via apt-get:  http://www.openwallet.org/downloads/Coming soon (screenshots): http://ft.vm.to/files/screenshots/(There are other clients in the works, but that's just an example.)There's also, of course, the test GUI, from which people can copy sample code: https://github.com/FellowTraveler/MoneychangerThis is half-correct.Open-Transactions is an open-source project, not a commercial project.Similar to Bitcoin itself: there will be commercial projects built on top of it, from various entities.So OT will be used by commercial projects, including my own, but OT itself is not being developed as a commercial project.I can see how you'd make this assumption, but Monetas (my commercial effort) has no plans to use closed-source.We don't even really believe in intellectual property, and we will be releasing the code for our products when those products themselves are released.(And yes, we know how to monetize our products regardless.)This is a mischaracterization.Open-Transactions is free and open-source.Monetas will also release its products open-source.The protocol is not proprietary whatsoever.I was fortunate enough in my previous career, to be able to work for several years full-time on OT, at no benefit to myself.I paid my own bills. Hmm do you know the project very well?Fair enough. Although there's an IRC channel where plenty of support can be had.(There are nearly 50 people logged in there right now.)I have too much respect for other developers to be bashing Ripple or any other project. Especially since one of the purposes of OT is to popularize concepts for other developers to adopt. (Success is in all of our interests.)That having been said, characterizing OT as "failed" is a bit ridiculous in my opinion.--- Open-Transactions is the only open-source project that does many of the things that it does, or that combines them into a single project.For example:1. Untraceable cash.2. Ricardian contracts.3. Ability to process transactions without storing a receipt history.4. Fully-functional smart contracts.5. Built-in client-side scripting.6. A full range of instruments such as cheques, cash, cashier's cheques, invoices, etc.7. Basket currencies.8. Recurring transactions.9. Escrow.10. Issue stocks and pay dividends.11. Fully cross-platform and cross-language.Etc. All of this is fully-functional now. And it's free and open-source, with no ulterior motives.--- OT has been undergoing protocol testing, load testing, and real-world testing for a couple of years now. A unit test suite has started to materialize. The complete code has been available for inspection by the open-source community. There are a number of contributors. (See the commit history...)--- OT is being integrated into a number of projects, including OpenSim. Independent developers are using it (I would know -- I provide free support for them.)--- Tarballs and install programs are starting to appear, as well as the ability to install via apt-get.(And I am not the one doing those things -- the open source community is.)--- Commercial clients are also being developed for OT, and not just by Monetas (my own effort--which recently closed its seed round.)I am a fan of Ripple, and I hope their technology proves out and that they are successful. And I'm flattered to see my project compared to it, even through the two projects really are apples and oranges.I really don't want to turn any Ripple threads into discussions on the benefits of Open-Transactions, but if the discussion begins to hinge on my project instead of theirs, then I'm going to be forced to pop up and respond.I hope you understand. It needs to have a screen. http://bitcoin.stackexchange.com/a/2782 Hi all!It is I, your good buddy Fellow Traveler, with some Open-Transactions news...IN THIS ISSUE:--- Monetas iPhone app (Screenshots!)--- HUGE progress on OT's SMART CONTRACTS!--- Many questions answered in recent Reddit thread.-----------------------------------------------------------First, I'd like to direct your attention to a recent Reddit thread about Open-Transactions.A lot of questions are answered in there, so you guys might find it interesting:"Anyone that has read about OpenTransactions got the feeling this could be the next big thing, and a huge boost to Bitcoin?"http://www.reddit.com/r/Bitcoin/comments/1e3s82/anyone_that_has_read_about_opentransactions_got/-----------------------------------------------------------iPHONE APP!I thought you guys might like to see a sneak-peek at the up-and-coming ***iPhone app*** for Open-Transactions, from Monetas:===> http://ft.vm.to/files/screenshots/ <===Sweet, eh? (Not done yet, but getting close.)==> You may have heard people refer to OT as overly-complicated......But they're behind the times! Since the high-level API "OTMadeEasy" was released, most financial actions can now be performed with a single line of code. (See the demo programs provided in php, python, csharp, java, etc.)==> You may also have heard naysayervers derisively scoff that OT is difficult-to-use......But now with the new iPhone and Android apps nearing completion, such talk is quickly becoming an artifact of the past. (Please be sure to educate the misinformed, whenever you encounter them.)Indeed, I already gave a little time -- a headstart -- to other developers, over the past few years -- an opportunity to create GUI user apps of their own, before moving on it myself....But the headstart is now over! (For user apps, anyway.)Of course, just using OT in your own projects, will still give you a huge headstart, vs re-inventing the wheel. And there are so many other things which could be built, beyond mere user apps.(The real vision is RESOURCE ALLOCATION amongst cloud APIs.)-----------------------------------------------------------QUESTION:  Is Monetas a commercial version of OT?===> NO... But Monetas will sell commercial software built using the OT library.===> (Such as the iPhone app.)===> To be clear: Open-Transactions is an open-source platform, period. ===> Monetas, on the other hand, is building commercial software that runs on top of the OT open-source platform...===> ...an iPhone app, an Android app, a Systray app (with plugins for Chrome, Firefox, Skype, etc.) Voting pools, scalable architecture, etc.===> Another way of looking at it: Open-Transactions is built to make financial transactions easy for PROGRAMMERS...===> ...Whereas Monetas aims to make OT easy for USERS by providing user apps, and for the ENTERPRISE by providing additional architecture.-------------------------------------------------------------------*** Progress on SMART CONTRACTS ***I'm really excited about this one!While OT has had smart contracts for a while now, the API didn't expose enough of the functionality to make them useful, beyond a proof-of-concept. For example, it was previously impossible to create smart contracts, or sign them, or activate them, without having to first write a special custom script for each of those steps   :-(But that has all changed! Over the past few months, A LOT OF WORK has gone into exposing more and more of the smart contracts functionality through the API, enabling us to update the OT tools considerably...===> You're wondering: WHAT exactly are the new CAPABILITIES?In a nutshell:1. Smart contract templates are now fully-functional.2. The 'opentxs confirm' and 'opentxs propose' commands are now fully-functional!3. Special 'smartcontract.ot' tool for viewing/editing the templates -- fully-functional!In greater detail:EASILY **CREATE AND RE-USE** SMART CONTRACTS--- There is a special script that allows you to CREATE your own smart contracts. (It's called smartcontract.ot) When you run smartcontract.ot, you can dynamically construct your own smart contracts--defining the parties, the bylaws, the clauses, the agents, etc.--- This creates a smart contract TEMPLATE. That is, a pre-made template which can easily be re-used many times by different groups of parties. The idea is that the "lawyers" among you can design smart contracts, which many other people can then easily use.--- (FYI, the smartcontract.ot tool can also be used to load/view existing templates, so you can explore other people's smart contracts dynamically and see all their parts.)--- A few PRE-MADE templates are bundled with OT, including ***Escrow with Arbitration.***EASILY **SIGN AND ACTIVATE** SMART CONTRACTS (brand new!)--- New command-line options have been added to make this functionality easily accessible. For example, you can now use the 'opentxs confirm' command to sign onto a smart contract, which is then automatically sent on to the next party (appearing in his inbox) so he can sign it too, and sends it on to the next party, etc, until the last party ACTIVATES IT to start processing!--- As a result of this, the scripts/smartcontracts/escrow folder is now EMPTY except for the escrow template itself!  All the supporting scripts have now been erased -- they're simply not needed anymore. Just use smartcontract.ot to view/edit, and use 'opentxs confirm' to sign/activate.--- Open-Transactions now automates all the work of placing these contracts in your outbox, and in your recipient's inbox, and sending the appropriate notices when the agreements are activated (or when they fail to activate.)--- Payment plans (recurring payments) are now fully-functional as well. You can create them using the 'opentxs propose' command, and sign/activate using 'opentxs confirm'. They work similarly to the smart contracts. (Inbox, outbox, notifications to all parties, etc.)--- This means we can FINALLY add smart contracts AND payment plans into the Moneychanger test GUI. Huzzah! (So that's coming soon.) In the meantime, enjoy the new command-line tools!There's more, but I don't want to overload you guys, so I'll save it for my next announcement (coming soon.)Your friend,Fellow TravelerP.S. BTC donation address: 1NtTPVVjDsUfDWybS4BwvHpG2pdS9RnYyQAll donations will be re-donated to people in the open-source community who work on OT, to reward them for their hard work. Special shout-outs to randy-waterhouse, da2ce7, knotwork, BlueWall, and others.P.P.S. Anyone interested in the commercial side (Monetas) please contact johann@monetas.net
Here's how we plan to do it in Open-Transactions: Let's say that 10 transaction servers voluntarily choose to form a voting pool (to provide more security for their users.)This means that all bailments of BTC into the pool are sent to a list of 10 addresses -- the 10 servers in the pool.Any bailments back out of the pool will require a (say) 8-out-of-10 vote of those servers to get the coins back out.The servers simply look at the bailment request, verify the signatures on it, and then vote. Most of the time (if the signatures verify) then there will be 10 "yes" votes. If the signatures don't verify, then normally you will get 10 "no" votes.So for that pool, I wouldn't expect any new voters to ever be involved, other than the 10 servers participating in that pool.Of course there will be multiple pools, and users will have to choose which pools they trust. It's not IMPOSSIBLE to hack the funds, but it would require hacking 8 servers instead of 1. Since everyone here uses stuff like MyBitcoin and MtGox (which would require only hacking a single server) then my proposal is a significant improvement on the current state of things. I don't think you really understand how voting pools / multi-sig works.If any jackass can just go and add voters to any multi-sig transaction they want, then the whole concept of multi-sig becomes worthless.So then why do you think they added it to the BTC protocol in the first place? I'm hoping this change won't impact colored coins -- because colored coins are important.Can anyone comment on this? Bitcoin doesn't solve the trust problem either, since 51% of the hashing power can forge transactions.A voting pool would be composed of a group of transaction servers, such that X-out-of-Y of the servers would have to vote to get coins back out of the pool.For example, if there are 20 servers in the pool, and the multi-sig requires 15 votes to move the coins, then you would have to hack 15 of those servers, not just one, to get the coins out of the pool.It's not as secure as the blockchain itself, but it's certainly a lot more secure than having to trust a single server -- which is mostly what the whole BTC community does with these servers like MtGox and MyBitcoin. http://bitcoin.stackexchange.com/a/834/309 http://bitcoin.stackexchange.com/questions/7682/what-is-the-different-between-open-transactions-and-ripple I would be happy to sit you down and train you on it.What city do you live in?Or we can meet on IRC. Yes. Kudos for someone42 for this post. This is exactly what I was coming onto this thread to write.Especially the part where he says, "[then] a light flashes on the BitSafe and "Send 1.815 BTC to www.bitmit.net?" appears on the OLED display."This is exactly what I need for Open-Transactions.We have now gotten OT to where it installs on 64bit Linux through apt-get (using custom repo).What do I need to make happen, in order to test OT on your device? Is there any comparable hardware I can buy now at home, which I can use to simulate running OT on your device? (So I can prepare OT to run on your device...)This project is very interesting and important, especially the open-source aspect of it. May I recommend also that you choose an open-source license with patent protections built in so that your work doesn't later become subject to patent trolling. That will impact companies who try to use your hardware designs.I am available fellowtraveler@rayservers.net for any discussion. Great work! FYI, OT is already capable of instant secure payments, and dispute mediation (see escrow smart contract.)What OT is missing, is "secure handling of users' funds." That is, you would still have to trust the OT issuer who is holding your physical BTC.The solution for this is to store the BTC in a voting pool (M-of-N) on the blockchain itself.As you proceed with BitContracts.org, may I ask that your first action be the implementation of a couple of simple C functions for M-of-N blockchain transactions. I know that my own project will start using it right away. My own proposed solution is, when BTC are bailed onto a server, instead of giving the coins directly to the server (and risking that the server will steal them, or get hacked)......instead of giving the coins directly to the server, you put them into a voting pool composed of say, 50 or 100 servers, where you need X-out-of-Y vote from the other servers, to bail coins back out of the pool. Note: You don't need to do this for every single transaction, since OT transactions occur off-chain. Instead, you just need to do this when moving actual BTC in or out of the pool.The technical details are described more in-depth here: http://bitcoin.stackexchange.com/a/834/309This is not just an OT solution -- everyone should be doing this. All those server heists, where they lost hundreds of thousands? Those never needed to happen. Use voting pools use voting pools use voting pools stop getting fucked. It's me again, your buddy Fellow Traveler...In the 2 months since my last announcement, RADICAL progress has ensued onthe Open-Transactions project.As our number of contributors has continued to grow, so also our progresshas accelerated!Let's get right to it...------------------------------------------------------------1. "OT MADE EASY" -- NOW IN ALL LANGUAGES !2. IPHONE SUPPORT3. LINUX TARBALL4. OTCRYPTO IS FINALLY COMPLETE5. CREDENTIALS  !!   <==== Big update.------------------------------------------------------------In brief1. "OT MADE EASY"  -- Transactions with a single line of code via theultra-high-level API, now available in ALL languages, with new samplescripts in Python, PHP, CSharp.2. IPHONE SUPPORT -- New iPhone build setup + skeleton project nowavailable!3. LINUX TARBALL -- Install OT on Linux, with dependencies, via a SINGLECOMMAND!4. OTCRYPTO IS COMPLETE -- The OTCrypto abstraction is now complete.5. CREDENTIALS  !!  -- Major update, enabling identities from CAs andblockchains.------------------------------------------------------------In detail...1. "OT MADE EASY" NOW AVAILABLE IN ALL LANGUAGESOTMadeEasy, the ultra-high-level API, is now available in ALL languagessupported by OT.Transactions are now officially reduced to a single line of code, in alllanguages.Here are some sample scripts in CSharp, PHP, and Python:https://github.com/FellowTraveler/Open-Transactions/blob/master/scripts/tests/csharp/Main.cs<https://github.com/FellowTraveler/Open-Transactions/tree/master/scripts/tests/csharp>https://github.com/FellowTraveler/Open-Transactions/blob/master/scripts/tests/php/php_ot_test.php<https://github.com/FellowTraveler/Open-Transactions/tree/master/scripts/tests/php>https://github.com/FellowTraveler/Open-Transactions/blob/master/scripts/tests/python/python_ot_test.py<https://github.com/FellowTraveler/Open-Transactions/tree/master/scripts/tests/python>Each of the above scripts demonstrates a few API calls, including a CASHWITHDRAWAL transaction.(More sample scripts coming soon.)*Thanks to contributor BlueWall for the CSharp script.*(Bluewall is working on an OT integration with OpenSim.)Here's an article on using the API:https://github.com/FellowTraveler/Open-Transactions/wiki/Use-CasesHere is complete working sample code for every possible use case of OT,using the high-level API:https://github.com/FellowTraveler/Open-Transactions/blob/master/scripts/ot/ot_commands.ot------------------------------------------------------------2. IPHONE SUPPORTThanks to contributor Happywarrior, OT now builds for iOS, and alsosupports the iOS keyring.iOS build setup and skeleton project! (For iPhone / iPad development.)https://github.com/happywarrior/OTClient-iOS------------------------------------------------------------4. LINUX TARBALLThanks to contributor randy-waterhouse, we now have a Linux tarball for OT,meaning it's possible now to install OT on Linux, with dependencies, via asingle command!https://github.com/randy-waterhouse/opentxsWe still need to get the repository hosted, but here's the command thatwill install OT, once the tarball is hosted:   sudo add-apt-repository ppa:ppa-name ; sudo apt-get opentxsNote:  repository ppa:ppa-name doesn't exist, it is just an example.(Anyone interested in hosting it?)------------------------------------------------------------5. OTCRYPTO FINALLY FINISHEDThe OTCrypto abstraction is now complete. What does this mean?1. It means the entire OT crypto code is now localized to a single class:OTCrypto. (All the rest of the code just uses OTCrypto.) This will make iteasy for code audits of the crypto portions. Any volunteers to do the firstcrypto audit on OT? Don't all jump at once.2. It also means that we actually could replace OpenSSL with GPG, or withany other crypto library. All you'd have to do is make a copy of theOTCrypto_OpenSSL class named OTCrypto_GPG, and then just use GPG calls forthe method internals, instead of the OpenSSL calls that are there now.===> Voila! OT using GPG instead of OpenSSL. Any volunteers?The OTCrypto interface now has fully-implemented methods for:-- randomizing memory,  (entropy callback coming soon.)-- calculating digests,-- converting to-and-from base62-- and base64,-- key derivation,-- secret-key encryption and decryption,-- public-key encryption and decryption (in RSA envelopes with multiplerecipients),-- ...and digital signatures and verification.OT uses this interface exclusively for all its crypto--and technically youcould, too. My goal has always been to make crypto as accessible aspossible to other developers.BUT WAIT, THERE'S MORE!We *also* finished abstracting out OTMint and OTToken, where theUNTRACEABLE DIGITAL CASH is currently implemented using Ben Laurie's"Lucre" library.So for example, if you wanted to remove Lucre (which uses OpenSSL) andREPLACE it with the PGP "Magic Money" digital cash implementation byPr0duct Cypher, simply make a copy of the OTMint_Lucre and OTToken_Lucreclasses, name the copies OTMint_MM and OTToken_MM, and then fix theirinternals to call the Magic Money library calls instead of the Lucrelibrary calls.Voila! OT is officially modular enough to work with ANY chaumian cashalgorithm!===> This also provides a very useful testbed for researchers who wouldlike to test their own digital cash algorithms inside a fully-operationaltransaction system.------------------------------------------------------------3. CREDENTIALS   -- We've coded a major change in OTPseudonym, to enable identities thatcould be anchored via one of many different sources, such as: CertificateAuthorities, blockchains, URLs, etc.From the very beginning, OT has managed identity in a very simple way: TheNymID is a hash of the Nym's public key, and any messages must be signed bythe corresponding private key.Though OT will continue to support these "public key-based" Nyms, otheroptions became necessary for various "real world" projects, and these newoptions have now been added via the OTCredential class.HOW DOES IT ALL WORK NOW?  Two important concepts have been incorporatedinto the OT identity system, in order to "embrace and extend" all otherpossible identity systems.1. Source string.2. Master credentials and subcredentials.--------------------1. Source string.The NymID is now calculated as a hash of the Nym's source string. In thecase of "public key-based" Nyms (classic style OT) the source stringremains the public key itself. You hash it to get the ID, as before.-- But now, alternately, the source string could instead be the unique DNinfo for a traditional CA-issued Cert.-- Or, the source string could be a URLsuch as a Namecoin address.-- Or, the source string could instead be a Bitcoin address.--- Etc.  (Many sources are possible, and they all have differentproperties.)In all cases, a Nym's credentials must verify through their OWN SOURCE.For example, if the Nym's source string is based on the unique DN info fora CA-issued cert, then the Nym's master credential must be signed by a Certwith that same DN info, AND the cert must verify through its own CA.-- Or, if the Nym is based on a Namecoin address, then the Nym's mastercredential ID should be verifiable through that Namecoin address.-- Or if the Nym is based on a URL, then the Nym's master credential IDshould be posted at that URL.-- Etc.  Makes sense?As long as a Nym verifies through its own source, and as long as the sourcehashes to form the NymID, then we are able to have MANY credentials, andMANY potential types of sources, for our Nymsand these sources all have different properties! For example:-- A CA-issued Cert, unlike a plain-jane public key, can be controlled by acentral authority. This means, for example, if a commercial venture wishesto revoke the Cert for a specific Nym, and replace it with a new Certcontrolling that SAME Nym (perhaps while simultaneously replacing theformer employee who originally controlled that Nym, with some new employee)then this can now be done, AND while keeping the Nym's ID unchanged.-- Alternately, for those who distrust CAs, credential IDs posted to ablockchain will have full censorship-resistance for their digital identity,yet still be publicly revokable. See this project, for example:https://github.com/bcpki/bitcoin/blob/master/README.md"The BCPKI-project (blockchain-PKI) establishes the blockchain as a rootCA."My own commercial effort needed this "source" stuff in OT, so we went aheadand added it for the rest of you, too! Speaking of which, please direct allbusiness inquiries to Johann@monetas.net and all technical inquiries tomyself  :-)--------------------The second piece of the new OT identity code:2. Master credentials and subcredentials (for a single NymID.)OT itself now supports its own built-in master credentials which can issue,sign, and revoke sub-credentials.Each credential now contains THREE KEY PAIRS: A signing key, authenticationkey, and encryption key.You can create multiple master credentials per Nym, and multiplesub-credentials per master. The NymID will remain unchanged throughout.Eventually the idea is to also add sub-credentials for other authenticationmethods, such as third-party services, 2-factor auth, etc.===> This new system will make that easy to do :-)------------------------------------------------------------IN OTHER NEWS...Don't forget, we now have a bash test script, which performs ahalfway-comprehensive set of unit tests via the command-line tool. (Greatfor development)https://github.com/FellowTraveler/Open-Transactions/blob/master/scripts/tests/bash/ot_testWe now run all our new code through these tests before any releases.------------------------------------------------------------NEW OPENTXS (command line) COMMAND:  "showincoming""opentxs showincoming" shows all incoming transfers, payments, invoices,receipts, etc.Next, try commands such as:  acceptall, acceptmoney, acceptreceipts, etc.I also recommend:  sendcheque, sendcash.You can get a lot of mileage out of the command-line tool now, in only afew short commands.------------------------------------------------------------As always, commit history:https://github.com/FellowTraveler/Open-Transactions/commits/master------------------------------------------------------------Windows developers:  It will be a day or two before the latest versionbuilds again on Windows, so we suggest you wait a couple days beforegrabbing the latest version.That's it for now, more coming soon!Until next time,-Fellow Travelerhttps://github.com/FellowTraveler/Open-Transactions/wiki Alice walks into a coin shop in America, and gives them a gold coin.The coin shop in America sends some Bitcoin to a coin shop in Britain.Bob walks into the coin shop in Britain and picks up the gold coin.Therefore you can use Bitcoin for sending gold. (Or any other form of value.)This is a similar mechanism to Silk Road, eh? You can use Bitcoin for sending Drugs.You can use Bitcoin for sending anything.Goldbugs will learn to love Bitcoin when they realize they can use it for sending gold. Goldbugs will learn to appreciate Bitcoin when they learn that they can use Bitcoin for sending gold. It's not good to owe a debt.If you have a creditor, that creditor has some license to cause damage. For example, if he smashes your car windows, you can sue him for damages, but he would countersue for his own damages (the debt you owe him) and eventually any damage he does to you would just be offset in court against whatever you already owed him. Methinks the lady doth protest too much. You still haven't figured it out?http://www.weidai.com/bmoney.txt What is this "money laundering" crime of which you speak?I can find nothing about it in the Law of Moses. Each new receipt, you must sign the new balance.So if you have a 0 balance, and then you receive 50 sheep, you sign a receipt that says, "My balance is 0. I'm receiving 50 sheep. My new balance will be 50."Then let's say you receive another 50 sheep: "My balance is 50 sheep. I'm receiving 50 more sheep. My new balance will be 100."Then let's say you send 50 sheep to Bob:  "My balance is 100 sheep. Please send 50 sheep to Bob. My new balance will be 50."See? You must sign the balance on each new request. Therefore the most recent receipt shows the current balance, with your signature on it (and the server's signature.)Therefore in any dispute, the winner is the one with the newest receipt. If an issuer issues sheep onto servers A, B and C, then the "sheep" currency is now available on three servers.If you redeem a cheque that was drawn from an account on server A, then your wallet will naturally redeem it at server A,just the same as a web browser trying to display an image from webserver A, would download that image from webserver A.(In both cases, the client software just accesses the appropriate server based on what's in the URL.)There are several ways to move your "sheep" from Server A to Server B:1. Anyone who has a "sheep" account on both servers, can perform this transfer for you.2. Including, obviously, the issuer himself. He can take sheep from you on Server A, and give you sheep on Server B.   (In fact, anyone with accounts on both servers can do this.)3. You could sell the Sheep on the exchange in return for Bitcoins. Then withdraw the Bitcoins from the server directly, and move them onto server B, where you use the BTC to purchase Sheep again.4. A protocol could be devised between servers that allows them to open accounts with each other, and thus perform "wire transfers" on behalf of their users.This is not correct. The whole idea with OT is that the user stores his last signed receipt, and is thus able to prove his balance, as well as which instruments are valid, simply via that last signed receipt. In other words, the receipt is the account, and both parties have a copy of it.Remember that the OT server cannot change balances or forge receipts. (Your signed request appears on every server-signed receipt. So the server cannot forge a receipt because it cannot forge your signature, because it does not have your private key.)And as long as the issuer has an auditing protocol in place that meets his standards, then the server cannot commit inflation either.Therefore, whether there are 100 servers, or 1000 servers, they cannot defraud the issuers or users.Thanks for the opportunity  :-)
I don't think that's a problem.Open-Transactions does all of its crypto through an abstract base class, called OTCrypto.It's very easy to swap in different crypto libs by subclassing OTCrypto. For example, someone could make OTCrypto_GPG and easily make a version of OT that uses GPG.However, the current version of OT uses OpenSSL (through a subclass called OTCrypto_OpenSSL.)Therefore, all the normal x.509 cert stuff should work with OT Nyms. Personally I don't like certificate authorities, I think it's just a big spy network. But if you like 'em, OT should work fine that way. Lots of exciting news and updates!Well I want to thank our contributor da2ce7 whose API updates havefinally been merged back into the main branch. Great job da2ce7!!I spent a lot of time over the past few weeks updating the scripts andjava code to go along with the new API, as well as adding a lot of newopentxs (command line) commands. (Some details below.)As always, we've placed a huge priority on making builds available andeasy to replicate, for the Windows, Mac, and Linux platforms, in avariety of languages.---------------------------Win32 builds of the OT-API!for C++ and Java.Zipfile:https://github.com/FellowTraveler/Open-Transactions/downloadsWith: C++ headers, .java API files, exes, libs, and DLLs.(Source code available at same URL.)---------------------------FYI:  You can also build this same API for PHP, Perl, Python, Ruby, C#, D, etc.Makefiles and MSVC project files ** ARE ** provided with OT!Remember, it's an open-source project, so feel free to pitch in!Bitcoin donation address: 1NtTPVVjDsUfDWybS4BwvHpG2pdS9RnYyQ---------------------------Moneychanger (Java test-GUI)pre-built jarfile:https://github.com/FellowTraveler/Moneychanger/downloads(Source code available at same URL.)---------------------------Linux...Thanks to contributor randy-waterhouse:.deb, tarball, etc:https://github.com/randy-waterhouse/opentxs/downloadsTo build your own:https://github.com/randy-waterhouse/opentxs/blob/master/docs/INSTALL-MEMO-Linux.txt#L93Awesome!!---------------------------Are you a Mac or Linux developer, want to get started with OT?Try this:     mkdir ~/Scratch     cd ~/Scratch     git clone git://github.com/FellowTraveler/Open-Transactions     cd Open-Transactions     autoreconf -i -f     mkdir build     cd build     ../configure --with-java     make     make install---------------------------opentxs -- command-line toolThe command-line tool was written in OT-script, courtesy of thechaiscript project: www.chaiscript.comThe opentxs script is entirely contained in this file:https://github.com/FellowTraveler/Open-Transactions/blob/master/scripts/opentxsSpecifically, all the commands that you see when you type "opentxs help"or "opentxs list" are implemented in this one file:https://github.com/FellowTraveler/Open-Transactions/blob/master/scripts/ot/ot_commands.ot(So you have plenty of easy-to-copy sample code showing how to properlyuse the OT API in a software program.)This was all written using an OT-script implementation of theOT high-level API.---------------------------The OT high-level APIThe complete code for that high-level API is available here in OT-Scriptform:https://github.com/FellowTraveler/Open-Transactions/tree/master/scripts/ot---------------------------There is also a Java version of this same high-level API:https://github.com/FellowTraveler/Moneychanger/blob/master/src/main/java/com/moneychanger/core/util/OTAPI_Func.javaMoneychanger was built using it, so for examples of how this Java API isused, please refer to the Moneychanger source code.---------------------------Using the High-level API (article):https://github.com/FellowTraveler/Open-Transactions/wiki/Use-Cases---------------------------Enjoy!Your buddy,-Fellow TravelerP.S. Don't forget to check out the new test script written in bash.       It's located in the Open-Transactions/scripts/tests folder.P.P.S. Some info on the new commandline commands:Send a direct transfer from FT's Silver account to Bob's Silver account:    opentxs transfer --myacct FT --hisacct "Bob's Silver"Send a cheque, drawn on FT's Silver account, to Trader Bob:    opentxs sendcheque --myacct FT --hisnym "Trader Bob"Send an invoice from FT to Trader Bob:    opentxs sendinvoice --myacct FT --hisnym TraderYou could also:    opentxs payinvoiceAs well as:...accepttransfers -- accept all transfers in the asset account inbox.acceptreceipts -- accept all receipts in the asset account inbox.acceptinbox -- accepttransfers + acceptreceipts...acceptinvoices -- accept all invoices in the payments inbox.acceptpayments -- accept all cheques/cash/vouchers in the payments inbox....acceptmoney -- accepttransfers + acceptpaymentsacceptall -- acceptinbox + acceptinvoices + acceptpaymentsTo create a password-protected cash purse:    opentxs exportcash --args "passwd true"This way, when you give the cash purse to someone, you don't have toknow their public key in advance (to encrypt the purse to their publickey.) Instead, you just tell them the passphrase and they can import thecash into their own wallet, using:   opentxs importcashIt's pretty slick!...More in a future episode. If someone issues a number of shares onto an OT server, you can only trade those shares by importing the currency contract into your wallet.From there, every transaction you perform will result in a signed-receipt, proving your current balance.If you have the signed currency contract, and the signed receipt proving your balance, what else do you need when you go into court? Very exciting!I am interested in this for OT. What can you tell us about the platform, OS, RAM, etc? I would like to make sure OT is able to run on your device. If you are openly running a server in a given jurisdiction, and if that server is being used to process real money (vs, say, game tokens) then I could see how you could come under the jurisdiction of local authorities, and need to comply with AML and KYC requirements. (Also, keep in mind, in OT there is a difference between a "server operator" and a "currency issuer.")However I don't see any technical barriers to running an OT server anonymously on an anonymous network, and being paid to do so in Bitcoin. I'm not recommending that anyone actually do this, but I'm curious how you believe an OT server, in that scenario, is "actually quite vulnerable to government attacks" ? Doesn't the use of Bitcoin for moving funds on/off of an OT server mean that the server can operate in a censorship-resistant fashion? What good is Bitcoin otherwise?I'm also curious how Silk Road could still be operating, if that were true, since it seems like a similar example.Please be specific about what you are trying to accomplish. For example, why would you integrate the OT server with anything at all? Normally, commands are sent to the OT server from the various clients, using the OT client API. (https://github.com/FellowTraveler/Open-Transactions/wiki/Use-Cases)So NORMALLY, if you wanted to integrate OT into some other software, you would be integrating the OT client API, not the server.My (limited) understanding is that the "Electrum server" is actually a Bitcoin client. In which case, I could understand the value of integrating the OT client API into it, the same as I could understand the value of integrating the OT API into any other Bitcoin client (or Bittorrent client... or web client... or sip client...) but I'm still not sure exactly what you are trying to accomplish through the integration. Technically you can already link OT to anything else, since OT has a powerful command-line utility that is fully-scriptable. So any UNIX-style scripting to connect OT with other transaction systems is completely possible.If your point is that OT needs a graphical user interface, I agree with you--but Knotwork is a server operator, not a coder, so he is unlikely to be the person who writes the UI integration you desire. I am also unlikely to take on some new project (such as a commercial-grade client), since my free time is already all booked up on OT itself, which represents (so far) 3 years of my life spent working to create software for you, for free. Thus it will have to be left to you (the open-source community) to "stand on the shoulders of giants" and create whatever OT clients or integrations you need. Luckily, it has specifically been designed for this purpose, and so those of you who choose to do so, will find the path has already been cleared.  A cross-platform java client would be best. We have a Java test GUI already but it's just that: a test GUI, not a real client. Therefore we need at least one NICE client that runs on ALL platforms.As for the JS web client, how secure can that be, and will it require a browser plugin for the OT client DLL ?  Just curious how that would work. No, it won't let you pay a dividend in the same asset type as the shares.For example, you can't pay Pepsi dividends using Pepsi shares. Any other asset type should work though.In Bitcoin it's possible to send a transaction to more than one Bitcoin address in a single spend, such that a vote of the recipients is necessary to transfer back out.Then it's just a matter of setting up a protocol between any group (say, a group of OT servers) where they agree to vote in favor of any bailout requests that are properly signed by both parties (wallet and server in question.) Then if the signatures check out, they just take a 4-out-of-5 vote (or whatever), and transfer the Bitcoins back out. Even if the OT server you are using disappears entirely, you would still be able to submit a recovery request to the other servers and get your vote.I've posted extensively about this, if you are curious to read more. Also check out the OT wiki. Here's how you would do that on OT:1. Have a Bitcoin issuer, who holds actual Bitcoins, and who issues Bitcoin UNITS onto the OT server, where OT users can open BTC Unit accounts, and trade around these units (exchanging them back out with the Bitcoin issuer, whenever they want to get back off the server.) The long-term vision is to store the backing Bitcoins in a voting pool on the blockchain (rather than directly with an issuer) in order to protect the users from being ripped off by the issuer. Voting pools aren't coded yet though, so for now, you would have to trust a Bitcoin issuer, the same as a gold issuer or any other kind of issuer.2. Have a stock issuer for each type of shares. For example, if you issued "Pepsi shares" onto the server, then you must be the Pepsi issuer. You could issue some Pepsi shares, in that example, and then sell them on the OT market in return for BTC units, or any other currency issued there.3. Whenever the Pepsi issuer is ready to pay a dividend, he chooses the currency it's paid in (let's say, BTC units, or centicoins or millicoins) and he also chooses the payout per share. OT will then loop through all the Pepsi accounts and send a cheque to each account holder, based on the number of shares in his account.4. Each payee receives a dividend cheque in his inbox, denominated in BTC units. He can cash the cheque, or deposit it into any BTC-unit denominated account. (This is all working already.)5. To get actual Bitcoins back off of the OT server, the payee would take his BTC units to the BTC units issuer, and get a blockchain transfer of actual coins.6. It would be possible to code the OT server itself to act as the BTC issuer, which would automate things without involving any third parties. But then you would have to trust the OT server with your Bitcoins during the time it is holding them, which means you are vulnerable to a malicious server, or a hacked server. I have therefore avoided this in order to protect the OT brand, preferring instead to aim for the eventual "voting pool on the blockchain" solution, which is more secure than having to trust an issuer.It wouldn't be hard to write some scripts that receive Bitcoins (using whatever tools you would use for those already) and then use an OT-Script to issue units onto the OT server, or to remove said units, using whatever rules you devise based on what you are trying to do on the blockchain. The entire OT API is available in script form now, so there's no reason you can't automate behaviors using cron and existing Bitcoin command-line tools.In other words, while OT does enable you to issue shares, and to pay dividends, it doesn't pay those dividends directly in BTC to a blockchain address. Instead, it pays the dividends in OT-BTC-units, internal to OT, by sending a cashier's cheque to each shareholder, just as it might pay dividends in gold, or silver, or other currencies. (Any OT units will work.) Payees would have to then bail their BTC-units back off the OT server (and back onto the blockchain), through their BTC issuer. (And eventually, through a multisig-based voting pool on the blockchain, which would act as the "issuer.") To be clear: Open-Transactions does not need to store any historical data, other than the last signed receipt.Most transaction systems break down without their historical data, which is necessary for them to prove the current state of the system. But Open-Transactions is able to prove your balance, as well as which instruments are still valid, and which transactions have closed, without storing the entire history, but instead by merely storing the last signed receipt.Therefore when OT places receipts in a DHT (which it doesn't do yet) it will only be for a temporary period of time, in order to facilitate receipt exchange, and to give auditors access to the receipts. It will not be because of some need to keep them around as "necessary data" and it will not result in some "ever-growing pile."I hope that clears it up. FYI, for "shares" based asset types, OT actually keeps a list of all the accounts of that asset type. (That's how it is later able to loop through all those accounts and send a dividend cheque to the Nym based on how many shares he owns.)So it actually wouldn't be hard to provide the account IDs, balances, and owner NymIDs for those shares, to the issuer. We could add a message that requests this data, if the issuers of shares need access to it. Alternately, we could also make it an option inside the shares contract. Using Open-Transactions, you would still have to build your website or user client (we only have a test GUI and a command line utility.) But OT would save you a lot of work and re-inventing the wheel that you would otherwise additionally end up having to do.OT provides an easy API for financial transactions, specifically allowing you to:--- Issue a currency or shares. (Similar to GLBSE I'm sure.)--- Trade account balances on markets against other asset types. (Similar to MtGox or other market exchanges. I assume GLBSE as well.)--- Pay funds between users (with or without accounts, since a variety of instruments are available, including cash.)--- All account balances are unforgeable and the server cannot change them without the user signing-off first. (This all happens behind the scenes as you perform your transactions.)--- Dividends are functional now, and are paid as a cheque sent to the inbox for any Nyms who are shareholders. (Based on number of shares owned.)After all transactions, each user has the "last signed receipt" which proves the balance of his account. (Even if the server disappears...)You are correct that a single entity could act as the "issuer" for any given stock, and manage the books offline without needing any software.OT manages the lower-level details for you, such as account security and balances, market trades, paying dividends, etc. You could also do all that stuff by hand if you really wanted to. But OT's API is pretty easy to use, if you check it out. It will probably only save you a lot of time and effort.The reason for using a second layer is because you get instant transactions, and you get a variety of instruments (including market trades.)>"Maybe there is a module in OT that already does most of what I described?"Yes, I believe it does everything described above, although OT currently doesn't directly do anything on the blockchain itself. You will have to make your own scripts to interface between the two.Nefario always seemed cool to me, I'm curious to find out what happened.Regarding "needing 4 shareholders to decrypt the database" I think using OT this wouldn't be necessary, since all users would already hold their "last signed receipt" by which balances can be proven.OT has real markets with bid/ask offers and automated trading.All trades are accompanied by a server-signed receipt (which includes the user's original signed offer.) These receipts also prove the user's current balance. I know I have already posted this so many times that you guys are sick of me by now.But I feel the need to say, again, that the Bitcoin community needs to move towards the storage of Bitcoins in voting pools on the blockchain, so that no single server, or hacker of a server, can actually misappropriate and spend the coins belonging to depositors.I have already proposed a protocol on this forum whereby a combination of OT with the BTC multisig transaction will make it impossible for anyone's funds to be stolen once they have been bailed onto a web-based service (such as MtGox, MyBitcoin, GLBSE, Bitcoinica, etc.) See my posting history for an explanation of how it all works. FYI, you can use OT to create and sign contracts, issue currencies, open accounts, write cheques, trade on markets, withdraw and deposit cash, etc.It's not going to do everything -- you still have to decide your own governance procedures, and OT is only an API so you still have to build your client app or website. But OT will save you a lot of time re-inventing the wheel, for the pieces that it already does. The API is extremely easy and you get lots of functionality.FYI, in OT you can make a smart contract between 2 or more parties, which executes according to the terms in the script. (The smart contract has scripted clauses.)If a dispute arises, you can design your smart contract so that an arbiter is listed in advance, who can be activated by the dispute and have powers over all the funds inside the smart contract. This way arbitration firms can operate and provide dispute resolution, who are selected and agreed in advance by all parties to an agreement.Search google for "open transactions tv" if you want to see videos where I walk you through the "behind the scenes" technical aspects of these sorts of contracts. For example, the "escrow" sample contract involves the use of an arbiter. OT automates all this stuff. The user does not directly do any PGP-signing.If you are using the OT wallet, then it will be signing things behind the scenes, but you will not see this.The most you will see is, it will occasionally ask for your passphrase so that it can sign something.You can issue the same currency onto multiple OT servers.But each instrument must be redeemed on the same server where it was issued.You can also move funds between servers (by going through any entity who has accounts on both servers, such as the issuer.)There is also a plan to use multisig for placing BTC in voting pools (on the blockchain itself) so that individual servers cannot steal the coins that have been bailed onto them. (Nor could hackers...)It is not possible for an OT server to rob you.After every transaction, the most recent receipt is left on your machine.This receipt proves your current balance, as well as which instruments are valid, and which transactions are closed. It proves everything.The server cannot change anything on this receipt (or the next...), because the server cannot forge your signature on the original request. (A copy of your original signed request appears on the server-signed receipt.)This means that "your account" is on your machine. So even if the server later disappears, you can still prove the balance on your account, and prove which instruments are still valid.Open-Transactions is able to act as a market exchange (similar to MtGox or GLBSE.)However OT does a lot more than that. You can make your own custom-scripted smart contracts, and it will execute the terms of your scripted agreements, dropping receipts periodically into your inbox.OT also does untraceable cash.OT also does client-side scripting, with the full OT API available inside the scripts.OT is also able to prove everything it needs to prove, without storing any account history (as long as you store the last signed receipt...)OT also supports a wide range of financial instruments. Not only can you issue currencies/shares and trade them, but you can also open accounts, write cheques, withdraw cash, use cashier's cheques (aka banker's cheques), send account transfers, etc.Probably. OT is able to act as a market exchange, if that's what you mean. But it is only the core: the library, the receipts, the instruments, the keys, etc.Meaning if you have a website in mind, you still have to build the website part. OT just processes all the finance and legal.===> The actual compiling / linking of the project is not something that actual users will have to deal with (only developers.)===> Installing the software (and various libraries) on your machine is also not something that actual users will have to deal with (there will be an install script that will automate this for users.)===> There is not an actual GUI client yet. We do have a test GUI, as well as a command-line utility (opentxs) but I assume that some real client will be written before there are real users. In fact my company Monetas has already started raising our seed round, and we intend to produce a real client over the next year or so.===> If you copy over the sample data when you first install OT, then you will see that you are able to run the OT server and the test GUI without having to set up any contracts or Nyms at all. You can just start playing with it.===> If you start up the OT server with no data, it will walk you through the process of creating the necessary Nyms and contracts to get it up and running from scratch.===> If you start up the OT client with no data (such as the test GUI) then it will automatically create its own blank data folder. From there you can create your first Nym yourself (on the Nyms tab) and import any server contracts or asset contracts that you wish to use, into your wallet. (On the contracts tab.) From there you can go to the Main tab and create accounts (in those asset types, on those servers.)===> A real GUI would lead you through that initial setup process (including the password image) using a Wizard. The test GUI, obviously, does not. OT requires the first-time user to choose an image file. (jpg, gif, etc)This image is displayed on the password dialog.That way, hackers cannot impersonate your password dialog, because they don't know what image you chose. Yes. OT is written in C++.The API is available in a variety of languages, on most platforms. Bastiat wrote:Life, liberty, and property do not exist because men have made laws. On the contrary, it was the fact that life, liberty, and property existed beforehand that caused men to make laws in the first place.What, then, is law? It is the collective organization of the individual right to lawful defense.Each of us has a natural right  from God  to defend his person, his liberty, and his property. These are the three basic requirements of life, and the preservation of any one of them is completely dependent upon the preservation of the other two. If every person has the right to defend even by force  his person, his liberty, and his property, then it follows that a group of men have the right to organize and support a common force to protect these rights constantly. Thus the principle of collective right  its reason for existing, its lawfulness  is based on individual right. And the common force that protects this collective right cannot logically have any other purpose or any other mission than that for which it acts as a substitute. Thus, since an individual cannot lawfully use force against the person, liberty, or property of another individual, then the common force  for the same reason  cannot lawfully be used to destroy the person, liberty, or property of individuals or groups.Such a perversion of force would be, in both cases, contrary to our premise. Force has been given to us to defend our own individual rights. Who will dare to say that force has been given to us to destroy the equal rights of our brothers? Since no individual acting separately can lawfully use force to destroy the rights of others, does it not logically follow that the same principle also applies to the common force that is nothing more than the organized combination of the individual forces?If this is true, then nothing can be more evident than this: The law is the organization of the natural right of lawful defense. It is the substitution of a common force for individual forces. And this common force is to do only what the individual forces have a natural and lawful right to do: to protect persons, liberties, and properties; to maintain the right of each, and to cause justice to reign over us all.A Just and Enduring GovernmentIf a nation were founded on this basis, it seems to me that order would prevail among the people, in thought as well as in deed. It seems to me that such a nation would have the most simple, easy to accept, economical, limited, nonoppressive, just, and enduring government imaginable  whatever its political form might be. The benefit of Windows is the huge install base.Therefore it might be a mistake to move towards a newer version of the compiler, if it's going to automatically slice away hundreds of millions of potential users...Not everyone in the world has a nice new Mac like some of us.
Just pointing out that the "masses need for convenience" is something that must be supplied by user applications, not by software libraries that are linked inside those user applications.No one would describe the OpenSSL library as "convenient for the masses" but that doesn't mean that convenient software cannot be written using the OpenSSL library.The Open-Transactions library is the same way. I just wanted to thank you guys for recognizing the project.I strongly encourage everyone to download it and just play around with it.Get it up and running with the test data, and play with the GUI as well as the new command line tool.Notice the command line tool is written in the OT script language (maybe play around with writing your own scripts...)There's plenty of in-depth technical instructions here:  http://open-transactions-tv.github.com/As well as on the Wiki: https://github.com/FellowTraveler/Open-Transactions/wikiContrary to da2ce7, you shouldn't notice any stability issues. But the best way to get any issues worked out is for people to start using it!Also we only have a single test server operating, so if anyone else wants to put one up, that would be useful to the project. OT is not a p2p exchange, but I believe that it solves this problem (or that it will, once all the pieces are in place.)The first piece is a transaction server which cannot forge transactions and which cannot escape an audit.OT fits this in theory, but the auditing protocol has not yet been coded.The second piece is the ability to store Bitcoins safely on an OT server, in such a way that the OT server itself cannot steal them.The solution here is to use multisig to store BTC in voting pools on the blockchain. See my other posts on this forum where I discuss this.Now that multisig is actually available, this functionality could be added to OT.The third piece is separation of powers. Meaning, while issuers who hold and wire dollars are susceptible to laws, seizures, shutdowns, etc, they are separate entities from the OT server(s) themselves, which could operate anonymously on Tor, at a profit. (This is made possible by Bitcoin. We see Silk Road doing this already -- operating anonymously yet at a profit -- again made possible by Bitcoin.)You were right to fear this problem may not be solvable -- I have put a lot of thought into it myself. However, I believe the above pieces do solve this problem effectively. (Though p2p technologies are necessary in several ways for the above scenario to work, it's still not a "p2p exchange" but you still get all the benefits of one, i.e. it still solves the problem.) Just a reminder that OT does two-way-trade as well as escrow-with-arbiter.(Both are simply smart contracts, with different user-defined scripts to provide their specific behavior.)There isn't a GUI yet (it's coming) but you can do it at the command line. Videos here:http://open-transactions-tv.github.com/ Here's an "advanced" UI mock-up: https://www.fluidui.com/editor/live/preview/p_XcN9TmQ5FItuPr5QctxES2XfAhinsVPp.1347267494770Here's a "grandma" UI mock-up: https://www.fluidui.com/editor/live/preview/p_8ZN0r9Pbp2XzPC7yL3lDFw5lW2L7vEye.1347267526462Those are only first drafts -- I would expect that a professional designer could do a much better job after drafts 2 and 3.The "Grandma" mode is a simplification of the advanced mode -- I'm sure it could be simplified a lot more, and still remain true to the OT API.Here's an article on using the high-level API to implement various use cases:  https://github.com/FellowTraveler/Open-Transactions/wiki/Use-CasesHere's a list of all the low-level API functions: https://github.com/FellowTraveler/Open-Transactions/wiki/APIIf you type "opentxs list" it will show you all the commands supported by the OT command-line utility.Those commands are all written in OT Script and they all use the high-level API.Here is the source code for all of them: https://github.com/FellowTraveler/Open-Transactions/blob/master/scripts/ot/ot_commands.otIf you prefer to see Java sample code, check out the Java test GUI, Moneychanger: https://github.com/FellowTraveler/Moneychanger OT could handle all of the back-end accounting and transaction processing, and receipts, etc--but you'd still have to build the web interface on top of it. OT is a transaction component, not a website.(But yes, OT supports the various functions described by the OP.) Nefario!I think a year or two ago, it would have been a fair accusation that the OT API was difficult to use, which is probably the timeframe when you last played around with it.But since then, an extremely powerful, high-level API has been added on top of the original API.  (Kind of like how the "GPG Made Easy" high-level API was added on top of GPG.)I encourage you to check out some examples of this, just to see just how easy it has become for developers to use the OT API:https://bitcointalk.org/index.php?topic=86710.msg1003087#msg1003087While OT does not yet have a real GUI, I assure you that if I ever personally produce a commercial GUI, it will be easy enough "for Grandma to use."You all have a head-start on me, in this regard.   :-)  I encourage everyone to take advantage of that head start.As for a command line interface, OT's original CLI was much too low-level. But now, OT has a new CLI which is written entirely in the OT script language. Type "opentxs list" or "opentxs help" to see all the commands that are available to you. Furthermore, look in the ot_commands.ot script file to see the source code for each and every one of those commands. Notice how easy they all are, and short their code is--just like the examples in the above link. You can make any scripts you wish, with full access to the OT high-level (and low level) APIs.I have also posted some instructional videos on how to use the new CLI: http://open-transactions-tv.github.com/Soon I will be posting instructional videos on how to use the high-level API as well. There are also some instructions posted here (updated recently to demonstrate the high level API instead of the low level one): https://github.com/FellowTraveler/Open-Transactions/wiki/Use-CasesBut for you, Nefario, I will make it even more special:  I will happily sit down with you anytime and personally train you on the CLI / API because after you come back here and tell everyone how easy and fun it now is to write software using OT, everyone will believe you, because you already put your name on the line that you think it's too difficult. I believe you are man enough that you will admit when you are wrong, and that will be good publicity for me.As for Key Management, I wanted to add that I believe you are completely correct. A good integration for OT would be an integration in KeePassX, for example. (Or Chrome... or Skype...) and I have already put a lot of serious thought into turning the main OT client, whenever that is actually written, into a key manager. FYI, in case you didn't already know, OT is already integrated with Gnome Keyring, Mac Keychain, and Windows DPAPI. But beyond that, a future version of OT will support multiple signers on accounts, as well as the ability for people to expire/inherit accounts. OT doesn't have true corporate ownership of funds (yet) but the owner Nym is now able to pay dividends to stockholders, which is a good first step. I am also looking at key-splitting and multi-factor authentication, but those things will probably not be inside the OT library proper, but rather, a potential commercial client. (Everything in its place.)-Fellow Traveler No Windows user is ever going to do the above steps.It's okay though, because by the time the Windows installer does come around, OT will be basically ready for it.I'm willing to pitch in 5 BTC towards this effort -- where do I send the funds for escrow?Perhaps a smart contract should be designed for this, and we can execute it up on knotwork's OT server, and let it manage the money for us.-FT Voting isn't any different than paying dividends, is it?Pay dividends: loop through all asset accounts for a particular type of shares. Then send a cheque to each owner, proportionate to the number of shares in the account. ($X per share.)To do a vote:  loop through all asset accounts for a particular type of shares. Then tally the vote of each, proportionate to the number of shares in the account.So this information wouldn't even need to be exposed to the issuer (paying the dividend) although it WOULD of course be available to the transaction server. (And SHOULD be available to anyone who'd normally have access to audit data.)OT someday also will be able to anonymize votes (using the existing "untraceable cash" code.)To do this: loop through all the asset accounts for a particular type of shares. Then issue "cash tokens" to the owner of each, proportionate to the number of shares in the account. (The owner then uses these tokens to perform his vote, with the results being tally-able, yet untraceable.) You are probably right about this. Their software is custom built, so I'm sure Nefario has been tuning it to his needs for months now, which would probably make it more and more difficult, over time, to switch to anything else.I'm curious, what do you think are the most important features of GLBSE? Which pieces are critical in your opinion?And which features do you think they already share with OT? (Such that switching software wouldn't result in any net functionality gain, as you described.)I'm working on adding a "pay dividends" transaction type--will probably release a video on that soon.I already have the theoretical capability (via the smart contracts code) to make entities with bylaws and with scripted clauses. Agreements can have parties, who can have agents, and asset accounts. But so far this hasn't yet reached the level of full-blown corporations.What I don't have yet is voting protocols. Nor do I have hierarchical control over appointed agents, nor corporately-owned asset accounts (such that investment funds can flow in from market offerings, and later flow out again as dividends.) These things are on my roadmap, however.I am adding payDividend now, which transfers the funds (in any other asset type, such as dollar dividends for pepsi shares) from the dividend source account into a server account, and then sends a voucher cheque to each shareholder's inbox, drawn on that server account. (These cheques will never bounce, since the funds were already transferred into a server account.) The amounts of these cheques will be based on # of shares ownership. ($X per share.) This way, the OT server can easily loop through all the "Pepsi shares" accounts, and send a dollar-denominated cheque to all the shareholders, without caring whether or not they even have a dollar account. The funds are all removed up front from the source account, and the recipients are guaranteed the cheque won't bounce (like a cashier's cheque.) There's only one receipt for the payer, and he doesn't have to individually sign a thousand different cheques (or a thousand different cheque receipts.) Clean and neat.In phase 1, only the initial issuer of the shares (possessor of the private key) will be able to pay out dividends. Phase 2, we will have entities controlled by voting groups, who will be able to delegate their authority as needed--and who will be able to design their entities in a wide range of different corporate structures.What else is important? What's important to you? I guess eventually those who profit from running transaction servers will do so through various ways:1. All expired cash reverts to the server. (Expired vouchers do, too.)2. OT already has a built-in system for "usage credits" which are used up by API calls. You could sell these credits to your users, using any out-of-band method you prefer.3. It wouldn't be too hard to add "transaction fees" to the server contracts, although I haven't yet done so. Of course you are looking at a mock-up, so it can use whatever widgets you prefer to imagine.Of course the Open-Transactions API has always been easy to use:https://bitcointalk.org/index.php?topic=86710.msg1003087#msg1003087I gave you guys a 2-year head start.Any user-oriented application that I write, of course, will also be easy to use.With or without OT, people will use exchanges and banks to move in-and-out of "real cash" (as you put it.) This is already occurring (see MtGox for example...)The long-term solution--to eliminate exchanges entirely as a bottleneck--will happen with the Ripple protocol.Of course there are already Bitcoin debit cards, so I would use existing services to do this.Chargebacks are a real problem of the 20th century banking system. The companies who offer debit cards will have to deal with any risk here.Users will probably not store all their money on a card anyway, but just enough for spending that night (with ability to transfer back-and-forth.)I haven't added a "pay dividend" API call yet, but it would be easy to do. The server would just mail a cheque to the inboxes of stock owners, based on their % of ownership (which the server has access to.)The long-term vision of OT includes full-scale corporate entities with voting groups, articles of incorporation, bylaws, different classes of stock, etc. We'll get there. Once again it is I, Fellow Traveler, your faithful and loyal friend.First off, the newest versions of OT and Moneychanger have beenreleased. In addition to automake, this new OT is now able to start upwithout a data folder, and AUTO-GENERATE any files/folders that arenecessary. (Meaning there is no longer any dependency on sample data inorder to run...)Make sure you download both OT and Moneychanger (or neither), since bothwere changed (to accommodate an API change.)https://github.com/FellowTraveler/Open-Transactions/https://github.com/FellowTraveler/Moneychangerhttp://open-transactions-tv.github.com/===> Also, I am pleased to announce that I am starting up a new company,~ Monetas ~, to pursue building high-end applications using the OTtechnology. (OT is only a foundation--there is more we must accomplish.)QUESTION: What does this mean? Is some corporation going to gain controlover OT?ANSWER: Absolutely not. I want to address any concerns about this rightaway: Open-Transactions is free software and it will always belong tothe open-source community where it was developed, just like Linux orGPG. It's NOT being signed over to some corporation. We believe this isactually the best move, from a business perspective.David Wheeler's comments are instructive:"The GPL has enforced a consortia-like arrangement on anymajor commercial companies that want to use it. Red Hat, Novell, IBM,and many others are all contributing as a result, and they feel safe indoing so because the others are legally required to do the same. Justlook at the domain names on the Linux kernel mailing list  bigcompanies, actively paying for people to contribute. In July 2004,Andrew Morton addressed a forum held by U.S. Senators, and reported thatmost Linux kernel code was generated by corporate programmers (37,000 ofthe last 38,000 changes were contributed by those paid by companies todo so.)"... We believe that Open-Transactions can function the same way. Thereare already multiple contributors. We envision a future where manycompeting companies feel safe spending money on improving the OT codebase, just as they do today with Linux.===> The focus of Monetas, rather, will be on NEW, high-end applicationsand integrations, built using OT technology. We will also develop thepremier server platform for all kinds of smart contracts and otherfinancial instruments. Our roadmap includes innovations that solvefundamental problems and that will greatly benefit the Bitcoin ecosystem.We believe we stand at the beginning of a new epoch, a time ofunprecedented opportunities for innovations that will change the courseof history.My business partner is Johann Gevers (mailto:johann@monetas.net). He is leadingthe business side of the company as CEO, and I am leading the technicalside of the company as CTO.We have very exciting plans for Monetas. Stay tuned.-Fellow TravelerP.S. ...and one more thing. I thought you guys might like to see somenew GUI mock-ups...Standard mode:https://www.fluidui.com/editor/live/preview/p_8ZN0r9Pbp2XzPC7yL3lDFw5lW2L7vEye.1343824445082Advanced mode:https://www.fluidui.com/editor/live/preview/p_XcN9TmQ5FItuPr5QctxES2XfAhinsVPp.1343659566990Mock-ups currently only available in Chrome or Safari, sorry.(I promise my own web apps will be compliant with web standards :-) --- The wallet signs the withdrawal request, sends it to the server, who countersigns it and returns it.--- Then the wallet forwards it to all the pool members, who verify both signatures and then vote on the blockchain.--- In order to get the pool members to vote falsely, you would have to forge both signatures (the user AND the server.) --- MULTISIG, as you all know, makes it possible to send coins to multiple BTC addresses simultaneously.--- Once the BTC are stored in that pool, only a vote of those addresses can authorize to release the funds out to another BTC address.(This is configurable in the bitcoin script language, directly on the bitcoin blockchain--as you already know.)--- Although OT is uniquely positioned to take advantage of this, I believe our entire community needs to go in the multisig direction, regardless of what software your exchange or web wallet is running.--- Ideally: a wallet software would send a BTC bailment request msg to the OT server, get it countersigned, and then forward the receipt (along with the BTC itself) to the pool members.--- As soon as your OT server (which would be looking out for the blockchain transfer) sees it confirmed on the blockchain, it would issue the appropriate units to your BTC account on that server.--- From this point on, the user can engage in wallet activities, or market trading, etc., on that transaction server -- without having to take the risk of that server being hacked, or being a malicious actor itself. (In fact, why wouldn't any server want to offer this safety and security to their users? Isn't it a competitive advantage?)--- From this point on, the BTC units are being traded off-the-chain, and have access to all other benefits of doing so (micro-transactions, scaleability, blind mixes, financial instruments, smart contracts...)--- The server would not be able to change balances or forge transactions internally, due to OT's signed receipts.--- The server would not be able to inflate the currency due to an auditing protocol with the other pool members.--- The server would not be able to transfer itself any bitcoins out of the pool. (Unless it secretly controlled a majority or more, of all the pool members.)--- When a user wants to bail bitcoins out of his account and back onto the blockchain, the same bailment process happens in reverse: he creates a bail-out request, signs it, sends it to the OT server which countersigns it, and then both forward a copy to the other pool members (which would probably just be other OT servers) who would verify the signatures on the receipt and then vote on the blockchain to release the funds to the BTC address listed there.--- A hacker would not be able to steal any BTC from a transaction server, even if he was able to gain full control over that transaction server.--- Even if your transaction server abruptly disappears (such as MyBitcoin did), all of the coins would still be recoverable from the pool! The users, still holding their last signed receipt, would send a recovery request to the other pool members, and get a vote to have their BTC transferred back into their full control. (An attacker would have to control a majority of all of the transaction servers in the pool, in order to falsify a vote.)To me this seems like such an obvious advantage that I feel like it is only a matter of time before everyone is doing it. (Until then, there's a sucker born every minute...)In fact, would it be possible for one of you "Bitcoin experts" to send me the sample code for multisig (for sending, for verifying, and for voting to send back out.) My own software has reached a point now where such an integration would be feasible and could be a huge benefit to everyone in the community. I can hold up my side of this protocol. What is the best way to do this on your side, libbitcoin? Or what? Just to make it even easier, here are THREE NEW VIDEOS, covering the Escrow smart contract! (In addition to the other three videos I already posted for the Two-Way Trade smart contract.)Available as of now, at the same link:  http://open-transactions-tv.github.com/A total of 13 videos are now posted there, so let me know what you guys think, or if you have any requests.-Fellow Traveler They are different:Two-way trade: There are 2 parties: Alice and Bob. Take X units of currency Y from Alice, take Z units of currency W from Bob, and then give Alice's funds to Bob, and give Bob's funds to Alice (end.)Escrow: There are 3 parties: Alice, Bob, and Judge Judy. Take X units of currency Y from Alice, and stash them in the contract for Z days. (She is paying these to Bob in return for some offline consideration. For example, perhaps Bob is selling guitars online, and Alice is waiting to receive a physical guitar from Bob in the snail mail, which she is purchasing from him.) The physical item that Alice is purchasing must be noted ON the smart contract, in the "consideration" field. Normally, the guitar shows up in the mail, and then after Z days, the money that was stashed in the contract is then automatically transferred to Bob. However, if Alice has not received the guitar within Z days, she can file a dispute (by triggering a "dispute" clause, which is just another script on the same contract.) This sends a notice to all three parties, giving Bob an opportunity to respond. Then Judge Judy has D days to make a decision, based on Alice's dispute text, Bob's response text, and the text of the consideration field itself, which ideally describes the exact criteria for determining whether or not Bob has fulfilled his obligation. Judge Judy receives a small fee for signing onto the contract, and an additional fee if she actually has to get involved and adjudicate a dispute.Normally an Open-Transactions instrument must be redeemed at the same server where it was issued. Various protocols are possible however, especially if I allow HTTP POST actions from inside the smart contracts. Also consider the Bitcoin blockchain supports multisig and contracts -- so all kinds of combinations are theoretically possible. I'm not trying to just describe OT as a "one size fits all" solution.Rather, I'm trying to get everyone to add their own security proposals to this thread.First, so I can steal all their ideas.Second, because clearly, people in this community are not talking about security mechanisms enough, and are not implementing security mechanisms enough -- they are not thinking about security mechanisms enough.And as I said a long time ago, people in this community are going to continue to "get screwed" until they do.(At this point, I can basically set my watch by the regularity of high-profile thefts that occur in this community.) Great feedback! Thanks. I feel compelled to write, that people should be very careful about their words and actions.The amounts of money involved here -- people are murdered over these sorts of things every day.The Bitcoin community needs to get its act together on security. Censorship-resistant is good, but it's not enough.All it will take is one Bitcoin-related murder, and things will change in our community forever.Even though many are murdered for dollars every day.
Someday, enough money will be stolen that the Bitcoin community will consider using public key cryptography that was invented back in the 70s.Proposal for Security Standards for Bitcoin Exchanges (and any other "centralized" storage of people's money)Everyone: please add your own security proposals to this thread.  :-)-- NO passwords should be stored on server OR client side.-- No client-side passwords should be used on the server side at all (hashed or not.)-- ALL transaction requests must be digitally signed on the client side.-- All transaction receipts must be server-signed (and must contain a copy of the original client-signed request.) This prevents the server from forging any of your transactions.-- Receipt should prove the current balance, and the newest receipt is always the winner in any dispute. (Meaning the receipt IS the account.) This prevents the server from changing your balance without permission.-- Receipt should also prove which instruments are valid and which transactions have cleared. (Meaning the receipt IS the transaction history.) This prevents any instruments you haven't authorized from impacting your account.-- All recurring transactions (such as trades processing over time from a specific market offer) should result in a server-signed receipt in the user's inbox.-- All market trades should contain a copy of the user's original signed offer, as well as details on how many trades have processed from the offer.-- All server requests must contain a request number that increments with each message. This prevents attackers from intercepting messages and sending them again.-- All server requests must contain the server ID that the message is intended for. This prevents attackers from intercepting messages and sending them to other servers.-- All transactions must contain a transaction number that was previously issued (and signed for). These numbers must be listed on every receipt until signed as closed. (Server can prove entire transaction history without having to store it.)-- All transactions must contain a signed balance agreement. All incoming receipts must be verifiable against the last signed balance agreement.-- All source code must be publicly available for audit.-- All source code must be subjected to an automated code scanner. (Static AND dynamic analysis.)-- All Bitcoins must be bailed into a system such that individual servers cannot steal bitcoins from their own users, or be hacked and have hackers steal bitcoins from their users. (This is technically possible in Bitcoin...)-- All currencies issued on the server, including Bitcoins, must have reserves that are publicly auditable.Also preferable:-- Users should sign all transactions on a crypto-card.-- An additional authentication layer should be provided via crypto-tokens with passwords that change every 90 seconds.These are the standards I demand for anyone who is going to hold my money.How about you? Nothing makes me feel more safe than the sweet sound of words like, "Javascript in the browser." I'm back, with THREE NEW VIDEOS, just posted today!http://open-transactions-tv.github.com/This time the subject is SMART CONTRACTS, and I encourage you to readthe article as well:https://github.com/FellowTraveler/Open-Transactions/wiki/Smart-contracts--------------------------------------------"Smart Contracts" are custom-scriptable agreements that multiple partiescan sign and then activate on an OT server. Using a simple scriptlanguage, you (or your lawyer) can design your own agreements and thenOT will bring your scripted clauses to life!--------------------------------------------Demo:     TWO-WAY TRADE   (3 videos)For my first demo, I've chosen "two-way trade" because it seems like thesimplest possible example.Basically, Alice and Bob want to trade some "gold" for "bitcoins" (anytwo asset types.) Neither one of them wants to "go first" and risksending their half of the money--they prefer to be GUARANTEED that theother party will reciprocate, before paying.Therefore, the "two-way trade" smart contract insures that it has safelyobtained all the money from BOTH parties, before switching ownershipover to the new recipients!---------------------------------------------Coming soon: "Escrow" smart contract.This version introduces a 3rd party arbiter (Judge Judy), for caseswhere Alice is paying Bob for some PHYSICAL ITEM that he's sent  her inthe snail-mail.In the event of any dispute, it's up to Judy to adjudicate and make afinal decision!-FTP.S. Your donations go to help fund the test GUI development.BTC:  1NtTPVVjDsUfDWybS4BwvHpG2pdS9RnYyQ(Then you can have smart contracts in the GUI instead of command-line only.)P.P.S. As I said before, I have a special announcement coming up soon,so keep your eyes peeled! Make sure your "salted hashed" passwords or IDs are produced using a key derivation algorithm, and not a conventional hashing algorithm.Conventional hashing is designed to run quickly, but key derivation is designed to run slowly.  Correct: a node will start out not trusting any other nodes. Therefore it will not be willing to relay packets unless it receives payment for doing so. And the more it is able to trust any given node to provide that payment, the more packets it will be able to relay before demanding it.If the protocol is not designed to handle this, then the network will suffer from a "tragedy of the commons" when it could instead be growing like an organism (once digital cash is used to solve issues of resource allocation.) --- A decentralized mesh network is a "holy grail" of freedom and an important goal to work towards.--- Such a network is subject to a "tragedy of the commons" and will fail, until digital cash is used to solve issues of resource allocation. (Mojo Nation would have succeeded here, if they had used Bitcoin for the currency instead of Beenz/Flooz. You haven't actually tried a digital cash solution, unless you actually used real digital cash.)--- Once digital cash is used to solve issues of resource allocation, then wireless mesh routers will start popping up all over the place, like mushrooms, the same as ATMs do today. --- The solution is for any Node to relay packets for other nodes UP TO A LIMIT, based on a trust value it assigns to each other node.--- When a node has earned more trust, then other nodes will forward more packets to it, before reaching their limit and demanding payment. (Whereas nodes with less trust, will have to pay more often.)--- When the limit is reached, payment should be settled using a transaction server such as Open-Transactions.  (http://open-transactions-tv.github.com/) These servers can run anonymously, for a profit.--- Once voting pools are added to OT (allowing Bitcoin reserves to be stored safely on the blockchain as multisig transactions, so hackers and transaction servers cannot steal them) then Bitcoins can be used to exchange onto/off-of the transaction servers, and to convert into any other asset type (on markets, on those same transaction servers.)--- Network nodes should be able to demand payment in any currency type they wish, and should be able to pay for whatever resources they need, all at the protocol level.When this is set up, the network will grow like an organism. Again: trust units, eventually settled up on transaction servers, eventually settled up in Bitcoin and other currencies. Bitcoin is an essential part of the protocol, since it enables transaction servers to operate anonymously at a profit, but should not be used directly for the microtransactions themselves, since that is infeasible on the blockchain. I've got another video posted! (Basket currencies GUI.)Actually, *THREE* new videos (total of SEVEN posted in the past week):http://open-transactions-tv.github.com--- #7: Basket currencies (Moneychanger test-GUI)--- #6: opentxs CLI: Misc tips / tricks--- #5: opentxs CLI: Writing and depositing a cheque(The other two videos cover more of the new OT command-line tool,"opentxs.")Enjoy!-Fellow TravelerP.S. Remember, your donations go to pay our Indian developer who workson the test GUI. (He's about halfway done with the PAYMENTS screen andthe SMART CONTRACTS screen.)BTC: 1NtTPVVjDsUfDWybS4BwvHpG2pdS9RnYyQP.P.S. Upcoming videos: ESCROW smart contract! (At command line :-( TestGUI screen coming soon.) Also, TWO-WAY TRADE smart contract (at commandline.) Also, I have a special announcement coming up soon, so keep an eye out! It could be a bug that grabbed an extra token...Or more likely it's an artifact of editing.  (Sometimes you'll see IDs or amounts change, due to editing between clips.) A couple times I had a bug and paused to fix it, then unpaused to keep recording, and edited out the in-between. FYI.However, if you are able to reproduce any real bugs, please post them here:https://github.com/FellowTraveler/Open-Transactions/issues?state=open Okay, the first 4 videos are posted!http://open-transactions-tv.github.com/As I said above, these videos cover:1. automake, the data folders, intro to the new "opentxs" command-line interface, and the client-side scripting.2. opentxs CLI: adding server contracts to the wallet, issuing currencies.3. opentxs CLI: account-to-account transfer, and (server-side) generating a new cash mint.4. opentxs CLI: withdrawing / depositing cash---------------------------------Coming soon (already recorded):5. opentxs CLI: Write / deposit cheque.6. opentxs CLI: Misc tricks.7. "Moneychanger" test GUI: Basket currencies: how to create + exchange in/out.---------------------------------Also coming soon (already recorded):8-10: The "two-way trade" smart contract is demoed, with receipts going to inboxes, etc.11-13: The "escrow" smart contract, in depth.---------------------------------Recording soon:  OT API instructional videos.Fellow Traveler1NtTPVVjDsUfDWybS4BwvHpG2pdS9RnYyQP.S. donations are used to pay our indian programmer for work on test GUI. Two new screens, coming soon: payments GUI screen, and smart contracts GUI screen. re: the movie. As knotwork said, videos have been posted already. Links are also on the OT Wiki (main page.)FYI: New videos have already been recorded. I am about to post 10 more + and recording a few more tonight.----------------------------------------------------------------------re: the web interface. There are only two ways you are going to have a web interface on OT....1. You trust the web server operator to manage your private keys. (See previous incidents: Bitcoinica, MyBitcoin, MtGox, etc.) Not only that, but you trust that the code is perfect, with no cross-site scripting, no buffer overflows, no sql injection, etc being possible. You also trust hackers not to get in. You also trust the day-to-day security practices of your web site operator, as well as any oftheir employees who might have access to your private key, with which your money is ultimately controlled.I don't know why people prefer this so much but I do understand the market need for a web interface.I will be happy to work on this project also, but it will need to be a commercial project or otherwisefunded. How much free work do you expect from me? Roll up your sleeves!2. My preference: Make a commercial-quality client which operates as a systray icon, having only a menuas its interface (and some dialogs.) Then make lightweight plugins for Chrome, Firefox, i2p, Skype, Retroshare, AppScale, OpenStack, Magneto, Joomla, etc. This is the most secure way to do it, and also gives the widest range of integration at the cheapest maintenance cost.What I'd do, for those preferring ( 1 ) over ( 2 ), is just have a green button on the UI that says somethinglike, "Click here to download the installed version or Mobile app. It's more secure!" And migrate people over.And make sure installable versions are available for all platforms.------Once people are storing their wallets on their mobile devices, these devices are going to start getting hacked.We need mobile devices that use smart cards or usb keys, where we can run the OT engine / Bitcoin engine(any crypto) outside of the device itself. Preferably also where we are using Serval protocol for voice and CJDNS for data, and Mesh networks--these sorts of things, not centralized providers. And digital cash isnecessary to solve issues of resource allocation that will arise. What is a good device we can buy now, and use as a normal phone, that we can later upgrade the software onand it will function as described above? I love good questions.This is actually two questions, however:1. How do you prevent the issuer from just creating more coins?2. How do you prevent a transaction server from just creating more coins?1. How do you prevent the issuer from just creating more coins?The issuer can create as many coins as he wants: he is the issuer. Presumably he has an adequate supply of real-world gold/bitcoins/etc in his possession, in order to redeem the units he issues according to the terms of the contract he used to issue them.One thing the issuer cannot do is issue coins without signing for them in the process. The receipts are unforgeable. But the rest from there (enforcement, storage and auditing of physical gold, etc) is more a governance issue than a technical one. It's between you and the issuer, and the jurisdiction.With Bitcoin there is a great solution possible, which I have been discussing here for months now: Use multisig transactions (ON the blockchain itself) to enable the storage of Bitcoins in voting pools. This way, no single issuer or transaction server has the ability the move funds out of the pool until the other pool members have taken a vote. (For example, if MyBitcoin had been storing their reserves in a blockchain pool, then everyone would have been able to recover their funds, when the site disappeared, instead of losing their money...)A fitting solution that the Bitcoin "issuer" on any OT server should actually be a pool of voters on the Blockchain. I can't wait to implement this protocol.2. How do you prevent a transaction server from just creating more coins?A transaction server (issuers can release units of their currency onto multiple servers) is already unable to forge a receipt in a transaction with you or any other legitimate user. This is because the user must form the receipt first, and sign it, and only then does the server verify and countersign. The server will reject your transaction if your receipt is false, and the server cannot change or fake the receipt later, because the server cannot forge your signature.Here is the weakness: the server can create a "dummy account" and sign a false receipt for it (collusion between server and account) and thus create units in that account which could later be spent into the general population. However, it is impossible to spend such units without having them show up on an audit. Therefore there must be an auditing protocol between the transaction server and the issuer to insure the total number of units in circulation is the same as the number on the issuer's last signed receipt.If you combine an auditing protocol, with OT's unforgeable receipts, and Bitcoin voting pools, it makes it possible to run "low trust transaction servers" for Bitcoin on OT -- which could even operate anonymously! And provide Bitcoin-backed markets and exchanges, Bitcoin-backed untraceable cash, Bitcoin-backed scriptable smart contracts, etc where the users can feel safer knowing that the server will be unable to steal their coins. I just wanted to give you guys an update on the Open-Transactions project.I am aiming OT to become the premier open-source platform for transaction processing, vouchers and financial instruments, market trades, smart contracts, etc, for Bitcoin and other currencies. The idea is to enable wallet and site developers by providing a standard crypto API for all manner of contracts and financial transactions. (So you can focus on the site you are building, instead of a myriad of lower-level issues.) As I have posted here previously, I anticipate that Bitcoin is going to continue experiencing a series of embarrassing and destructive site-hacking incidents, until we are able to get a standard, community-scale, secure platform into place.Over the past 6 months or so, a significant amount of work has gone into bringing Open-Transactions to the next level, and making it more accessible...   Specifically:       1. We have listened to your concerns regarding complexity of the OT-API, and have responded. A high-level API has been created, which wraps the lower-level API. Most OT transactions can now be accomplished in as little as 1-3 lines of code. (The Java test GUI, Moneychanger, has also been updated to use this high-level API, so sample code is available in Java for all use cases.) We continue to support developers on the IRC channel and the mailing list, and the API page has also been updated.       2. A full client-side scripting engine has been incorporated, so you can write "UNIX-style" OT scripts. The full high-level and low-level OT APIs are both available from inside your scripts.       3. A new command-line client ("opentxs") has been written in OT SCRIPT, with simple, accompanying script sample code for all of the OT use cases. (BTW we are currently using the excellent ChaiScript: http://www.chaiscript.com/ but also OT is designed to easily swap in any other language you prefer.)       4. Automake has now been added to OT, and Windows builds are also starting to become available via da2ce7.I have just recorded a series of new videos, which I will be releasing over the next few couple of weeks. (I will post links here, and to the OT wiki:  http://github.com/FellowTraveler/Open-Transactions/wiki )On the upcoming videos:Video 1: (Intro.) The new "opentxs" command-line interface, the OT data folders, and the OT script environment. Video 2: "opentxs" CLI: Adding server contracts to the wallet, issuing assets, creating nyms, creating asset accounts.Video 3: "opentxs" CLI: Sending account-to-account transfer, receiving pending transfers in the inbox, creating the cash mint.Video 4: "opentxs" CLI: Withdrawing and depositing cash, and displaying contents of the cash purse.Video 5: "opentxs" CLI: Writing and depositing cheques.Video 6: "opentxs" CLI: Misc: refresh, verifyreceipt, getcontract, encode/decode, encrypt/decrypt, etc.Video 7: "Moneychanger" test GUI: Creating basket currencies, and exchanging in/out of basket currencies.Video 8: "opentxs" CLI: Smart contracts. I have two working smart contracts I demo, two-way-exchange, which allows users to directly cross-exchange assets of dissimilar asset types.Video 9: "opentxs" CLI: We also have a working escrow smart contract,which allows Alice to send money to Bob on a (say) 30-day delay (for example if he is shipping her a guitar as an e-bay sale.) The money is stashed safely inside the contract, and goes to Bob automatically in 30 days, unless Alice files a dispute--which then automatically notices the parties to request feedback, and then notices a third-party arbiter, who has X days to examine the terms and feedback before rendering a judgment. (The dispute/judgment process being nothing more than scripted clauses on the smart contract.) All three parties must be original signers to the agreement.Video 10: The high-level OT API. At least one video on programming to the OT API, just to demonstrate just how easy it has become(There are also 2 older videos already posted to the OT wiki a few months back, which demo the Moneychanger test GUI.)------------------------------------------------------------------------------------A NOTE on PASSWORD SECURITY, and KEY MANAGEMENTI have done a significant amount of work in the past couple months upgrading the OT password-management capabilities. I thought I would update you guys on our work, because spreading this sort of knowledge is good for the entire Bitcoin community.First of all, when passwords are used in OT they are destroyed as soon as the transaction is finished, and in the meantime they are stored exclusively in a class intended for that purpose, OTPassword. This class is careful to zero its memory upon destruction, and employs certain tricks in code to insure said zeroing doesn't get removed by the optimizer. OTPassword also takes pains to lock its internal memory (so it won't swap to disk, or at least is much less likely to do so.) I also added code to OT to try and prevent it from core dumping, for the same reason. These are the same sorts of tricks employed by ssh-agent and similar software, to protect secrets in RAM when in use by the application.Next, the passphrase is put through a key-derivation algorithm, in order to generate a "derived key." This is because we never want to store the user's actual passphrase, even just in RAM. Converting it to a derived key gives us something we can use while processing a transaction, without having to store the user's actual passphrase. Why do we use a key derivation algorithm instead of a hash? (Answer: because hashes are designed to run quickly, whereas key derivation algorithms are designed to run slowly.)Next, the derived key is used to unlock the master key, which is just a random number and which is used as the "passphrase" for all of the private keys (the nyms) in the wallet. The classes OTSymmetricKey and OTMasterKey have been added recently, and also OTEnvelope has been updated to support symmetric keys, in addition to lists of nyms. This way you can have a single "master key" for all of the nyms in your wallet.The master key is stored in RAM (inside an OTPassword object) until a timeout. For example, if you set your master key to timeout after 300 seconds (5 minutes) then OT will keep the master key open internally for 5 minutes, and use that instead of asking you to re-type your passphrase--until the 5 minutes are up. After that, the master key will expire and you will be forced to enter your passphrase again in order to unlock it and use any of your private nyms. (This is just like the functionality you probably already have on your system keychain.)Speaking of the system keychain, the OTKeyring class has been added with support for the gnome-keyring, the Mac Keychain, the KDE kwallet, and Windows DPAPI (these are all protected-memory APIs.) I am hoping that this sort of tie-in can open up OT to alternative authentication methods such as smartcards and usb tokens (and keep that stuff localized to existing, standard APIs outside of OT.)The OT server doesn't store any passwords, since all OT messages are signed. Neither does the client store any, and its private keys are kept in encrypted form on disk. No secret-splitting, yet, but it's coming someday.All right, that's it for now. Keep an eye open for the new videos, I'll be posting them soon!-Fellow Traveler1NtTPVVjDsUfDWybS4BwvHpG2pdS9RnYyQ When will people understand...It's not OT or Ripple. It's OT and Ripple.It's not Bitcoin or gold. It's Bitcoin and gold.It's not either/or -- the future that is coming, is a combination of all of these things. CREATE ASSET ACCOUNT -- SOURCE CODECode:   def OT_ME::create_asset_acct(SERVER_ID, NYM_ID, ASSET_TYPE_ID)     {        var ot_Msg := OTAPI_Func()        // -------------------------        var theRequest := OTAPI_Func(ot_Msg.CREATE_ASSET_ACCT, SERVER_ID, NYM_ID, ASSET_TYPE_ID)        var     strResponse = theRequest.SendRequest(theRequest, "CREATE_ASSET_ACCT")                return strResponse    }------------------------------------------------------------------------------------------SHOW ACCOUNT BALANCE:~/Projects/Open-Transactions/include> opentxs balanceWelcome to Open Transactions -- version 0.82.hPLEASE SIGN YOUR PASSPHRASE:     Balance: 1211eMldMMiKfJRO8B8yJjzcezs9xvSt7dkdlWt50e8CDxn   (FT's Silver)------------------------------------------------------------------------------------------SOURCE CODE for "balance" command, using OT API:Code:def details_account_balance(strID){    var strName          = OT_API_GetAccountWallet_Name(strID)    var strBalance       = OT_API_GetAccountWallet_Balance(strID)        OT_API_Output(0, "\n    Balance: ") //stderr    print(strBalance) // stdout    OT_API_Output(0, strID + "   (" + strName + ")\n\n") //stderr}------------------------------------------------------------------------------------------SHOW CASH PURSE (on local client):~/Projects/Open-Transactions/include> opentxs showpurseWelcome to Open Transactions -- version 0.82.hPLEASE SIGN YOUR PASSPHRASE: Total value: 1Token count: 1Index   Value   Series   ValidFrom      ValidTo      Status0         1      0      1339606926   1355158926      valid------------------------------------------------------------------------------------------WITHDRAW CASH:~/Projects/Open-Transactions/include> opentxs withdrawWelcome to Open Transactions -- version 0.82.hPLEASE SIGN YOUR PASSPHRASE: Enter the amount as integer[1]: 109Server response (withdraw_cash): SUCCESS withdrawing cash! (From account on server, to local purse.) Success retrieving intermediary files for account.------------------------------------------------------------------------------------------SOURCE CODE for withdraw cash:Code:    var madeEasy = OT_ME()    var strResponse = madeEasy.withdraw_cash(Server, strMyNymID, MyAcct, strAmount)     var strAttempt  = "withdraw_cash"    // ***************************************************************        // Interpret the server's reply...        var nInterpretReply = InterpretTransactionMsgReply(Server, strMyNymID, MyAcct, strAttempt, strResponse)        if (1 == nInterpretReply)    {            // Download all the intermediary files (account balance, inbox, outbox, etc)        // since they have probably changed from this operation.        //        var bRetrieved = madeEasy.retrieve_account(Server, strMyNymID, MyAcct) //bForceDownload defaults to false.                OT_API_Output(0, "\n\nServer response ("+strAttempt+"): SUCCESS withdrawing cash! (From account on server to local purse.) \n")        OT_API_Output(0, (bRetrieved ? "Success" : "Failed") + " retrieving intermediary files for account.\n")    }------------------------------------------------------------------------------------------VIEW (UPDATED) BALANCE:~/Projects/Open-Transactions/include> opentxs balanceWelcome to Open Transactions -- version 0.82.hPLEASE SIGN YOUR PASSPHRASE:     Balance: 1102eMldMMiKfJRO8B8yJjzcezs9xvSt7dkdlWt50e8CDxn   (FT's Silver)------------------------------------------------------------------------------------------VIEW UPDATED PURSE (on local client):~/Projects/Open-Transactions/include> opentxs showpurseWelcome to Open Transactions -- version 0.82.hPLEASE SIGN YOUR PASSPHRASE: Total value: 110Token count: 7Index   Value   Series   ValidFrom   ValidTo   Status0      1      0   1339606926   1355158926      valid1      100      0   1339606926   1355158926      valid2      1      0   1339606926   1355158926      valid3      5      0   1339606926   1355158926      valid4      1      0   1339606926   1355158926      valid5      1      0   1339606926   1355158926      valid6      1      0   1339606926   1355158926      valid~/Projects/Open-Transactions/include> ------------------------------------------------------------------------------------------SOURCE CODE for "show purse":Code:            var strAmount = OT_API_Purse_GetTotalValue(Server, MyPurse, strPurse)            print("\n\nTotal value: " + strAmount)                        // Loop through purse contents and display tokens.            var nCount =  OT_API_Purse_Count(Server, MyPurse, strPurse)            // ----------------------            if (nCount > 0)            {                print("Token count: " + nCount.to_string() + "\n")                print("Index\tValue\tSeries\tValidFrom\tValidTo\t\tStatus")                var nIndex = -1                                while (nCount > 0)                {                    --nCount                    ++nIndex  // on first iteration, this is now 0.                    // -------------------                    var strToken = OT_API_Purse_Peek(Server, MyPurse, MyNym, strPurse)                    var strNewPurse = OT_API_Purse_Pop(Server, MyPurse, MyNym, strPurse)                                        strPurse = strNewPurse                    // ------------------------------------------                    var strDenomination = OT_API_Token_GetDenomination(Server, MyPurse, strToken)                    var nSeries         = OT_API_Token_GetSeries      (Server, MyPurse, strToken)                    var strValidFrom    = OT_API_Token_GetValidFrom   (Server, MyPurse, strToken)                    var strValidTo      = OT_API_Token_GetValidTo     (Server, MyPurse, strToken)                    var strTime         = OT_API_GetTime()                    // ------------------------------------------                    // Output the token...                                        var strStatus = (strTime.to_int() > strValidTo.to_int()) ? "expired" : "valid"                                        print(nIndex.to_string() + "\t" + strDenomination + "\t" + nSeries.to_string() + "\t" + strValidFrom + "\t" + strValidTo + "\t" + strStatus)                    // ------------------------------------------                } // while            } // if nCount > 0More examples here:  https://github.com/FellowTraveler/Open-Transactions/wiki/Use-CasesSupport available.Full examples for using the high-level API are also available in Java (in the Moneychanger test GUI),as well as in the new opentxs high-level command-line interface (which itself is actually written in OT script):Code:> opentxs helpWelcome to Open Transactions -- version 0.82.hPLEASE SIGN YOUR PASSPHRASE:From command-line-opt.ot (defaults):Using as server: tBy5mL14qSQXCJK7Uz3WlTOKRP9M0JZksA3Eg7EnnQ1Using as mynym: T1Q3wZWgeTUoaUvn9m1lzIK5tn5wITlzxzrGNI8qtaVUsing as myacct: eMldMMiKfJRO8B8yJjzcezs9xvSt7dkdlWt50e8CDxnUsing as hisacct: iT4nJZbqlT8EPd4ZjWKsA9YxsAboO334sCJ0oYdgh1GUsing as 'his' nym: SP8rPHc6GMRPL517UL5J8RK2yOiToyVqMaj3PUHvLzMCommands: acceptall accept all receipts in myacct's inbox.activate activate a smart contract or payment plan.addsignature add a signature to a contract without releasing others.balance  display balance for a specific account.canceloffer cancel a still-running, recurring market offer.cancelplan cancel a still-running, recurring payment plan.checknym download a nym's public key based on his ID.cheque  write a cheque.confirm  confirm your agreement to a smart contract or payment plan.decode  OT-base64-decode out of armor.decrypt  decrypt ciphertext using nym's private key.delmail  delete an in-mail item.deloutmail delete an out-mail item.deposit  deposit cash, cheque, voucher, or tokens.discard  discard/cancel a not-yet-cashed, outgoing instrument.encode  OT-base64-encode into armor.encrypt  encrypt plaintext to a nym's public key.exchange exchange in/out of a basket currency.getcontract download an asset or server contract by its ID.inbox  display inbox of a particular account.issueasset issue a currency contract onto an OT server.mail  display in-mail for a particular nym.newacct  create a new asset account.newasset create a new asset contract.newbasket create a new basket currency.newkey  create a new symmetric key.newnym  create a new nym.newoffer create a new market offer.newserver create a new server contract.outbox  display outbox of a particular account.outmail  display out-mail for a particular nym.outpayments display contents of outgoing payments box.pass_decrypt password-decrypt a ciphertext using a symmetric key.pass_encrypt password-encrypt a plaintext using a symmetric key.payments display contents of incoming payments box.records  display contents of record box.refresh  download latest intermediary files for myacct.refreshnym download latest intermediary files for mynym.register register a nym onto an OT server.sendmsg  send a message to another nym's in-mail.showacct show account stats for a single account.showbaskets show basket currencies issued on a particular server.showmint show a mint file for specific asset ID. Download if necessary.showmyoffers show mynym's offers on a particular server and market.showoffers show all offers on a particular server and market.showpurse show contents of cash purse.sign  sign a contract, releasing all other signatures first.stat  display wallet contents.transfer send a transfer from myacct to hisacct.trigger  trigger a clause on a running smart contract.verifyreceipt verify your intermediary files against the last signed receipt.verifysig verify a signature on a contract.voucher  withdraw a voucher (cashier's cheque).withdraw withdraw cash. (From acct on server into local purse.) I will remind you that Open-Transactions is a software library, not an end-user application. If you want a grandma-friendly UI, then you will have to write it, not me. The only UI I have provided is a test GUI to go along with the API, which is intended only to make things easier for developers by providing sample code for the complete OT API. Don't confuse that test UI (intended for developers using the API) with the proper UI design necessary for end users!As for who will write the actual "iPhone app" or "Android app" or "Mac app"--each of these is a full project on its own. I cannot write them all. The truth is, there are many different applications that could be written with OT, not just wallets. But again, I cannot write them all. Certainly the amount of free work I am contributing to the cause, with my current project, is already enough? You cannot possibly ask me to take on additional projects!Yes, the mock GUI that you propose could easily be implemented using the OT API. Using the sample code above, and other samples I have provided on my "Use Cases" page, you should have no problem doing so. The whole point of OT was to enable you to do so. There is no reason to tell Grandma of contracts, basket currencies, markets, or nyms -- that is a user interface design issue specific to your GUI. I encourage you to take another look at the above sample code and ask yourself if it's really that hard to understand. Also take a look at the samples on the Use Cases page ( https://github.com/FellowTraveler/Open-Transactions/wiki/Use-Cases ) and ask yourself honestly if it's really so complicated to make a GUI like one you describe, using that API. You might be surprised. Complicated??------------------------------------------------------------------------------------------SHOW ACCOUNT BALANCE (on server):~/Projects/Open-Transactions/include> opentxs balanceWelcome to Open Transactions -- version 0.82.hPLEASE SIGN YOUR PASSPHRASE:     Balance: 1211eMldMMiKfJRO8B8yJjzcezs9xvSt7dkdlWt50e8CDxn   (FT's Silver)------------------------------------------------------------------------------------------SOURCE CODE for "balance" command, using OT API:Code:def details_account_balance(strID){    var strName          = OT_API_GetAccountWallet_Name(strID)    var strBalance       = OT_API_GetAccountWallet_Balance(strID)        OT_API_Output(0, "\n    Balance: ") //stderr    print(strBalance) // stdout    OT_API_Output(0, strID + "   (" + strName + ")\n\n") //stderr}------------------------------------------------------------------------------------------SHOW CASH PURSE (on local client):~/Projects/Open-Transactions/include> opentxs showpurseWelcome to Open Transactions -- version 0.82.hPLEASE SIGN YOUR PASSPHRASE: Total value: 1Token count: 1Index   Value   Series   ValidFrom      ValidTo      Status0         1      0      1339606926   1355158926      valid------------------------------------------------------------------------------------------WITHDRAW CASH:~/Projects/Open-Transactions/include> opentxs withdrawWelcome to Open Transactions -- version 0.82.hPLEASE SIGN YOUR PASSPHRASE: Enter the amount as integer[1]: 109Server response (withdraw_cash): SUCCESS withdrawing cash! (From account on server, to local purse.) Success retrieving intermediary files for account.------------------------------------------------------------------------------------------SOURCE CODE for withdraw cash:Code:    var madeEasy = OT_ME()    var strResponse = madeEasy.withdraw_cash(Server, strMyNymID, MyAcct, strAmount)     var strAttempt  = "withdraw_cash"    // ***************************************************************        // Interpret the server's reply...        var nInterpretReply = InterpretTransactionMsgReply(Server, strMyNymID, MyAcct, strAttempt, strResponse)        if (1 == nInterpretReply)    {            // Download all the intermediary files (account balance, inbox, outbox, etc)        // since they have probably changed from this operation.        //        var bRetrieved = madeEasy.retrieve_account(Server, strMyNymID, MyAcct) //bForceDownload defaults to false.                OT_API_Output(0, "\n\nServer response ("+strAttempt+"): SUCCESS withdrawing cash! (From account on server to local purse.) \n")        OT_API_Output(0, (bRetrieved ? "Success" : "Failed") + " retrieving intermediary files for account.\n")    }------------------------------------------------------------------------------------------VIEW (UPDATED) BALANCE (on server):~/Projects/Open-Transactions/include> opentxs balanceWelcome to Open Transactions -- version 0.82.hPLEASE SIGN YOUR PASSPHRASE:     Balance: 1102eMldMMiKfJRO8B8yJjzcezs9xvSt7dkdlWt50e8CDxn   (FT's Silver)------------------------------------------------------------------------------------------VIEW UPDATED PURSE (on local client):~/Projects/Open-Transactions/include> opentxs showpurseWelcome to Open Transactions -- version 0.82.hPLEASE SIGN YOUR PASSPHRASE: Total value: 110Token count: 7Index   Value   Series   ValidFrom   ValidTo   Status0      1      0   1339606926   1355158926      valid1      100      0   1339606926   1355158926      valid2      1      0   1339606926   1355158926      valid3      5      0   1339606926   1355158926      valid4      1      0   1339606926   1355158926      valid5      1      0   1339606926   1355158926      valid6      1      0   1339606926   1355158926      valid~/Projects/Open-Transactions/include> ------------------------------------------------------------------------------------------SOURCE CODE for "show purse":Code:            var strAmount = OT_API_Purse_GetTotalValue(Server, MyPurse, strPurse)            print("\n\nTotal value: " + strAmount)                        // Loop through purse contents and display tokens.            var nCount =  OT_API_Purse_Count(Server, MyPurse, strPurse)            // ----------------------            if (nCount > 0)            {                print("Token count: " + nCount.to_string() + "\n")                print("Index\tValue\tSeries\tValidFrom\tValidTo\t\tStatus")                var nIndex = -1                                while (nCount > 0)                {                    --nCount                    ++nIndex  // on first iteration, this is now 0.                    // -------------------                    var strToken = OT_API_Purse_Peek(Server, MyPurse, MyNym, strPurse)                    var strNewPurse = OT_API_Purse_Pop(Server, MyPurse, MyNym, strPurse)                                        strPurse = strNewPurse                    // ------------------------------------------                    var strDenomination = OT_API_Token_GetDenomination(Server, MyPurse, strToken)                    var nSeries         = OT_API_Token_GetSeries      (Server, MyPurse, strToken)                    var strValidFrom    = OT_API_Token_GetValidFrom   (Server, MyPurse, strToken)                    var strValidTo      = OT_API_Token_GetValidTo     (Server, MyPurse, strToken)                    var strTime         = OT_API_GetTime()                    // ------------------------------------------                    // Output the token...                                        var strStatus = (strTime.to_int() > strValidTo.to_int()) ? "expired" : "valid"                                        print(nIndex.to_string() + "\t" + strDenomination + "\t" + nSeries.to_string() + "\t" + strValidFrom + "\t" + strValidTo + "\t" + strStatus)                    // ------------------------------------------                } // while            } // if nCount > 0No offense, but a trained monkey could write an OT client. Fair enough. However, Python was not specifically written as a replacement for C and C++.D *was* specifically written as a replacement for C and C++.Therefore, I think you are comparing apples and oranges.For example, D, like C, would be an appropriate tool for writing a system-level driver.  Python, on the other hand, most likely would NOT be an appropriate tool for such a task.(Apples and oranges...) Anyone who writes C programs would do well to research the D language.Ditto for C++, but for entirely different reasons.D is the perfect replacement for both (each for different reasons.)I have programmed C and C++ for over 20 years, everything from controller cards to Windows, to Linux, to Mac, to Android, and FreeBSD. (Do your own research, just giving my opinion. Take it for whatever it's worth.)-FT If I had to write something in straight-C, I would use the D language. The OT settings file isn't encrypted yet, but I'm storing the picture file location inside the settings file, so that when the day comes that the settings ARE encrypted, the location will be safe in there as well.(da2ce7, FYI, this is why the picture path is stored in OT settings instead of generic Java settings...)As for a compromised system, I agree there's not much you can do about that, except try to practice better security.I do, however, believe that as a result of that, things are going to have to move towards smart cards.-FT
Once I check in the script fixes, you will be able to write scripts to do this stuff, if you want. The entire API (including markets) should be accessible from the scripts.-FT Imagine that you are performing a financial transaction. For example, perhaps you are sending 100,000 grams of gold to Alice.When you initiate such a transaction, a PASSWORD DIALOG will pop up on your screen. It might say, "Are you SURE you want to send 100,000 grams of gold to Alice? If so, enter your passphrase: "NOW: How do you know FOR SURE that this is really your password dialog? How do you know it's not some FAKE DIALOG that a HACKER created, so he could TRICK you into entering your passphrase?Because eventually when OT has a real install process, part of that process will force you to choose a PASSWORD IMAGE -- one of your own choosing. Perhaps you selected a picture of a goat that was dear to you in your childhood. Every time the passphrase dialog pops up, for you to enter your passphrase, that goat picture will appear on the dialog.A hacker trying to impersonate your passphrase dialog will be very unlikely to guess the exact goat picture that you chose for yours, and thus will be unable to trick you into entering your passphrase into an imposter dialog. Without this security precaution, the hacker could make a fake dialog that would look correct to thousands of people.  But WITH this security precaution, the hacker would have to guess the individual password image used by each and every one of those thousands of people (and it's extremely unlikely that he could do that...) When his fake dialog pops up, any near-victim would immediately see that it's the wrong dialog, since it does not feature the unique password image that person chose when he first installed OT.I hope that clears it up.  I'm sure da2ce7 will contact you soon to help figure out the issue you are having. I just wanted to point out, this is the final step before having an actual Windows install program.da2ce7's package doesn't actually install software, but it does come with all the necessary components pre-built, so you don't have to compile anything at all, just copy some DLLs and you are ready to run.I understand this version comes with working builds of the OT localhost Server as well as the Moneychanger test GUI, meaning that you should be able to actually run the server right there on your Windows box, and then pop up the client, and play around with cheques, cash, etc.It's a pretty momentous day! We're getting closer and closer to click-of-the-button installs. I hope that many of you are able to download the package and play around with it, so da2ce7 can get the feedback he needs to refine it.-FT I do remember you asking if I could work on it with you, and I said I don't have time to build it full-time but that I'd give you any support you needed.If you want me to work on it full-time I suppose that is a possibility but I want equity+salary+slave girls.-FT You never asked me for any help with any problems a year ago.Maybe there weren't problems at all.:-)Maybe you just configured it wrong and then didn't ask me.-FT On Windows, it's our responsibility to ship the redistributable package that our software is built for, the same way that you are planning to add OpenSSL DLLs to future builds.At some point soon we will have a "RoboInstall" project (or similar tool) for creating the Windows install, and that project will have the OpenSSL DLLs, the Windows redistributables, etc. All of that will build into a single install .exe and when that time comes, there will probably be a lot more people "kicking the tires" so I'm happy if that comes together slowly because it's been giving us time to test, debug, and strengthen the software. The testers we already have, have definitely kept my hands full for the past couple of months. Open-Transactions is network-protocol-agnostic. It uses a callback and you can run it over any protocol you want that supports request/response. (Like web protocols, or TCP, etc.)The current prototype of OT uses ZeroMQ, which you can read about here:  http://www.zeromq.org/Markm was referring more to the application protocol, which I have been working on lately to improve OT's auto-synchronization, and its ability to handle network problems (missed messages, timeouts, etc.) The most recent check-in was the result of a couple month's work in this area, and I've still got a few hiccups left to correct before I'll be fully satisfied with it.-FT I think a digital cash integration with Tahoe is one of the most important projects that needs to be done, regardless of which digital cash system is used to accomplish it.(I would use OT and Bitcoin together but if you have a better suggestion I'd love to see it.)How much time do you all think you have, that you can sit on this forum gossiping like a bunch of old women instead of coding something so important? Yes, you have to install boost in order to build chaiscript.FYI, boost is NOT a dependency of OT itself, other than chaiscript.It's really easy to swap out the script language for a different script interpreter, if you're interested.Just look in the code for a class called OTScriptChai, copy it, rename the copy, and customize its methods so they use your new script interpreter, instead of Chai.(But then none of the existing scripts would work, obviously, but the Java GUI will still work just fine.) to install chaiscript:git clone git://github.com/ChaiScript/ChaiScriptcd ChaiScriptmkdir buildcd buildcmake ..makesudo make install I just wanted to point out that Open-Transactions could work as the accounting system for a Tahoe-LAFS integration, and in fact such a thing is why I wrote OT in the first place.I will support anyone who uses OT to do this Tahoe integration. Yes but what I'm saying is, to the RIGHT of the 0, we should see only one line (the prediction) whereas to the LEFT of the 0, we should see two lines (two colors) with one color showing the historical data for each data point while the other color shows what the prediction had been for that same data point.That we can can see not only the historical data, and the prediction data, but we can see HOW THE prediction data measured up against the historical data WITHOUT having to compare to other images or data sets.  I have started to hear of this Peter Thiel character over the past year or so, and I have been impressed with his intellect and his focus on issues that our dear to our hearts, here on this forum.Clearly he has not yet grasped the full impact, if he is still thinking of Bitcoin and Gold as competing things, instead of thinking of Bitcoin as a new technology that will someday be used for transferring gold. The Bitcoin community and the digital gold community are going to merge. The whole will be greater than the sum of its parts. Both commodities have important roles to play in a larger picture of things. Those who still think that it will be "one community or the other" have not yet grasped the full implications of what is happening.However that is no matter, because soon everyone will come around, and probably Mr. Thiel sooner than most.As for Bitcoins and gold, it's important to keep in mind that neither has "intrinsic" value.Rather, both are valued by men for their unique properties.Gold is:-- Divisible.-- Fungible.-- Value dense.-- Recognizable.-- Durable.-- Zero counter-party risk.-- Stable in supply, yet minable.-- Liquid.-- International.-- Non-manipulatable. (Non-centralized.)By comparison:-- Diamonds, while valuable, are NOT divisible, nor are they fungible.-- Water, while valuable and divisible, is not value-dense enough to compete with gold as a form of money, on the free market.-- Food, while valuable, is not durable.-- Dollars, while liquid, do not represent zero-counter-party-risk (rather, they are debt-based.)-- Dollars, while recognizable, are not stable in supply (inflation is a worry).-- Dollars are also not minable. (Production is available only to a monopoly cartel, versus gold, which anyone can produce.)-- Food, which anyone can produce, is not liquid, especially in comparison to dollars or gold.-- Dollars, while you can hold them in your pocket, a board of bankers still has the power to reach into your pocket and manipulate its value. (This is not the case with gold.)Soon it becomes very clear that gold was never "declared" to be a form of money by any "authorities" but rather, became money due to natural market forces.If gold became money strictly due to natural market forces (as a result of its unique properties) then clearly the only reason it has been supplanted by dollars is due to artificial restraints imposed on the market by government force. (Such as legal tender "laws", tax "laws", money laundering "laws", etc.)Such forces must be constantly active, otherwise, natural market forces would immediately resolve back to gold again as they have for thousands of years.Now let's consider Bitcoin's unique properties:-- Divisible.-- Fungible.-- Value dense.-- Recognizable.-- Durable.-- Zero counter-party risk.-- Stable in supply, yet minable.-- Liquid.-- International.-- Non-manipulatable. (Non-centralized.)AS WELL AS:-- Non-confiscatable.-- Accounts cannot be frozen.-- Anonymity is possible.-- Electronically transferrable.As you can see, Bitcoin's unique properties are similar to those of gold, although it adds new properties due to its ethereal nature.Those new properties (non-confiscatable, non-freezable, pseudonymous, transferrable electronically) all serve to route-around the artificial forces that are currently being used to supplant gold with the dollar. After all, the various immoral, legal-tender legislation in place today uses the force of a gun to impose fiat money onto an economy that would otherwise resolve to gold by natural forces. That artificial force depends on the government's collusion with banks and their collective monopoly on the ability to issue, store, freeze, confiscate, track, and transfer dollars. What happens once Bitcoin destroys their ability to do so?===> What will happen is that Bitcoin will take a pre-eminent role for all digital currency transfers (for ALL currency types including gold.) ===> It will also serve as the censorship-proof "universal medium" for all other online settlements.===> Gold will eventually revert to its status as money, due to natural market forces that will be unleashed by the technology of Bitcoin, etc. (Just as Bitcoin has enabled people to buy drugs online, meaning Bitcoin has brought natural law to the drug market, so in the same way, Bitcoin will enable people to use gold as money, meaning Bitcoin will also bring natural law to the monetary system.)===> Of course, gold has already reverted to its status as money at the elite, national, and central-banking levels. But Bitcoin has the potential to enable this for the livestock/slaves at the plebe level as well. (The proletariat.)===> Ripple will fill the need for credit lines and expansion, in an F2F manner. It will also enable all participants to exchange in-and-out of all other currencies, including fiat currencies, while entirely routing around all existing government-imposed bottlenecks and "money-transmitting authorities". People will easily be able to exchange in-and-out of the system by way of their own trusted friends and attorneys.===> I believe also that small vault operators, as envisioned by Andrew McMeikan of PKTP, will have an important role to play.===> As will various transaction servers along the lines of Ricardo, PKTP, Loom, Truledger, and Open-Transactions.===> As well as various DGC issuers and Bitcoin voting pools.The next time one of you gets an opportunity to explain Bitcoin to Peter Thiel, please give him more of a "big picture" view of things, and don't let him go astray down the primrose path where people still think of Bitcoin and Gold as "either-or" sort-of-things, when in fact each has unique properties, and its own part to play in a larger, overall vision. Would be nice if the historical data contains TWO lines: the actual numbers and the predicted numbers. If shutting down Napster resulted in Bittorrent, then what will be the result of shutting down SWIFT transfers in and out of Iran? I have learned about Ripple. Before, I pictured that it would be a p2p protocol. But as I learned, the Ripple trades must be atomic across the entire path. You can't have only 2 or 3 of them happen, based purely on trust that the rest will. No... there must be some clearing process where ALL trades in a given RipplePay are performed atomically... or not at all.Clearly the easiest way to do that is with a server... but that's not decentralized and p2p, is it?Actually, in the case of Ripple--IT IS. You see what Ripple decentralizes--what Ripple makes F2F--is the functionality of being able to exchange IN and OUT between fiat currencies and digital ones without having to go through an exchange. Ripple is not P2P. Rather, it is F2F (Friend-2-Friend). It is through your friends that you can exchange money in-and-out of the system, instead of having to use an exchange such as MtGox. And you can see that Ripple enables such activity whether or not it runs on a server. Thus, the "important part" of Ripple IS distributed even when it runs on a server. And the existence of Bitcoin is what makes it possible to run Ripple servers anonymously at a profit. And before you ask, "What if the server screws you over?" Answer: That is why someday OT must implement Ripple, so you have the protection of the Triple-Signed Receipts along with the Ripple protocol. The "miracle" already exists but people don't see the big picture yet. The solution is a combination of federated, p2p, and f2f architectures.Earlier in this thread it was said that the exchanges are the natural "bottleneck" in the system that are likely to be targeted by "the authorities" (which is patently true.) But the purpose of these institutions is not trading, per se, but exchanging between fiat and crypto currencies--and this function will someday soon be subsumed by implementations of the Ripple protocol. (You will not need exchanges anymore, because people will be able to exchange in-and-out of various fiat currencies via friend-to-friend technology instead.)We are standing at an epoch in history.Normal market interactions will be processed by transaction servers (such as OT) and the security of the Bitcoins traded on those sites will be protected by multi-sign voting pools (on the blockchain) composed of federations of those servers (and someday in combination with auditing and insurance entities as well.) Systems such as OT will perform most of the actual transactions. Bitcoin/Namecoin will be the universal medium that glues it all together, and Ripple will be the gateway in-and-out of the system, which will forever eliminate any need for banks, money transmitters, monetary policy, or tax authorities. At the end of it, I expect to see precious metals re-monetized. (For the masses, I mean. Obviously it's already money for the elite.) Here it is:  http://mo.morsi.org/blog/node/270 Maybe they told him "we can do this the easy way, or we can do this the hard way."Maybe he was just happy for the money, or for the reputation opportunity, or for the opportunity to reach those in the intelligence community to see Bitcoin in the most positive light.Maybe the CIA is interested in Bitcoin for the same reason they like Tor: Because they can use it overseas, and because it disproportionately impacts authoritarian regimes, relative to "free" ones.Maybe there are elements within the CIA who see the Federal Reserve the same way that we do.Maybe they have interest in learning about Bitcoin, and learning how to trace BTC transactions, since there are entities in the real world who are utilizing it, and the CIA operates in the real world.Most importantly, since we don't see the lead developers of "Beenz" and "Flooz" being summoned to the CIA, I think this portends well for the technology, as it gives an indicator that they take it seriously. ...and here is the reason why:  https://bitcointalk.org/index.php?topic=42114.msg712011#msg712011
Even without corporate charters issued by the government, corporations would still exist. (That is, in the absence of government force to the contrary, investors would still voluntarily band together of their own accord in order to hire employees to manage their collective property, and to split the profits from the revenues derived.)The only reason that corporations now control the government, is because you do not have fair representation; you do not have proper apportionment.I will make this clear... (using extreme example)Hypothetical situation 1:  There is 1 representative for every 1 thousand people.Hypothetical situation 2:  There is 1 representative for every 1 trillion people.As you can see, in situation (1), you have fair representation. (Democracy!)But in situation (2), you do not have fair representation. (Dictator!!!)(Notice that the only difference between "democracy" and "dictator" is the number of people being represented.)In situation (1), a person cannot be elected to the House unless he actually lives in your neighborhood, operates a business nearby, attends your church, etc. No amount of TV commercials can change this. No outsider could ever win. Certainly no one would be in office for very long, unless he was available to meet with constituents, who would all actually meet with him and voice their concerns on a regular basis.In situation (2), on the other hand, a person cannot be elected to the House unless he gets lots and lots of money from big corporations, and spends it on lots and lots of TV commercials. No "real person" could ever win. Certainly no one would be in office for very long, unless he was entirely bought-and-paid-for by large corporations, who would all actually meet with him and voice their concerns on a regular basis.When the Constitution was written, the House had 1 representative for every 30,000 people.Today, Congress is very different. There are 435 people ruling over FOUR HUNDRED MILLION. This is no different than 1 person reigning over 1 million. (In the old days they called that a "king.")You see, "everybody has one vote" is a lie they sell you. What's actually important is how diluted that vote is. ---------------------------------------------------------------------------------------------------------Consider also the SENATE. In the old days, each Senator was appointed by his respective state legislature. He had a strong incentive to represent the interests of that state legislature, for otherwise, they would remove him from office. This meant that the Senators were beholden to the States, just as the House was beholden to the People. (The Senators actually represented the States, in those days.) Therefore, a Senator actually had to deal with 50 or 100 actual state legislators and their concerns, or he was fired.But today, things are very different. The Senator is elected by direct election of the people. For example in California, there are THIRTY MILLION PEOPLE but only 2 Senators. But those Senators do not represent those people, since it is physically impossible for anyone to represent thirty million people. Instead, those Senators represent the large corporations who pay for TV commercials that get them elected. As for the voters, the Senators really only care about a certain vague notion of whether the voters are "angry", and this they only care about once every 6 years. They certainly do not represent those voters, nor do they represent the interests of their State government (which has no say in their election.)So you see, the States WERE represented in the Senate, but no longer. And the People WERE represented in the House, but no longer. Those times have passed / are passing.This is not a problem of corporations, which are a simple fact of natural law. Rather, this is a problem of an uneducated populace being unwilling or unable to demand their right to fair representation. Once you fix that, then suddenly all problems of "corporations" or "campaign finance" or "district gerrymandering" are revealed as false issues, and disappear. Those issues are actually used as a red herring in order to distract the population and keep them occupied in the two-party system. Don't fall for it. Also, see:   www.apportionment.usCorporations can only become an illicit power center (as well as a bogeyman) in cases where your vote has been diluted away. The same is true of unions, and even government agencies. This is why you move through life with that vague feeling of pressure to either become part of the investor class and under SEC and FDIC regulation, or the corporate class regulated by your manager who is regulated by the FTC, or to join a union, regulated by the Department of Labor, or work for a government agency, or to end up in the prison system or living off of the Dept. of Housing and Urban Development. You certainly don't feel as if the system is pushing you towards "running your own ship", now do you?All of the problems that conservatives normally associate with unions are not a result of the unions themselves (i.e. the workers' natural rights of association and collective bargaining.) Rather, they are problems caused by state and federal laws which favor unions at the expense of our rights.Similarly, the problems that liberals associate with corporations are not a result of the corporations themselves (i.e. the investors' and employees' natural rights of association, property, voluntary exchange and the right to contract.) Rather, they are problems caused by state and federal laws which favor corporations at the expense of our rights.It's always the same: Unfair advantages (granted via government force) to the corporations/unions/banks/whatever, bundled with increased government power to regulate those same corporations/banks/unions/etc--always at the expense of individuals and small businesses--with the ill-gotten gains being distributed disproportionately to those who are well-connected. Growing more and more towards fascism on the right, and socialism on the left.The cause is also always the same: lack of fair representation stemming from ignorance about our rights under Magna Carta, under the Enlightenment, under Natural Law, under the Declaration of Independence, and the Judeo-Christian ethic. This same ignorance also destroys our right to a fair jury trial via juries who judge the law itself (and not merely the facts of the case.) For if jurors are ignorant of this right, it becomes of no effect. Let's assume a couple of users:  Alice, Bob, Carla, and DeborahIf Alice transfers 10 clams to Bob,  and Bob transfers 5 clams to Carla, and Carla transfers 1 clam to Deborah, the server sees:Alice->Transfer 10 clams to Bob.Bob->Transfer 5 clams to Carla.Carla->Transfer 1 clam to Deborah.-----------------------------------------------------BUT IF THEY USE CASH, then the server would see this instead:Bob->Has just verified 10 clams in cash (source unknown.)Carla->Has just verified 5 clams in cash (source unknown.)Deborah->Has just verified 1 clam in cash (source unknown.)Of course "Bob" and "Carla" are really just public keys, as far as the server is concerned.As you can see, the server can NOT trace the path of any money from Alice to Bob to Carla, etc. The server can only see when someone has received cash, but the server has no idea where that cash came from (because it's untraceable.) The problem isn't when individuals or corporations are free to do whatever they want.The problem is when the government gives them special privileges at the expense of others' rights. 1. I'm sure there are mining groups now who would accept certain more exotic transaction types.2. Even if multi-sign isn't accepted yet, I still need to get started on my code, so I still need to see a code sample using your library (preferably.) It will be months before this stuff is fully ready,  IMO.3. Once low-trust servers are popping up to take advantage of such code, I can almost guarantee you there will be a sea change in the Bitcoin community as various miners, exchanges, et al jump on board.Need sample code!------------------------  Can you please post a code sample of how to perform multi-sign transactions on the blockchain using your library.This is a necessary piece for me. FYI Markm is already running a test server, though it's down today until I get a certain bug fixed. Should be back up tomorrow or the next day.Search this forum for markm, open transactions alpha server, and you will find all the relevant info.The easiest way to play with OT is to just download it, since the default configuration includes sample data for a "localhost" server. You just run the server yourself on your local machine, then run the GUI on the same machine, in order to play with the functionality.(That's what you see me doing on the OT videos.)I wouldn't characterize OT (the library itself) as needing marketing, since it is already well-known and short on demos.More likely, once more user-friendly applications are available, then those will need the marketing.(The first real users of OT will encounter it not directly, but through software built with it. That's where I think marketing will come in.)-FT FYI, "the OT community" can only be a reference to me, since I have slaved away on it, alone, for the past year-and-a-half. (Seeking volunteer coders.)We're in the process now of testing our way through the first alpha server.  Discussion is at irc.freenode.net #opentransactionsMy own focus has been on developing the library itself, and supporting anyone who uses it (not so much on building sites that use it or creating demos, which is your job, not mine.) In the end there will only be two types of people: those using OT, and those re-inventing the wheel, coding new systems that do the same things. There is no escaping this. (And either end is fine with me  :-)-FT eCache I am pretty sure is the legitimate thing: (Chaumian untraceable cash, backed in gold.) They also have some kind of bonding mechanism, to secure the gold.As for Ukash, I checked out their website and I am not so sure. Seems like they have "vouchers" issued by their server. But I see nothing about those vouchers being untraceable. Furthermore, an OT server is unable to change your balance without your permission (you must sign first, and the server cannot forge your signature.) But I don't see that Ukash has any similar technology. Absent claims / proof to the contrary, I'd have to assume that they have the power to change my balance anytime they want, with or without my agreement, the same as PayPal or MtGox could.-FT I recommend L-AGPL over LGPL.It's basically the same as LGPL, except it applies even in cases where the software is used "as a service" (instead of as an installable program.)See above for more info. I am not too familiar with those systems, though I'd assume they are similar to running OT in cash-only mode, since they probably offer real Chaumian blinding.I had heard of eCache, but not uKash. (URL?) There was also blindbitcoin.com. OT should make it easier for people to offer such services. FYI, the connect info for any server is stored INSIDE the server contract.If you want to connect to a specific server, go to the 'contracts' tab, and import the server contract.From there, if you open any accounts, or perform any transactions with that server, OT will be smart enough to read the connect info out of its contract. OT's latest version (with smart contracts) comes with a sample script that does a two-way trade between Alice and Bob. Arbitrated escrow isn't much more -- I'll work up a script tonight and check it into github. (This was on my list for today already, in fact.)  Here's what I'm thinking:The existing sample script takes X units of currency A from Alice and Y units of currency B from Bob. If both are successful, then it gives Alice's money to Bob, and gives Bob's money to Alice. (They are atomic, success or failure.)The new contract will introduce a third party: the arbitrator. This will be a real escrow contract, which assumes there is some offline sale happening (ex. You are sending a guitar to someone in another state...) The contract must include the precondition and the postcondition. After the parties have signed the contract and activated it, X funds from Alice will be stashed inside the contract for 30 days, and then automatically transferred to Bob. If, during that 30 day period, Alice decides that Bob has not shipped her the guitar, she can trigger the dispute clause, which sends notices to Bob and the Arbitrator. She must send her evidence when she does this. After this, the funds will remain stashed in the contract for another 7 days, awaiting a Decision from the Arbitrator. If the arbitrator does not respond in X days, then the money goes back to Alice automatically. Otherwise the arbitrator may trigger a clause deciding the matter one way or the other. Some arbitration fee will be listed in the contract, along with any additional fee should Dispute() be triggered. There will also be clauses allowing the arbitrator to query Bob and Alice for additional information. Calling these will add a day or two to the 7 day timeout period.You will be able to test the contract on your own machine, or use the OT test server to play around with it. If you have any thoughts on the above, please let me know so I can work them into the script.-FT OpenSSL doesn't necessarily conflict with the GPL!  All you have to do is, provide a waiver with your license, allowing your users to link OpenSSL while using your library.See the OT headers for examples of this, regarding OpenSSL as well as the Lucre library:  https://github.com/FellowTraveler/Open-Transactions/blob/master/LICENSE-AND-CREDITS.txtWget, for example, uses this "waiver" trick, and other software. Google for more info. YOU can provide additional permissions on top of the AGPL (which is exactly how the LAGPL itself works.)Since you can add permissions (NEVER restrictions) to any GPL license, then you may also be able to fix your AGPL "bug" using that technique.GPL licenses make exemptions for other GPL licenses, for interoperability reasons. So LGPL is different than BSD in terms of this interoperability. (For example, the above-described waiver is not necessary with LGPL...)FYI, here is my own "easy english" description of the L-AGPL's operation:Whether you are distributing binaries that link to the OT-API, or whether you are using the OT-API in your website  so-called software as a service  either way, your own code may remain private, but any improvements to the OT library or API code itself must be made available open-source.My understanding is that the BSD license does not do this -- IBM could take all the libbitcoin code tomorrow if it were under BSD license, and use it internally, without having to open any source code, and without having to deal with the developers of libbitcoin. They could then sell it as closed-source, at a profit, and cut out the original developers, and cut out the open source community. They would not have to make available any of their improvements to libbitcoin, but could keep these proprietary. IMO that is a big distinction between BSD and LGPL.I'm not opposed to the BSD license, but the link I provided in the previous post demonstrates why the GPL license can be important when it comes to maintaining a thriving open-source community around a given piece of software. Especially convincing is the amount of money spent by (normally competing) corporations such as Microsoft, et al towards improving linux, where such entities would normally never invest funds to benefit their competitors, but instead would tend to choose a proprietary solution (or co-opt a piece of BSD-licensed code in order to create a proprietary solution, as described in that article.) Congratulations on the excellent library work.I also notice you have chosen the GNU Affero GPL for your license. (The 'AGPL'.)I still use AGPL, but only for my server software. My OT library now uses the L-AGPL, which preserves the Affero SaaS protections, while allowing LGPL-like permissions in places where OT is used as a library. It's the best of both worlds!You can read more about the LAGPL here: http://mo.morsi.org/blog/node/270I think this is the best argument in favor of using the GPL for (certain) open-source projects: http://www.dwheeler.com/blog/2006/09/01/#gpl-bsdAlso, FYI I actually wrote to the FSF about this, and they directed me to the same LAGPL article.The critical point, legally, is that the LAGPL is created by layering additional permissions on top of the AGPL.(Versus adding restrictions to the LGPL, which would be removable downstream.)In the case of the LAGPL, the additional permissions are also removable, but who is ever going to do THAT? Therefore, that is the proper structure for it. Here's a simple version:Imagine that I generate a random ID:  "lkjsdf987234"Next I blind it, using the server's $10 public key:  "876345kjhkjh"(Next I send it to the server, along with a $10 withdrawal request.)The server pulls $10 from my account, and then the serversigns the prototoken using its $10 private key:   "876345kjhkjh SIGNED:Server"(Sends it back to me...)I then UNBLIND IT using the Server's $10 public key:  "lkjsdf987234 SIGNED:Server"AT THIS POINT, the token is ready to spend.  As you can see, I have a valid server signature, which can only be verified using the server's $10 key, and which contains an ID that the server DOES NOT KNOW.That is why it's called a "blind signature" -- because the server signs it "blind".The server still feels safe that only the $10 key will verify the signature. So while the server has no idea where the cash came from, when it is redeemed, it nevertheless knows whether or not it is any good.This is also provable to a third party, since the spent token database can be made public, and only the server's $10 public key is necessary to verify the tokens. Imagine that you withdrew $100 from the bank.Now imagine you give it to your favorite prostitute, and she gives it to her pimp, and he gives it to his coke dealer, who gives it to a coyote, who spends it at 7/11.Now:  The bank can see that you WITHDREW $100, and the bank can see that 7/11 DEPOSITED $100... but the bank can't see any of the people who had it in-between.Furthermore, the bank doesn't know if it's the SAME $100. It simply has no way of connecting the withdrawal to the deposit, since the cash is untraceable.If you have several pseudonyms (public keys) registered at an OT server, and they are transacting in cash, the server can see their withdrawals and deposits, but it cannot see who is giving you that money, and it cannot see where you are spending it. Such is untraceable. A server doesn't even know whether you have a hoard of coins which you are exchanging one-at-a-time, or whether you actually have only a single coin, which you are exchanging over and over again. A server can't tell the difference.Furthermore, while the server can link a specific Nym's withdrawals to each other (by way of that Nym), it cannot link them to how they are spent, or to any of the activities of your other Nyms. Furthermore, if the server is run in cash-only mode, so that there is only a single Nym which performs only cash-token exchanges, then you lose even pseudonymity, and the system becomes completely anonymous.How is it possible to return the cash notes anonymously to the user?  ANSWER: Over an anonymous network.How is it possible that the note itself cannot be traced as it is spent?  ANSWER:  Using blind signatures. http://en.wikipedia.org/wiki/Blind_SignaturesIt works like this:  The client generates the prototokens and blinds them using the server's public mint keys. These prototokens are sent to the server along with the withdrawal request.  The server signs the prototokens using its private mint keys.  For example, if I am withdrawing $100, then the $100 public mint key will be used on the client side to blind the prototoken, and the $100 private mint key will be used on the server sign to blind-sign the prototoken, and then when the client receives the server reply, the client will use the $100 public mint key to UNBLIND the prototoken, and it is now ready for spending.(This information is already available on my FAQ...)Once the client has unblinded the prototoken, then it will have a valid server signature on its ID, even though the server doesn't know what that ID is, since it was blinded when it was signed.The server is, nevertheless confident that if $100 was withdrawn from your account, that it used the $100 mint key to sign the request -- therefore, even though the server doesn't what what the ID is, it still knows that it was signed with the $100 key, and that only the $100 key will successfully verify it in the future.  When it IS verified, the server will know it was good, but it will not know where it originally came from, since this is untraceable.The answer is that digital cash uses denominations, just like real cash.  In a certain mint file there might be, say, a 1c key, a 5c key, 10c key, 25c key, 50c key, $1 key, $5 key, $10 key, $20 key, and $100 key.For an example of this, see the sample public mint file posted on the OT wiki:  https://github.com/FellowTraveler/Open-Transactions/wiki/Sample-MintThus, if you give cash to someone in a specific amount, you will not be giving him a token, but rather, a purse full of them, in the appropriate denominations to amount to your $12.63 or $0.84 etc.Banks are bureaucracies responsible primarily for regulatory compliance and enforcement (related to their monopoly on the issuance of money.)Their actions do not stem from natural market forces, but from the regulations related to the FDIC, money laundering and tax law, SEC compliance, and so on.In answer to your question, Why do banks stick to "know everything about every transaction"...? the answer is so they can watch for suspicious activities on your part, report on them to the authorities, and freeze your funds when asked to by the tax enforcement department in your jurisdiction.Similarly, if you were to ask me why food is so superior to tree bark, since many in the North Korean economy continue to eat tree bark (even though they have known about food for at least several decades), my answer would be that North Koreans eat tree bark not because of natural market forces, but rather, due to the unavailability of good food as a result of government interference in the free market. That's because you are not educated on this subject:  http://en.wikipedia.org/wiki/Blind_SignaturesIn fact, untraceable digital cash really is untraceable. Well maybe you are trolling me, but I'll go ahead and say it again:You people, here in this thread, were talking about Open-Transactions first, before I got here.  (That's why I came to this thread, to respond.)That's why I said "Scroll up" -- so you would realize that people on this thread were already talking about it before I arrived.I only showed up later -- to respond to what you guys were saying, and clear up any misconceptions.(Which I still feel as if I am doing...) FYI, I only posted here to correct misconceptions, in reply to existing discussion in this thread re: Open-Transactions.(Scroll up. See?) "You shall not lend upon usury to thy brother;usury of money, usury of victuals,usury of any thing that is lent upon usury:Unto a stranger you may lend upon usury;but unto your brother you shall not lend upon usury:that the LORD your God may bless you in all that you set your hand toin the land whither you go to possess it."Deut 23:19-20"You shall not have different weights in your bag, a great and a small.You shall not have different measures in your house, a great and a small.But you shall have a perfect and just weight, a perfect and just measureyou shall have: That your days may be lengthened in the land which theLORD your God gives you."Deuteronomy 25:13"You shall not steal."Exodus 20:15"Different weights, and different measures, both of them are alikeabomination to the LORD."Proverbs 20:10He overturned the tables of the money-lenders,and the benches of those selling doves."It is written," he said to them,"'My house will be called a house of prayer,' (1)but you are making it a 'den of thieves' (2)."Matthew 21:12b-13, 1. Isaiah 56:7, 2. Jeremiah 7:11"The rich rule over the poor, and the borrower is servant to the lender."Proverbs 22:7"Hate evil, and love good,and establish justice in the courts."Amos 5:15"Justice, and only justice, you shall follow, that you may live andinherit the land that the Lord your God is giving you."Deuteronomy 16:20"Do not pervert justice;do not show partiality to the pooror favoritism to the strong,but judge your neighbor fairly."Leviticus 19:15"You shall not go after the majority to do evil.Neither shall you testify in a matter of strifeto incline after the majority to pervert justice."Exodus 23:2
Many in North Korea talk about returning to food, but if food was that much better than tree bark, then why has tree bark replaced food in the North Korean economy?Answer: Government force. Here is the test GUI: https://github.com/FellowTraveler/MoneychangerHere is a video walkthrough of me using the GUI:Accounts, Cash: http://vimeo.com/28141679Markets, Bitcoin: http://vimeo.com/28142096I should warn you that a "real" GUI will have a completely different interface than the test GUI, so please don't read too much into the UI "design" since its primary purpose is for protocol testing. Here's a sample UI design that is probably more accurate for a "real" GUI (left side): https://bitcointalk.org/index.php?topic=31032.msg399675#msg399675-----------------------------------------------------------------------Here is the output of ot -?Code:OT CLI Usage:  ot  --stat (Prints the wallet contents)    ot --prompt (Enter the OT prompt)ot  [-h|-?|--help]    (Prints this help)   ot --script (assumes script until eof)The '|' symbol means use --balance or -b, use --withdraw or -w, etc.The brackets '[]' show required arguments, where default values arenormally expected to be found in:   ~/.ot/command-line-ot.optot  --balance  | -b          [--myacct <acct_id>]   (Display account balance)ot  --withdraw | -w <amount> [--myacct <acct_id>]   (Withdraw as CASH)ot  --transfer | -t <amount> [--myacct <acct_id>] [--hisacct <acct_id>]ot  --cheque   | -c <amount> [--myacct <acct_id>] [--hisnym  <nym_id> ]ot  --voucher  | -v <amount> [--myacct <acct_id>] [--hisnym  <nym_id> ]ot  --depositcheque  [--myacct <acct_id>]   (Deposit a cheque.)ot  --depositpurse   [--myacct <acct_id>]   (Deposit a cash purse.)ot  --deposittokens  [--myacct <acct_id>]   (Deposit individual cash tokens.)ot  --inbox    | -i  [--myacct <acct_id>]   (Display the inbox.)ot  --sign     | -s  [--mynym  <nym_id> ]   (Sign a contract.)ot  --verify         [--mynym  <nym_id> ]   (Verify a signature.)ot  --purse    | -p   <arguments>           (Display a purse.)  Arguments:     [--mynym  <nym_id> ] [--mypurse <asset_type_id>]ot  --refresh  | -r  [--myacct <acct_id>]    (Download account files from server.)ot  --refreshnym     [--mynym  <nym_id> ]    (Download nym files from server.)ot  --marketoffer    [--mynym  <nym_id> ]    (Place an offer on a market.)Also, [--server <server_id>] will work with all of the above.Recurring payments:ot --proposeplan  <arguments>   (Merchant)  Arguments: [--mynym  <nym_id> ] [--myacct  <acct_id>]  (continued.)  Continued: [--hisnym <nym_id> ] [--hisacct <acct_id> ]ot --confirmplan  <arguments>   (Customer)ot --activateplan <arguments>   (Customer again)  Arguments: [--mynym  <nym_id> ] [--myacct  <acct_id>]There is also an OT> prompt, which you can activate like so: Code:ot --promptOT Prompt instructions (scroll down): https://github.com/FellowTraveler/Open-Transactions/wiki/Test-Wallet-commands-----------------------------------------------------------Here is the entire client API, with explanation for each function: https://github.com/FellowTraveler/Open-Transactions/wiki/APIBetter yet, here are clear instructions for USING the API, for each use case: https://github.com/FellowTraveler/Open-Transactions/wiki/Use-Cases------------------------------------------------------------------------FYI, the OT client API is fully-scriptable. If you would like to make your own shell scripts, just put #!/usr/local/bin/ot --script at the top of any text file, and then feel free to use any of the API calls.  Here are some sample scripts:  https://github.com/FellowTraveler/Open-Transactions/blob/master/scripts(As I just released the scripting code within the past few days, you can expect more sample scripts to start appearing soon. Eventually there will be scripts for every use case.)------------------------------------------------------------------------Here is a test server, if you want to try out the GUI: http://sourceforge.net/projects/galacticmilieu/files/(Related thread): https://bitcointalk.org/index.php?topic=53329.0OT comes with a "localhost" test server, so the easiest way to get started is to just run the server yourself, and then run the GUI against your own local server. I have also provided builds of everything, if you don't want to have to deal with compiling: https://github.com/FellowTraveler/Open-Transactions/downloadsTo start up the server (after make install) type this:  ot_serverIf you need any support, you can email me: fellowtraveler at rayservers dot net.I can also often be found on #opentransactions at irc.freenode.net and there are others there who run servers, if you need questions answered and I'm not around.-----------------------------------------------------------I don't think I can do any more hand-holding than I already am. FYI, I am not going to write a nice Mac OSX GUI, for these reasons:1) I do OT in my free time and I can't take on any more projects.2) There are more projects needing to be done than I could possibly ever code myself.  We need a QT client, Android client, iOS client, Mac OSX client, Windows client, Magneto integration, i2p integration, Tahoe-LAFS integration, POS system, Tor integration. ETC!  (I cannot possibly write all of these although I am willing to try, if you are willing to fund me.)3) As businesses, gamers, investors, forward-thinkers, early-adopters, etc are already popping up to take advantage of OT, I feel confident at this point that the base will only continue to grow, even if I get hit by a bus tomorrow. The aura of inevitability has set in.-----------------------------------------------------------I am sorry to say, if you expect me to produce more than I am already producing, you will probably be disappointed. I've already contributed more free code in the past year than probably most people on this board. (And not finished yet...) But there is only so much I can do.However, there is good news:  Others ARE popping up and taking on these sorts of projects. OT clients are being meddled with, businesses are starting to pop up, etc. So while I can't do it all myself, the open source community is nevertheless beginning to step in. That's the way it always works: some people get in faster than others. Bitcoin was the same way. But if the technology is good, it WILL get integrated where it adds value, and that's where the potential benefit lies for all of you out there.-----------------------------------------------------------OT is probably more comparable to something like OpenSSL, than to something like Google Wave. Asking for an "OT GUI" (although I have paid out of my own pocket to produce the one linked above) is like asking for an "OpenSSL GUI". OpenSSL is more of a library than an application -- and in fact it is used in thousands of different applications. OT is the same way. Each OT application will be entirely different than the others, because the range of uses, similar to OpenSSL, is so wide-open.-----------------------------------------------------------One more thing: My primary purpose in writing OT was purely moral. I already have a form of success in life and I do not work in any technical field. This is a side project I made because I had a very clear and powerful vision of what it needed to be, and because I watched over ten years pass by, where no one else was writing it. I wanted to see it exist, and to see it go into the world to make its mark, and to spread the concepts like a mental virus--like a meme, basically with an experimental, reference implementation, and I already feel as if I have been successful at my goal.I hope you find the links above useful; I encourage you to read the other articles on my wiki as well, as I've been pretty comprehensive about describing all the pieces and their operation. Perhaps you will find your calling  :-)-FT  The USA has a Bill of Rights due to the Enlightenment, and due to its Judeo-Christian heritage.Stuff like the Bill of Rights was my whole point when I wrote this:  https://bitcointalk.org/index.php?topic=53366.msg648981#msg648981 Honestly, if I was going to make some calls to Bitcoin, then I would just include libbitcoin, I wouldn't bother coding it myself. (It'd just be duplicating work.) I seriously doubt that I could make a better implementation of Bitcoin than what Genjix is already doing with libbitcoin.OT is a useful tool in conjunction with Bitcoin, and the best way to use them together (in your own software) would be to include the OT library to do the OT stuff, and include libbitcoin to do the Bitcoin stuff, and all cross-over transactions between the two is the job of YOUR software, which is connecting the two. FYI the Open-Transactions library itself doesn't implement Bitcoin, although the test GUI (Moneychanger) does have a Bitcoin screen.I prefer to view OT as something used "with" Bitcoin. Here's what your vote gets you, if we fail to distinguish between right and wrong: In your attempts to reject God, you have rejected Bastiat and all of your Western freedoms to boot.:-)"My people are destroyed for lack of knowledge:because you have rejected knowledge,I will also reject you,that you shall be no priest to me:seeing you have forgotten the law of your God,I will also forget your children."Hosea 4:6 FYI, currently using chaiscript:  www.chaiscript.comBUT -- really I'm using an abstract interface (OTScript) and I provided the first subclass (OTScriptChai)...If you want to subclass OTScript and put your OWN scripting language there instead (OTScriptLua, OTScriptE, whatever) it should be really easy for you to do.(The whole point of OT is to make it easy for swapping in a different language, or different storage mechanism, or different network transport, etc.)-FT IN THIS ISSUE:   -- The magic of SMART CONTRACTS...   -- Scriptable clauses   -- Stashed funds   -- Hooks   -- RUN->CLAUSE->NOW!   -- Callbacks   -- Simple example:  "Two-Way Trade"   -- Usage Credits      (for server operators to earn transaction fees)   -- #opentransactions on irc.freenode.net   -- New permissions switches (added to config file!)   -- OT Test Servers Are Popping Up...   -- #! /usr/local/bin/ot --scriptHeya... it's me again: your old buddy FellowTraveler! Slaving away for yourfinancial freedom, as usual, while you surf the net like you have allthe time in the world.Personally, I've been losing sleep. I was up ALL LAST NIGHT, working onmy latest release of OPEN TRANSACTIONS......VERSION 0.75  **** SMART CONTRACTS **** release!Binary downloads:https://github.com/FellowTraveler/Open-Transactions/downloadsSource code:https://github.com/FellowTraveler/Open-TransactionsWiki, videos, radio interview:https://github.com/FellowTraveler/Open-Transactions/wiki----------------------------------------BACKGROUNDThe concept of smart contracts originated with Nick Szabo, and you canread about the basic concepts from the man himself, right here:http://www.erights.org/smart-contracts/index.htmlAnd here:http://www.erights.org/elib/capability/ode/ode-capabilities.html#simple-money...Man I gotta tell you what, looking at this stuff, I'm really blownaway by what Szabo was able to accomplish on a conceptual and technicallevel. The potential for this sort of technology is just mind-boggling!----------------------------------------I'm not using Szabo's system -- My goal with Smart Contracts on OT wasto build scripting directly into OT's existing Ricardian-stylecontracts, AND to fit scripting into OT's existing system of signedreceipts and destruction of account history, AND to fit it all into theexisting system of recurring transactions on OT! (I succeeded.)So... IN A NUTSHELL?Imagine that an ingrate is dissatisfied with the financial instruments thatOT already offers, such as cheques, markets, cash, etc.He wants more: to design his OWN financial instrument, such as an ESCROWagreement... with his OWN logic...===> On OT, Smart Contracts have SCRIPTABLE CLAUSES, so YOU can designthe logic for how your financial instrument will operate! Then partiescan sign onto the agreement and activate it to be processedautomatically according to its terms.===> This is FAR beyond the client-side scripting of my previousannouncement (where client side scripts programatically access the OTclient API.) These smart contracts run on the server side!===> OT is fast becoming a real PLATFORM  ----------------------------------------Let's get down to BRASS TACKS...--- Once the parties sign and activate the smart contract, it takes on alife of its own, processing regularly according to its internal logic,until it expires or is deactivated.--- While active, the smart contract is able to perform variousfunctions, such as verifying account balances, sleeping until a timerhas triggered, moving funds from one party's account to another, etc.(Of course, the smart contract is only able to manipulate its own validparties and their accounts.)--- The smart contract is even able to stash funds INSIDE THE CONTRACTITSELF, for safekeeping over time (for performing escrow, for example, asmart contract could store the funds internally for 30 days, and thenpass them to one party or another.)----------------------------------------...And that's not all!   HOOK CLAUSES!--- Scripted clauses can also be configured to trigger on certainEVENTS. For example, do you need a script to fire RIGHT when the smartcontract first activates? No problem! Just attach it to the"OnActivate()" hook. Do you have a script that needs to fire everysingle day for a month? No problem, just put your logic on the"OnProcess()" hook! (And set a 1-day sleep between processing.)--- You can also define CUSTOM VARIABLES in your smart contract, whichpersist through its entire lifetime. As the smart contract--includingits internal state--continues to process over time, receipts will dropinto the relevant parties' inboxes, exactly the same as already happenswith market trades and payment plans.RUN->CLAUSE->NOW!--- Let's say a party needs to DIRECTLY trigger one of the clauses onthe contract. For example, perhaps an escrow user wishes to activate aclause in order to DISPUTE THE OUTCOME, or perhaps an arbitrator wishesto activate a clause in order to RENDER A JUDGMENT.OT's smart contracts can do these sorts of things, limited only by yourimagination, and my code. These sorts of actions are, of course, subjectto the logic in the contract. (Perhaps the contract disallows Alice fromexecuting certain clauses. YOU decide.)----------------------------------------...But wait, there's more!   CALLBACK CLAUSES!--- You can also define CALLBACK SCRIPTS: These scripts fireautomatically whenever OT needs an ANSWER to some important question.Such as:- "Is Alice allowed to cancel this agreement?" (Your script returns trueor false.)- "Is Bob allowed to trigger the DISPUTE clause?" (Your script returnstrue or false.)As long as you provide the script, YOUR logic can be there 24 hours aday, making decisions for your best interests, while you're off sippingcocktails and getting arrested at Occupy Protests.----------------------------------------A SIMPLE EXAMPLE --- "Two-way trade"Here's a sample "OnActivate()" clause from my very first (test)smartcontract, which implements a two-way-trade (where Bob doesn't gethis clams unless Alice also gets her gold at the same time).Notice the entire functionality, while bare-bones, is implemented inthis single OnActivate() clause, with deactivate_contract() being calledat the bottom.(This smart contract deactivates nearly instantly after activating --its job is already done  ------------var alice_pays     = "140"var bob_pays       = "100"var bStAli  = stash_funds(alice_first_acct, "first_stash",  alice_pays)var bStBob  = stash_funds(bob_second_acct,  "second_stash", bob_pays)if (!bStAli || !bStBob){   if (bStAli)   {     var b01 = unstash_funds(alice_first_acct,"first_stash",alice_pays)   }   if (bStBob)   {     var b02 = unstash_funds(bob_second_acct,"second_stash",bob_pays)   }}else{   var b11 = unstash_funds(bob_first_acct, "first_stash", alice_pays)   var b12 = unstash_funds(alice_second_acct,"second_stash", bob_pays)   // This is a variable in the smart contract. (Not declared inside   // this script, yet still accessible from within it.)        bSuccess = true } deactivate_contract()----------------------------------------(NOTE: the above is not the entire smart contract, but merely theOnActivate() clause for that contract.)You might ask: Why all the stashing? Why not just move the fundsdirectly, without stashing them in between?Answer: actually, I tested it both ways, debugging move_funds() first,followed by stash_funds()   Next I'm going to write a bigger smartcontract:  "Escrow for an offlineshipment, with disputing and arbitration clauses."I'll send you a camtasia video once I have it running ----------------------------------------You didn't think we were done, did you?    EVEN MORE new features:--- OT now supports USAGE CREDITS (a config option), which means serveroperators can now earn transaction FEES, even anonymously! (Functionshave been added to the API for getting and setting these credits.)--- A complete set of PERMISSIONS have been added to the OT Server,allowing you to switch on-or-off individual messages and transactiontypes.You want to disallow everything but cheques? Or disallow the issuing ofnew asset types? Flip the switch.--- Permissions were also added for server lock-down, and, for example,locking out transactions only (leaving messages active.) Etc.See ~/.ot/server.cfg for a complete list of options.----------------------------------------The first Open-Transactions TEST SERVERS are starting to pop up!   https://bitcointalk.org/index.php?topic=53329.0   Others are being discussed at #opentransactions on irc.freenode.net----------------------------------------Oh and FYI, the OT project donation address is:   1NtTPVVjDsUfDWybS4BwvHpG2pdS9RnYyQ   (Bitcoin, of course.)My favorite donation is actually "volunteer programmers" -- plenty ofwork to be done!  Chrome plugin, Firefox plugin, OSX Native app, QT App,Windows Native app, iPad, iOS, Android, I2P integration, TAHOE-LAFSintegration, Magneto (and other shopping cart) plugin, POS system,crypto cards... the list goes on and on.// ******************************************************************// THAT'S ALL FOR NOW!//// I leave you with an example of the new OT Client-side Scripting...// The entire OT Client API is now accessible through these OT scripts..//// Below is a sample script, where Bob is signing on as a party// to a smart contract (just prior to activation on a server):#! /usr/local/bin/ot --script// This temp variable is used for storing a "running copy".var strSmartContract = ""OT_API_Output(0, "\n\n\nThis script assumes you have already used:create_two_way_trade.ot and sign_trade_as_alice.ot \n")OT_API_Output(0, "To continue, paste or pipe the smart contract that wascreated, followed by ^D \n")strSmartContract = OT_CLI_ReadUntilEOF()// This is where we go from creating a generic , re-usable template,// to actually INSTANTIATING the contract for SPECIFIC USERS in a// specific situation!// BY THIS POINT, if we're going to ACTIVATE this up-until-now purely// THEORETICAL smart contract, using ACTUAL Nyms and Accounts, then we// need to check and see if they have enough transaction numbers to// move forward!//// -----------------------------------------------var numCountNymBob = OT_API_GetNym_TransactionNumCount(Server, HisNym)var numCountNeededBob =OT_API_SmartContract_CountNumsNeeded(strSmartContract, "agent_bob")var bSuccess = false;// -----------------------------------------------if (numCountNymBob >= numCountNeededBob){  OT_API_Output(0, "Paste Bob's FIRST asset ACCOUNT ID (Bob will RECEIVEto this account, from Alice). Default:[w06QIURsSDV7sdWWvyPSxRaiv4T2MUQbJyWmIKxSmuL]: ")  var strBobFirstAcctID = OT_CLI_ReadLine()  if (strBobFirstAcctID.size() < 2)  {    strBobFirstAcctID ="w06QIURsSDV7sdWWvyPSxRaiv4T2MUQbJyWmIKxSmuL".to_string(); // Bob'sdefault "first account" (for testing, from the test data.)  }     OT_API_Output(0, "Confirming Bob's first account...\n")  // --------------------------------------------  var strSmart9 = OT_API_SmartContract_ConfirmAccount(strSmartContract,HisNym, "party_bob", "bob_first_acct", "agent_bob", strBobFirstAcctID)  strSmartContract = strSmart9  // -----------------------------------------------  if (strSmartContract.size() > 0)  {    var strBobSecondAcctID = HisAcct    if (HisAcct.size() <= 0)    {      OT_API_Output(0, "Paste Bob's SECOND asset ACCOUNT ID: ")      strBobSecondAcctID = OT_CLI_ReadLine()    }    OT_API_Output(0, "Confirming Bob's second account...\n")    strSmart9 = OT_API_SmartContract_ConfirmAccount(strSmartContract,HisNym, "party_bob", "bob_second_acct", "agent_bob", strBobSecondAcctID)    strSmartContract = strSmart9    // --------------------------------------------------    if (strSmartContract.size() > 0)    {      OT_API_Output(0, "Confirming Bob as a PARTY to the smartcontract...\n")      var strSmart10 =OT_API_SmartContract_ConfirmParty(strSmartContract, "party_bob", HisNym)      strSmartContract = strSmart10      // --------------------------------               if (strSmartContract.size() > 0)      {        bSuccess = true      }      else      {        OT_API_Output(0, "\n\n** Sorry -- Bob's ConfirmParty callFAILED!\n\n")      }    }    else    {      OT_API_Output(0, "\n\n** Sorry -- Bob's second ConfirmAcct callFAILED!\n\n")    }  }  else  {    OT_API_Output(0, "\n\n** Sorry -- Bob's first ConfirmAcct callFAILED!\n\n")  }}// --------------------------------------------------if (!bSuccess){  // *********************************************  // Take the transaction numbers BACK!     OT_API_Output(0, "SMART CONTRACT: Since this script failed, I'mclawing BACK all the transaction numbers now (that way my data staysgood.)\n")     OT_API_HarvestAllNumbers(Server, HisNym, strSmartContract);}// SUCCESS!!!else{  OT_API_Output(0, "Final smart contract, ready for activation:\n\n")  print(strSmartContract)} How about this:Everyone is allowed to vote--BUT they're only allowed to use those votes for political decisions (They're not allowed to "take a vote" when it comes to basic human rights like life/liberty/property, since those things are sacrosanct. Instead, voting is restricted to political decisions only.)"You shall not go after the majority to do evil.Neither shall you testify in a matter of strifeto incline after the majority to pervert justice."Exodus 23:2"Do not pervert justice;do not show partiality to the pooror favoritism to the strong,but judge your neighbor fairly."Leviticus 19:15"Hate evil, and love good,and establish justice in the courts."Amos 5:15"Justice, and only justice, you shall follow, that you may live andinherit the land that the Lord your God is giving you."Deuteronomy 16:20http://bastiat.org/en/the_law.html#SECTION_G002Life Is a Gift from GodWe hold from God the gift which includes all others. This gift is life  physical, intellectual, and moral life.But life cannot maintain itself alone. The Creator of life has entrusted us with the responsibility of preserving, developing, and perfecting it. In order that we may accomplish this, He has provided us with a collection of marvelous faculties. And He has put us in the midst of a variety of natural resources. By the application of our faculties to these natural resources we convert them into products, and use them. This process is necessary in order that life may run its appointed course.Life, faculties, production  in other words, individuality, liberty, property  this is man. And in spite of the cunning of artful political leaders, these three gifts from God precede all human legislation, and are superior to it. Life, liberty, and property do not exist because men have made laws. On the contrary, it was the fact that life, liberty, and property existed beforehand that caused men to make laws in the first place.What Is Law?What, then, is law? It is the collective organization of the individual right to lawful defense.Each of us has a natural right  from God  to defend his person, his liberty, and his property. These are the three basic requirements of life, and the preservation of any one of them is completely dependent upon the preservation of the other two. For what are our faculties but the extension of our individuality? And what is property but an extension of our faculties? If every person has the right to defend even by force  his person, his liberty, and his property, then it follows that a group of men have the right to organize and support a common force to protect these rights constantly. Thus the principle of collective right  its reason for existing, its lawfulness  is based on individual right. And the common force that protects this collective right cannot logically have any other purpose or any other mission than that for which it acts as a substitute. Thus, since an individual cannot lawfully use force against the person, liberty, or property of another individual, then the common force  for the same reason  cannot lawfully be used to destroy the person, liberty, or property of individuals or groups.Such a perversion of force would be, in both cases, contrary to our premise. Force has been given to us to defend our own individual rights. Who will dare to say that force has been given to us to destroy the equal rights of our brothers? Since no individual acting separately can lawfully use force to destroy the rights of others, does it not logically follow that the same principle also applies to the common force that is nothing more than the organized combination of the individual forces?If this is true, then nothing can be more evident than this: The law is the organization of the natural right of lawful defense. It is the substitution of a common force for individual forces. And this common force is to do only what the individual forces have a natural and lawful right to do: to protect persons, liberties, and properties; to maintain the right of each, and to cause justice to reign over us all. I'm not afraid of the detention camps popping up all over my country. After all, I'm not a criminal. I've got nothing to hide. If you are against them, then you are probably a criminal.  No offense taken. My only point is, if I'm saying it can/will be done, but it's not a quick and easy job, most likely it will take much longer than I estimate, not shorter. I wish this wasn't the case since I don't want to spend weeks/months of my life slaving over a Ripple implementation if I could do it in less time :-P  But I'm only trying to be accurate.The clients definitely need to compare notes on the public mint file, to prevent the server from removing the untraceability of the cash.On top of that, the ultimate long-term solution for auditing will need some kind of "central location" (a DHT or whatever) for transferring receipts. This way the auditor can have access to the same place that the users get their receipts, which preferably is stored in a distributed fashion. What that will be in the long term, whether some combination of Namecoin, Tahoe, i2p, Freenet, etc, I cannot say. gmaxwell and jtimon are both right--from a certain point of view.gmaxwell is correct that anonymous reputations can be cheap, and that anonymous operators can cut and run. This is a problem that OT can only get around with the combination of unforgeable transactions and real-time auditing -- and I haven't coded the auditing part yet!As jtimon pointed out, however, even having a low-trust transaction server doesn't save us from still having to trust the issuer, since he is actually holding our gold!In the case of Bitcoin, the best solution I have (also not coded yet) is voting pools on the Bitcoin blockchain, ACTING as "Bitcoin issuers" in order to prevent individual transaction servers from disappearing with Bitcoins that were bailed into them. But even in this case, what if all the voting pool members are secretly owned by the same entity? Quite a conundrum, isn't it? If I, as the programmer, write up a big description of how it will all work (which I did) and estimate that the job will take me at least a couple of weeks, do you really want to argue that it can actually be done in hours, or days? I invite you to fork the code and show me.Normally the wise thing to do, when a programmer estimates anything, is to double or triple his estimate--not guess lower.I said it would do it, and it's coming -- it's just not a small job. (Remember I have to work it into OT's existing paradigm, otherwise why bother integrating? Might as well just run one of the existing Ripple servers...) Currently, BTW, I am still debugging the smart contracts in how they are integrated with OT's "destruction of account history" system."the OT server can't do what it wants with the accounts" -- Yes, very spot on. The OT server can't just change your balance, or forge any of your transactions, without getting your signature on the transaction first. That is one of the special things about OT.But another benefit is that the OT server is able to operate without storing any transaction history. (Normally, a server is otherwise forced to store transaction history...) This means that, while the OT server is still capable of tracing the Ripplepays (pseudonymously, anyway), if an adversary or abusive authority breaks into the hard drive, there won't be any transaction history there to be found.The other benefit is integration with the rest of OT's features. Like, even though the Ripple instrument wouldn't use the OT cash, you would still be able to have access to using the OT cash as part of using the same software, and you would be able to use those same funds in a Ripple-like way also, through the same system. (And cheques, vouchers, smart contracts, etc.)Yes, think of it like Tor directory servers. Tor is still p2p.Similarly, OT will want to run on I2P or Tor anyway, to gain the anonymity benefits.The future "real" OT client will need to be p2p for at least one reason:   So the clients can compare notes on the servers and insure they aren't actually tracking them through malicious public mint files. (If you receive a different and unique public mint file, compared to everyone else, then your cash is FULLY TRACEABLE... So clients will want to at least compare the mint hashes...) Sorry, but I don't see doing the entire Ripple implementation through the scripts. I suppose it's maybe theoretically possible, at best, but it's bad optimization and quite impractical. Ripple is coming to OT eventually but IMO it will require big code changes within OT itself. (Comparable to the changes made with finalReceipt or with adding smart contracts in C++.) It's on my list -- I'll get to it sometime soon.This will not be possible with OT, sorry.The reason is because the OT cash, while untraceable, must be deposited into an OT account before it can be traded on OT markets.So you can have pseudonymous Ripple, but not cash-based.It guess it would be possible to pay the next Nym in the Ripple by withdrawing cash and giving cash to that Nym, instead of paying to its account, but that would take some thought. And even so, it doesn't sound untraceable to do that, so probably not worth it. (The server can still see which people got the cash, since the server is the one calculating the route.)IMO the best way to have OT cash involved in Ripple would be to have a p2p Ripple protocol between the OT clients, and not to do Ripple the normal way (atomically on the server.) But to do that would be a whole new Ripple protocol than has ever been written before.I must say though, the first "real" OT client should be p2p, so maybe something like that can be done in that future software. Well let's be up-front and honest about OT's disadvantages as well:-- Brand new, experimental. -- Open-source library, not a commercial product.-- Still needs code scanning, auditing, testing, profiling, load testing, beta testing, Q/A, etc.-- Zero budget.-- Lone contributor (this is now changing. People are starting to pop up.)-- While there are many potential real-world applications, so far there are zero actual real-world applications.-- Difficult for people to understand (incorporates many different financial-crypto "tricks" and integrates them.)-- See the issues list at github, as well as grep -i the code for "todo".This is an open source library, meant for all to use where they find it useful, and meant to grow with the entire community. OT cannot be pigeonholed like a single product, nor is it meant to compete with any single product. Most of what I write here is only meant to raise awareness of the difficult concepts involved, and to widen experimentation with and use of these concepts.  I see OT as a "reference implementation", if anything. Moneychanger also. The rest will have to come from all of you.-FT That's the idea.Answer: https://github.com/FellowTraveler/Open-Transactions/wiki/CENTRALIZED--------------------------------What does Open-Transactions get you, that you can't do on the blockchain?-- Fully-anonymous and untraceable cash.-- Instant finality of settlement.-- A variety of different instruments (markets, cheques, etc)-- A variety of different currencies.This is why people in the Bitcoin community are already building these sorts of systems. What is MtGox, but a "centralized" Bitcoin exchange?  The difference is, an Open-Transactions server operator cannot change your "account balance" at whim -- and even if the server disappears entirely, no one gets fucked. Contrast that with the recent MyBitcoin debacle... people will continue getting fucked until they prefer systems with cryptographic integrity. This is why Voucher-Safe is cash-only: because it enables the issuer to audit the receipts, but maintains full-anonymity and untraceability. (You can run OT in cash-only mode for a similar effect...)-FT Yup it seems to work!  (Smartcontracts branch being necessary -- I will merge it back to master ASAP once I fix another 1 or 2 things...)The default latency in ~/.ot/client.cfg and server.cfg is 200 ms, which I knew would be too short, so I set those to 800 ms and restarted the GUI (Moneychanger.)Then I added your server contract, as well as your three asset contracts (Digi-BTC, Digi-DVC, and Digi-NMC).Then we were able to send transfers and cheques, etc back and forth...Presumably if there were BTC/NMC offers on your market, I could go and make an offer myself...It's pretty cool to finally use my own software through someone ELSE's server, someone ELSE's contracts....Thanks for getting it up and running  :-)-FTPS big announcement coming soon, smart contracts. You can do this now...You can issue a contract with whatever legal terms you wish, and distribute shares in that issue. People can trade those shares on markets.You can also write scriptable clauses, that will stash funds from the listed accounts, or make payments on a regular schedule, etc.
Hi all,FYI, I will be in London Dec 6th - 13th.I'll be busy much of the time, but if anyone wants to arrange a meeting, or slip some polonium in my sushi, that will be your opportunity.-Fellow Traveler. Someone already mentioned Namecoin in the thread, I noticed. Hi all,I'm sure many of you have heard of the new /r/darknetplan reddit -- since SOPA, the membership has surged past 10,000. Lots of people seem very interested now in creating a new mesh net that cannot be centrally controlled.I've said for a long time that I believe there is great potential in using digital cash technology to solve issues of resource allocation on mesh networks and anonymous networks.There is discussion on this thread today of using Bitcoin to accomplish this for the new darknet: http://www.reddit.com/r/darknetplan/comments/mnjwb/digital_cash_is_vital_for_solving_issues_of/Some people involved in the meshnet discussion seem convinced that their solution is to simply require symmetry between the nodes, but I think Bitcoin is a far more ideal solution. You guys may find interest in the thread.-FT Hi.  As others have mentioned, Open-Transactions might be a good solution. It makes possible:1) OT enables untraceable / anonymous cash transactions (when using the cash instrument.) There are a variety of other instruments such as cheques, markets, cashier's cheques, basket currencies, etc.2) Destruction of Account History: OT enables all parties to prove which instruments are valid, as well as which transactions have cleared, without storing the transaction history, but instead by only storing the last signed receipt. (Your "account" and your "balance" are actually just your last signed receipt.)3) OT servers are not able to forge your transactions or change your balance without your signature.4) An issuer of any currency can issue on multiple OT servers. If the server disappears, the issuer can reissue their funds onto another server.5) Soon a solution is coming that will make (4) possible with Bitcoins (through voting pools on the Bitcoin blockchain, made possible by the Bitcoin built-in scripting language.)6) OT features instant transactions.  (No 10-minute wait.)7) I have just coded smart contracts (scriptable clauses on OT contracts).  It's not debugged yet, but you can check out the smartcontracts branch on Github if you're curious. It's designed so it's easy to swap in whatever scripting language you prefer.If you want to read more, there are plenty of materials and articles available here: https://github.com/FellowTraveler/Open-Transactions/wiki The smart contracts (coming soon) are coded such that it's very easy to swap in different scripting languages. So if you want to play around with that on OT, you will be able to do so.FYI, the OT untraceable cash works through Chaumian blinding. (Blind signatures.)So for example, if you want to withdraw, say, 100 clams, then you send a withdrawal request, including a random ID that's been blinded using the 100 clam key (public key) for that mint.The server doesn't know the ID for the token, since you blinded it (encrypted it) before sending the request.  The server just signs it using the 100 clam (private key) for the clams mint. The server also removes 100 clams from your account.When you receive the reply, your client software (moneychanger, for example, or any software using the OT API) then UNBLINDS it using the (public key) for the clams mint.You now have a valid, server-signed 100 clam token.  The server does not know the ID for that token (since it was blinded when the server signed it.)When the 100 clam token is redeemed (by whoever I paid it to), then server is able to verify that the signature on the token is valid. However, the server is unable to see where the token originally came from, since the server is seeing the ID for the first time.After redemption, the ID is then stored in a spent-token database in order to prevent anyone from spending it again.Once the mint expires (they rotate) then you can delete the spent token database for that series, which eliminates any need to store the (growing) spent token database forever. (No one will run a server if they have to store a growing database forever....)I'm currently using Ben Laurie's Lucre library to do the actual blinding. You can read the white paper here:  http://anoncvs.aldigital.co.uk/lucre/Someday soon I will also add credlib, since OT is designed to make it easy to add new algorithms. FYI, this is accurate for OT.The issuer sends a signed message to OT, issuing the currency. The issuer can then go offline while users continue transacting the currency without him. The issuer could issue the same currency on multiple OT servers. It's like Diaspora: each user has their own data, and can switch to any Diaspora seed they wish, and while there are multiple seeds, the users only see a single, giant social web, since the connections to the various seeds are handled behind the scenes. OT is the same way. The OT wallet may redeem one instrument here, and another there, which is intended to be as seamless to the user as possible. (Still a true OT client has yet to be written, since Moneychanger is only a test client, and does not have the GUI flow that a real client will have.)The end result of any transaction is a signed receipt in the hands of the user, which can be redeemed at the issuer in the event that the OT transaction server disappears, and re-issued onto a new server, if you wish.Every party (the server, the issuer, and the other users) is able to prove which instruments are valid, and which transactions have closed, as well as his current balance, using only his last signed receipt.The server cannot forge any of your transactions, or change your balance. (YOU must sign first.)-----------------------I think the only possible improvement, in terms of decentralized registration of ownership, is to use a blockchain, such as Bitcoin or Namecoin, which I think is the best way to do this. But in that case, you also lose certain capabilities inherent in OT, such as untraceable cash, and instant finality of settlement.Therefore I prefer to use Bitcoin / Namecoin as layers, just as OT is just another layer, in a larger overall solution. In fact, Bitcoin will solve very specific problems for OT that are not, so far, solvable in any other way.-FT Hi Retired,Thank you for your kind words. The software is a work-in-progress, and has been a personal project, so I don't really have any schedules or timetables. I work on OT when I can.I encourage you to fork Moneychanger, or develop a Chrome plugin, or Android app, for OT. There is an endless mountain of work.A shout-out to da2ce7 who has recently been contributing pull requests to OT and developing related projects:  https://github.com/da2ce7-Fellow TravelerP.S. My latest project, which I will be announcing soon, is a full implementation of smart contracts, agnostic to scripting language, which will allow users to design their own financial instruments by adding scripted clauses to their contracts.  If you are curious to see the progress, look at the github code for OT, there is a "smartcontracts" branch where I have been checking in commits every night (lately.) It's not done yet. "Go on down to the station and I'm sure they'll be happy to take your report." "Thanks for all your hard work!" is not good enough. IMO, You guys need to figure out an organized way to fund Gavin's work.  When he says, "It is embarrassing and astonishing that this critical a bug was not caught before the 0.4 release...Getting sufficient testing of code BEFORE it is released has been a chronic problem for this project..."...That is developer-speak for, "I need better Q/A volunteers or I need funding to pay for them, and it's embarrassing that I even have to say this in the first place when I should be focused on my code right now."Support your guy. Jesus Christ throws the moneychangers out of the temple....2000 years later, Pope Benedict calls for a global banking cartel.Fallen, fallen, is Babylon the great, and is become the habitation of devils, and the hold of every foul spirit, and a cage of every unclean and hateful bird. Sorry about that, feel free to move the thread to that forum. 1) Absolutely. At some point in the future OT will provide an implementation of Ripple, including atomic ripplepays.2) However it's a bigger job than you might realize. There needs to be a few classes added. For example, one for managing a Nym's various "creditlines." (The various issuer accounts a Nym will have for each asset type, as well as his own accounts denominated in the creditlines issued by his friends.) The object will be responsible for managing those accounts on behalf of each user, sending credit requests back and forth between the users, etc. There will also need to be a class for managing a Nym's Ripple offers and finding the paths for the Ripplepays. Such a class will probably make use of the existing OT market code, and will perform the atomic transactions that you speak of.3) Coming ASAP. (I do this stuff in my spare time so it might take a few months  Voting groups probably before Ripple.) Hi all,The latest release of Moneychanger / OT supports exchanging in-and-out of basket currencies.Moneychanger v0.06 GUI:  https://github.com/FellowTraveler/MoneychangerOT library v0.72b:            https://github.com/FellowTraveler/Open-Transactions/wikiPeople might ask, "Didn't OT already do baskets?" Well yes. But now it can do such exchanges inside the GUI itself.---------------------------------The markets code is also pretty stable/solid. (Lots of debugging was done in markets for this latest release.)-FT Congratulations! And great work.We're getting closer to a high-level interface? Open-Transactions new release: v0.71Don't miss the OT video walkthru:  http://vimeo.com/28141679http://vimeo.com/28142096Bitcoin donations:  1NtTPVVjDsUfDWybS4BwvHpG2pdS9RnYyQ(A word on donations:  Thank you very much to those of you who havekicked down a few bucks to support this effort.  Even $100 will pay fora half-week of my Java coder's time, and those of you who have supportedthe effort have helped us to produce the now-functional Market Screen --shown in video 2 -- as well as the upcoming Basket screen, which we aredebugging now!)--------------------------------------------------------------In THIS ISSUE:*** The COMMAND LINE utility has big updates.*** The data folders have changed   (Now: ~/.ot/client_data and~/.ot/server_data)*** The "sudo make install" and "sudo make uninstall" were added.*** Lots of debugging was done in the core library.*** NEW POWER: finalReceipt and basketReceipts.*** finalReceipt and basketReceipt are powerful additions to OT'sreceipt system, which bring OT's recurring transactions, basketcurrencies, and markets fully into compliance with the doctrine of"destruction of account history".*** Finally, thoughts on RIPPLE, which is now theoretically possiblewithin OT (due to the above changes with finalReceipt and basketReceipt.)----------------------Latest code:  https://github.com/FellowTraveler/Open-TransactionsBinaries:  https://github.com/FellowTraveler/Open-Transactions/downloads(This release covers the core OT server and API only, not the GUI. Anupdated release of the Moneychanger GUI is planned for the next week ortwo.)-------------------------Let's go over everything in closer detail:DATA FOLDERS-- The default data folders have changed to:   ~/.ot/client_data and~/.ot/server_data-- These locations are configurable in ~/.ot/ot_init.cfg-- There are also the config files: ~/.ot/client.cfg and ~/.ot/server.cfg-- I'm open to any IDEAS about VALUES that should be configurable in thevarious ini files Thoughts?-- A fresh copy of the OT sample data is located:Open-Transactions/ot-sample-data-- (The cash mint had recently expired for the silver grams, so Iregenerated it.)--------------------------------------------------------------MAKE INSTALL-- "sudo make install" has been added. It copies the contents ofot-sample-data into ~/.ot-- It also copies transaction.exe (the server) to /usr/local/bin/ot_server-- It also copies testwallet.exe (command-line utility) to /usr/local/bin/ot-- "sudo make uninstall" was also provided for your convenience.-- If you ever want to start over with fresh data, just go to theOpen-Transactions folder and type this:           sudo make uninstall && make clean && make && sudo make install--------------------------------------------------------------COMMAND LINE UTILITY-- Lots of updates were made to the command-line version of OT.-- After installation, try "ot -?" to see the command-line options.-- Certain default values are provided in ~/.ot/command-line-ot.optFor example, you don't have to specify: --server SERVER_ID --mynymNYM_ID --myacct ACCT_ID with every single command-line run, sincedefaults are provided in that file.  This means commands can be usedsuch as:ot --balanceot --withdraw 500ot --transfer 50 --hisacct RECIPIENT_ID===> Can't you imagine the above commands as URLs, instead of ascommands at the unix shell?===> VOLUNTEER WANTED:  create a Google Native Chrome version of OT,that enables URLs that perform the ABOVE sorts of commands.--------------------------------------------------------------$   ot -?For this first rev, here is the command-line output when you type:   ot -?Server default: 8dlRJnGCjqU5jw7bZaw2AF112UrCZiFfBS9CnJrMWSpMyAcct default: sSBcoTlTkYY8pPv6vh2KD6mIVrRdIwodgsWDoJzIfpVMyNym default: T1Q3wZWgeTUoaUvn9m1lzIK5tn5wITlzxzrGNI8qtaVMyPurse default: lV6acfWoWKB7BcuIXCzvS4aSiqUOjlGgVTyepg1aAsaOT CLI Usage:ot  --stat            (Prints the wallet contents)ot  [-h|-?|--help]    (Prints this help)The '|' symbol means use --balance or -b, use --withdraw or -w, etc.The brackets '[]' show required arguments, where default values arenormally expected to be found in:   ~/.ot/command-line-ot.optot  --balance  | -b          [--myacct <acct_id>]   (Display accountbalance)ot  --withdraw | -w <amount> [--myacct <acct_id>]   (Withdraw as CASH)ot  --transfer | -t <amount> [--myacct <acct_id>] [--hisacct <acct_id>]ot  --cheque   | -c <amount> [--myacct <acct_id>] [--hisnym  <nym_id> ]ot  --voucher  | -v <amount> [--myacct <acct_id>] [--hisnym  <nym_id> ]ot  --depositcheque  [--myacct <acct_id>]   (Deposit a cheque.)ot  --depositpurse   [--myacct <acct_id>]   (Deposit a cash purse.)ot  --deposittokens  [--myacct <acct_id>]   (Deposit individual cashtokens.)ot  --inbox    | -i  [--myacct <acct_id>]   (Display the inbox.)ot  --sign     | -s  [--mynym  <nym_id> ]   (Sign a contract.)ot  --verify         [--mynym  <nym_id> ]   (Verify a signature.)ot  --purse    | -p   <arguments>           (Display a purse.)  Arguments:     [--mynym  <nym_id> ] [--mypurse <asset_type_id>]ot  --refresh  | -r  [--myacct <acct_id>]    (Download account filesfrom server.)ot  --refreshnym     [--mynym  <nym_id> ]    (Download nym files fromserver.)ot  --marketoffer    [--mynym  <nym_id> ]    (Place an offer on a market.)Also, [--server <server_id>] will work with all of the above.Recurring payments:ot --proposeplan  <arguments>   (Merchant)  Arguments: [--mynym  <nym_id> ] [--myacct  <acct_id>]  (continued.)  Continued: [--hisnym <nym_id> ] [--hisacct <acct_id> ]ot --confirmplan  <arguments>   (Customer)ot --activateplan <arguments>   (Customer again)  Arguments: [--mynym  <nym_id> ] [--myacct  <acct_id>]MORE soon.-------Whenever dealing with IDs at the command-line, specifically My Nym,MyAccount, My Purse, etc** PARTIAL IDs ** are now accepted!  OT will try to find it first as acomplete ID, and if that fails, then it will re-search as a partial ID.It is still case-sensitive, though.--------Most will continue to prefer the OT GUI over a command line utility:https://github.com/FellowTraveler/MoneychangerBut a command-line is still a valuable tool, so** please send me any feedback based on YOUR NEEDS **so we can shape it into the best tool it can be.--------FOR THOSE FASCINATED WITH TRIPLE-ENTRY ACCOUNTING.(A description of the improvements made to receipts in the latestrelease of OT.)Warning:  boring accounting details below...-- finalReceipt and basketReceipt are powerful additions to OT's receiptsystem, which bring OT's recurring transactions, basket currencies, andmarkets fully into compliance with the doctrine of "destruction ofaccount history".BACKGROUND (using chequeReceipt as an example):In order to perform any transaction, the OT client must use atransaction number. These numbers are signed-for ON EVERY SINGLE RECEIPT-- until they are closed.For example, if you write a cheque, #47, then the #47 will appear onevery receipt going into the future, for *every* transaction that youdo, until that transaction #47 is closed.When will it be closed? When the cheque is cashed, the chequeReceipt #47will appear in your inbox.  YOU must accept it, before #47 will beclosed -- which removes it from your inbox, AND signs-off on the latestaccount balance.You see, since your balance is CHANGED whenever a cheque you wroteCLEARS, the server is thus forced to keep a copy of that chequeReceiptin your inbox, in order to prove the current balance, since that chequehas your signature on it.  (The current balance, FYI, is your lastsigned balance, which the server already has on the most receiptreceipt, minus the amount of the cheque, which also features #47 -- avalid number -- and YOUR SIGNATURE.)Once you sign to accept the chequeReceipt, it disappears from yourinbox, the latest balance is signed, and #47 disappears forever fromyour list of "Issued Transaction Numbers". (That is, you no longer haveto sign for #47 on any of your future receipts, since #47 is now CLOSED.)IN SUM: "To perform a transaction, you must burn up one of yourtransaction numbers. And you need to sign for those in advance beforeyou can use them. AND you need to CONTINUE signing, on into the future,for any transaction number that has been used, UNTIL YOU FINALLY SIGN TOCLOSE it."--------NOW LET'S examine the latest updates to OT:      FINAL RECEIPT and BASKET RECEIPTAll of the above still holds true; chequeReceipt still operates exactlythe same, as do the receipts for transfers, withdrawals, deposits, etc.Those are the same.===> But, for Markets. (and other recurring transactions...)-- When Alice places an offer on a market, the server saves a copy ofher signed offer. BUT THIS TIME, *THREE* transaction numbers areprovided instead of one: an opening number, and a closing number forEACH asset account, of which there are two. (She is buying bushels ofwheat in return for dollars. Therefore she has a WHEAT account and aDOLLAR account.)-- As various trades process on the market over time (against her marketoffer), marketReceipts will appear in Alice's inbox for her wheataccount, and her inbox for her dollar account. Each marketReceiptcontains a copy of Alice's ORIGINAL market offer, as well as an UPDATEDVERSION (showing the changes to her account balances as a result of eachtrade.)-- Remember that Alice has to sign for these 3 transaction numbers onALL of her future receipts, until they are closed out.  Let's say thenumbers are #9, #10, and #11.-- marketReceipts will continue to appear in Alice's inboxes over time,which she can remove by signing to accept them. This allows the serverto prove the latest balance for each account (as caused by each tradeand proven by each receipt.) So far, this much is similar to when yousign for a normal chequeReceipt.-- But now Alice cannot cancel her market offer!  Because what if newmarketReceipts are popping into her inbox from new trades so quickly,that she is unable to do a new balance agreement before a new one comesin? If she cannot sign a proper balance agreement, then she cannotperform the transaction necessary to cancel the trading (nor can sheclose out the numbers from her receipts, and out of her inbox!) She'strapped.===> THIS IS WHY there are now THREE transaction numbers for a marketoffer (say #9, #10 and #11): Because when the "Cancel Market Offer"message is sent, it requires no balance agreement at all! Instead, theseactions occur:1) Transaction #9 is permanently closed, and will not appear on anyfuture receipts.2) Transaction #10 appears as a FINAL RECEIPT in Alice's WHEAT inbox (inreference to #9.)3) Transaction #11 appears as a FINAL RECEIPT in Alice's DOLLAR inbox(in reference to #9.)===> Trans#'s 10 and 11 stay open. (For now.)===> The finalReceipts in each inbox prove when the offer was officiallyclosed. (Whether by Alice, or by some other natural expiration. This iswhere smart contracts will figure big, in the future.)===> Alice's "last signed receipt" shows her inbox contents, and thesame receipt no longer shows #9 signed out -- she's not responsible for#9 anymore. Thus any marketReceipt appearing AFTER would automaticallybe INVALID. (No NEW balances changes are permitted, related to #9.)===> This means that new marketReceipts can never be dumped onto AliceAFTER she has closed a market offer (or payment plan.)From there, Alice can accept the various receipts in her inbox at herLEISURE--the trading has been stopped, no more recurring transactionscan occur, and the finalReceipt proves this.THE TRICK IS:  #10 and #11 are still open, and they REFER to #9. Inorder to finally CLOSE those finalReceipts for #10 and #11, which bothrefer to #9 -- OT requires Alice to ALSO close any other marketReceiptspresent in those inboxes, that ALSO refer to #9. (That is, thefinalReceipt cannot be removed until those related receipts are alsoremoved.)===> This way, OT is guaranteed that all of Alice's WHEAT balancechanges (shown in the marketReceipts in the wheat inbox) will besigned-for by the client and CLOSED OUT properly before finalReceipt#10itself is closed out.===> Similarly, all of Alice's DOLLAR balance changes (shown in themarketReceipts for her dollar inbox) will also be signed for by theclient and CLOSED OUT properly before finalReceipt #11 itself is finallyclosed.===> Thus, by the time the finalReceipts #10 and #11 are finally closed,ALL RECEIPTS will have been closed related to this market offer, and allbalances have been agreed, for Alice's wheat account AND her dollar account.I find this very interesting because it takes the concept of"Destruction of Account History" as pioneered by Bill St. Clair andPatrick Chkeroff, and adapts it to recurring transactions suchas market offers and PAYMENT PLANS.This innovation is unique to OT, as far as I know.-----------------------------------------------------------------------The same concept has also now been adapted for OT's BASKET CURRENCIES.When you exchange into a [dollar/gold/bitcoin] basket, you must actuallysupply your dollar account, your gold account, and your bitcoin account,so that OT can remove the the appropriate amount of dollars, gold, andbitcoins from those accounts, in order to credit you with the new basketunits during the exchange.The OT client will now provide **4** transaction numbers in order toperform the exchange:#9  The main basket account's basketReceipt#10 The dollar account's basketReceipt#11 The gold account's basketReceipt#12 The bitcoin account's basketReceiptWhen the exchange occurs, the client does NOT have to sign any balanceagreements. Instead, a basketReceipt is dropped into EACH INBOX, and thebalance agreements can be signed later, whenever the client wants tofinally close out those receipts.OTHERWISE, THE CLIENT WOULD HAVE TO PROVIDE a full balance agreement forevery single account, all at once, in order to perform the exchange! Theserver would also have to verify all 4 of these balance agreements inorder to process it!That would be unwieldy. What if there were 10 asset accounts in thebasket, or 50? Must I perform 50 balance agreements in order to do asingle transaction?INSTEAD, THINGS ARE EASY: a basketReceipt is simply dropped into theinbox for each constituent account, and the user can close thosereceipts later, the same as he would close a chequeReceipt ortransferReceipt, signing the new balance at that time.I find this very interesting because it takes the concept of"Destruction of Account History" and adapts it to BASKET CURRENCIES.-----------------This means:===> finalReceipt means that OT can perform transactions that PROCESSREPEATEDLY OVER TIME, even hundreds of times, yet it maintains thesecure paradigm of "destruction of account history."===> basketReceipt means that OT can perform transactions that processacross ANY NUMBER OF ASSET ACCOUNTS -- even dozens of asset accounts ina single transaction -- yet it still maintains the secure paradigm of"destruction of account history."===> This means that a new transaction type involving MULTIPLE TRADEScan be processed based on STANDING OFFERS, WITHOUT forcing a signaturefrom each client at each stop along the way.This is awesome IMO!-----------------------------I'm sure you can see where I'm going with all of this...   **** RIPPLE ****The latest changes to receipts are what will make it possible toeventually add RIPPLE CREDIT LINES and RIPPLE FLOWS to OT!Of course that will require a whole other set of code, which I will haveto get around to at some point when I can afford it, but it will somedaybecome possible to extend "credit lines" between Nyms, and then have"Ripple Markets" where payments can flow p2p between the various creditlines.This is made possible by the new receipt code, since instead of havingto sign for each individual transaction during a "Ripple Flow", creditlines will involve STANDING OFFERS, which will process according totheir terms as long as the transaction stays open! (The same way asmarketReceipts do now -- until the credit line is closed, and the"finalReceipt" is thrown.)So this release gets us closer to using OT as Ripple, although morewould still need to be coded, such as the CreditLine object itself, andthe RippleMarket, etc.It will probably be months before anyof this actually gets coded, but you might enjoy the thoughts recorded.Happy September!  And remember, the time is short.Your friend,-Fellow TravelerPS NEED VOLUNTEERS:    iOS client, Mac client, Google Native Chrome,Android client, Windows client, QT client, Bitcoin integration,Bittorrent integration, TAHOE-LAFS integration, Freenet integration, i2pintegration, mixminion integration, Tor integration, Firefoxintegration, Thunderbird integration... You will have to talk to your experts on the Bitcoin side of things. My initial impression would be, no. If you give the power to a voting pool, and the POOL ITSELF decides to collude, then I believe the security would break down at that point. Since the pool should always vote 100% in the same direction every time, you can require 90% or 95% votes, which IMO are safer than 51% (or worse: trusting the security of a single server, such as mtgox or mybitcoin, as everyone currently seems to do.)-- The transaction servers cannot forge a user's signature, therefore a transaction server can never fake YOUR receipts.-- But the transaction server could potentially create a DUMMY account (where it controls the keys on BOTH sides), and then have the dummy account submit a false balance statement (showing a high balance), and then the server signs it. (While this doesn't allow the server to fake any of YOUR receipts, which is impossible, it DOES allow the server to inflate the currency as a whole.)-- However, these illicit, inflationary funds cannot actually be spent without flowing into real accounts, where they will show up on an audit.Yes, the mechanism is to have the registrations and receipts deposited into a DHT for the users to retrieve, and give the issuer a key to read them. (In the case of Bitcoin, a voting pool acts in the role of the issuer.) If the issuer performs real-time auditing, then he will catch problems the instant they occur. But if instead he audits once per day, then he will probably place a 36+ hour delay on out-exchanges.-FT Hi,The connection info for the server is stored in the SERVER CONTRACT.The user doesn't work with a server address, he works with a contract ID. (The ID is a hash of the contract.) OT is smart enough to load up the appropriate contract, based on its ID, and find the connection info inside.This way, you can store connection info for Tor, I2P, Freenet, etc, and since the contract is signed, you don't have to worry about getting a bad address to a malicious server.Presumably if you were using OT to handle the monetary system of a game, then you would be running your own transaction server, and you'd make your server contract available to your players, or have it built into the client, or whatever.I suggest you watch the OT walkthru video, and market video, to get a better understanding of how it all works: https://bitcointalk.org/index.php?topic=39255.msg479354-Fellow Traveler FYI, I just posted a video walkthru of OT, which will probably help you a lot in understanding the concepts, and what it actually does.Check it out here: http://vimeo.com/28141679 On OT, the issuers must be trusted with the reserve assets. For example, if the issuer was Pecunix, even perfect fidelity on the part of OT software doesn't change the fact that they are holding your physical gold (or paying someone to do so), and therefore you must trust them--you must choose your issuers wisely, and be selective based on audit procedures, separation of powers, local jurisdiction, bonding, reputation, etc etc.When using OT to issue Bitcoin, you would similarly have to trust the issuer not to take off with your Bitcoins. MY PROPOSED SOLUTION FOR THIS is to exchange-in by transferring the Bitcoins to a list of Bitcoin addresses (instead of to a single one), each controlled by a different trustee. (Most likely each trustee is just another OT server. Their motive for participating is to become more competitive in their own businesses through engendering trust by using a respected pool.) This way, you don't have to worry about a single server stealing your Bitcoins, even if it gets hacked. (Because it can't out-exchange any coins without the approval of the other trustees in the pool.)There's more description of how it would work here: https://bitcointalk.org/index.php?topic=28565.msg363945#msg363945On the Open-Transactions side of this proposed protocol, signed receipts are employed. (The user's out-exchange is signed, then the OT server countersigns it, then it is sent to the pool for a vote.)The RULES of that vote (whether it is a majority vote, or 2/3rds, or 3/4s, or 9/10s) will be up to the pool members to decide. They might also have rules about each pool member identifying itself and its country of origin to the other pool members, or whatever.  Most of the time, the pool members will vote 100% in the same direction for every out-exchange. It's only in the rare case that a server disappears, that you need some wiggle-room in the vote (9 out of 10, instead of 10 out of 10.)  So you have to leave yourself enough room for that, but otherwise make the vote as strict as possible.The rules themselves will be coded in the BITCOIN BLOCKCHAIN, using the existing Bitcoin script language. So really you can set it up however you want to, within the confines of that environment. (To answer your question: If you don't want the Bitcoins to be "lost in the ether" then maybe you would set a timeout process on the bitcoin escrow, or maybe you would change it to 7 out of 10 instead of 9 out of 10. Etc. You do all of that in the Bitcoin blockchain.)-FT Unfortunately I haven't written up an official white paper yet, but there are some resources to understand the concepts...Open-Transactions is comparable to Ricardo, which is described at the high level, plus diagrams here:http://www.systemics.com/docs/sox/overview.htmlThe core account system is designed around "destruction of account history", an idea that was pioneered by Truledger."Truledger in Plain English" is the best introduction: http://truledger.com/doc/plain-english.htmlThe untraceable cash instrument is implemented with the Lucre library. White paper available here: http://anoncvs.aldigital.co.uk/lucre/Instructions for using the OT API:  https://github.com/FellowTraveler/Open-Transactions/wiki/Use-CasesI have written quite a few wiki articles, you can see the list here:https://github.com/FellowTraveler/Open-Transactions/wiki/_pagesSome of the messaging / transaction protocol is explained here:https://github.com/FellowTraveler/Open-Transactions/wiki/MessagingThe accounts are displayed for whatever server they are on.In the case of the video walkthru, I'm using a test server that is running on my own machine. (Via the "localhost" server contract, a test contract that comes with OT.) So yes, those accounts are "on my computer". Currently there is not a message that allows you to look up someone else's account and view the balance. (Of course, people are free to show you their last receipt.) It wouldn't be hard to add an API call that verifies such receipts, or that downloads the current balance for certain types of accounts.I think the main benefits that OT gives to Bitcoin are:1) Instant finality of settlement (instead of waiting for the 6 confirmations...)2) Untraceable and anonymous cash.3) Convertibility to other asset types on OT markets.4) (Soon) Safe storage of Bitcoins on OT servers, via voting pools on the Bitcoin blockchain. (To prevent incidents like happened at MtGox and MyBitcoin...)The benefits that Bitcoin gives OT:1) A universal medium between OT servers, with no 3rd parties necessary.2) A publicly-auditable reserve that cannot be confiscated or shut down.3) A network of existing exchangers and businesses who crave more functionality and safety for their Bitcoin.-Fellow Traveler
Note to admins: if this post is misplaced, please move it to a more appropriate place, thank you.Hi everybody!I made a video walkthrough of Open-Transactions. (Using the "Moneychanger" test-GUI available here: https://github.com/FellowTraveler/Moneychanger)It includes demos of OT nyms and contracts, issuing a currency, opening accounts, and using financial instruments (including cheques and untraceable cash).There's also some Bitcoin discussion, and a demo of the new Market screen on Moneychanger.First video:  http://vimeo.com/28141679Second video: http://vimeo.com/28142096I hope you enjoy it!Your friend,---FellowTraveler---------------------------------Bitcoin donation address for Open-Transactions:1NtTPVVjDsUfDWybS4BwvHpG2pdS9RnYyQ The server location is inside the server contract. You'll notice in the screenshots that Moneychanger has a list of server contracts. Whenever you perform an action on a specific server, OT simply loads up the appropriate contract and derives the connection info from inside of it.Currently OT ships with a test contract, which expects the server to be running on localhost.So basically, you need to run the server yourself, on your machine. Here are the steps to build OT and run the server:Code:git clone git://github.com/FellowTraveler/Open-Transactionscd Open-Transactionsmake javacd transaction./transaction.exeOnce the server is running, then you can connect to it using the Moneychanger client, which you can download here:https://github.com/FellowTraveler/Moneychanger/downloadsFrom Moneychanger, put the lib folder, as well as JavaWrapper.jar, into the Open-Transactions/testwallet folder. Then run the GUI like this:Code:cd Open-Transactions/testwalletjava -jar JavaWrapper.jarThis also assumes that you have OpenSSL 1.0.0 built properly for your machine, which can be tricky if you are running 64 bit Linux. See the OT Wiki for install notes, troubleshooting, etc. Here's a good link: https://github.com/FellowTraveler/Open-Transactions/wiki/Install-FT The MARKET screen is now functional on Moneychanger (the OT test-GUI):You can also use Open-Transactions to create pseudonyms:Issue currencies:Use financial instruments:Including untraceable digital cash:Sorry the Test-GUI is so ugly, but I promise that a real GUI would be much prettier: http://ft.vm.to/blogimages/ot-sample-gui.jpg-Fellow Traveler You are correct that OT is a library. Additionally, it is also a server, a client API, and a GUI test client (in Java.)You described its functions thusly: "for creating digital contracts, exchanging these contracts, signing them, checking signatures & so on. Is that correct?"Yes, but much more... OT enables you to issue CURRENCIES based on those contracts, and it enables anyone else to open ACCOUNTS in those currency types. It also enables users to withdraw in untraceable digital CASH. Users may even operate CASH-ONLY (without accounts.)OT also enables users to take advantage of OTHER INSTRUMENTS,such as CHEQUES, CASHIER'S CHEQUES, ACCOUNT TRANSFER, etc,the same as they would normally at the bank down the street.Users can even trade their digital assets on MARKETS against otherasset types, the same as they do now on sites like MtGox.OT also does these things with SIGNED RECEIPTS, in such a way that noteven a server can forge a transaction, or change your balance, withoutfirst getting your signature. (The server cannot forge your signature on areceipt.)---------------------------------------------------------------The client API, with comments, is here:https://github.com/FellowTraveler/Open-Transactions/wiki/APIInstructions for using the client API are here:https://github.com/FellowTraveler/Open-Transactions/wiki/Use-CasesA sample implementation (in Java) of a test GUI, using the OT API:https://github.com/FellowTraveler/MoneychangerI am, of course, available to answer questions, and there is also a mailing list: open-transactions-subscribe@rayservers.comSo that anyone who pleads ignorance is without excuse.---------------------------------------------------------------The basic principles of its technology?1) Ricardian Contracts. The contracts are Ricardian-style contracts, and they are used to denote the servers as well as the asset types. Any new currency on OT is issued by the issuer uploading that currency to any OT server. (The currency will have the same ID across all servers.)You can see a sample currency contract here:  https://github.com/FellowTraveler/Open-Transactions/wiki/Sample-Currency-ContractThe functionality of OT is similar to Ricardo, which is described here (with pictures!):  http://www.systemics.com/docs/sox/overview.htmlHere is the Ian Grigg URL on Ricardian Contracts: http://iang.org/papers/ricardian_contract.html2) Triple-Signed Receipts are employed, so that servers are unable to forge transactions or change balances. (The server cannot forge your signature on the receipt. The receipt is the account.) The core transaction engine is designed in this way, so that the same protection is afforded to all instruments (such as market receipts, cheque receipts, etc.)3) Destruction of Account History. For its core account system and financial instruments, Open-Transactions uses balance agreement and transaction numbers on every receipt, in such a way that the parties to any transaction can prove their balances, and which instruments are valid, without having to store their entire transaction history, and instead by simply producing their last signed receipt.I describe how it all works right here:  https://github.com/FellowTraveler/Open-Transactions/wiki/Triple-Signed-ReceiptsA similar protocol (Truledger) is very well described here, with examples:  http://truledger.com/doc/plain-english.html4) Untraceable digital cash. Open Transactions uses Chaumian Blinding to offer the untraceable cash. You can read about the technology here:http://www.cs.bham.ac.uk/~mdr/teaching/modules06/netsec/lectures/DigitalCash.htmlHere is a sample piece of OT cash and an article: https://github.com/FellowTraveler/Open-Transactions/wiki/Sample-CashThere are various digital cash libraries floating around out there. Currently I am using this one: http://anoncvs.aldigital.co.uk/lucre/5) Many Financial Instruments. Cheques, Cash, Markets, Payment Plans (recurring), Withdrawals and Deposits, Account-to-account transfer, Receipts, Inboxes, Contracts, etc. More coming.Article:  https://github.com/FellowTraveler/Open-Transactions/wiki/Instruments6) Federated Servers. Instead of a centralized model, OT tries to federate its services wherever possible. For example:--- The same currency could be issued at multiple servers.--- The same currency would have the same ID across all servers.--- The same Nym would have the same ID across all servers.--- Server-to-server transfers are possible through the issuer, since the issuer already has a presence on every server where he's issued.--- Users can trade in basket currencies, which distribute risk across multiple issuers.--- (coming soon) OT Servers will implement voting pools for Bitcoin, meaning a hacker could not steal your Bitcoin from a server unless he'd also hacked 90 of the other servers in the pool, and gotten their private keys and their passphrases.--- A clever wallet software could distribute the assets of a single "account" across multiple servers, and abstract that away in the user interface.Article: https://github.com/FellowTraveler/Open-Transactions/wiki/CENTRALIZEDDiagram: http://billstclair.com/ot/ot-diagram.jpgSo if you were to ask me the principles behind Open Transactions, in a nutshell I'd say:Ricardian ContractsSigned ReceiptsUnforgeable BalancesDestruction of Account HistoryChaumian Blinding (Untraceable Cash)Many Financial InstrumentsFederated ServersFeel free to ask if you have any other questions.-FT Hi all,I need to add some Bitcoin functionality to OT (to enable low-trust servers, since the current crop of servers seems to get hacked every 2 months...)I do NOT want the full Bitcoin functionality, I just need to be able to do a few basic things, and it would be nice to just link Bitcoin into OT as a library.Requirements:1) Should be able to create my own Bitcoin addresses (for receiving payments.)2) Should be able to check the balance at a specific address.3) Should be able to send a Bitcoin payment from one of my addresses (to a target address.)CAN ONE OF YOU PLEASE PROVIDE ME SUCH A LIBRARY? Preferably I just link the library and make a few function calls -- and that's it!Presumably the code would be a subset of the existing Bitcoin client.-----------------------------------One more thing:  I do NOT need this through the RPC JSON interface, which I already have working. Rather, I need this to be C code that I can link directly to my existing C code, without having to also separately run the Bitcoin client.Please show me some sample code, or point me in the right direction.As a reward for this, I will provide open-source low-trust servers, which you can use without having to worry about hackers and thieves (like happened recently at MtGox and MyBitcoin.)-Fellow Traveler Cash-streaming protocols, incorporating digital cash, will solve issues of resource allocation on anonymous networks and mesh networks. This will cause the Internet to grow rapidly as a decentralized and uncontrollable "organism." There's always "Conservapedia". They are unlikely to censor the page on Austrian economics. Open-Transactions is basically a server, a library, and an API. (Many different services could be built on top of it. That's why you may have trouble visualizing exactly what it does.)For example...An online web-wallet could be built with it.  (I'd say "like MyBitcoin" except it seems you all have recently had a "bad experience" with that service...)An online market exchange could also be built with it. (I'd say "like MtGox", except it seems you all have recently had a "bad experience" there as well.)Those aren't hard to visualize, are they?Some of OT's improvements:1) Users could utilize untraceable cash.2) Users could use instruments such as cheques, cashier's cheques, payment plans, etc.3) Servers cannot forge transactions, nor can they change balances without the user's signature.4) Many different currencies might be trading on a single server, such as gold-based contracts, silver-based contracts, dollar-based contracts, etc. There could be dozens of different markets, for different combinations of asset types.5) The same currency, with the same issuer, could be available on many different servers.6) Basket currencies are possible.The other big difference (coming soon) will be voting pools for bitcoin reserves stored by OT servers, to prevent unfortunate incidents where servers are hacked, or otherwise disappear with your funds. I haven't coded voting pools yet, but they will prevent incidents such as those that occurred at MtGox and MyBitcoin.I hope this clarifies.PS Here's an example of a user interface built using OT: https://bitcointalk.org/index.php?topic=31032.msg399675#msg399675 Hi guys!I'm writing from the beautiful desert land of Sedona, AZ, where I'm on vacation for a few days.I wanted to address this quote. FYI, Open-Transactions currently generates 1024-bit keys by default.  Ultimately I would prefer that it uses 4096-bit keys instead of 1024, but that is not a terribly difficult fix to make. As more software is released based on OT, and as entities move closer towards actual production use, the keysize will be increased. (In other words, I wouldn't look at this as a deal-breaker, but rather as one of a long series of security fixes that naturally occur in this sort of project as it nears production.)Similarly, the (untraceable) digital cash currently uses Lucre, which uses Wagner's algorithm and incorporates the SHA-1 hash. SHA-1 has had weaknesses uncovered over the past few years, though I'm not sure of their implications towards Chaumian blinding. This is fine: the whole idea of OT is similar to PGP: that it's easy to swap in new algorithms as the old ones expire. So on OT, it's not difficult to make new subclasses of OTToken and OTMint that use new algorithms.(FYI, I have already obtained the source code for 2 new cash algorithms--Chaum and Brands--so these will be available within OT at some point in the future. Again, this is the sort of easy change that will probably happen once OT starts nearing production use.)-Fellow Traveler Hi guys!I'm writing from the beautiful desert land of Sedona, AZ, where I'm on vacation for a few days.I wanted to address this quote. FYI, Open-Transactions currently generates 1024-bit keys by default.  Ultimately I would prefer that it uses 4096-bit keys instead of 1024, but that is not a terribly difficult fix to make. As more software is released based on OT, and as entities move closer towards actual production use, the keysize will be increased. (In other words, I wouldn't look at this as a deal-breaker, but rather as one of a long series of security fixes that naturally occur in this sort of project as it nears production.)Similarly, the (untraceable) digital cash currently uses Lucre, which uses Wagner's algorithm and incorporates the SHA-1 hash. SHA-1 has had weaknesses uncovered over the past few years, though I'm not sure of their implications towards Chaumian blinding. This is fine: the whole idea of OT is similar to PGP: that it's easy to swap in new algorithms as the old ones expire. So on OT, it's not difficult to make new subclasses of OTToken and OTMint that use new algorithms.(FYI, I have already obtained the source code for 2 new cash algorithms--Chaum and Brands--so these will be available within OT at some point in the future. Again, this is the sort of easy change that will probably happen once OT starts nearing production use.)-Fellow Traveler I think this would work, yes.First, you'd actually issue two bitcoin-like currencies onto an OT server. For example, Bitcoin and Namecoin.Second, since you don't want to have to trust an issuer, we'd use the "low trust / voting pool" solution I've proposed, which eliminates the need for an issuer, for any Bitcoin-like currencies. (There is no avoiding issuers for gold-based currencies, but for bitcoin-like currencies it is possible to eliminate issuers.)Third, since OT has markets (like MtGox) the users are now able to make offers on those markets, trading Bitcoins for Namecoins.Finally, the OT server(s) processes the trades according the rules defined in the various market offers. Whenever a successful trade occurs, receipts are dropped into the parties' inboxes.(And yes, the trades are atomic, meaning BOTH parties get a receipt, or not at all.)Not sure what you mean by this...When you make an offer onto an OT market, you can attach specific terms to your offer. That is, minimum price ($50 per bushel minimum) or minimum amount traded (500 bushel minimum per trade). You can also create stop-orders (do not activate this offer until the price reaches $50 per bushel.) Basically the same sorts of things you would do on a real market: stop orders, limit orders, stop limits, fill-or-kill orders, day orders (date ranges), etc.(FYI, OT does support basket currencies, so if you actually wanted to define a single currency as a basket of others, you can do that.)As I said before, the magic of Open-Transactions is that you do not have to trust the transaction servers. IOW, you still do have to trust the issuer. For example, if the issuer is holding 100 oz of your gold, he could still disappear with your gold. (This is why OT has traditionally focused on securing the transaction server, so that the server itself doesn't become ANOTHER party that you have to trust, since you normally have no choice about trusting the issuer.)However for Bitcoin-like currencies (crypto-currencies) as I said before, this "issuer risk" can be eliminated on OT using low-trust servers with voting pools. (By eliminating the issuer entirely.) But obviously such solutions are not possible with gold, silver, or other physical commodities, and so the markets will have to decide on their own which gold issuers they will trust. (One thing OT will never be able to do is PHYSICALLY AUDIT your gold warehouse.)  Therefore I don't know how "anonymous issuers" will work, although I've heard that the eCache group is experimenting with a solution for that, based on bonding.Keeping things simple, let's assume there is only one OT server, and that 2 oil issuers are using it. (They have both issued their own oil currencies onto the OT server.)Even though we logically know that both contracts are valued in the real world in terms of "oil", the OT server has no way of knowing that. OT just sees two different contracts -- that's all.An easy way to convert between the two oil-based currencies, in that example, would be to trade on OT markets.  You just trade one for the other, on the market, the same way that people trade dollars for BTC now on MtGox. The trades would be processed automatically by the OT server, based on the terms in the respective offers, with receipts being dropped into the inboxes of the respective parties once the trade is complete.There are other solutions for this. For example, if each of the 2 issuers honestly believe that the other oil-based currency is comparable to their own, then there is no reason why the issuers themselves couldn't perform such exchanges on behalf of the users. The issuers could also leave standing orders on the oil markets, and thus use the markets themselves to perform this functionality.  That way no one has to worry about being paid the second half of any trade, since the OT markets handle all of this. Since there are people working on various OT clients, I get images and screenshots in the email sometimes. Below is an example.I never understood why people say that OT is "way too complicated for the average Joe" since those people have probably never actually SEEN an OT client. Plus, in my own personal opinion, the OT-API is retard-easy to use. In fact, I can't imagine a system doing all the things OT does and having an easier interface than it already does. A trained monkey could code an OT client!Of course, every OT client will have a different interface, so above is only an example of what could be done.There are also some screenshots of the test GUI: https://github.com/FellowTraveler/Moneychanger(But keep in mind that a Test-GUI isn't meant to have the prettiest interface. Rather, it's meant for testing the protocol.)In OT, the issuer is the one being trusted. (The magical part about OT is not having to trust the transaction server.)In the case of Bitcoin (using Bitcoin as a "backing currency" on an OT server) then you could have a trusted issuer also, the same as with gold or anything else. While this is no different than what the Bitcoin world is doing now (MyBitcoin, MtGox, etc) it is certainly not good enough for me, which is why I have written on this forum on how to use voting pools to eliminate entirely any need for an "issuer" (for Bitcoin on OT.)If you want to learn more about OT's concept of "low trust servers", check out the post Stephen already referenced:http://forum.bitcoin.org/index.php?topic=20425.0"Seek and ye shall find."As well as this related post:http://forum.bitcoin.org/index.php?topic=28565.msg363945#msg363945FYI, OT is open source. Given that the first clients haven't been released yet, other than the test client, I think marketing copy is a bit premature.  However, there is a pretty easy description at the top of the OT Wiki:WHAT IS Open Transactions ?Open-Transactions allows users to issue and manipulate digital assets. Users may create many pseudonyms (public keys), each of which may own asset accounts of various types. Users can transfer digital assets securely between accounts (even a server cannot change balances or forge transactions.) Users can also operate cash-only (without accounts) for maximum anonymity.Open-Transactions supports a range of financial instruments, such as cheques, vouchers, and untraceable digital cash. These are all analogous to the same financial instruments that we all use at normal banks today. Everyone already has an intuitive understanding of these financial instruments, because we use them regularly in our normal daily lives.Open-Transactions also implements higher-level, contract-based transactions such as payment plans and markets with trades. The markets on Open-Transactions support market orders, limit orders, fill-or-kill orders, day orders, stop orders, and stop limits, just like trading on a real market. OT also supports basket currencies.All of this is accomplished in such a way that all parties are able to prove, at all times, which transactions have cleared and which instruments are authorized, without having to store their entire transaction history, but instead by merely keeping the last signed receipt. (Without the special mechanism that makes this possible, all parties would otherwise be forced to store all receipts forever--no matter which system you are actually using.)OT is not a "killer app" but rather, a SOFTWARE LIBRARY. There are MANY possible different interfaces that could be built.The basic use cases are:-- Issue a new currency (by uploading the new currency contract to an OT server.)-- Open accounts of any asset type.-- Withdraw / Deposit in untraceable digital cash.-- Use "cash only" (no accounts) for full anonymity.-- Write cheques, cashier's cheques, and perform account transfers (all with signed and unforgeable receipts.)-- Trade on markets (like MtGox.)Who could use OT?-- A market site (like MtGox) where users are able to trade currencies, including Bitcoin, on markets.-- A "Wallet" website (like MyBitcoin or whatever).-- A client application. (OT works on all platforms...Android, Windows, Linux, Mac, etc)-- A gambling site.-- Etc.The above are just basic uses which I mention first, since you are all mostly building such things. However, much more useful applications of the library are possible, such as creating the next generation of file-sharing software, the next generation of anonymous networks, etc.I think the most disruptive use of OT would be using it to solve issues of resource allocation that arise in anonymous networks, mesh networks, darknet hosting, etc.OT is also useful in combination with Bitcoin. Why?Bitcoin gives OT: a universal glue between servers, a network of existing exchangers, and a publicly-auditable, reserve currency that cannot be confiscated or shut down.OT gives Bitcoin: Untraceable cash, instant finality of settlement, and convertibility to other currencies on OT Markets.(Soon, using the low-trust technology, OT will also give Bitcoin the only servers where Bitcoins can safely be stored, without risk of the server, or a hacker, stealing them.) Here are some binaries...https://github.com/FellowTraveler/Open-Transactions/downloadsYou will still have to download the code (to get the data_folders, etc), but at least you don't have to actually compile anything.I posted the OT API for Java, for Windows 32bit, Mac x64, and Ubuntu x86. (i.e. you still need the Java files from the code as well, to use the OT Java DLL.)===> You may also need to install some of the dependencies. Depending on your platform, I don't know if it's going to try and dynamically load up ZMQ or Protobuf, in which case it would fail without them. I haven't posted full install files -- just binaries so you don't have to build OT. Another example is, for Windows, you may need to install the VC++ 2008 Redistributables as well as the VC++ 2010 Redistributables (which would normally be in the install program, if we had one.)  There are notes in the INSTALL docs that come with OT. FYI I just checked in more fixes based on your feedback, and will be posting some builds soon as well (I'll announce it.)I just now built this latest version of OT on Mac Snow Leopard 64 bit, Ubuntu 32bit x86, and Windows Ultimate 32 bit x86. (For Java mode OT-API.)I had to reinstall Windows anyway, so I went through the whole process tonight from a fresh install, and I updated the INSTALL-Windows notes, as well as the three vcproj files (OTLib, CPP_Windows_API and JNI_Windows_API). But anyway, sorry about the hassle and I should have some binaries available soon, at least for the above platforms. The current cash algorithm is Lucre, which uses Sha-1.  I will probably add Chaum this year, depending on demand.The current keysize for Nyms is 1024 bits. I'll probably increase this to 4096 sometime this year, depending on demand.I assume people will be testing for a while before going into production so... there is time to do such things. (Usually my focus is directed first towards the needs of those who are actually developing using OT, since they are the ones asking me for things.)--------------------By the way, just because I am being extra-cautious about testing, security, code scans, key sizes, etc, doesn't mean that the typical bitcoin website today is somehow a paragon of security. I'm just honest about it. The whole open source community should kicking the tires on this sort of project. After all, people will be using it to store and transport their money. Actually, this is untrue:  The Moneychanger (OT GUI) developer works on Windows, and I even build it myself and send him a DLL whenever I update the library.I only have 32-bit Windows at home though, so I can't vouch for 64-bit Windows at this time.  But I have no problem building it.I will probably just post the DLL here pretty soon, so you can use it without having to build it. But! I have to build it depending on the API you will use.  (Usually I build the Java API... if you want it for some other language, let me know and I'll see if I can get you a binary...)I have always said, I will support people who are using OT. If you have trouble building it, that is no excuse. Open-Transactions is my project.I have my hands full with the library... (think of it like OpenSSL, except for financial cryptography.) So if you're waiting for me to write all the apps, too, you might be waiting a long time...Anyone who needs help getting it built, or using the API, feel free to drop me a line and I'll get you up and running.Would like a real command line utility, a firefox plugin, chrome plugin, android wallet, and some other pieces.(Hey, you can code to my easy API, or you can duplicate my effort and re-write OT, but there's no avoiding the financial crypto that must be used to accomplish the things you want to accomplish.) Open-Transactions (https://github.com/FellowTraveler/Open-Transactions/wiki) is perfect for the "Fast Verification Network" piece of your diagram above... At the simplest level, you bail the BTC into the OT server, and then OT processes all the transactions for as long as you want (you can use accounts, transfers, untraceable cash, cheques, markets/trades, signed receipts, etc.) Then the user just bails back out into BTC again, whenever he wants back off of the server.Benefits?1) Untraceable transactions2) Easy convertibility to other currencies on the OT market.3) Instant finality of settlement4) The server cannot forge transactions, or change balances without the user's signature.5) All parties need only to store the last signed receipt, and they can prove their current balance, as well as prove which instruments are valid and which transactions are open or closed.6) No worries about running out of space on the block chain.===> YOU MIGHT ASK: But what if I don't want to TRUST the OT server with my Bitcoins? What if it steals them, or disappears, or gets hacked?===> Based on conversations with Bitcoin developers, I believe I have found the solution to this. I've got the protocol figured out, but I haven't coded everything yet...===> I've hinted at this before, but I've got a bit more free time now, so here it is:THE GIST:   LOW-TRUST SERVERS (For Bitcoin on OT. The protocol is different with non-crypto-currencies.)1) Basically, instead of bailing the BTC into a single server, you bail it into a VOTING POOL of maybe 50 different servers (or however many.) These will operate like a secure escrow in the blockchain. Many of you already have discussed this concept.2) In my own protocol, the wallet signs the bail-in request, including the amount, the relevant IDs, etc, then the server countersigns it and sends you the receipt. (All the server is doing here is verifying everything in your request, and then signing it, too.)3) Then your client GUI sends that receipt to the voting pool AND sends the Bitcoins to the pool. (There is no single recipient on the blockchain, but a pool of recipients at once.)4) This same process happens in reverse when bailing back out. But this time, after the pool members verify that both parties have signed the bail-out request, they then vote on the blockchain to transfer BTC out to the recipient on that request, with a 3/4ths vote (or whatever) which is what actually effects the BTC transfer back to you. Rules can also be enforced here, involving inbox notification, time delays, maximum daily transfers, or whatever we decide.5) The "vote" between the pool members occurs on the blockchain itself, using the built-in Bitcoin script language. Normally all votes will always be 100% in the same direction, since they will always agree on the truth. So we set it to 3/4ths or 9/10ths, whatever, so that it really takes a supermajority to do any bailment out, yet still leaves enough wiggle-room for the pool to prevent the loss of any BTC, and return it to the rightful owner, even if a server disappears or fails an audit.6) If a receipt is ever submitted to the pool that's NOT properly signed, then the pool members simply vote to reject the receipt. (And probably to distrust the bad actor who submitted it.)7) In the event that an OT server disappears, your BTC is still safe in the pool, and it's still possible to send a signed recovery request to the pool members, get your 3/4ths vote, and have your BTC transferred back to you.There's more to it than that, and it involves the OT audit protocol as well, which is slightly different for issuer-based digital assets than it is for BTC-based digital assets (on OT.)...But you get the general idea. I've already got all the code I need on the Bitcoin side, I think, and I've got the new protocol figured out on the OT side (not coded yet). I think I can swing this with the existing Bitcoin codebase (no changes to Bitcoin itself), and with the existing mining groups, though I'll have to include some Bitcoin code into OT for everything to work. I hope to be able to demonstrate this protocol soon. (Frankly I'm shocked no one else has done this yet.)-------------------------------------FYI, the "Point of Sale" and "Cell Phone" devices in your diagram above (as I picture them) are simply OT-API clients -- using the OT financial instruments to send payments to each other. (Cheques, cash, transfers, receipts etc.)  Each GUI is different, which is why OT-client side is an API. That way you can focus on your point-of-sale system, and let the OT-API do all the heavy lifting.-------------------------------------Bitcoin adds value to OT as well, in these ways:1) BTC is a distributed, decentralized, reserve commodity that cannot be confiscated, counterfeited, or shut down.2) BTC has all (most?) of the unique monetary properties of gold, which properties historically always cause gold, by operation of the invisible hand of the free market, to be used as money, in all cases where force and fraud have not perverted it. (Bitcoin being transferrable p2p, recognizable, limited, homogenous, fungible, divisible, and an efficient store of value in space and time.)3) Bitcoin has an existing network of exchangers in/out of the various fiat currencies, in the various jurisdictions. 4) Bitcoin can be a "UNIVERSAL MEDIUM" between OT servers... users will be able to store funds in gold, but then convert to BTC on OT markets, whenever they want to hop to another server. This makes Bitcoin very very very useful even for goldbug users. 5) Such transfers will also occur through DGC issuers, who are presumably already at both ends, and more importantly, through Ripple, which is being built into the OT test GUI, Moneychanger. (Thus, I also see this as a potential bridge between Bitcoin and Ripple.)6) Bitcoin makes it possible to run transaction servers, and other darknet servers, anonymously yet at a profit. That is very useful to OT. Here's the command line output from actually compiling AND running OT in PHP mode:http://pastebin.com/cwuS97n6 Hello, I just noticed this thread...1) There is no need to write an OT server, as the OT server is already written (it's in the transaction folder.)  Read the instructions that come with OT, they will show you how to RUN the server.2) If you wish to play with OT, I recommend building it in Java mode (see the instructions) and then use the Moneychanger GUI.3) If you want to write your own GUI, you can copy what Moneychanger does.  For exact instructions, see this link: https://github.com/FellowTraveler/Open-Transactions/wiki/Use-Cases(Now you have instructions AND sample code.)FYI, you don't have to learn the internal objects to use OT, just call the API.
THE LAW by Frederic Bastiat There is no reason why any of these security problems had to happen.http://forum.bitcoin.org/index.php?topic=20377.msg278729#msg278729Someday, enough money will be stolen that the Bitcoin community will consider using public key cryptography that was invented back in the 70s.As long as everyone is still storing passwords on the server, they deserve what they get. -- NO passwords stored on server or client side.-- ALL transaction requests must be client-signed. (Any password is entered on the client side, and is not stored anywhere. Server verifies signature before processing transaction.) This prevents hackers from accessing your account funds unless they have a copy of your private key AND your passphrase.-- All transaction receipts must be server-signed (and must contain a copy of the original client-signed request.) This prevents the server from forging any of your transactions.-- Receipt should prove current balance, with the newest receipt is always the winner in any dispute. (Meaning the receipt IS the account.) This prevents the server from changing your balance without permission.-- Receipt should also prove which instruments are valid and which transactions have cleared. (Meaning the receipt IS the transaction history.)-- All recurring transactions (such as trades processing over time from a specific market offer) should result in a receipt in the user's inbox.-- All market trades should contain a copy of the user's original signed offer, as well as details on how many trades have processed from the offer.-- Users should have to sign a new receipt every time they clear their inbox. (The server can never change your balance without your sign-off.)-- All server requests must contain a request number that increments with each message. This prevents attackers from intercepting messages and sending them again.-- All server requests must contain the server ID that the message is intended for. This prevents attackers from intercepting messages and sending them to other servers.-- All transactions must contain a transaction number that was previously issued (and signed for). These numbers must be listed on every receipt until signed as closed. (Server can prove entire transaction history without having to store it.)-- All transactions must contain a signed balance agreement. All receipts must be verifiable against the current inbox and the last signed balance agreement.-- All Bitcoins must be bailed into a system such that individual servers cannot steal bitcoins from their own users. (Or be hacked and have hackers steal bitcoins from their users.)-- All currencies issued on the server, including Bitcoins, must have reserves that are publicly auditable.-- Users should sign all transactions on a crypto-card.-- An additional layer should be provided via crypto-tokens with passwords that change every 90 seconds.-- Accounts and transactions should be possible that require multiple signers.OT already does nearly all of these.  The last 5 are "coming soon".https://github.com/FellowTraveler/Open-Transactions/wiki OT supports these.  They're called "payment plans".It's actually a contract between two parties, must be signed by both of them, and it describes the initial payment, as well as the regular payments, with delays, amounts, account IDs, etc.Transfers occur regularly according to the terms in the contract, and receipts are automatically delivered into both parties' inboxes after each payment.-FT Even if that is the case, there should still be a separate "gold road" on Tor, based on the same code.  Otherwise it's just too easy for the-powers-that-be to propagandize the link between the two. "Gold" becomes comparable to "drugs" and "guns".There is already enough of a push in the mainstream media to label gold as "contraband", we should not give those people ammunition.Think about this: If the site ONLY sells gold and silver, then it becomes much more difficult to demonize those people. Any effort to do so would be interpreted as an attack on justice.  It should do reputation as well, like eBay or Amazon. I mean a place that lists buyers and sellers, and has escrow, and has prices posted, and allows people to convert both directions. Someone should put up a version of Silk Road that does NOT deal in drugs, guns, etc.Basically it would be identical to the existing Silk Road, except people would deal only in gold and silver coins (for Bitcoin.)I'm actually sad that the Silk Road guys did drugs first, since all it did was bring a bunch of heat down. IMO the Bitcoin community needs:--- Anonymity. This will drive new businesses that were not possible before, and thus enlarge the Bitcoin economy. (Such as darknet hosting...)--- Instant finality of settlement. (Necessary for e-commerce.)--- Security. Wallets and Exchange Accounts should not continually be hacked.IMO my own OT software goes a long way towards solving the above issues.Additionally needed are:--- "iPhone-easy" user interface. My own client Moneychanger is meant as a reference implementation using the OT-API; it is not meant as the best possible interface. I'll predict right now that whichever one of you writes the slickest wallet software is going to clean up. This software still does not exist in the Bitcoin community and it is sorely needed.--- An easy e-commerce API that can be consistent across merchants. Such a system could be built on top of the OT-API. (OT does transfers, cheques, cash, and receipts. YOU have to use those tools to build your e-commerce.)--- I think there is also a big opportunity for such an ecommerce app to provide more safety and reversibility, similar to services the credit card companies provide, except as a voluntary system. For example, escrow. (Although escrow will eventually be added to OT itself.) Remember that Gold has value as a commodity, and it also has value as a money. Let's consider these separately...1) Value is not intrinsic to gold. Rather, men value gold because of its unique properties. (Its beauty, weight, and rarity, its longevity over time, and chemical and electrical properties, among other things.)2) Gold eventually ended up being used as MONEY also due to its unique properties...    -- Gold is valued (see 1). But notice, water is also valued, yet it is not used for money. This is because gold "stores" more "value" in a much smaller space, than water does.    -- Gold is also evenly divisible. But so is water. Therefore while divisibility is necessary as a property for a currency, it is not the only necessary property.    -- Gold is also fungible. (Any unit of gold is basically the same as any other unit.) This is not true for, say, land, even though land is valuable.    -- Gold also "stores" value consistently over TIME. This is unlike other valuable things, such as food.Therefore, due to the above properties, gold naturally has become selected by the market, time and time again, and all over the world, as money.There was never some committee of men who decided upon the "irrational belief" that gold is money. Rather, the invisible hand of the market decided it, and always has.You might say, "But wait, everyone uses fiat money now, so hasn't the market chosen it as superior to gold?"  The answer is no: coercion is employed to interfere with the market. And those employing that coercion are the ones guarding the gold and using it behind the scenes for currency reserves and for international settlement. Therefore even today, gold is money, according to the very people who try so desperately to convince us that it is not.Due to the above reasons, people have naturally learned to psychologically value gold as a universal money. It's true that this psychological belief is part of gold's value, since you can add it to the list of "valuable properties". But it is not irrational -- it is based upon history and market economics.The only reason Bitcoin may turn out to be of value is also due to its unique properties, which are analogous to gold, and thus any belief in Bitcoin's value must necessarily also acknowledge gold's value.After all, we all agree that Bitcoin is not valued "irrationally" but due to its unique properties, yes?  Gold is the same way. On OT, your Pseudonym is just your public key, and its fingerprint (ID.)If I allowed people to put a "web site" metatag with their key, THEY COULD LIE IN THAT TAG (they could put "www.coke.com" even though they are not related to Coke in any way.)But in the current system, there is nothing stopping Coke from putting their public key, and its fingerprint, on their website so that users know this really is "Coke's key."Therefore the current system probably accomplishes what you meant, in a safer way than actually adding identifying info to the public key. Yes. For any contract-based currency, including commodity-based, you must trust the issuer that he is actually upholding his end of the contract, i.e. holding the appropriate assets in a legally-acceptable fashion. Therefore you must trust his governance: his auditing procedures, his standing in his local jurisdiction, his use of separation of powers, his bonding (eCache uses bonds)... Those are all governance issues (meaning there is no technical solution, since these are issues of governance.)This is one area where I think Bitcoin is actually superior to physical commodities (such as gold), since technical solutions are possible with Bitcoin.This is absolutely true. If the issuer himself is a bad actor, then his digital currencies are suspect. My goal with OT is to eliminate this risk at a technical level (the transaction server), but obviously a piece of software can never fix governance issues such as an issuer's need to audit and insure his warehouse full of gold.The issuer is in the business of trust; my hope with OT is that jurisdictional arbitrage will enable a global trust market, with all of the liabilities and risks of the transaction server itself removed from the equation (by OT).1) The OT transaction server itself cannot forge transactions or change balances. So the "bad event" that happened, will not happen on OT. (OT cannot forge receipts.)2) The OT transaction server itself technically could store all of its receipts, and thus roll back the system to any point based on the information in those receipts. (In practice the OT transaction server doesn't need to store any receipts except for the last one for each user.)3) While the OT transaction server cannot forge receipts, it COULD use an illicit account to counterfeit (inflate) funds, and could do so without having to forge any issuer receipts. This is prevented using an audit protocol between the issuer and the transaction server. (Which could be performed daily.) OT normally allows parties to destroy all receipts except for the last one. However with an audit protocol in place, I recommend that parties store all receipts between audits.4) This way, if a transaction server ever counterfeits, the issuer will catch it out, and yes, would have the ability to roll everyone back to the last audit, and re-issue their funds on a new transaction server.This is described above in my long post. The transaction server has little incentive to pull this, since he wouldn't get away with it, he doesn't hold any of the gold, and he would immediately lose his daily revenues from transaction fees.An even better solution is possible using Bitcoin (coming soon) which I have hinted at recently. Using Bitcoin, unlike any other commodity, it's possible to accomplish these things without even having to trust an issuer. (No one is doing it yet, but they will soon.)This is one intention of mine, yes.It is possible in OT, using baskets, to distribute the risk of a single currency across multiple issuers. If one issuer ever disappears, the loss could then be made up through insurance, paid for through transaction fees from using the basket.I'm sure there are other creative solutions but that's one I had in mind.I agree that funds are likely to flow more to trusted parties than to untrusted parties.Due to this, it creates a profit incentive to innovate in trust solutions, which I believe entities will do (and some will succeed, some will fail.) That is why there are markets.There are also other incentives for users to choose one issuer over another, such as bailment policies, jurisdiction, etc.Because OT is, first and foremost, a financial crypto library.  The OT server and OT API are just examples of what can be built using that library.It makes sense to me that such a library should be technically capable of implementing various instruments, even if they are "complicated" or "not suitable for retail investors".The thing with a library is, you don't know all the ways that people might end up using it.OT's infrastructure is such that, while CDOs may seem complicated, they are rather easy to implement using the same mechanisms used in basket currencies.I don't know when I will actually get around to CDOs, and perhaps they will be implementable using script clauses, I don't know. I tend to prioritize so I doubt you will see CDOS before stocks, for example.-FT If you guys want to raise money to do various OT projects, that's cool, but if you ask me what I want: I want volunteers.  Think about it: Which allows me to move more mountains? $30K in donations over the next year? Or 3 volunteer coders?Android client, anyone? Mac OS X client?iPhone client also.A real unix command line is important and needed. (This makes OT scriptable.)Firefox plugin, a Chrome plugin... (These allow us to use a new "OTTP" URI format for links in HTML files. Read more about it here: https://github.com/FellowTraveler/Open-Transactions/wiki/OTTP-URI-Format )I also need some C code that will import a PGP private key into OpenSSL format. (I've already got public keys.)I also need a crypto expert to go over the crypto-specific parts of OT and audit them.Also would like the same expert to update OT to support larger keys. (I'll get to that eventually if no one else does.)In the unlikely event that a C expert actually pops up, it'd be cool if you can update OTMint and OTToken classes to use credlib (Chaum and Brands.) I will also do this eventually if no one else does.I'd also love to see Java and D-language ports of OT.I'd also love someone to write a subclass of OTStorage that goes to some kind of Tahoe or other cool DB (you only have do a few overrides.)Also: the Market screen is incomplete on Moneychanger. I'd love for a Java expert to get in there and finish hooking it up to the OT Market API.Also: The Basket screen as well.Also: Currently Moneychanger uses the Bitcoin JSON-RPC interface. Obviously, this needs to be replaced immediately with internal code that encrypts the Wallet.dat before loading/saving. Yes -- normally you will lose control over them, and the server will gain control over them.  But that is the state of things BEFORE my special new protocol gets involved. The new protocol I mentioned is what fixes this problem.This depends on which instrument you are using for payment.==> If the instrument is cash, then Alice sends the cash to Bob, who then deposits or exchanges it with the server. (See the notarizeDeposit function in the OT API.)     (ALICE GETS NO RECEIPT FROM OT, OTHER THAN HER WITHDRAWAL RECEIPT. SHE MUST TRUST BOB TO GIVE HER A PURCHASE RECEIPT.)==> If the instrument is a cheque or voucher, then Alice sends it to Bob, who then deposits it at the server (See notarizeDepositCheque.)     (Bob gets a deposit receipt, which includes a copy of the cheque, and Alice gets a cheque receipt in her inbox, which also includes a copy of the cheque.)==> If the instrument is "account transfer", then Alice initiates a transfer to Bob, who receives a notice in his inbox. (The funds by this point have already left her account.) Bob signs to accept it, and that's when the funds hit his account.     (Alice gets one receipt when she initiates, and she gets a transfer receipt in her inbox when Bob accepts. Bob, meanwhile, gets the AcceptReceipt when he accepts.)If, instead, markets were used, then Alice and Bob would both get an initial receipt when they placed their market offers, and they would also get Trade receipts in their inboxes whenever those offers are traded against other offers on the market. Meatpile: Thank you for your PM. I agree on the usefulness of providing builds of OT :-)  I can post a DLL up there pretty soon, for Windows users of Moneychanger. I think I can build 64-bit Mac and 32-bit linux as well. By default I'd post up the Java API build, since that's what Moneychanger uses. (Moneychanger Jar file is already posted, so at least there's one build available.)passerby: coming soon.Batouzo: FYI, OT messages *are* signed contracts (everything in OT is a contract) so yes, they can be loaded up, signature verified, etc. And yes, everyone can verify the Issuer's last receipt (including the total amount issued) when the transaction server produces it, and the issuer can't lie about it, without being caught. (And vice-versa.) Because there's his signature on the receipt...The auditing process will involve balances and account IDs (possibly scrambled from each other as well.) Audit data will be stored in a DHT and encrypted to Issuer's public key, so only the Issuer can see it (so he can verify no counterfeiting has occurred.) I don't expect the Issuer to dump the data to the Internet like the mtgox database did, but if that did happen, remember there aren't any passwords, usernames, or email addresses stored.  Just balances.Specific to your question about markets: Yes, if someone places a market order, and saves his receipt, he can produce it later to prove what happened. The OT server also stores whatever receipts it needs to, to prove its story in the event of a dispute. (Usually this means only the last signed receipt, but in practice all parties will probably store all receipts between audits. Man's life can only be sustained through his work (his liberty), as he creates new products (property), which he trades with other men. This is how man sustains his life.Thus, property is the result of man's work, and is also the reason for his work. As every trade is voluntary, it can be assumed that each party to the trade has improved his circumstances, or he wouldn't have chosen to take part in the trade. As millions of trades go on every day, people's lives are improved millions of times over, resulting in the great improvement in the human condition that history shows to be consequential to free markets.You might enslave a man by taking away his liberty, but you will also enslave a man by taking the fruits of his labor. In the first case, you choose how he will give you all of his production. In the second case, he chooses how he will give you all of his production. Either way, he is a slave.If someone attacks you, you may have to use violent force if you wish to survive. This is the law of the jungle. Any jury would acquit you for using deadly force in such circumstances.Similarly, if someone attempts to take your liberty (say, by binding your hands and feet, and throwing you into the trunk of a car) then you similarly may have to use violent force if you wish to survive. After all, if the attacker is willing to tie you up and throw you into the trunk of a car, how could any reasonable person not be expected to also fear for their life in such circumstances?Similarly, if someone attempts to take your property, then you similarly may have to use violent force if you wish to survive. After all, clearly this person is willing to use violent force against you, since otherwise no one would normally part with the fruits of their own labor. And since he is willing to use violent force, and indeed is threatening you with it, then you are in a state of war the same as if he had threatened your life or liberty.Clearly we can see that any man has a right to use force to defend his life, his liberty, and his property.And if a single man has a right to use force to defend life, liberty, and property, then it stands to reason that a group of men likewise have the right to band together and provide a common defense of life, liberty and property.Thus government, when used solely to protect our rights, actually has a moral right to function: the same moral right that you have to defend yourself individually against threats or attack.But whenever government is used to violate our life, liberty, or property, then it does not have a moral right, any more than an individual person would have a moral right to do those things.This is why the US Constitution was originally designed to limit the powers of government. Democratic processes were strictly limited to the political realm, not the moral realm: no democratic process ever has the right to vote regarding people's lives, liberties, or property, any more than a democratic process has the right to commit genocide. No crime is "right" just because a majority wills it. Once democratic processes become a tool for subverting human rights, then we devolve into a system where "everybody is enslaved to everybody" and where no one's rights are respected anymore, because people no longer have any understanding of their rights, or of the Western Tradition and Enlightenment that brought those rights to our awareness in the first place. The Wiki is available here:https://github.com/FellowTraveler/Open-Transactions/wikiThe FAQ is available here:https://github.com/FellowTraveler/Open-Transactions/wiki/FAQThe core account system, including destruction of account history, is comparable to this system:http://truledger.com/doc/plain-english.htmlAll of the concepts are explained there. The differences between that system and my own are described here:https://github.com/FellowTraveler/Open-Transactions/wiki/Triple-Signed-ReceiptsI also recommend this article, since the above relies on these concepts:http://iang.org/papers/triple_entry.htmlThe Chaumian blinding (untraceable cash) is implemented using this system:http://anoncvs.aldigital.co.uk/lucre/There is a paper there for you to read. I used the C++ version of Lucre, FYI.Regarding the untraceable cash, I also recommend these articles from my Wiki:https://github.com/FellowTraveler/Open-Transactions/wiki/Sample-Cashhttps://github.com/FellowTraveler/Open-Transactions/wiki/Sample-MintThe Ricardian contracts are described in my Wiki, with a sample provided:https://github.com/FellowTraveler/Open-Transactions/wiki/Sample-Currency-ContractHere is a chart of the instruments on OT:https://github.com/FellowTraveler/Open-Transactions/wiki/InstrumentsThey are comparable to the Ricardo implementation of instruments described here:http://www.systemics.com/docs/sox/overview.htmlThe source code is available here for review:https://github.com/FellowTraveler/Open-TransactionsThe API is here:https://github.com/FellowTraveler/Open-Transactions/wiki/APIInstructions for using the API are here:https://github.com/FellowTraveler/Open-Transactions/wiki/Use-CasesA Java implementation of an OT Wallet, coded using the OT API, is here:https://github.com/FellowTraveler/MoneychangerAnyone who has any trouble figuring out the API can use Moneychanger as a reference.(I am also, of course, available to answer questions.)Some technical details about the Messaging is available on the wiki here:https://github.com/FellowTraveler/Open-Transactions/wiki/MessagingTransaction-specific messages are described here:https://github.com/FellowTraveler/Open-Transactions/wiki/TransactionsNew docs are always being written, usually to answer questions that come up. Sorry if it's not enough for you but more is coming I promise If it helps, some people have understood the system better after listening to the Radio interview...part 1: http://agoristradio.com/?p=234part 2: http://agoristradio.com/?p=246Here are some diagrams for you:Overview: http://billstclair.com/ot/ot-diagram.jpgFull-Anon (cash-only): http://billstclair.com/ot/OT-Anon-CashOnly.jpgPseudo-Anon (using accounts): http://billstclair.com/ot/OT-Pseudonym-Instruments.jpgLet me know if any other questions, I'm always glad to help.-FT There's been a lot of talk lately regarding Open-Transactions as a "centralized system" (comparable to e-gold or MtGox.)I wanted to clear up some of these misconceptions...The vision is not of a central server you must trust.Rather, the vision is of federated servers you dont have to trust.My goal with Open-Transactions is for the servers to be able to run onanonymous networks.For this to work, that means the users must be able to trust the system,even if they do not trust the servers.We must have LOW-TRUST SERVERSand that is what I have been workingtowards. The combination of low-trust technology with untraceable cashis what will make it possible to run OT servers on anonymous networks,at a profit.--------------------------------------------------------Recent events have stimulated a lot of talk about security issues in Bitcoin,specifically due to the use of centralized servers by the Bitcoin community.There are some big differences between Open-Transactions and thetypical centralized system1)  The typical centralized system is fully-traceable. You arealways under the watchful gaze of the all-seeing eye.But on OPEN-TRANSACTIONS, blind signatures are employed, providinguntraceable digital cash.--------------------------------------------------------2)  The typical centralized system stores a numerical entry asyour account balance. The server could change your balance simplyby changing that number, and you must trust the server not to changeyour balance, or steal your money. (Ironically, this is the case on allthe Bitcoin-related exchange sites today.)But an OPEN-TRANSACTIONS server cannot forge any transaction,nor can it change your balance without your signature. Even a malicious server cannot do these things!How is this possible? Because your account balance on OT is whateverappears on your last receipt. And the OT server cannot sign any receiptunless you have first signed the initial request, since a full copy ofthat request must appear inside the receipt. Thus the server cannotfalsify any receipt because the server cannot forge your signature onthe request.Therefore the OT server can never sign any balance, or transaction, thatyou have not signed first.--------------------------------------------------------3)  A typical centralized system has the ability toabscond with your Bitcoins or gold.But an OPEN-TRANSACTIONS server cannot disappear with thereserves!Why not? Because it doesnt have any.OT follows a philosophy of separation of powers. Meaning, the issuerand the transaction server are separate entities. If, for example, yourcurrency is backed in gold, then it is the gold issuer you must trust,not the OT transaction server. Even when an OT transaction serverdisappears into the night, you still have your account (i.e. the lastreceipt) and you can still redeem it at your issuer, or have itre-issued onto a new transaction server.The same will soon be true with Bitcoin: I have been cooperating withcertain Bitcoin developers on a new mechanism to allow users to bailtheir Bitcoins in-and-out of OT servers, without having to trust theserver itself. That is, even if the server tried to disappear with yourBitcoin, it would not be able to. The next generation of Bitcoin and OTwill have this capability. (The new BTC protocol hasnt been addedto OT yet but is coming soon.) Woe to anyone building a Bitcoin sitethat doesnt have this capability! (Because soon your OT-enabledcompetitors will eat your lunch.)More on separation of powers: A single currency (such as Pecunix gold grams or Liberty Reserve    dollars) might be issued on a dozen different transaction servers in    different jurisdictions, with the same currency contract being used for    all of them. (One currencymany servers.)  Transaction servers can prove which currencies have been    issued there, by producing the issuers last receipt. (And the    currency contract.)  Issuers and transaction servers can both prove the total amount     that has been issued, also by producing the last receipt.  The same currency might be distributed across a dozen different     issuers, using basket currencies. (Basket currencies allow users     to distribute the risk of a single currency across multiple trusted issuers.)  The contents of a single asset account might be distributed across     a dozen different transaction servers. (If this abstraction is coded into     your client GUI, then what appears as a single account is actually spread     across X number of servers.)--------------------------------------------------------4)  Lets concede that while OT cant forge receipts against individualusers, a malicious server could still use a dummy account to inflatethe currency itself, without having to forge any of the individualusers receipts, and without having to forge the issuers receipt.This is true, but it would not escape the upcoming OT AuditProtocol!Why not? Because counterfeit funds cannot be spent without flowing froman illicit account into the other accounts of the general population,where the total amount will show up on an audit and be compared againstthe amount on the issuers last receipt.As long as receipts are stored between audits (which could be daily)then the users, as above, can simply dump the untrusted server andredeem their receipts at the issuer. (This can all be automated.)Transaction servers, of course, would have a huge incentive not to pullthis, since they already cant get away with it, and since they wouldinstantly lose their daily revenues from transaction fees.A similar solution is planned for Bitcoin-based accounts on OT, usingthe same new mechanism described in answer (3). It also doesnt hurtthat Bitcoins are publicly-auditable, but plans go beyond that.(FYI, the OT Audit protocol is designed but not yet coded.)--------------------------------------------------------5)  A typical centralized system is very vulnerable to hackers,who make use of all manner of cross-site-scripting and SQL injection inorder to gain access to your server account, and do transactions younever authorized.But on OPEN-TRANSACTIONS, it is useless to hack the server, since even amalicious server cannot forge transactions on OT! Hacking a user would require gaining access to his private key--which is not stored on the server--as wellas installing a keylogger on the users machine (in order to get his passphrase.)Furthermore, the hacker would have to do this for each individual user. (The ultimate solution goes even further: store your private key on a crypto-card.People will actually start doing this once enough of them have been hacked.)By comparison, MtGox recently had hackers sell-off the usersbalances for pennies. This also had the effect of crashing the Bitcoinmarket and damaging the bulletproof reputation of Bitcoin.There simply shouldn't be any passwords stored, anywhere! Neithershould there be any transactions processed that haven't been signed by the user's private key.--------------------------------------------------------6)  A typical centralized system is vulnerable to hackersobtaining a copy of their database, and subsequently distributing theusers email addresses, salted passwords, account balances, andusernames all over the Internet.These same users are then subjected to an aftermath consisting of hackson their Tradehill, Facebook, (etc.) accounts, as well as the impositionof frustrating account-validation and password-changingprocedures at all of those sites.But on OPEN-TRANSACTIONS, no passwords are stored on the server ORclient side. Instead, public-key cryptography is used, and the serveronly responds to signed requests. Users will never have to go andchange their Gmail password when using OT-based systems.--------------------------------------------------------7)  A typical centralized system must store all of its receipts,forever. This is because it cannot prove which instruments areauthorized, or which transactions have cleared, without storing them all(in an ever-growing database.) Thats the only way it can prove its casein the event of any dispute. (If parties cannot prove their case in adispute, then the system breaks down.)But OPEN-TRANSACTIONS uses Triple-Signed-Receipts: Parties can provewhich transactions have cleared, and which instruments areauthorized, simply by producing their last signedreceipt.--------------------------------------------------------8 )  A typical centralized server (such as e-gold) can bepressured to produce transaction data, and made legally responsible toreport it. Such data is also vulnerable to hackers (such ashappened to MtGox.)But on OPEN-TRANSACTIONS, users and transaction servers both have thechoice to operate in cash-only mode, which is completelyanonymous. The server cannot be pressured or hacked to reveal youraccount, if you dont have one!The issuer is similarly safe, due to OTs philosophy of separation ofpowers. Since he has outsourced the transaction processing to thetransaction server, the issuer cannot be forced to produce anytransaction datahe doesnt have any!--------------------------------------------------------9)  A typical centralized server requires a bailment process toget new funds onto the server, and back off again.Open-Transactions servers don't require any bailment process, sincethey don't store any reserves. Instead, the issuer chooses when toissue new units of any currency, and any bailment happens through theissuer directly. (Just like Loom.)A similar yet more p2p solution is coming soon for Bitcoin-backedcurrencies--this is the same new mechanism mentioned in (3).Additional options are coming soon:Via the Ripple protocol, a user will be able to transfer off of the OTserver simply by sending funds to another user on OT (who makesa similar reciprocal transfer on an entirely different system (viaRipple.)In effect, this allows users to bail out of specific servers without having to bail out at all  instead merely sending an internal transfer to anotheruser, who then pays them in a separate account via Ripple.Ripple client capabilities are being built into Moneychanger (OT Javaclient.) Since Moneychanger users will likely list different currencytypes in their wallets, it only makes sense to connect them all viaRipple. Especially since OT clients will be P2P anyway (they need tocompare notes on public mint files for various OT servers.)This is where I see the true value of Ripple: Eliminating any needfor server-to-server transfer, by allowing currency flows directlythrough the users.Open-Transactions also allows for users to transfer from one serverto another through the issuer, since he already exists at both ends.(Therefore the user doesnt have to bail out in-between.)Open-Transactions will also make use of Bitcoin as a glue, oruniversal medium, between OT servers. OT will always use acrypto-currency in this regard (whether Bitcoin or whatever else) sinceit is a unique solution to this problem.--------------------------------------------------------10)  A typical centralized server only supports two financialinstruments: account transfer, and sometimes markettrades.But OPEN-TRANSACTIONS currently supports many financialinstruments, including cheques, invoices, vouchers, account transfer, receipts, market trades, payment plans, and untraceable digital cash.Many more instruments are coming soon to OT, including those withscriptable custom behaviors.--------------------------------------------------------11)  A typical centralized system does not have contracts.OPEN-TRANSACTIONS allows users to create Ricardian-stylecontracts. These can be used to issue currencies, or tomake agreements between other usersand these contracts can beenforced by the server.OT also uses server contracts, meaning that each OT transaction serveris identified by a contract, which contains its connection details forvarious networks, as well as its public key.In OT, contracts have become the building block of the entirelibrary. These contracts are self-verifying, and if applied to thedomain name problem, they have the potential to entirely decentralizethe DNS system. Coming soon: Smart contracts (scriptable clauses.)The Bitcoin economy, as well as the DGCs (digital gold currencies) willneed more financial instruments in order to grow. Instruments such asEscrow, Real Bills, Stocks, Bonds, etc. There will always be the needfor a system that enables that next financial instrument. I propose tomake those available through scripts, so that new custom code is notnecessary inside OT itself for most new contract types.----------------------------------------------------------------------WHAT IS Open Transactions ?    Open-Transactions is a software library, as well as a server application   and a client API (built on top of that library.) New: A Java client app    has also been added.WHAT DOES IT DO?Open-Transactions allows users to issue and manipulate digital assets.Users may create many pseudonyms (public keys), each of which may ownasset accounts of various types. Users can transfer digital assetssecurely between accounts (even a server cannot change balances or forgetransactions.) Users can also operate cash-only (without accounts) formaximum anonymity.Open-Transactions supports a range of financial instruments, such ascheques, vouchers, and untraceable digital cash. These are all analogousto the same financial instruments that we all use at normal banks today.Everyone already has an intuitive understanding of these financialinstruments, because we use them regularly in our normal daily lives.Open-Transactions also implements higher-level, contract-basedtransactions such as payment plans and markets with trades.The markets on Open-Transactions support market orders, limit orders, fill-or-kill orders, day orders, stop orders, and stop limits, just like tradingon a real market. OT also supports basket currencies.All of this is accomplished in such a way that all parties are able toprove, at all times, which transactions have cleared and whichinstruments are authorized, without having to store their entiretransaction history, but instead by merely keeping the last signedreceipt.The real beauty of Open-Transactions is the as-yet-unwritten future ofnew ideas that you can build with it, and the future liberty andsecurity of your children that you can help to protect by doing soin avery real and tangible way. I recommend you start with my API:https://github.com/FellowTraveler/Open-Transactions/wiki The most Libertarian state is California.Weed and gay marriage are both legal, and you can get an abortion on every streetcorner.
